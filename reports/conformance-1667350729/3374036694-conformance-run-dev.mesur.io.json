{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "eecc7b58-e871-406f-bb35-019fe98291a7",
        "name": "Clear Cache",
        "item": [
          {
            "id": "3bffd64e-8aa2-4cf5-b607-3c6434c3ac38",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8acab949-36f4-42e3-9f7e-aef9c3d926c3",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "9f128858-553b-43ea-a003-cad0111598d9"
                }
              }
            ]
          },
          {
            "id": "836afff5-c812-4c0f-8cfc-b23945b00f85",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e7122c4b-99d1-448f-96a7-50f6c9be8164",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "7334d698-3859-42e9-a367-c50ce22039e7"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "937f24c7-6799-438b-b4b8-fac8503336f0",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "222c800c-27fc-4b3c-81db-96b07f568369",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e2cf557c-9c90-41bc-9326-fe071a0d8167",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "044fe5fe-075d-4d0d-9d77-786450b1f4e2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "204490c2-a90b-4491-8eca-bf3bd7a89129"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ccc9ee34-4a0c-425f-a5e8-7dddf8f2484d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1558ca86-7f82-4d56-ad97-d7e38d4b427b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "07ccdfb5-79a4-4559-b50d-cc3330d88de9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bd992142-4063-45ab-8d24-d4f2f9fceda8"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "99a2d5f8-0073-4929-b566-e41b12bd70cf",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "78ebbcff-8aac-4727-90ee-a195574b04a2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6839bd00-77bd-4f73-9eba-28d086810761",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "202e05b9-7d50-464a-8822-0254a0c8e93f"
            }
          }
        ]
      },
      {
        "id": "0df22d61-b69f-40c3-a515-71f711e9daa1",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "fd32364b-7bc7-4cf8-9a9b-fc370e8e526e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8c70b0ad-aa6f-49c5-aabc-290422dbf495",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "20e2e9f9-7667-41a4-be31-1c873a18f065",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c7985bf-669f-44bc-9d30-e7238502c1ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9ad1368a-bdf2-47a5-988f-975e0020f137"
                        }
                      }
                    ]
                  },
                  {
                    "id": "911054c1-fa05-4fa0-a83a-6e751810f11c",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "637c16c0-4505-45e8-92e2-1f0ee6981848",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3b032f9e-cda6-497c-81c2-bcafa3d698b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4de372a5-efe6-4945-90dd-58093d1d0c75",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "023a71b3-f228-4748-aa4d-a5c353395ca6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bad7743b-59f8-456d-a717-fb4064497f88"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "31312d94-3be5-4e6c-8521-b3f19c4b5d21",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0ab7f133-6a79-4642-a26b-e8dc702022d1",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65917eb4-e518-4793-9194-22eadb969cca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d0b216ff-ca3b-48cf-aec2-8d8dfe0fe3a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8c94204-19f2-404a-ad52-d57de591a402",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12901bb6-0c82-49e9-8dcf-8ca7ed1b0f84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52d12ddd-e3ee-438f-a6b3-2cce97f50c9b",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cd5f70c-742b-4387-8431-f2857c4cf9f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d697ddf9-ea45-44c8-a8da-2853c548162d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfdbc2da-fa13-4d90-b0ae-a9b6a7725f43",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "1374df22-ee77-43a3-ab5c-8c6512a43aaf"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "84df6896-1d81-40cd-9488-371d65a0ee12",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4c90597d-3e55-4112-a503-79975e63bd3e",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "00df77d9-ee1c-499c-a486-2d15ee99ac9a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "4f844a3f-683b-4955-8ef9-f3307e823a47"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "87626b87-4208-414e-90d6-5a097c6743d8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "6ef43066-82c1-4bcd-a4dd-f23784aed6e1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1469fdae-a66d-408c-8805-04d293b60a42",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1edc5a76-5f32-426c-accb-71ba2640a0c1"
            }
          }
        ]
      },
      {
        "id": "c9f5d689-1afd-43f2-b86c-355fe180dce7",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "41a7a1a4-d785-4d4a-8efc-946009d6c6ef",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7f69d857-574c-4208-9832-7e734938aba4",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "054e8ce2-a4d7-4c73-9b1e-6ae6e5315909",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "429aa255-652a-47a9-92b5-98a54fdea9c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb380f0b-ccf8-40d4-833a-5f94cda56bcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "662aa8f7-9acb-4970-835f-6b439b054539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "85b2fbd6-5c97-4476-b69f-0e9b67c6a0e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "557151a5-2ff1-4249-a467-b29582577483",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6b9f5e7-1c06-4f5b-9468-f04afc0645e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa962912-ddf1-47c1-97ff-d76ce9641418"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc07421d-ca3a-4c86-ac30-61fc08ce4570",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "71fd48ca-10a8-49f5-97f3-df5adf47013e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cad0df4f-bf98-448a-bf4d-3de6cfab4e78",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f51fc96-4fa2-4fe7-9f65-05d952c97967",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e6d7635-5b8a-452e-b2f8-e5d480a2b4b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b3b5a85-b19c-4467-b952-448f02536c97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "de453651-34c8-4cba-b0f6-7e82eb9438a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acb29673-4a4d-4be9-92b4-1ed43d6b9e8a",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "632522be-bb6f-4def-acd5-439662ba110d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c2fdb6a-721a-4312-948b-eb5689eb145d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b024519-642d-406b-b03e-d8a188892121",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "873cb469-b8d0-407d-bf27-a8f15ee11bfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd4718cf-717c-4247-a94d-48834bab4acd",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4b54dc9-c370-4e4b-96c5-63580125167a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "231981e0-e4ef-4475-8b91-38574d17ddf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d71035f3-849b-4212-abd8-b7e0b5fb37cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c5372e82-2665-41ed-ac26-6dcb7bdfb8e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91b558f8-c9e9-4f94-858a-133b0b487118",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9566804-8e4f-4983-9ec3-e51f1e96f7e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cf87f3b-dfd7-43fe-a859-205680f46799"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36e820e4-e98d-44a7-b0b0-600d771d8553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5ef74a3b-265b-4c8c-90d4-7cd99399b1a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df1cb52a-b5eb-414b-aaa3-32f29fc6b7a5",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "129f7bef-1754-4425-b5b7-2a922c88a1c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13abe4a0-e1a3-4258-8c21-0396d32342c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef1a8ace-974c-47ef-a41c-19086a43e794",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "78953f54-6aee-4f70-80ca-412808e62577"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f81505f-f2ed-45c1-a669-a5b23139272d",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19d1e916-be2f-4284-9772-dd9988919edd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45e9d7c3-0561-4b72-a68c-61f2a5e76443"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f8ac4ae-0334-48d4-8236-afae16e671d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "29d7b5ae-0d6d-461b-b3a5-634d2fb5feb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94ab58b5-1806-4961-b14c-2031aaaa98bc",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6d53d33-3d9a-4018-842d-f15009da0418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a27503ed-1d3c-47f3-86fd-650341864381"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9a52eb5-bfe2-4bdc-b949-2f3351d851ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b9d42e0b-ef22-4d4e-85bb-5907ae295bb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e3cf150-387b-4761-885b-e1cc5173578d",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aed48af4-7ffd-4154-a704-4e4dd4133fe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2acf72b4-8fdd-442c-819d-9a2f1d80903c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c99876d-404e-412c-b1cb-cf7af87d0724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "00367cf8-f1de-4d60-bfe5-636a0c2d5c6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85a0bc72-9670-46a8-a313-bf5be75176b2",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a6f8601-e3b4-4cc2-8a65-96cf14b9454d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afd2dff4-76c8-424b-8c45-146265556812"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a5753e6-1b66-4b6d-8570-3eb1817ba2b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "15a466fd-a6b0-4314-b5a6-0791444ca7a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aed9297-eac8-43f0-888b-ecb0b32e92e9",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4736404b-4763-426c-a1ab-dc5299351fc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4506d233-eb78-469f-be7c-b87b7194c692"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f01c3c6a-8ed1-4aac-8abf-74914923a078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9218a9f1-f4f8-44d2-997c-ff94776db2bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e75cc0f-f482-4821-920c-505aefcfd8e4",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8830cfc1-5158-4537-b03d-53e4df667f89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a394b2b-27c2-4913-8833-472b64eac324"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "627db0cb-ca67-466e-9261-d360b081f753",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e644eca0-af50-4384-975d-f87760ba9390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f089e66-4184-457b-bef1-2c2604c1465e",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a119bb71-a531-498f-994b-d40e10e53673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "665b084f-c968-4921-a0eb-ac65f63ba8cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9003000f-c4a5-496a-9ec8-439c677a47d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "596912cc-cafa-4ff1-bc3b-a66cdae248ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6582e8eb-918f-4344-badb-c6e833b4b7f1",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ae8c07e-9b9c-469e-9f44-e7bb57dcb067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "025d3513-ed76-4896-bed3-39a51bea3d04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9201cb5-ba19-471c-9621-84ceacb347d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b355329e-1c1c-4b4e-a611-a210306f8d3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51843dd6-733e-49ad-9b21-24824d1c58ce",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b774e753-2d77-43f9-8879-e144c05a5cee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "674480ce-057a-4080-b401-179442221b6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4144e16d-8755-4005-bd46-4f4bf304b24e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9359b884-ea8f-4ee7-b4ca-fd4fefef5f9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "655db1d5-4643-4f5c-865b-72079d40d551",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33fb0b36-b555-45a8-80bf-833d7b79ee09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cc55243-ff07-49c0-ae7b-adb0ab05481d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feb82ae7-07a1-438c-81c6-f2a76e67fbb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "39abe4ae-ed6c-44a7-9967-cafbdff13b40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c9d63cd-21c8-415f-9710-4b6f8df216ab",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9ed8b98-a095-4bcc-84bd-253236913100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23a3871d-7dbe-4b1b-a107-c8dac541af0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2cb0179-400b-4a62-beef-401f2917fbc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "85368350-4571-4bbc-93f1-db8515f640d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db407e2d-7a89-4d2b-a538-4df1d451ee66",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f24febea-3216-4c02-b384-dfe817e68fbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cefd881b-fa67-4df2-9d18-19a54ad2509f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a64762a0-48c2-42a7-87c0-e010e7157f68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5de23e86-a861-4a9c-becf-78f45f811016"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a74da75a-8516-4118-9c79-a8e1556beb4c",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f5510d2-0f50-4a13-bfb8-083d99ffc84c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8befc94-fa9d-4d59-935b-3eab6c886c26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4aa9c5d-db0a-4f2b-8f5c-57b517e2904d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3bace012-edd5-41e4-a5de-b6071f66d66f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40a7988c-832b-4f11-88c7-2aac1351b160",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ddc1fe5-2279-4e2a-a93d-f9b5250df428",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbeb1688-0c7f-4499-bf80-d89764eaab31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad7408de-f07f-482a-8adb-d5ce524d9725",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b4a8db9-844a-463e-b2ca-33f06796bf29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56b0c383-77f5-46ff-a90c-06801a695de7",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a98de8d7-ed8e-4d47-8759-9408049dc73f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "748666b3-805c-407f-bbde-64d77d2795cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a54b10d-e229-4c2a-aafe-199e0296e9c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cd09d7f8-a48a-497c-8311-eef3b2626bc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd13096f-c4d4-4e46-a3f9-fa8601121de9",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4842cafb-d8ed-4d0d-bc00-06cc45d1f0f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f68c49ba-2dda-4b57-9530-1199623d92bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0843905-3167-451c-a747-dfe9bb10437b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "71bc07ea-b0d0-4570-abf1-26cd3efcfc62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1538a45-47df-410f-8517-2971f8e4848e",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc156108-f7b3-4352-8567-48ef5d943a93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a43bb28f-dd5c-47a4-8cb7-3e49904bbab8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78c3985d-c77c-4335-83ad-51dbe34b3a72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "229004b3-c488-49a6-a458-cdb5c839b5c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "389c59a9-29f8-42d1-a9f7-f699b1e6b055",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a76b9e2a-1228-417d-be12-a95117fb12b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42f899ce-40fe-4a5c-ae1c-4918fffa2989"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d04a96b2-0008-49cd-bf20-afb4ad8fc3de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "28e225d0-6516-48bf-9fb1-edba970ba86a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95bb5db9-a9fe-44ff-9bf0-a77db9f998fd",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc0bb4ea-4bfd-412d-adc5-d42890fdd317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e0f950e-fdf4-49dd-937f-259f536b7ba2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e657d436-7473-447d-b8be-e6f03232855e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a898708-9fbf-4344-9cd4-371611f20f7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95b5445d-2d0d-4893-9195-5faa3be9f6d9",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1857b905-5906-451c-b340-531e9c69c108",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "204ad317-1b21-4c5f-a278-a3c7620926ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47377560-fcab-4e46-90c9-028c9f55cc1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d40a9458-a617-4abd-b9f7-b9e29d537c4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a1821e2-7578-4e79-aebf-c1e7dbf18acd",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59fa8749-9f04-49cc-94d6-08cb7059c6bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "454a4dc0-e167-4901-8bda-66ff078f25f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30e924bd-cdd5-4943-9c05-6d666fcbce3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e464e241-7332-45fe-ac4b-2ffbfad45beb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "533654bd-f72f-48ba-9e02-9cdf24283203",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7141566-1c51-4ec1-8003-64696eca29e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a2143f1-513a-4c04-81f4-cc14a04044c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2c8aece-9038-4cf7-98b3-ca36ed661dc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd2d45b2-7aea-4123-bf66-e4a00cb4e0e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffda7bdd-e999-4e01-ae3f-6887e23b7a21",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3309afec-edb0-4b19-83a0-480a2e77cb8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ec084bc-9ac8-4781-a657-0dfa5d47550d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29c235ae-b4a5-474d-8295-31e125c27bb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9bdf63a-3537-4f1a-89bb-109fcfb514b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8d7061e-024f-4d24-b13c-d740a62769e2",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2994f9b8-9fd7-46f6-876d-89d16d03d0c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef5caa4f-05a6-4607-bc89-bfe3383d806e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afd2cb46-2783-4288-b7fa-b9d07d7518ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "65bcb210-3714-4e1e-84db-d41f4dfdd567"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9559907a-c2d3-4aba-961c-2219ed80f201",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df20b421-e6d1-44fa-bbb4-596dcc1fb5a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24d9d843-f3bc-4bfa-bbc7-5ec1847430b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88d96b79-862f-4391-a89d-54c16bbea2df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9061c3c-291d-4039-bfa8-ac4326aa60c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50f86b96-833e-4f65-a43c-3dd76917f891",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8c850fb-522a-4d75-a503-a6268c9566ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90febf80-2acb-4c07-9afb-1c40d45571fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76734a34-7d49-44b5-ad27-300f92722cd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0e61b92-601f-4ed8-b64b-8994ff54efed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6db7e58c-4721-4f9b-8c18-ab8ec2345610",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "289d2f30-5829-46dd-ad04-2aadd7f3a5f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5822ea87-8b73-4b9e-8f08-7821724fcc29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37752e2c-96bb-4626-b4d7-dd56d5c5e6c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a079bdb0-23c6-4047-80e5-f112701dc128"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7ac1e35-1d0b-4f1b-b514-d0fb5bf30c4f",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "035aa0e0-ad7c-435c-bac3-5d9c2a0d7fe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d047b411-afc2-4a40-9fc4-5fb451718f37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f931f0b4-89be-4f32-b2d4-31362e5291b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "635db75d-aed7-4925-9ee7-f345b67569c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f42d2d1f-ad88-4d1d-b6dd-4e17e2cbd2ae",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "956e19de-0a29-44df-831b-f4bf5b7498c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eba2dd77-7f47-481d-8a5e-7ee20d7ef029"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37e2f9cd-8ec2-4b25-af2f-8bb84cce8131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d5e1e8b1-5d01-4a28-8c07-daef904d304c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f06aa14e-2104-4d13-b87f-52c4febe6aba",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a999487b-7436-4c07-9cc7-6c3e52bbb4f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56f56c16-86fd-4ed1-a528-111be113bdd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87d3ab56-68a7-4932-9fc7-5fca26990544",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9cc85305-291c-453c-8486-310b7c6fafc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a67076e-be5d-4c4f-a0fa-2c6adca8a502",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "290c35fb-5532-48a2-ac6b-0c1ef24d89a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73bc32c7-b102-425f-9ccd-00e7883ba7d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45da9976-deac-499b-aea5-0f6f90526b51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e6981d75-da81-465d-b6eb-57cc8d84b91b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0be10c02-1955-49cd-9251-356b45cacdfe",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3645fdb7-eb8e-49e9-bb37-b133846c461d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc74f37e-2d0b-4570-84ab-83127773de39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c0d9454-4551-40e2-a8f5-8400de759501",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "148e1ab6-7b21-4d4e-982a-31c0d1c7d35c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ecd1dd3-6cb8-4d79-91b6-c6e383d9fbb5",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e81380c-8c43-4b49-8db1-e1e5034ffc38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90f71790-5ea3-4685-9822-c038cba78827"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "103011d3-7851-45d9-9baa-be1a4d28f328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "cf4dd428-a953-4e11-85a9-c62eb516ed70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40189ec0-dd3a-47eb-8c23-ac2b2c442c92",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b75b48a-32a9-4928-82f8-ce50247b7b47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e387783-4719-4dd8-9bcb-6537a575580c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cbe8e5a-d2d1-4f22-b818-3bff60b4accf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c0268f05-35f2-470f-8ac3-80c82741b391"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98923149-cb76-4796-b2e5-963ea2050840",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32737520-730d-41d4-8282-db8411b900f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8ed46d5-dae2-4ffa-bee3-58eb35cfb75c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0177f436-b302-4b62-8376-36774e466537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "0c8e7713-7238-40aa-856c-0000c331c58a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67a9ddee-2c96-41f2-a016-595ac232f87f",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e0990fe-0caf-441e-b806-fe77a11b9b49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "474370d4-0140-4611-b940-13c13fbdc9fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "014f9ff5-e3b9-4af7-bac1-e5ae9b04319b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "15aba413-95e4-4231-85bb-1baac9b26598"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8caf4daa-cded-4294-a4b7-423f271fd4b0",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f76912a9-0753-436d-85b9-d2638f96ef14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "385bacf0-70a7-4062-9bfb-c72be28d169a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ba0f83b-3984-4369-97cd-565e2b3bc09f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "a40f6e9a-be72-4321-bfb5-17e1f2475eac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5117e32-f356-4ad2-885c-7870d4fc7fcc",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69216f8a-e813-46da-81eb-ab4bf1600d05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c60538a9-5ab7-4118-bb7d-2c10355b46d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d40e545-bb8c-418b-8c90-d33f70095e44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "81a0ba23-00ba-4d4c-abc3-d98a99049fbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bfc986d-8fd2-4a83-af5c-87af0d9f329e",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccbaac90-67e0-44e6-82aa-55f8ad8f0660",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ea24442-ca2c-483f-b778-b23db29fe458"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4c74afa-2a24-445d-a43a-43800c20e44b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "87f3db6c-2fee-41d2-a32a-2047a29cb4bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd43c313-7fe6-4a67-984a-4dbbc19e8c47",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44cfcd7c-5a9f-4346-9f1c-95fe9fb1c6d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76012c9a-86b2-4323-b17c-f00c990c9422"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a646284-c8ed-4d4c-8647-59ac552c1238",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "def0b891-a404-464b-aeca-cbb33c621af6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1380077f-84bf-495e-bbd4-3360a72d426a",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7389ee65-fca2-4004-9617-0bbf5b18307c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82ac5552-e3ae-4d71-9f96-83cba0360183"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7849908e-606e-4a8e-91ae-6f4a8990f540",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c01529c3-3227-42c3-b463-69347c1a83a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b13ef42-30af-44aa-9e44-a2830168fa10",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05fbe642-f6b8-4a38-8d4c-28794d0ca72e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfd785c6-97db-4640-9644-e3d1cab65714"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d962868-8e86-4b1f-9ca4-16aedd91080f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bca367b2-0896-4f9e-a254-526e2079a0a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c1e3f19-c4d2-48e3-adf5-eda9a5ba9632",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a932243-b29d-4f15-85eb-0fbfd3a6866b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "117c8341-e630-4755-a458-1acf0dd304c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00d25fec-3287-4db9-9287-f0e2602c202e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9e19b9a3-e57f-42c1-aff0-1bf0c7c2bd03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d42d59e-29a7-4cc0-8546-14ac3d536fe9",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4a14ef1-1594-49a6-bb0e-adb6cd3180ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51df249e-2897-4e2b-821c-cf6c3a2733c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec902e5c-3cbf-4dbe-b4d9-c550f9cf1f71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "fcaf4a69-c6cb-4389-b97f-644d952277fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "540c2846-2403-48e3-b111-34035635912b",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b467987-7fbe-4a25-97d9-218a7a4b1adb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69efd968-1e41-4035-a253-4deb2499c17c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52d06a6b-0160-4fc6-8d3f-176eef4b0f77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8cc5feae-e8d3-4600-a933-726d92027d61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "588b4796-3708-4be8-b158-6dd8b00f3d7b",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ed661f9-82d4-4328-a547-c8423a58f662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65e47e4b-0005-47c8-ae0c-802be7b88b01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59f4c38b-f894-44b9-8210-691d1e3981c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "24cb961b-a245-48c0-8d70-6561d380c1b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf55610d-50bb-4a11-a6ae-0a7efa54b93d",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "711e65d8-3b59-4a57-ad96-ae7cdf195ae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4db9ecd1-f062-481d-9b08-109d930ea557"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da060a78-6377-4ea6-8454-b208475a8de3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a9874e2a-8421-47d7-bb50-d51da45bd379"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a357f71-cc53-4e0d-88ad-21ea1896c328",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fd84737-36cd-4fcf-9b9b-e4e14cffc8f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83cd68bb-f727-486a-867f-b4ed87c2ab4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c630392-1000-4f68-90c3-0f2494feef2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b381a57-3a06-415d-b49a-c18e88334526"
                        }
                      }
                    ]
                  },
                  {
                    "id": "856e11c7-5b6e-450d-b0b3-925b8f9f8d1f",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16668bca-4d47-4124-a732-47a777b1078c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce19f812-66c0-4f5b-a6f5-cf837174e72b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ede47f05-2b79-41d8-b679-409ea71424fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "dab15037-4a61-4f77-9cd3-df8c8168de0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d09b8e5f-cf43-4bea-9079-6a0ebfb5e16e",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9895416-45bf-4baa-a5ae-4a04b15ec5e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "799b9588-8ef3-4601-807b-902d029f05da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e39ae04-976b-4ad6-956b-3a07a3ad586e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "964b62d8-1b3c-4891-a5ee-077862f0280f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "769eece7-6a87-4935-b3ac-adbbb4ffd98e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcff6e50-063c-4360-94bf-2222fb626d37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "668b2dfe-7ef6-41c5-960e-45e2ec2c0d9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fea80b2d-e803-43b6-9933-65598203a6a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5eec18f2-63ed-4619-9fd9-deb4128383cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7146588-2d4c-47ff-903f-a3c3db6942dd",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "033459d8-4c6a-4565-82d7-fec34876c919",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14273ca2-8031-4a60-814b-96a98f887416"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0dd091c-d14c-4001-aba1-35875835ba6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "cb4f2a91-8f54-4e0b-860d-b297e82301d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77b8e705-df1f-41ab-814e-6daf49cb35c6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91abd092-9062-439b-8dd9-70b083f91f7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc384d8d-41cf-4e3e-b5e2-8d0a8af0ea98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "834d6a9b-64c7-4a8e-8cf2-f969bd1018c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5f4baebb-2132-4a98-bb88-e008a27a6749"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc632858-0667-441b-81ba-7c704cb334e3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "906fba5b-ffe1-4aee-8be9-186023f46839",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2808d38-3a85-464b-823e-110a158301f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b92c420-ea8c-471a-8f18-4e325f581c1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c215e6ae-5fb7-414a-96ef-6bf0bd5ad15e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96160e9c-ecf0-4791-97f1-19461c142e94",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08ef1eac-2e3a-411e-bfc3-3e3aba5245de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32a6f59a-7965-4d2c-a562-c54111e48adc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59654b65-2699-482b-8e3b-7b6eec9a4e66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "5122a4fe-7a65-4d8c-b7c9-6acda8adb914"
                        }
                      }
                    ]
                  },
                  {
                    "id": "508f06de-e7bd-4ecb-933f-038f4f4d45c2",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df0b9808-a928-4ad1-a8f1-a8f16e62df3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75df420e-aacd-4098-b883-3c75948048d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc4bbd8f-32e2-4a2d-b404-c0ed6f66b8d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e62b2b46-1aee-4d09-99c1-2b45a0f6af21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9efa839-a235-4ce0-9926-dca89450b431",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02e2c6c0-8cb3-47f2-9f4a-b6ad8d402f78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f5240a0-f177-4593-a0f9-61c943ec466f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ff085b5-7913-4407-b854-183a59365db8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "27f96818-3017-4ad1-858c-aeb1cab1c58b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48980b3a-2dd8-443c-85b5-c0d11b15e98a",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc28450d-b680-45bd-a5b3-11735e27f400",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "625f08d7-d118-4fc4-b326-e81d81d373cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fde09691-8b3e-4054-86d9-126a85d0ce8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "97f2afc9-0317-4eb0-ba14-defd5119a5be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4776bc5-1443-464f-82f1-710911790f40",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3ae7b1e-a6ee-4dce-9d1b-fb673c9e60f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1d7fc77-1da0-4aaf-88f8-ff8b4e75d653"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cc22db5-bd39-48e3-8a44-621f3c96043f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c20fb24-5aaf-4917-89d0-0e7079c1d16b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4b77dbd-e194-4939-a65c-e730ab675053",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ae94ca7-d291-4aef-becf-ab1fa51cc240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b8af046-34c0-4cee-b446-b10a02bbf4d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baa7106f-69ce-4ca8-af21-d724e5eb1e41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ad83efcb-3251-4def-a503-d05db9d6502b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b109e55c-d468-4204-b64c-1e8159579499",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5f1159f-64c9-4ff4-8e37-5bd5f54516de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1be8e5f7-c395-4bc2-a558-a8086c002077"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1592394-df59-4a99-9ca0-56b04b5583eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a63ea1fc-22bd-4267-8e3e-1ad824a6cdad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e869dd18-eaa8-4956-bde3-c0c94e8f8253",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19fcb09f-b0b9-4060-80ba-194f91fc24c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abd8d482-948c-469c-899d-a9eb25dcf1ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ef21028-3ca5-4235-9df4-a9f17a58d443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0469964-5e34-4742-a3b5-830a4e685a1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0322f860-2bed-40fb-b587-a993d09ecd1e",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5badcf6e-78d2-49fe-bdda-ca356d76f1e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ba84e00-7bb4-43e2-bbb0-e7cd9806a7f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d360bb54-c79f-42ec-bff7-f14d0c8c2be3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "28e8f00d-5985-4de3-bbf4-f7307b78dfa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5083307c-8922-4b85-ac4b-f5a1975e27b5",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94a7b257-10c3-4d2c-aaca-b3301784c1d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9d9024b-3ddf-4c90-b779-d03fb9e6eb6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "300b44dd-1d0c-496c-9034-0736c29795d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0567b9c1-122c-4898-92e4-60ea47aa7f76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "952d65c6-9676-42bb-8097-4996acb82599",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07e10166-1c09-4cb0-9dc7-ea31deb62e0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f2b7990-967e-452d-8b61-fe006b0b7a11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64725a7f-4a3e-4860-8e95-ceecf295d761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "534a3498-7ba2-4a3d-999a-6620695b4647"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da5a9a95-afb9-4418-8f5a-d786f4f38f0d",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d59ba6cf-a1ef-4439-8d7b-f1b408491146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7329113c-bde1-4fb9-85e7-bb570ab11bf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3f64906-b3bb-4aea-81dd-179b2e8018af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "31a53793-2b60-436f-84c4-dbc839efbcfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb496a98-df43-4ad0-a8c2-752a7766e737",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2426eb37-5557-463f-99c5-00d47316d2b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3ef63aa-b451-4d57-8aa4-a5f928e79147"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3e97531-6b2a-48ba-a0f9-662439dceca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "73c654ae-f282-40dc-9ca9-6aba37149bc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee0913a9-fadb-4bd4-a1c7-8d89081e9c18",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99f28759-4dcc-485b-af85-34f3efda8553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cc0b5b0-a453-45ed-b682-a87153c1ef3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "713a6ef0-d720-44e2-8e64-9dec7160cb4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "64a82fa2-432e-4ec9-87e0-33f040369f98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "489f1dee-f6a3-4494-b0be-abe2d0cbdd78",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e55861ef-9e02-42e1-8ead-73e08f7e6e58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e52e2ba9-0309-4c67-95d6-a4d7192fad28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8deff14e-4d54-4d9b-86e1-6ed3295470fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7debe9c7-8a09-4bb3-b006-81d93169d5b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dae2ff5a-cbf7-446c-97be-6367a31fcef9",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "064edceb-6ded-43c0-83e7-0404d1bf588c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88eae7c5-aced-4bfe-927e-7aead431278f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3124030-d362-46a1-8287-6aa7bdc907b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "22269f4c-5d8c-4526-b9fb-feb11c1ff687"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cbfd968-449d-4328-9ad8-3beff6bca1d8",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a232044a-6598-4c60-842f-e124d3d9e336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83c53bcd-09a1-4418-9b51-9c31b0de3be5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2083726e-5873-477f-ad7c-dc71b5d7b97e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb22ea52-5cde-474d-b6a1-3de751aa7de3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3810f29f-5e86-49cf-9579-21db8b071bba",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f11e34c2-908e-47e8-b270-5c201d55025d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1169ee4-b55c-4a7b-bff2-f6bfda1500c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4da14266-820d-485e-9e3c-8841759c30b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bafce1eb-b093-47c1-9a80-588a8cb6411a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b19cc435-f25f-41d2-a7a0-2a1ce656d51f",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "198d7088-9a30-4625-b3b0-0e9ebbae9a6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1647cec4-3609-46ca-a62a-6bf2bb399342"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa389d69-c651-469f-b41e-785ff0436fb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "82963f7b-639f-4696-9a9f-234b71f23893"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db988030-210a-4a8f-93a8-649da3ab3687",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d6fce97-e6c2-467a-9f82-20316b9d7d4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "032f0f8e-01b2-4ca9-acee-502e9dcb2312"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55d9f7fe-4691-4be0-b4d1-eb1685a16aed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b349adc-48cc-450a-9349-b78a03c1036a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81c5af0c-196c-4b39-8393-1d529e391ceb",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af5ffadd-5851-4cfb-89ab-004efe74bcf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbcfbdb9-9701-41fc-9be4-f31c9f5db3ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34f65f5e-87d1-4fac-86e9-a2520ea8e004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "12fbf6b1-b10a-4d40-9b17-94d40bfbada5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf20b9da-395d-43d3-9c82-717e29366cba",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5203de3-c3db-4cb9-8095-862665c392a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86042237-f754-4b08-851b-a7308ce11c15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a59140cd-cfac-49ea-b7d3-c1e92a03e54b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a1d25b6-b1d8-4148-8d4d-e172f0837675"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb9eded3-fa2b-422f-b810-0abe7003af2d",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6c701e6-b236-4cfd-ace5-2d5ab7ddb394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a329381-4911-4741-8eef-1aa60842d3a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78c060eb-3e45-417f-b332-14091e7f24a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0f6bf05-6348-4600-bbe2-379e9f2a9bfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa668cad-e0ac-475f-a6f5-6176d5883e63",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94c569e7-cf2c-4ace-a507-f71dd220f027",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad3b8617-94f6-490f-aab0-f494f0ceb1e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8700ceb1-23ee-4eff-a0ad-98b62f2768e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "56d6b60e-eaa2-4558-9e8a-dd7ef83d82f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "734d8a78-1e8d-41d2-acd9-268f55c4c188",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f81442f8-b87a-4ba0-ad7f-6755566d28f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d82c16e7-2770-4b26-8ea6-0cc12716bed6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8576359c-d920-4384-8681-0a0d31a0a89b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d033d18a-e650-47a0-8aa4-50a7e9b46f1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27315e6a-5eb8-47cb-9661-aa506f9ebb9d",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68e949d4-dab6-48d4-bb8f-79ac813d3c1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "315c88f1-0ecd-4eac-a0b4-6c08c16d7b6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "054e570e-c637-4682-be65-1dd8401d655f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ed444ff4-5072-4c75-902d-5e2542003716"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8c20673-8ad8-412e-bd96-ac3192440bd4",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9480d244-b6ff-4343-8197-8c86ac7ad238",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11536d0e-5efe-4a7b-a40a-fb38f1b29675"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e848c10e-0cf6-4f11-a887-beeab8ee65c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "83f99426-d83a-4cf5-9b48-fb9e900d47fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04e756c9-3e2e-4c5d-be53-36263da75524",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eef826c-c9a9-4a99-b78e-ac6b70414d68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39ec9d27-ccef-462c-8548-34d4f5685d8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c546fa9a-f133-447f-847a-4d52996b268f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "37f82025-64dd-4eb7-b29c-02a36d5bf94e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61f42a10-0112-42f4-a12e-43b9de33960b",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "672f1235-2132-4d27-961b-a9c1bf599c35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d0f03c6-3f54-4c5a-84ff-672a5be53de1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1c67164-946e-4816-96ef-b12c33a22dd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "edef87ec-925f-4a1f-a9d0-e80370fb5f66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40efafea-de47-44e7-9388-d9dea1a1109f",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fc040a1-0550-4ab8-a5ce-5830357515ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bcc86ef-c94c-4205-91ef-c926b2ffba71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cdae98e-d1ba-447f-8842-f22e26750ffa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "dbe72cb6-dc8b-45a3-93aa-49e78ac305b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13ce6d33-f3cb-49d2-b784-fc75542ded52",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26b74f23-e044-44e0-a755-dca434b4d94a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f47b74f5-a1ed-4ed7-a627-edbeed6d99d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f32d7cfc-f98a-4da5-b5e1-69d83aa4e206",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "87556583-33a0-4b87-ac97-093baa023e55"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c624df56-b20c-448d-87d1-abd6273a00c4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1a94f54e-68f1-4462-bb0a-dc6e453f823c",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24b359c5-d879-4671-a9a7-a37cd9bf3363",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0e135dfc-273b-4afa-be89-9cf6d4849ba0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59c57178-846d-4ec3-b236-1a4f2a1de4cb",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "e16de7dc-60ad-43a1-a43d-354e9130a9fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d8cf27d-9234-4638-a8f2-f6ca0482412d",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72adac8c-00fb-4654-ab5b-63a7b2c81fc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "14b9de26-bc43-415a-92e2-1c9eeb7eca50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62dab34a-5796-42bd-8bbd-1aba4676abff",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "0fe6da19-ee1d-417c-991b-d3e6c0eaa21c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e3defcd8-0dfe-42cd-af57-092550d2196f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e4e043ca-892d-4e75-b8de-b57f8d934c08"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9d82df22-5390-455f-bded-aadae46211bf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "130099ad-0cbd-492a-ac7a-984d8adf0c2b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "472472d1-74bf-4ef1-94b5-55293ff7af0c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b56b00b4-c18c-486c-a8ba-1f07f828b18f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7e716243-6df4-499d-a1b6-26a3ec3cd5c9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b47a8d0a-b2ce-4085-a384-8e16f8be2b90"
                }
              }
            ]
          },
          {
            "id": "be4b0636-a61a-45c0-bd78-83a4e9a33b8d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "115757b2-6245-4d4d-81be-2527829b10ae",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5c47be25-9dcb-4624-abf3-31c0686a5fb3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json();",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "396a9dc0-d6ee-4f34-89d4-121114acce8f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8e122748-0f8d-4104-9bd7-74f78f79a121",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f8064c29-5fac-444f-8ce9-89956a77e3fa"
                    }
                  }
                ]
              },
              {
                "id": "3838dcb7-cb8e-4028-86fd-fdfa0c81dc9f",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "15a84615-ff95-4d02-b445-fcfd208d63c8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "372bca87-fa20-4ceb-9ca7-ebdeb10354bc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a14116f1-24a9-46b2-bcfe-f33855756663",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6f432468-ebfa-407f-a967-b8454ce5d860"
                    }
                  }
                ]
              },
              {
                "id": "328f8c9d-8663-42df-9572-ca13f0bf37d5",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "058fdaff-4894-4e9b-a37b-abd123793b67",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f36929cf-11c5-4116-ab83-bf5f8aeb17cf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "936426ad-0720-464c-be3b-faa1e6597527",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "92e59d55-208d-4ebb-a3c7-0f07353fca31"
                    }
                  }
                ]
              },
              {
                "id": "eac5145c-3745-40d1-904a-57f9a9b829be",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "796d4e4a-a3d5-422f-935a-4ae7b161b667",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6e7b0942-4531-4277-809a-ff5256ba51ef"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f567eee6-0368-4f38-a5be-992179b8f80d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "5cc1157d-93c6-47bb-ab99-a0c73efb10bb"
                    }
                  }
                ]
              },
              {
                "id": "daf90f94-2d29-4755-a35b-0641df0c4826",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a34adfaf-3341-47b4-892b-1e2e79722024",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "15ad8815-189a-4fc4-96b9-de54c0cd685d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "10e90861-0a10-4c43-ba1d-32806cfe9b99",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "95ae7bac-f858-4ecc-99ad-c5238ebe3707"
                    }
                  }
                ]
              },
              {
                "id": "0cf2e5e2-bd7b-4358-83f6-57117923fc4a",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6ac6f758-6b35-4e85-bc2b-fb468fe3c38f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e1a9eeaa-c977-46ab-a825-a53bae4be4de"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8547533f-9e0c-4580-9392-39d1485d47e5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ebc75ee6-9a0c-48d0-a92b-3c43ab87564e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ac88446c-8c41-4e6e-aed1-5daee9529217",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8c0c266b-c2d9-4bd5-a98c-02d43359f557"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8fee312d-61ed-479d-90f2-5980ea7c7718",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6cbd1219-0e8b-4804-9c0b-65a8dc577351"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2afc80f6-e2c5-4335-82ef-6e3253c6e4f0",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "0717a22e-50d0-4aa9-853a-732439cc9d2a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "75d3baf8-f9c8-41bc-bf66-94416415fb33",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1efaea4b-62d5-44e5-ba18-d3b69803da6a"
            }
          }
        ]
      },
      {
        "id": "253dae42-7660-48c2-af8e-a551418b5d85",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "caaa6f47-c894-48f8-b905-930b03000a16",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d1c25965-1337-486a-adef-a5b4e6112246",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0f58ff03-ab39-4859-af92-4950d445d39b",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e31cd788-5461-4bcb-894e-ab939a0ef9f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9972d873-199d-45ab-aacb-732186351ecd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f3b3eb6-7ce5-47b8-bfb6-8ea6373e43ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7da2f25-4a2e-4512-8cc1-9db8c4c90734"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db599740-d9c5-47b5-b69a-2f0d29cb8c35",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28266d86-a93a-4356-8b97-d3d4e7ecd7ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d5f4f14-dd0e-4cb0-8f73-398f01a93fc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eab37f9f-f73c-45e3-89f5-5ac4effc38c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c1d6ec1-ce0d-4b3a-9d84-1d71ae821e7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bd7c0e5-4f5e-4236-9993-e2f6df0696de",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7736f82-4b4f-4ff2-a8d3-b5873a9a2354",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40e33ea1-ef80-4e47-8b0e-7486da7819e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "960b8b68-9576-49d3-b01c-2959fd272a2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7266008f-4fc1-4291-9747-b955aafb8a25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ddb0a66-2186-4c88-bde5-6d8e0ac3c311",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9465ac35-1735-42c3-b20f-6fe4d7be84f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7acf12d-0adc-4214-b913-fe524de77e49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "885c0e57-3a71-46db-8661-10daf99b312e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad33b6fc-5945-407d-b539-3ebbea99871f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cefe05bd-aa9c-41f5-9be7-9a70b6922d0f",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a031e38e-9c1b-465a-b9a0-e0b2904a7364",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7f36dc4-3357-43e1-8e7d-b1bcc92384d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48031d4c-5d55-4504-857b-0e952ebd9004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b932231f-560a-418c-9b87-3156f5ed045a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8469dda-a817-4e8a-8495-ab4b22803002",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07e84956-7376-4082-8c0b-e182f674d657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0c0a697-d9ca-44c5-a747-bab073935f8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40c8285d-7657-4d75-8626-a74acf3e0f94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b4b35281-d3d4-4670-a51e-5bdeaf0ee176"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a27476ce-8b78-47d3-9306-f2fdc8c4f4a4",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d05a14d-dbf1-4512-8812-a9cf99c3d9fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "464b220a-80d7-4a0c-b428-3a9056ef35e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60e9125f-5b20-413c-8bf8-cf64471a760c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "06890da7-ebaf-4fa4-a9e2-914847790142"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90557718-ffdf-440b-b31d-aab8db3673fb",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28bd70cb-588f-4513-a60e-372d8ee7f6c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f6a05cd-a419-49fb-98d2-03c6f074f773"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed64dc12-c983-468e-a623-e5df8373e555",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd303962-3cce-4c98-9fb7-668153ca653e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75fd868e-6656-4fbe-985b-cf2c6976bc20",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4be88dca-dd92-4037-aa24-b5c258a6304d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7303eeaf-b376-4e99-afe9-5a084b7117be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4514b13-bd12-45ae-853b-cf23e6bd67aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "79c128e0-5f98-4224-8ff0-fd442a0e8b0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5544720a-be08-4c82-832a-234db9b3d58e",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1495fd9b-7cc5-4f6c-89ce-d37d4edf8d31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5896b7a6-67d6-41ba-a82b-945c503044b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8f7cf10-9dcd-4cd0-b4d9-a05acbafe94e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d18189e4-2116-45e9-8f49-d73214828049"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ec8a8cb-6305-402e-b076-eb8adcfa48d7",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "007254cc-ed53-4a8a-816f-f2c993bebc45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "764db873-3b5f-4519-9c6e-c658968c2999"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c46638b9-de62-4070-8e23-d9aa5b19406f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "555e076a-dc33-4c17-b06f-82b5e89c97c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2879534a-cad3-401b-89e8-d21f4a6ed7a3",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5567d61-18b1-4954-af3b-52fcc30e34fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "958034bd-10ac-441e-b7e6-b04d4d63089f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e6ebb8d-08fd-476b-b085-6a29f6e8653d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "62433d9a-5476-48a2-b07c-f99d1b20741a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c71849c-a00a-414d-847c-43800b3d7294",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2b0c990-da99-40b6-8105-202cb010a20d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea38c38f-4d7f-4a8f-9d1d-c33d35692cf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2385368f-4518-45c8-9904-0cf772e02dcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8d91ba8-19c5-4732-ac4a-fd75d11041a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e47f04f-c0a0-468f-ab6c-cbba5f6f3e14",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4da9b3bf-ba0d-44ee-98f0-678a77e8bf80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a3cba94-98ad-4e70-bb06-7d5ec8e2f715"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84fab05d-9c77-4cc9-9c86-967056fc857f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb5bc390-0baf-4509-ac82-188bc07a02ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eedff25-a851-4b7e-89c0-21eab20a1984",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e945f13-8273-4eac-bcfa-a4548d5e770e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "973be838-a472-4811-b71b-8baab5ffce4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c5595ef-e350-4e51-8536-9f3b07edf8fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "36401a13-07f7-4a25-a235-96ca2ae55b24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8923c987-6c0f-41e2-b3d4-303ade6d4f46",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75e05f60-e637-436a-a810-1cffcb893a96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e214fb4-53cc-4d2d-8cde-3ed81a2c2112"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a976ce5-bd4e-4987-8d2d-f7f5f3a09574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "06100ac5-78a6-4119-91cb-ec1030a68072"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d703107-6bec-4790-ae9c-3612f689eb20",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c949487-31d1-4969-a443-5d615b407320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53095858-9d19-4d5a-b0d8-1efbc901b222"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99227ef2-7f1a-4cc6-810a-c7a89584af64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef002b13-3196-470c-a08a-76ed867aead5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e728a080-8f6c-43ea-b5df-15f21ad655ee",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1c47b7c-7b4a-4d7e-b541-0c0b05408b69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60a29096-a9f5-4832-9438-6efc05280c3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8cf4d69-7da6-4cda-8a1a-458e46d26a58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0191e184-59f1-4994-aee1-6835c8232f27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "899f3079-3c59-412c-9fa0-840c18479805",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9b80b30-12bf-4f17-9428-5a178c3ad139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1f44d66-eb4a-4c40-97a6-36ee34bd7e47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a63f826-8ebc-48f7-ade0-9a1cae5d7b38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e4d19a9-19c4-4d53-b6e6-be6e0ad00cbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3538dad3-a0a4-4a77-9ba4-9609e615d1d4",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7f1b8b5-d62f-4846-b27f-020de92a05ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eac2e6ba-774f-49ea-a523-340d5a7d8ff5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bab8736-2b70-425e-b720-ba66deafb9e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe6a75b9-d8b2-4070-a166-e79e9b3cd0db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5ee4b29-4f67-43a8-ac7a-7493fdafcf25",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eef49f34-dac5-4be1-a0f8-acce88652a18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c2edd4a-86bd-4d07-9558-233a29d385e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff4f85a7-3e1e-4da1-983b-ffcb032a7aad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "49c2d205-39e6-4486-b980-f26d88f81493"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83675242-790e-4a32-a6bf-36daca0838dd",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "394ea28b-e91c-4c9b-953f-c72ae3ed3a7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90100272-a57d-42e1-962c-6c8ddaf61aca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55a8014c-4679-4432-ac1c-ccb46bfbf886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "621adc12-8019-4930-afdb-68cab4851647"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff41943f-d34e-4a89-bd4b-a80dca34e238",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c70bbde-8e67-4bb4-a918-881c9381f627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8f55e1c-410b-4b67-b3f9-619229562282"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24e16884-605a-48c1-8412-656a30a14418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9cc6799b-61f4-4b37-8119-c7bda82724f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdbf152b-3afa-4a27-b2ec-dfd5e40b8d05",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80ad3dd9-47ce-4b5f-900a-ef32a807832a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d60be639-af1a-402e-b883-60ec4fdcc14e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd5a7648-a020-44ac-884e-b845e77c6241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8609e319-56c9-46a5-b553-0151f0f0cb54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b8f5840-da6b-44a2-a9a1-f644107c299c",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45ef9d7d-9a53-4003-bc4a-ebbdf7448603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "811eaa2e-5769-484f-a15d-0211b098fdcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6063270-518c-4367-83a9-8e8654b0ccc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ddfa2b27-99d3-43ee-91e7-8b11dcf0f583"
                        }
                      }
                    ]
                  },
                  {
                    "id": "389333a3-34a9-442f-a013-8f4e3b0eb2b0",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1af7758e-9a6f-472d-bc3d-e5d348e44e63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "042330ee-d010-42c4-b36b-333a33682b78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1022744-0087-45d9-897a-8b657f5da409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a793ddc-15ca-4285-94c4-9dce1f6dabaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80f89a13-6644-4215-996b-683d4ae6b6cc",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3b6c476-19e2-4e65-b6d1-5c2e9be510ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6b32ba8-6db0-4c24-b387-7bcd7a4c1c8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "240c4b61-b81b-4482-8677-494c94737028",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b5a2d5d-99b1-46e6-b1a9-6ae98df8ee25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb09c303-7df6-4369-9ce7-65da46e25309",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b383ec97-60e0-4359-9cc8-77887344be71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af18e956-2d81-49b1-95bb-8e14927ef3a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a27d65db-be21-48e3-b04d-f4c9d3f0e53d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "519b56e2-8127-4f59-9533-cba44302bb0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2df5492-b6b2-4ec3-a08e-11c8197521aa",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "700d661c-8477-4d4a-b980-6f7f1f8ccb73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b75c0cb8-80f6-4eb6-bf05-1a301be0cc96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1ac9088-d04b-4854-9a4d-1ab48e817192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "20aa8fc9-7ee9-4477-94d4-f0fb5a0cf503"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f8a02a2-db28-4462-b2e1-e2abe577ceaa",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "912fdd5a-9de4-4406-9870-667aa1a8cb55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a938b76f-1ea3-4e82-be2d-c7c95503d501"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93e694d0-6969-45f8-b211-c03d94887746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e7d177a-8e6a-4f8b-8c57-d6bc9d986ddc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72e400a5-7408-430a-81e4-deb4596bbc5d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78a23858-1fdf-488f-8db6-d83ecf6cb104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2ecea83-89f1-4c46-9846-5c7bce4e1e75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c3cd007-a638-4e2e-85a0-13a2d3045321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "de949ea8-5dbf-48ad-bcff-1c2c46e63a88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01531b28-0d80-40f4-93e5-845e07e74e91",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12125519-6a68-484f-b62e-755370eedb16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f30582b-b3b9-404e-a47f-3ed0c7d31e8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "562f489f-73da-4ac0-b632-e8c46ee32d22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "494454cd-fa44-45df-aded-0304bf9e26fa"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f9d197e2-f8fe-4b41-9704-f7b9efec505e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6b089a23-7462-4e16-a5c5-1d976ef59411",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de0d2693-055a-405d-8de5-70d79449e8b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff214f2b-9ff3-4f19-9f48-1fe7d8fcfa31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "649e0284-d5dc-46dd-aee2-105df453a173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5aff6366-71ab-4e2b-9108-9925068e63df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1149f39-841a-4924-aa11-ae5a0b40b0a5",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de38e627-4240-4ab7-a2d4-5624a5369c6b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "057c9ed8-5f01-4323-8c37-54c1a72fd050"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53ca021a-3efb-4a3c-9bfa-7e057aaeafa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3de738ec-a384-452d-8332-839d54833075"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bd2a16a8-8a4f-4fe1-bcb0-6a8a2c4e80f8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "389b341f-8709-4360-b65c-8be036af29f8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c4447c05-4bfe-4f60-a2c2-c466971f4c8e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9eda441f-ba33-4bec-b8c7-c261f81674d5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e72b64b3-b1ca-4399-8740-e88c7627373f",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "985ed0b9-a589-45ca-9f5c-8b454e056168"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a68e9433-4217-4281-b0b3-1b5597b78b65",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ce8df931-fe90-4472-8ed7-2ec096446002"
            }
          }
        ]
      },
      {
        "id": "050f69a4-d2fe-4f9c-8917-246f7dc5ba96",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "25b2d8c6-9a31-420c-9db4-7ce3fcbe30d3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5d2c3692-d050-4bbe-a2f5-349e3fdcd4a8",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a6aa5ba1-aeaa-4113-bb1c-135890cd4750",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01e1c229-47c1-45e9-8546-ac3955d81f89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ff61e28-2891-4367-b1f2-8de41fc95a9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d980300-745f-4422-ae2b-d9e16f77c89d",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "890d6914-6710-4873-b873-eb509dddefb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bab39ea8-33c6-4ac8-9345-0e3874681580"
                        }
                      }
                    ]
                  },
                  {
                    "id": "297e620c-8f02-4370-a51d-ea40c30b3414",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12a230b1-76eb-47f0-bfb5-9e5a46935022",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca3c260f-2cd8-4e7c-b9eb-9b2d3ec87df2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64f14eba-86c7-49fd-8aa8-6ccb05feb2ef",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1290a879-3c1e-4ba8-ab78-f3b4e3ad2598",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac6351c0-541b-4fa1-8e57-8fa05f9c0562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dde935c0-3692-4072-b1ee-ccd7c9aa02b0",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d275219-f752-453c-881f-cb20fb671924",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e44ffbc6-cc9f-4350-8d94-c06b13e1359e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0ddffd7-640c-422b-a14e-b13010048d09",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42a7ec15-9542-4c80-8aea-080e9b9b2a3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cbda02e-762a-4f1a-980f-8f7b4da7ad15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf1ffb1e-b7e5-4dca-9b78-a269568d86ba",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b0beedc-efdd-4a8c-af1d-0c3daceab6b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c341bc9e-2bae-4a03-b305-e5e676a9247d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be2c4e34-95aa-44d1-9fbd-35254647ff9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c244487-c22a-438c-8d0b-47cec1d0179b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8ac8367-54df-45a8-9709-a75033442ff3",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97e421ed-e12b-4d19-8a14-7f1772185f44",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e3fc230-6032-45ec-b397-78cce1e60369"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e58ea11e-78cf-48dc-92e8-51c581e9685f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8830bbec-9680-4f25-a6fb-3fc73346f875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9db0bb9f-18ef-4562-b885-90c0cf982e31",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c85ef9ba-7e81-478c-bc50-7b1e18c52ad3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75afbd5f-9b5a-4591-a2c0-45e6904e24fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edfd6ee8-ad13-4e0f-a5d6-0212704f5c4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00b3db12-d770-4cfc-a45f-9c5366bd8ee7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a80f8f69-05b1-49c9-9fae-9e173e19d118",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d82ffb31-8bcf-4ffe-a6ed-b08a58dd19d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63a99fde-d377-4ddd-add2-27d87d27ac57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c5d1978-5bc6-408e-8d3a-7da7c847ad7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "682700aa-1013-437f-ac0a-9539ec2c9964"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38fac015-b88e-40b4-9939-e70f8a481b00",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "128b08d6-d918-4746-b237-2b21001a3e7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c10fa8b5-0258-4277-8472-912650d4d4e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa04b797-1086-4773-87a0-afc109145acb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "312c428c-d229-41d3-a136-c7e78c990db3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e8d6902-e3bf-4398-8928-ec53554adb2d",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "932f75e3-4667-4e6d-abf9-b0f113ce8cb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4570a2bb-9d1a-4f9e-abe0-58d69257b930"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b954391-215f-48c1-81d6-a98c08df7599",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cc94650-97e5-4e2f-b8ed-fb39a36b61cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fae4ec2-dddb-407c-a7b2-bb9d22d59820",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8216415-726c-4865-ab62-f2c6cd68f133",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0db164f9-c707-430b-b18b-841972958e02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1d28368-7ac3-47d2-956d-afa0af102246",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee630f6c-0f99-4892-99db-2f5d7ff56f02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10be7542-fd49-4302-b0e2-7395b43e886d",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b229ec32-5689-4d65-9025-a57a8ad2e1e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "413466e4-db5d-4c6c-aba1-7ba33738683a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8612abdf-4f0b-4c5e-bdb9-d0c38bde2a10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb4b64f8-8612-4e81-bccc-ee240dde5dcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ea72b2d-e7bf-460a-896e-2f6e94e94baf",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a176dd01-66b4-4d6a-8695-2067217da328",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9523f136-a799-45a1-8572-e464e31a4559"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19834f1a-58e6-4ccb-85f1-67ec1824eafc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aead1e22-1760-4e21-ac66-61ffeedbac68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0b2abe3-6c56-484a-b8a9-7b380d3502b6",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8f27529-ca13-4ac9-810a-c605165ee97a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ab34832-7a76-4d42-9dc8-7856d665a0b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0fc4e3f-cf8d-4de0-bfb7-53c350b97905",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "defcedd8-d04a-4393-8ff3-1439220c6f56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aaf34af-88ec-4a57-907e-660283c66891",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "245c9355-1e5d-4cb4-86b6-14b68fcc2988",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "268d9241-ecae-4713-bd11-a90bac00413a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8185e6e6-0022-4b40-93c1-89594fa5262b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fa9dc6f-5e98-4c57-b1f7-c962aa53ba86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "706d761e-8e19-4d41-a639-c5840b533fe2",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7313779-4951-4a0f-b315-9a44cd1b5f29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c10b1ec4-71e6-4865-86d4-483ff457fe20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70d1bf0d-1f85-411d-bf65-6a10defa6652",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f24c8468-5f2e-4f3b-b9be-b121f6d9914f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0332c282-0f97-4141-a088-7fec52e97152",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b68aab32-1da3-4363-b08e-35c0ed457600",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b381e9f-3173-4f86-829e-fb96ea60adf6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdad8815-83d5-46ed-b6f5-bcb41c70e534",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76789647-7c42-4e39-9968-948711263bbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "504c099b-b82a-4837-b69f-3be8bf523f61",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a7e52d6-2547-4f6b-856d-54b64e43158f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2692eee0-c9f4-46ab-a4a8-a72baf97b339"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f229fb67-ac2a-4346-b94e-968a1be3f1cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54b0627e-c581-466c-8425-783719249a4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e0d40f8-0950-4aaa-8146-fa910dc92260",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cea5ddaa-3591-423e-81a9-a529d72fe8cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f7d3c53-c212-4e62-822e-7645ef69fdbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa38c14d-1fcd-4d96-89da-6fbb83da2bb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08306278-c539-407d-b5ed-984104ee2750"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf161f11-0c07-4040-ba1d-4a3cae1f0fb2",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "530e715b-a977-49d3-a127-80874b1397a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae45e5ef-ebd4-49e3-ac34-f2d46eb1ddc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "366e0c01-2668-4cce-80ff-02b783a51fd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09926594-896a-4952-8f9d-beb6baabc46b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98ea5bcb-90b6-46e3-b09e-61d31e4a0985",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51af0b68-0a63-4a63-95c7-52e685b59ba5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78fdd89d-838a-4d7d-b322-9c37a643d534"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "437639b3-200c-45a7-ae76-182b861bd49b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94ef2a00-dc84-4f26-b32f-b0d1c5a94a18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38bc9057-6f7e-457b-bf48-a6b1b969735c",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96906cd9-2c46-45ef-aad1-a05f6dc5ddc7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aaa766cf-b072-4741-848c-59254258fa42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "053d81b4-cf4a-403e-8ca9-0837b174226e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09a53f57-9ede-4e8e-aa5a-e46737561e61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2084699c-283d-409e-9fa3-9fbef212e908",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48acc2a1-afbe-4747-b43c-c83cf34f4e70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3f4cca6-f168-459a-a087-a89246a05313"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66bc05b5-b022-4d85-b5cc-ccb30d951659",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62e69ce7-f1ba-4e54-83b8-5b3cbdfdd475"
                        }
                      }
                    ]
                  },
                  {
                    "id": "732a9004-005e-4b44-bb77-830fc3256629",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d2041f2-6c52-4c41-81c1-1fd6be4b61a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "397ce021-97f1-4ba0-a831-c7b3591f3d9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11adffae-bd43-417c-aa67-d99555a8cdda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db664149-d9e7-48cc-8e37-a39311afb74f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59aa3ed6-0e9c-4cd9-a487-eee80b5c4e4d",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8df0b63f-3069-4809-ba00-00b3e602c455",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "760e4cf3-e475-4732-bbd8-221a44121fee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ad7f3ae-a784-41bb-b87f-2934fbec5ff7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d5c082a-adb9-4c97-baa8-05e7d3a70b4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d4ebfa0-cab8-469b-9937-a3576f96707f",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f55c2c5-99d2-4b72-95f7-29e279681efb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b78e0956-a4a7-4fad-bf52-710dc144ec76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fb9d733-9585-4de2-9b67-027500223637",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33c09f61-41cc-4574-b212-6a65a6420ff2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8367682d-d6c9-4329-9013-d42773f0d44b",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd9bd889-0fec-405a-9cfa-61631bb25a14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec14e454-0ce1-4bf7-a2a8-eb6de4f24e0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eaa3269-bd8f-4338-b35c-265f613fc089",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5ba673b-622b-4152-9bc9-2591b82ea637"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c287ed26-1ee9-4333-8c49-5cacd7f07a2d",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79ef48b1-029a-4de5-9dc5-aab56e307b10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf3f0c08-06b3-4868-bd67-dac7916d07df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b71f9189-a349-4a51-b397-e1130a864d4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "955ebfbe-1412-4e95-8ea5-b089936dd522"
                        }
                      }
                    ]
                  },
                  {
                    "id": "045cf3cf-23cc-4d37-9bf5-1bce8154c985",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6fa0497-c663-4c90-8138-d31fa8fcefa6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a8f9031-b0e9-4e76-8a81-f034b0b8517a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78b7b0f0-b18b-4f53-a6a8-5fa0f3c934ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f2c08f2-4237-4345-8c90-7944910ded3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b1e3c02-66b3-448f-a1cb-c5b18ea652fd",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7697800d-ead4-4b5f-8d24-e405b19cff6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c9b0c49-83d4-4310-8b83-830db4b57e43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a018a56-0f1e-4d5a-85e1-29d2fa1a408b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "706306f0-bc2e-43c8-8096-bcbf8096cc19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bedc85d-3513-44dc-8b5c-a9e5e6cf6538",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64011402-31bd-4c41-914b-0f2be58ee00b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba511613-637f-406e-a902-bb47e63faac9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b01d4f4f-7c7f-4401-a138-611de7c9bbb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e24b85d-44e0-48f4-a33b-23e42122d14b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a26256bb-10d3-47bc-b886-397ff37a6dcf",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa3f9f10-fb22-4d69-9414-ba0ad2d6613e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5415d92-e9b8-4132-bf2f-b0076f191f91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfdcdf89-0ebe-426a-b82d-89c782abc2d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8eb01475-a88f-4df3-a7f9-9ec218b4b6b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58964acd-d6c8-4edd-a824-927172deb597",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5507abcf-80ec-4195-9576-57d0bc14be9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a09bf6d-1995-46f5-afdb-19dbdaf513bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c66ad3a-b2f7-4b86-8813-b63bd0529f15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11bbb307-207f-4183-b320-f3e8339051aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb48a59c-f5bd-4d12-a78a-83f1361785c4",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99d9ea87-e31d-4619-ab2c-f0e52f002f12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb31f6a3-04dd-4ef3-b922-7b18d012da35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c576586d-f3b2-4536-86f1-3a29c3fb8f7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8c523af-b122-47a7-a28d-dbacc0e96db4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac0e0535-e810-406b-a628-d53c159b5c07",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "915eb4da-8d9b-4946-9df2-b67837f0a021",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8251f7da-91c0-4916-9ec7-b6d9ab91b62a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3cfe7d1-c59c-4237-a908-9a5fd6202563",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ec84f4f-c2d9-4597-bb7c-5198023d9782"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d71119e-d7b4-4e63-abb8-a41c1a7155b0",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e79929a0-9e65-47a0-ac71-6705779bc2c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc0c8d90-ce03-4275-b671-4d64990c23f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca92e2c7-641b-4a00-a2ca-503134118e82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51c53407-bfd2-4bd2-b1f0-083ce280c2f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0439e4f0-2727-4b08-9afd-2faf1470aa84",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f548ccd-fb18-43a6-a57b-2fadaf835002",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed5ce6c8-bbe5-4232-a1d2-3204a6c8ba5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c954593-b4f8-478f-9b1a-cc6bb1d5bbab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cb34b87-b223-44a0-a19c-5f2f6bd053b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efe88437-75ff-4f8b-bcfe-ce9c15868734",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15df250d-90e9-408b-8b5c-3cfca2ab81c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4646f6e-bccc-4c14-9309-44477007f4cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5739a7f-b1f8-4c0c-b9d1-b098cdc28796",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76116524-ae4b-441c-bdcc-8e86ec0121bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a67002d6-8d04-47fe-8a31-ac662a8a2937",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4477be8d-92ba-4085-a8f4-1cbec688d742",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63010ea7-51e6-45eb-b491-7045b9a368d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de979241-4c91-4b40-aae0-0b9828fc6338",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fa567aa-631d-4c65-8567-50ace97c7728"
                        }
                      }
                    ]
                  },
                  {
                    "id": "820cf795-3067-4484-b980-8ed883bc264e",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6117048d-5005-48ee-a6ea-b5e6a427073a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfb186a5-b712-4da0-b843-9b2fd2734ead"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a228b34-6509-4a0c-b5c8-11cfdf191cab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a3fc22f-e9dc-478c-975f-041ad761e304"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90d697b8-7ee5-43a7-aac1-375148b922c7",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8141df33-18a8-42e9-aec0-bf5dd013b2f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44b5f831-1459-4834-9e13-2b9f71b95805"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd27f39a-60db-4b4b-a0a0-c5425c117e75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1117f8b7-222f-48ff-b28c-f1c6a479086e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d3c4f96-868c-4473-97f9-df96a5469e76",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45b2be77-6d43-496c-87d8-f9d1659530cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c575a037-32d2-4149-a059-3afda9cb408a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0aa5fc8-06e8-406d-a242-bb1f70526d2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb5fe92b-cb64-4b84-8bf7-a279606dc7b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "872c5626-4960-4fdc-99cd-740606c16d3c",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7574d79e-5e58-45b5-a207-af05130ca9d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f4d4be7-4b87-4ac4-9e99-4bdb4bc37224"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3e66143-42d8-407a-b59e-35103da727e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f569a7d-2aaa-488b-a9dc-c28db1958157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c90babf-a6a0-45f1-b017-e3848770b193",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d60d4737-1e2b-4227-949c-b5e46162c157",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b3b79ff-32a9-4b29-8f37-84f285850294"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38b9ed7c-5d02-4e2a-bb4a-874353de4e06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1537cd33-0800-4f9e-aa80-9301b131864b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "957115cb-070b-45fe-8082-e258aefb3ea9",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a65caba-54b4-4a23-8efb-57643cad5dc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a965ae76-8401-456b-92f4-de9f0b96f128"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "300b3022-10bc-40b3-aa2b-7970cb275bca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ef705b8-915f-4621-b66a-b4cbedfbc00d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49076b86-f729-4314-a112-ff78a84ffd06",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e87e03b2-c6b1-45e0-84d3-5a01d3dc4c8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8be6cde9-a52b-48a4-a183-488d42bc874a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebc43f98-f128-4b83-84df-4da9cf316b85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f76a4ec-91a9-4d2b-90d4-90fa5548e21a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff5b396a-4700-47fc-a47e-6e108d21674c",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bdcd5dd-c045-4f97-a21a-504695241f4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7680364d-5d04-4da8-aea9-c6e85a8df183"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc337448-2c91-406a-89d6-6bc6a891fa06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cae130f-3da8-43cf-81fc-776d474e092b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efcedc98-4a04-4a5b-9bd3-1714c5fa11e3",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c610906-f31a-490d-b89c-42b54a0f7b50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c4f75f0-f643-495b-b2ac-530e3728523c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b36c1517-f5ce-47d5-9a13-b1b3577d00af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73fdf198-2f0f-4e00-94fc-185547a9a2d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3282fb78-a63f-4d74-aa10-cd18535d1e90",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ff908e7-157c-48fb-b2b2-082db3086563",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f4c9be5-71bf-40d9-9257-f0f4120b161f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38418e8c-e686-478e-aec6-86ccdd3dcd6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7055b375-806a-48b3-b491-044f90b0b269"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cad4f553-bdbf-49d6-a1fe-82b5e7ea99da",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2efe659-14a8-4cf0-b314-49fe3369ac02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a09fed7a-e112-4ee9-bc59-46842730699e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22d75583-03b7-444c-870c-b8c8ba232c6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e403ab0-eb12-42df-9d80-c259eca7144c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18904ec3-1a09-4195-b396-6b7a6d915f65",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6052f5d8-5289-4a93-be3b-7d20ba4cd689",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a16401e8-101f-4d47-b38b-09c6abafa580"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d527450b-c522-4642-b9bf-e4137e727a8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22ae610d-6534-453a-9e1f-783318f3d546"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b83b63f1-42d1-44e3-b8e8-760872f2c6df",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecfedd8a-5cb5-441c-94b6-94adbad70422",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da27c726-75a2-48bd-b428-10b64860d09e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad4856c7-f55d-4bd7-865b-0e07ce101356",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc30e719-d9f5-4f04-88ca-de6cb091d833"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8535b29d-2863-4a48-bf4a-e3da2ed8920a",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39f6128e-0f94-4900-88a0-e6cab0320083",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35286d04-d8c1-428a-9820-03a10aec8375"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b034b8a-bfe8-4188-9ab8-3d1a1578ff1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fe79760-ac56-4fc8-a125-20af70fa82a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0588685-718a-4244-9ed3-1a6f46f693b5",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d36620e2-defa-4f2f-8043-fb03c720ddb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27a7b569-80f3-43b7-b8f9-53b1619dd446"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d23cce29-83f6-45d7-a32d-d61c2b9fccb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f97b0f6a-33fc-4758-a768-acbdc597bec7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41ba0cc4-c724-4e2f-88ca-73dbf96ee926",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "796677fd-9ab1-4704-8840-78be20d2f7b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d757103c-d4bf-4be7-bb4a-da74f67f2481"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06d46178-e3e4-468d-8dcd-fb736f783199",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d41f8e1c-2be1-47e4-915c-792f22118646"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cdc58c4-5cc6-406b-b4ef-39a548c65e21",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "722efded-8b69-4dae-9f99-353487b80d90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65507741-90af-4786-8f0f-aa3b3876683a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80335a7b-736d-4da9-842e-05bef36ed67b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5065298a-df02-4b7f-9ec4-1fc09fc36abc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "473fb8f6-ac50-4585-8114-d5a273611288",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e1ffcbf-0f77-40af-8ee5-860fff554223",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29b108cc-17e9-41f7-a606-b5032af7867c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33ed7f80-937b-4e63-82ee-cb625238bd81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f625011-a91e-4258-8f8c-b60dc84e80f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "268ca063-6917-42a9-ab29-210f9064f4d9",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f702ec91-0f20-4866-a816-5cd4ed91b644",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f18710e-e6a0-48bc-9c77-ff68d637a03c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aeb5207-47bb-4133-8f88-6b0f9f2bb3ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db78bbae-0d42-46f8-98f3-672d6a731b56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0407f59d-1c85-4c9c-bed1-11e448a6d6b0",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b7d62ac-f0c6-45f3-b14d-244aec247bc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f6ffca3-06b7-4b23-a648-007d00da3fe7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e129fecf-e088-4126-8e06-3b25642c1862",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "717b7459-e6f8-49fb-9912-d4d18cfefcef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04505631-2267-4bf1-92d8-d626f516da64",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f680b963-1125-4140-98ee-42885041404e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25272631-63e9-4705-a7bd-1485bd7a320e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5cdea1a-6709-4b14-b767-fe3f5a738954",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec5965fa-eba6-4db8-b0fa-f196b185d90d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0981c978-e3c6-4582-8cb4-f38dcf61cd27",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bf7f0e4-77b6-4e49-a8b7-22a67a67c158",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e73f9d6f-557b-4890-aa2f-d49d2e2e2223"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f113d0de-7d1a-4a1b-9ad6-d3300dad2f6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9699e309-6675-4571-a3bc-f8899ab5640a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11bd99d5-f822-4576-b979-a2d7c5123e8b",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff78d33b-58b3-40fa-a067-b78d0b85977e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a88edc5-f68b-4468-886e-1d1e68af3f0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "700b6ebd-d1a2-4b5f-9863-19937dbe0574",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f0ca6e1-813e-4e5e-91fe-cdd2d4c5639f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "700b5fb3-c3a6-4928-b0a2-ff072f82d51f",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bef73a2f-7c52-4b55-b56a-b1c585112f27",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "479a7c4e-df63-4b22-a2e9-450993aca554"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b04c49c-e0d3-4ba2-91ea-8cebd142cd52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d72a43e-26b8-4d83-bd2c-b327abb7bde7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbbd6a22-b561-4608-96b0-f44cb389931f",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9134880-e0ea-4867-9e9c-2b84853101f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "baba9e06-db3d-4860-a973-453c1c1c7f60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7ca2863-2186-4034-8869-4d0f93facc78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c1d2f74-a2b9-4f81-8d19-b1984cb67d65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe0d2bb2-22f8-492a-ab15-d34a50c84ff5",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58b6daf8-a7f3-4bb1-bde5-c5c8312adc52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e39ff28-183d-4c41-b9af-27f1c5b051e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efcf36bc-98b8-4ad7-9dd6-1d0f10b1f425",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b1263e3-c54c-47d9-977c-5196586989b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da6f0aef-a4c6-44dd-807f-188a6e98c830",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d7be9dd-ab63-40ed-aa5b-d32dd8c6c648",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ef9e1ab-9177-450a-baad-ac866e8546bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20da421e-32a9-4e05-a6a1-e55ce76ed399",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3078d6db-c2a9-44e1-92b4-2dd04c8695c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f232fd3-3a4d-4eec-b58b-734dda41cfbc",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c08a5643-43fd-424a-b084-c386aed9b252",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5cb41e21-292f-41b2-9a84-101e37b60b0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c6d9b46-bcd8-4e64-b028-0556b50a6704",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5f5daca-b369-45de-8542-013055694927"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f3d4197-cb00-4cfb-84cb-b693a3514e18",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a36b101-1c7e-43fb-a339-30e80cb27c3b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f50eeee-1252-43b7-af1e-685129089b4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a539b7b-65db-4382-bca0-82e5a53c3ea7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e353e496-1c60-4291-9b76-393ce5b08c1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f25fcc97-ab49-4ba0-b0fa-208306bf5e6b",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be18c0c2-f5f0-436b-871e-2fe663788b06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c548e5a9-5105-4a58-a8f0-735497e113b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b0b9332-edfb-4b35-9fc8-2512f5e4a82c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f649054-2fc4-4093-8897-f6f85cf84cfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99c1f087-564d-4ed6-937d-5561ed5bf9f9",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb44e84c-de32-437d-94d3-84d775104b79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50e6168d-aa67-42d2-ad1c-80e3bcd5a5f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e8e6519-7fe4-43ee-b412-5ed87ebc2987",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72289532-d04a-4a47-8965-9bf63c4e49cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec93e306-4501-48e2-a6b9-0455ef2e9d0d",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db82361f-1dc9-4ff7-ae98-821b70517643",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca253c57-82e6-4c18-86ca-26c4717607fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33ada6f2-1ea9-42b7-985a-559f66cd7235",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5439a9b0-2746-4cd5-ac7e-40cadfb0829f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fc66de5-e752-4213-94b5-5a9d920796cf",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32c7ce32-9bc0-402d-b4b4-d48e5c799155",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c44fcf46-8bfa-49cb-8ef9-d2ab0619756e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b19cd2fd-eaf9-4dab-b70e-9544586fd129",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "095cba0b-411f-4429-86be-edaac23c8a92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5228ab84-b95f-4a1f-86b7-76bf9c543cbc",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7be4205-a2db-4d6f-8d59-71ac94e0a9d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf003390-6075-4002-b366-bbf495e8ad36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47b1a54a-dd7d-42a5-a376-bbb205c383f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e6beeb8-ebd1-42f5-8ab4-041f48a72dd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a96e4ac7-2bdf-4245-98c1-cc5c68686f09",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a84464d0-3662-4fea-b219-85ed67753c3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45bbaf8a-201f-4745-b262-c3814d0da28a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76ac49e2-3978-4722-b8ef-8548926f1054",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5145e6d-172f-4b03-aa6c-a08e8b1112e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ab2cd8b-ac5e-456e-9a9b-0f7efadb4f7f",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "658ce573-b59b-4ad9-868b-462b0726c7e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "745caba5-b2cb-4116-b136-382806f4b1ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eed6b3c1-ea7f-481f-89b7-0273ab61f4e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2862c200-c899-461f-acb3-9656a0426d05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38e19088-73d8-441f-aa4c-203c875ed524",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d1ea41d-80f2-44c3-b353-53072ac572ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d911e08b-6450-4879-b231-b41e1bda2588"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6f7630e-0145-467f-ad05-dc10228335c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cec9404-876e-42fa-bc25-1ead0e353362"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d75843b-2396-4dcb-a758-82e655c54010",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03058667-ce75-4855-a86b-2f75ae0c790e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "411bc53f-ebba-4231-99ba-5f4645cd701c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a40232e1-4515-49c6-a375-24b9a03f6e35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7214a397-5add-4cc0-861e-adb2ca1c4b47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca1c5e40-c5a5-4b69-8374-6149e5b9ed46",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60d15ef3-d3da-433c-a0b9-d2b6b829aec7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d6e588b-0214-4848-9ec3-2d39a5348c71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0b82d2a-6f10-4383-885e-7a3fdc9db568",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d1e3e72-2b4e-405d-9c43-4eee70534841"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5db8b427-1315-4485-9522-f880a87421cb",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "585fa9b7-8aa7-4dba-abfc-aac8518e9eaa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9247723-e712-409c-ab3a-0f8d2fbf252d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45962283-df74-4854-97b0-e6f382b0597c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "878db882-f47a-411a-8422-77b0db29a67f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b40791ef-3105-488c-b6f8-b90d882bae79",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9be4130-9a58-4782-abdd-82eae0150df9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41097750-3dbb-4412-b0df-1fc44aafa360"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ea11312-6b5c-41c8-9684-697674b52354",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "933dacdd-cb96-4321-9f44-751c2e85104d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "760d5641-a0ee-4982-b25c-8538f5ac0ce5",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "635cf15e-abb4-487f-8cbc-28da5ec5aeea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29edfbac-d249-423f-9f26-a0979c190c5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19b9002a-f5f7-4203-ae8e-2ab01108ee0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fd88e25-079d-4c36-8c0c-aa28e67ff9ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a45f7a5-1028-4114-9ae6-67afcd4fe912",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a8e94d1-5c1e-4380-a1e1-8c04d57458f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f6157b1-9394-418b-af6f-e931cb8bf64d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86fa40ad-228e-488b-9a18-87e3aab6a73a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2db1f7e-f6a7-47ca-b3b9-b40065d09827"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a57a47b3-e6a2-4f74-88ff-251079c7691e",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f8b7ef9-8bb3-4c50-a6ce-4c9935196b18",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ec31b49-6f67-444b-a563-4f99e244c5cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af39c245-5aa6-4677-a66f-63d91aa57e4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d54a2c2-8a6a-464a-8ecf-bc1d6c00ee3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a8047b6-95b4-4f2d-8247-cafa41339992",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64416f55-cfe0-4e0d-a0d0-5f790f93c76e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87ba9a2a-502a-45cb-8759-f5aa22100898"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e11f6fc8-c449-428b-8fe8-cfd053dd7bb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d43cf87-de8a-46f9-aef6-54bc2ba275cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80edfd5a-a684-4d15-b875-9542f0d79524",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54ad8489-3ac3-4546-9832-fe53480630a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ce39439-578d-4d1b-91ff-c9d512b0892c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecf345b4-7f02-4d7d-b72f-cfa12f7a0049",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4d2e706-8f2c-4256-af9a-8c5551697fc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d19454db-9505-4e40-a8be-8f443a77a56d",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83814dd1-6ec3-4d25-aec1-ed074c725cbe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad0dcf0d-2acd-4424-9954-f63fa5d3df2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98aa81c5-6c68-4617-8ed4-1e0b2c021201",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3758de1f-b227-4fd6-8a35-4600c8f69b01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13f2e1fb-0da4-413e-a9b9-214d97d0322b",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce028738-0ab7-454f-af0b-98fe1730db79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0362bae0-b3fc-413d-8cfc-09c54efba680"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b101dfaf-0818-4747-bb0e-a6a3febe9167",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59c4bf08-4548-4603-b86a-e6b55d15555e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e90b8ccb-0f05-4a0a-bedb-5365c951c849",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "275ebb70-4e4c-48f8-a1b6-7316a26fb204",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4031e5d7-be9b-4bfc-b39a-b64c8aaa7e4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cc27fc1-17ed-4792-acfc-f48b56df3b2e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fd7d379-e974-4220-8666-1d2aa7482190"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6be7dc1f-378c-4861-a1ba-92cb4824126d",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "879ff58e-228f-48b1-9eb6-9c44d31d0826",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5d0a2d4-64d2-4e47-9689-7a3c56a82e93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f277fa65-6ade-4759-ab2d-b53f8371b4af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5542959-1e24-411c-89c4-e83f007d514a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8dbda5e-6767-4592-9ba0-c8d1a763a77b",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08c7ada4-35fd-401a-afa8-915edef5b633",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34eb15af-b214-4b8a-845a-f844e9fa5e17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3061c9b0-f143-4daa-91cc-ca1ef9d4cd9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e78eecf-c034-4c23-9283-6d46e001d95e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b0c0e20-1e48-476b-a277-e8decdc80d56",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d5b689f-0175-456a-ba21-074dde41cbe6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b618d563-7027-4801-abf7-7133e893f5e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "534cded4-9199-465d-8e66-4545ad3a3316",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a7cf12b-1ce5-416c-b209-8d9d8e4d6450"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b643807b-e49b-4e53-82b5-03a8dc454adf",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ea19880-b145-4367-91fe-f1193c2cf743",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b28c3c0-35b2-4e59-8b2a-16170fb25f0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f755b90-941c-4b42-91c0-1639294d7648",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e13787d-a2c2-42c2-9013-3de84b02b52e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f85dcaf-3d0d-4b3f-80ba-e89886141474",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "334495dc-5a98-49f6-bf98-078ce4d9ac5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1a33cea-8405-4822-b22c-0dfb911a63ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87247f4e-34b7-49ff-9d23-894131636b45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c067f003-2857-420b-a43c-5f752126f459"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac98f72c-1a74-40ee-8499-4f76fe211923",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31aea40a-babd-4cd6-8dbc-8fe18467dcb9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60e4e028-f9e8-4fb5-b909-496478c47c4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04395aa9-b8a9-4ac7-974d-c25f2d10d405",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3006a4e8-3bc1-4dc9-9c50-06f0674d147f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bc43e68-b6e9-4bdc-998a-a5cb90584013",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2f0ccff-7b65-4352-b431-19d4cbe68ccc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07165d30-89de-452e-959c-86f9ed207c24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07a82e74-2f07-4c83-8e4d-0b3a4bd1f74e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cadfd241-e9d2-4065-8ef2-c79b839c75dd"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2401d0c3-cea5-4769-833e-d21398a8e01c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "df37b3f4-dae1-4efb-ace2-f92f21895024"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2c51bafa-9eb6-496d-8411-5364902d2429",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "84eec5dc-61e5-42d9-b90a-fa1462dbb60c"
                    }
                  }
                ]
              },
              {
                "id": "013cc665-b7cb-4744-af70-1cced3d7ca52",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0dae402a-a498-416e-877c-742529faa36d",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18418e8f-4860-4a4f-9fac-6514f07da93e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "8553ade7-5029-41d2-9d8f-99a88ce342eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27f1f2ec-a24a-44ca-a276-bd12991642ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b2902f1a-a516-45e7-b224-36b928c03391"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea8adb9e-357f-48e4-a320-b1c8f96ba224",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "384f65bb-3364-4582-aac9-1c302f746f62",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "0f8b89e5-5dd5-4ea4-b66a-744af02bb28d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8bbf18a-eeb5-4ffe-b4b5-0cf8d0ddc0f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "47736684-e2c1-4d9b-b276-c73563f825ff"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5c53301b-84ba-49ac-ae13-4425f68570e7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "05c7d7e8-34f3-473c-bd65-9190e03fe84f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3f5ce5fd-68bd-4de1-b8b8-a979fdb3d98a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7db19228-b14a-42d2-afb1-110b7b6ad962"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "00cfa054-d024-4d28-adda-6d0f1f016132",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4db2264c-bd5e-4c98-8be7-00007f7da36f",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "36738f57-6a09-43c5-8fd2-0af0cea460be",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "97da00c2-af96-479f-83b3-d5b35491322a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7219d830-50c0-4e2b-9bbd-6dbf80c2cdd3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0fa3d3ad-8e96-43a3-a4a7-bf5a73b75eb3"
                    }
                  }
                ]
              },
              {
                "id": "19288c8d-17b4-45aa-acf4-080efd7c977e",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bdbe24b1-8ce6-439f-ad5c-35bf6151afba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "108bd9c1-d7a1-45d7-8825-cf7577f0fd7b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bce1fa8c-3b4a-45bc-a81e-658528ec1c32",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "51f2ed4e-5ac1-4fcc-a689-b785793c8f8b"
                    }
                  }
                ]
              },
              {
                "id": "0dbf08bb-b18d-4ffe-a053-c5a272f89fac",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "89e48252-96c9-49c2-8dcd-39b9cfc41ee1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cdb6994f-c387-4d5f-ab82-5d195ec35eb1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "843374f1-ecc1-4b63-9ecf-1f587d71c416",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9937d985-e10f-489f-bb87-872e6e0ec948"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ddec391e-ee25-4e1e-a893-62a4f5ad2aee",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "d3375237-1a2a-413a-b7e9-b576336e6b95"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "85ab9d11-815c-41d2-baea-50a8fd21480d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d17003d7-227f-4358-990f-a98d28c4bb1d"
            }
          }
        ]
      },
      {
        "id": "eb778aa6-0447-4d26-9663-d07c5ee959f4",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "1ba55b22-0db8-4c8c-af87-e231c732bf5d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "231f8af4-64bf-4c19-8e13-645cfd07674a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "06d11c48-5dd0-4de7-87cc-9513b149e3f0",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7518b4da-a9b0-4606-b105-335c21171bff",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "1741e1a9-8a73-42a0-b95a-c450bb0329ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a7b8c22-788e-4fe2-ab8f-f6a0ca32ca52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "81b84cef-0024-4245-8c95-5f33a5c9c8cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f416408-a5f4-4622-9ad9-15eea830e18e",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fac9c10f-7e8d-491f-974a-368a64880307",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "2e589c43-8555-4421-bc95-45e14950c219"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83292a4f-3f31-48de-b4f9-11e16739be99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9cb100b1-8549-44b7-b1a7-b49b977659c4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6fd0ef7a-2258-432c-a7c9-7d5e4464fc6a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c33a8bee-1552-42b6-8294-b6d363ccecfc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "df1b2b2f-4dd7-44e4-99a2-d56efdf29bd6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1b19ee58-14a2-41e1-ad4f-e8272c010ddf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a8b7fefd-4fe5-4ca8-9d14-5a9ae6503f26",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "e560219c-0187-4f4e-8687-10f56d24dcf0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f8823f1e-0677-48e0-9ec9-6642ecfe5068",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "55f8444a-8eba-48ba-950b-0686a129da47"
            }
          }
        ]
      },
      {
        "id": "a30d184d-c588-48ac-b6c7-e834d9461d7b",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "fdeb47e5-f9f9-48d9-aa7f-243a0d5abb45",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c3b65b2e-5a3d-4cf8-a9bc-ff6d02edb3c1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d177028e-3d95-46fa-8dd7-d801eaa5821d",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1838628f-94a6-4328-9ec5-ee202c72d9b6",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "4dfcfab8-976f-46c9-977b-6786c426fe13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b8ac477-d691-4413-a69b-a232c49cc256",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8f35c640-41d1-4f5e-9841-7fc7b1fbc379"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a4d6dd2-8003-40a0-8b3c-1f52c88a7b91",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6741ba85-ac45-4cd9-b085-614058d02205",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f01bddef-2503-424e-8bf0-728986a9d7e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7823ee17-c75c-4b39-a062-02a3db76e722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2055d282-a054-4e42-8d20-2864eaf0ce0e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7a475b27-6c86-4e8f-aeae-5c9ad15bd5ab",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0cc0cca1-db05-4640-b509-aeb919b83648"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d32ef129-9cfa-4ade-a6af-a5731466ce15",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0915b04a-2d24-4a68-81d7-c29637f8d3b2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "34c80709-444c-4f3d-95fa-b071bab6c502",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "ac60eb46-c084-4c7f-8cc3-648d7fff2c08"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ca69784c-da9f-4c36-b4dd-0de74fed2184",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2e5cd553-7b15-4807-8f96-8efe46bc6736"
            }
          }
        ]
      },
      {
        "id": "95cefe4b-468a-4121-b93c-dab5edd883a0",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "2349d0bf-ff61-4b73-a393-bb6862afa5ca",
            "name": "Negative Testing",
            "item": [
              {
                "id": "520a8416-a93e-45eb-b13d-f8630eac0ae1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "367ae6bd-544f-4faf-978f-b667ff1de343",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96b4bdae-f961-445d-ba33-ac0615fe6d98",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "316bf808-74c9-4326-8c71-949bb9385f85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "744e0254-ce9c-4ee2-9956-67309a350be7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d3c50961-349b-4b5d-a674-827a0e40c3ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1835dd5-7941-45f5-9ff5-fee8c2bfc8f3",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b635805f-6a02-43b6-b980-7eddc3fd8aff",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c78760f4-2b86-46c1-86dc-cde86c62cac5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0db682c3-122e-4a81-a2ad-7b5df662a8e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cc220c9b-e9d2-463f-8047-2204c4431508"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b13b5475-f2e5-4441-b527-0ec5cdc87997",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a211d55c-896d-43bd-9696-700aae3eaa03"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7dc6aff0-b519-4a12-8706-850fc48e2a0c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9314fa24-4ca8-4f27-b5fe-c48e19d6a8ac"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5783b48a-858e-41f2-bde9-cb2847cb2f14",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "51f81492-cda3-4d3f-99b3-3a6c13e6ff53"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a3fca1c3-ec5a-41a2-ae88-6dce9410a318",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1288d0aa-8848-4f9f-86b5-5a0f8b579308"
            }
          }
        ]
      },
      {
        "id": "6b57a4a4-bd3c-4336-a3fc-9c9a5a45210f",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c166308c-7fb8-465d-89a4-d2f6bf448803",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b5bd8348-b4a5-44e2-b5b0-8c6ec39803cf",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "7f2365e9-78d3-4b5d-918e-6b5a6d7ed04e",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4d36aa57-0e82-43ab-9a89-c12a0384b55b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dfcdbc10-7984-45b5-b3cf-fb8e0c8e36c6",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 505,
        "pending": 0,
        "failed": 86
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 151.83076923076928,
      "responseMin": 18,
      "responseMax": 2145,
      "responseSd": 220.360112210115,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1667350485729,
      "completed": 1667350535836
    },
    "executions": [
      {
        "id": "3bffd64e-8aa2-4cf5-b607-3c6434c3ac38",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "c81871fd-09a9-42f9-bf35-e84c6721fea0",
          "httpRequestId": "c9a9cf57-108f-4d39-9d0d-e5710d6d6e96"
        },
        "item": {
          "id": "3bffd64e-8aa2-4cf5-b607-3c6434c3ac38",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "0f43db0d-9e97-48c5-8882-5bc34ac1deb1",
          "status": "OK",
          "code": 200,
          "responseTime": 110,
          "responseSize": 0
        }
      },
      {
        "id": "836afff5-c812-4c0f-8cfc-b23945b00f85",
        "cursor": {
          "ref": "9e13d073-de69-4ee2-8a44-ae1fe6120bce",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "533da268-18cd-41a4-b9a4-84b6e63e0c58"
        },
        "item": {
          "id": "836afff5-c812-4c0f-8cfc-b23945b00f85",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "13bcf16b-ebc4-4f91-8cc2-344f0b1022cb",
          "status": "OK",
          "code": 200,
          "responseTime": 18,
          "responseSize": 0
        }
      },
      {
        "id": "e2cf557c-9c90-41bc-9326-fe071a0d8167",
        "cursor": {
          "ref": "e725c1a4-9075-4831-86d4-075565f86c34",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "10ac0aa7-b79b-4a2e-841e-21558884a3d3"
        },
        "item": {
          "id": "e2cf557c-9c90-41bc-9326-fe071a0d8167",
          "name": "did_json"
        },
        "response": {
          "id": "191b4b38-2e65-42f7-bf91-363bcbdfb3c1",
          "status": "OK",
          "code": 200,
          "responseTime": 164,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20e2e9f9-7667-41a4-be31-1c873a18f065",
        "cursor": {
          "ref": "4b295ad8-6c98-4dde-af3e-983d30fb3250",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0db90742-b0ba-434a-a8e0-325b1c35f9ff"
        },
        "item": {
          "id": "20e2e9f9-7667-41a4-be31-1c873a18f065",
          "name": "did:invalid"
        },
        "response": {
          "id": "9c231ac1-2e97-49cc-a221-9c1e39c8fda0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20e2e9f9-7667-41a4-be31-1c873a18f065",
        "cursor": {
          "ref": "4b295ad8-6c98-4dde-af3e-983d30fb3250",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0db90742-b0ba-434a-a8e0-325b1c35f9ff"
        },
        "item": {
          "id": "20e2e9f9-7667-41a4-be31-1c873a18f065",
          "name": "did:invalid"
        },
        "response": {
          "id": "9c231ac1-2e97-49cc-a221-9c1e39c8fda0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "911054c1-fa05-4fa0-a83a-6e751810f11c",
        "cursor": {
          "ref": "7ff3d204-a242-4aa8-b176-91859c530f81",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "9a4000e8-77fe-4254-8b3e-3ba776f08c29"
        },
        "item": {
          "id": "911054c1-fa05-4fa0-a83a-6e751810f11c",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "bb91c055-412c-4423-8ccc-a2d86fe9a5d3",
          "status": "Not Found",
          "code": 404,
          "responseTime": 289,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4de372a5-efe6-4945-90dd-58093d1d0c75",
        "cursor": {
          "ref": "e39fcc15-3d3c-4cf2-b9fc-31eca581fa9d",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "ad0a98f0-3a8f-4b08-819a-095fe25bf991"
        },
        "item": {
          "id": "4de372a5-efe6-4945-90dd-58093d1d0c75",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "987d6647-6750-45aa-8de9-fe5d001f401c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 41,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ab7f133-6a79-4642-a26b-e8dc702022d1",
        "cursor": {
          "ref": "1ad0d5f8-9852-4afa-b8b5-a4ea237c6fc6",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "4fcc1c95-5802-4876-b15c-f300c7f592b6"
        },
        "item": {
          "id": "0ab7f133-6a79-4642-a26b-e8dc702022d1",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "c046b6d0-bdcb-4c23-a404-fb4a358f19d4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52d12ddd-e3ee-438f-a6b3-2cce97f50c9b",
        "cursor": {
          "ref": "3cbd1c74-1362-4795-ad0a-977c3186bac1",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "77738f21-03e8-415b-9290-cf98a56b5532"
        },
        "item": {
          "id": "52d12ddd-e3ee-438f-a6b3-2cce97f50c9b",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "3086464e-6893-42ca-8801-90f97f3b6573",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 49,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52d12ddd-e3ee-438f-a6b3-2cce97f50c9b",
        "cursor": {
          "ref": "3cbd1c74-1362-4795-ad0a-977c3186bac1",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "77738f21-03e8-415b-9290-cf98a56b5532"
        },
        "item": {
          "id": "52d12ddd-e3ee-438f-a6b3-2cce97f50c9b",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "3086464e-6893-42ca-8801-90f97f3b6573",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 49,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c90597d-3e55-4112-a503-79975e63bd3e",
        "cursor": {
          "ref": "dcfdcaa4-715f-41a7-a860-d1b866fab11a",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b2553cac-4df6-437a-b4a1-e9bb8df015ab"
        },
        "item": {
          "id": "4c90597d-3e55-4112-a503-79975e63bd3e",
          "name": "identifiers"
        },
        "response": {
          "id": "b14ada03-1a05-42ef-800a-f2a8c33305fa",
          "status": "OK",
          "code": 200,
          "responseTime": 291,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "054e8ce2-a4d7-4c73-9b1e-6ae6e5315909",
        "cursor": {
          "ref": "2e41ed79-de41-44af-a25a-c709cdccb028",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a5156226-68d5-44b7-9238-cb1739d9271a"
        },
        "item": {
          "id": "054e8ce2-a4d7-4c73-9b1e-6ae6e5315909",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "018de51d-178a-4a87-a9db-99b8d9ccb008",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "054e8ce2-a4d7-4c73-9b1e-6ae6e5315909",
        "cursor": {
          "ref": "2e41ed79-de41-44af-a25a-c709cdccb028",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a5156226-68d5-44b7-9238-cb1739d9271a"
        },
        "item": {
          "id": "054e8ce2-a4d7-4c73-9b1e-6ae6e5315909",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "018de51d-178a-4a87-a9db-99b8d9ccb008",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "557151a5-2ff1-4249-a467-b29582577483",
        "cursor": {
          "ref": "e37c54ee-213c-4504-9bd8-6a76714c4e50",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "a0f378ac-6d34-4c3a-b6eb-e26b9c15bf15"
        },
        "item": {
          "id": "557151a5-2ff1-4249-a467-b29582577483",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "5ba7509f-ac04-4efd-b5a6-006040e88400",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cad0df4f-bf98-448a-bf4d-3de6cfab4e78",
        "cursor": {
          "ref": "10fe42f6-f7a0-4836-95a7-64b8e708dfe1",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "09b9ecab-4201-4e38-9f21-bdd1e76404e6"
        },
        "item": {
          "id": "cad0df4f-bf98-448a-bf4d-3de6cfab4e78",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "d6a9fd85-189f-40d1-9b1c-6a9d0d4e0a48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acb29673-4a4d-4be9-92b4-1ed43d6b9e8a",
        "cursor": {
          "ref": "327b9be1-bd10-4d19-af35-733a6260c6e6",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "53656fb2-0c5d-4e12-8b70-68c1e49f8db5"
        },
        "item": {
          "id": "acb29673-4a4d-4be9-92b4-1ed43d6b9e8a",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "ab97c628-6599-4bce-97ad-a95470752b85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd4718cf-717c-4247-a94d-48834bab4acd",
        "cursor": {
          "ref": "32f0aa3b-48da-4bfa-8059-d6848afb3d2d",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "30690996-487a-4b9f-bd25-9eeb240a3a6f"
        },
        "item": {
          "id": "cd4718cf-717c-4247-a94d-48834bab4acd",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "e5051b71-a608-464e-9270-ef35a8d2e730",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91b558f8-c9e9-4f94-858a-133b0b487118",
        "cursor": {
          "ref": "bbc4b181-04ae-4c83-aa58-11a4f102fc00",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "acb9fe45-8eed-42ed-8a4f-abe0a70f04fc"
        },
        "item": {
          "id": "91b558f8-c9e9-4f94-858a-133b0b487118",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "1fcf5394-1869-4d6c-807d-ae95732c88fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df1cb52a-b5eb-414b-aaa3-32f29fc6b7a5",
        "cursor": {
          "ref": "18a32643-e225-425a-a1ef-f80789c549fe",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "0a4ce087-d152-4968-9b48-b5478bf1344b"
        },
        "item": {
          "id": "df1cb52a-b5eb-414b-aaa3-32f29fc6b7a5",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "aabbe474-d949-4757-8ed9-1284975f7a36",
          "status": "Created",
          "code": 201,
          "responseTime": 772,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "2f81505f-f2ed-45c1-a669-a5b23139272d",
        "cursor": {
          "ref": "e10bbc52-e1c1-4d6c-af65-454f1243f6a5",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "aa347316-c0c1-415c-bbf1-7d28c26dbdf0"
        },
        "item": {
          "id": "2f81505f-f2ed-45c1-a669-a5b23139272d",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "1e112f48-95ae-4ede-b1c7-2f02bb62ade8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94ab58b5-1806-4961-b14c-2031aaaa98bc",
        "cursor": {
          "ref": "c8e9a3e8-3735-4262-80ce-50a7793a6f87",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "da8ecf36-5590-458f-844b-1f1eceec8132"
        },
        "item": {
          "id": "94ab58b5-1806-4961-b14c-2031aaaa98bc",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "47a02fe2-c48f-49fd-a904-a0a2eb7fd7ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e3cf150-387b-4761-885b-e1cc5173578d",
        "cursor": {
          "ref": "270bcfbb-dc2f-401c-8155-ffb2ee5a9fd1",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "7e939944-fcda-4a2e-8d38-3df68ce870e7"
        },
        "item": {
          "id": "0e3cf150-387b-4761-885b-e1cc5173578d",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "4aa1e3d0-41ec-4028-9f0c-cd72af38a6b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85a0bc72-9670-46a8-a313-bf5be75176b2",
        "cursor": {
          "ref": "b47142ed-a63c-4fdc-bd0b-aeb93dbb3b63",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "47a00756-8588-4a5b-9bd5-0749b6a2de0f"
        },
        "item": {
          "id": "85a0bc72-9670-46a8-a313-bf5be75176b2",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "d5ec45c5-75fe-4297-952e-b12091b57151",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aed9297-eac8-43f0-888b-ecb0b32e92e9",
        "cursor": {
          "ref": "8aef9b48-1089-4a07-b955-cb4d148060b7",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "70bae02a-c278-4e4e-bbc7-7547684b62ff"
        },
        "item": {
          "id": "1aed9297-eac8-43f0-888b-ecb0b32e92e9",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "f5f2a7b5-81c6-491b-9456-d7ea1de0aa44",
          "status": "Created",
          "code": 201,
          "responseTime": 591,
          "responseSize": 584
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "2e75cc0f-f482-4821-920c-505aefcfd8e4",
        "cursor": {
          "ref": "63f424cc-bf76-4018-a542-207f1bb08d6e",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "7002685f-ab1c-4232-9bb6-f680ceac45c2"
        },
        "item": {
          "id": "2e75cc0f-f482-4821-920c-505aefcfd8e4",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "cf1c71be-2837-4229-bfcd-c21f2d773143",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f089e66-4184-457b-bef1-2c2604c1465e",
        "cursor": {
          "ref": "e9ede36f-4f73-40dc-b897-b18ebcc9c18e",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "dc996c31-3eb7-4738-b9d9-e35ab0bc5e7c"
        },
        "item": {
          "id": "8f089e66-4184-457b-bef1-2c2604c1465e",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "f63a7cc6-8058-45a0-9255-5bf522029c04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6582e8eb-918f-4344-badb-c6e833b4b7f1",
        "cursor": {
          "ref": "30337740-93ff-4a3e-a620-be3b8f5e87b3",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "e4a686ba-590d-436b-bb9c-e507da0285d8"
        },
        "item": {
          "id": "6582e8eb-918f-4344-badb-c6e833b4b7f1",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "121cfcce-e5eb-4500-a276-013a9654d870",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51843dd6-733e-49ad-9b21-24824d1c58ce",
        "cursor": {
          "ref": "3f12b9db-8d85-4e77-b3aa-422254035b04",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "a76a2b0a-6df4-4035-9b2c-02267e52541c"
        },
        "item": {
          "id": "51843dd6-733e-49ad-9b21-24824d1c58ce",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "7a939a05-ac4b-4189-9183-43a5f1c6b276",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "655db1d5-4643-4f5c-865b-72079d40d551",
        "cursor": {
          "ref": "8d500326-924f-4bd7-91f5-120ed298da6a",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "e1991284-b115-40ce-ad2a-05f3e0928bd2"
        },
        "item": {
          "id": "655db1d5-4643-4f5c-865b-72079d40d551",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "553be474-538d-4875-a584-7c459154fc91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 177,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c9d63cd-21c8-415f-9710-4b6f8df216ab",
        "cursor": {
          "ref": "017433c8-ef4e-49dc-98bc-60de02042673",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "19248850-2f49-46fe-8dc9-fae4e5644cba"
        },
        "item": {
          "id": "6c9d63cd-21c8-415f-9710-4b6f8df216ab",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "c4b6f248-cc56-49c4-a096-6125547a617d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db407e2d-7a89-4d2b-a538-4df1d451ee66",
        "cursor": {
          "ref": "6031f9c6-3f31-4648-946c-d3e9a37f726c",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "a4c3b9b6-3468-44c5-8134-878f6da6f637"
        },
        "item": {
          "id": "db407e2d-7a89-4d2b-a538-4df1d451ee66",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "ed17be2c-fdb4-4cfc-ae1c-85f9f90381d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a74da75a-8516-4118-9c79-a8e1556beb4c",
        "cursor": {
          "ref": "4aed3f41-18b3-4b36-8341-e76605fe3d59",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "92cb3259-b98d-4a64-909d-f10cc7080f3f"
        },
        "item": {
          "id": "a74da75a-8516-4118-9c79-a8e1556beb4c",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "b9134e6b-68c5-42fd-a229-44a5c3c75153",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40a7988c-832b-4f11-88c7-2aac1351b160",
        "cursor": {
          "ref": "07ea4473-1229-4b95-bf59-4b3f3ac880fe",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "6aa5baed-a677-4898-82d7-7048ef9d8424"
        },
        "item": {
          "id": "40a7988c-832b-4f11-88c7-2aac1351b160",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "3a0636d5-3946-4ea6-90e0-a76a3622676d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56b0c383-77f5-46ff-a90c-06801a695de7",
        "cursor": {
          "ref": "4bb916ab-e539-49c5-817a-025bf5637e0c",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "9b6cf35b-3148-4db4-92c6-e17b198ce449"
        },
        "item": {
          "id": "56b0c383-77f5-46ff-a90c-06801a695de7",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "ad5ffdda-62f5-4650-8a6a-0e621dbdab5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd13096f-c4d4-4e46-a3f9-fa8601121de9",
        "cursor": {
          "ref": "d4a90e0e-c9f1-40fd-b283-7d24bf221c44",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "e17ce544-9a8f-4e76-b2ff-68094a00ed35"
        },
        "item": {
          "id": "cd13096f-c4d4-4e46-a3f9-fa8601121de9",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "f1a5a5a7-91c7-43b7-8b89-252bf39be047",
          "status": "Created",
          "code": 201,
          "responseTime": 557,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "f1538a45-47df-410f-8517-2971f8e4848e",
        "cursor": {
          "ref": "eedbc567-9731-4fd4-b642-e458a028c96b",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "c50701b6-9417-4a00-a67f-8f81d62661f1"
        },
        "item": {
          "id": "f1538a45-47df-410f-8517-2971f8e4848e",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "52f9a85d-0802-406c-a779-b04d01f7c21c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 149,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "389c59a9-29f8-42d1-a9f7-f699b1e6b055",
        "cursor": {
          "ref": "2e6a75aa-3bba-4547-8c29-fbfa19cb0f03",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "4f5d1fc8-8c7b-447a-933c-6ec7b7d121fe"
        },
        "item": {
          "id": "389c59a9-29f8-42d1-a9f7-f699b1e6b055",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "241c7b61-055d-42a6-98a3-104672b13f45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95bb5db9-a9fe-44ff-9bf0-a77db9f998fd",
        "cursor": {
          "ref": "b26965d0-3a94-46c8-b77a-f7b7f7c9a651",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "ed20d89e-28b8-4597-8260-3b7745ab9008"
        },
        "item": {
          "id": "95bb5db9-a9fe-44ff-9bf0-a77db9f998fd",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "cc5fa3ae-8182-4e24-9870-d1154d92976d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95b5445d-2d0d-4893-9195-5faa3be9f6d9",
        "cursor": {
          "ref": "772c194f-9b28-49f9-8976-3b48a88c0265",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "0d489c8d-85b9-4c3d-8cdc-ec9db903b088"
        },
        "item": {
          "id": "95b5445d-2d0d-4893-9195-5faa3be9f6d9",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "3debc499-febc-47e8-a33a-65c098549ebb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a1821e2-7578-4e79-aebf-c1e7dbf18acd",
        "cursor": {
          "ref": "4f0f7087-9072-4442-bc70-fa50f4826a72",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "8eeba040-9bba-457f-8233-0158d9b4adaf"
        },
        "item": {
          "id": "2a1821e2-7578-4e79-aebf-c1e7dbf18acd",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "6546e65a-37c3-474e-83a3-ad8e4b0f5501",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "533654bd-f72f-48ba-9e02-9cdf24283203",
        "cursor": {
          "ref": "34060abe-6d41-48f3-979e-5e36a9eb7200",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "e0f619e4-dc9d-42e2-9126-bbe83211e5a7"
        },
        "item": {
          "id": "533654bd-f72f-48ba-9e02-9cdf24283203",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "7ab48005-44ae-4882-9d35-97fb7d4b85b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffda7bdd-e999-4e01-ae3f-6887e23b7a21",
        "cursor": {
          "ref": "1546718e-83cb-47a3-8d6f-0b311d8c6594",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "e018f218-cfc7-4980-b0bd-3c4b1ebd876a"
        },
        "item": {
          "id": "ffda7bdd-e999-4e01-ae3f-6887e23b7a21",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "474c42da-d330-4e7d-aa09-79b00f77e469",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8d7061e-024f-4d24-b13c-d740a62769e2",
        "cursor": {
          "ref": "adc0b825-25e5-4784-9d2e-53c10941fbeb",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "afb4cc30-0d45-4193-830e-b35f572d585d"
        },
        "item": {
          "id": "d8d7061e-024f-4d24-b13c-d740a62769e2",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "a235fdf8-168f-49c8-84f6-d5fbbb710cb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9559907a-c2d3-4aba-961c-2219ed80f201",
        "cursor": {
          "ref": "6462f6c2-eb9d-4f33-8981-de5534756515",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "90821c27-2d44-4327-bfe6-b65b0a166c64"
        },
        "item": {
          "id": "9559907a-c2d3-4aba-961c-2219ed80f201",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "e0c6ff1e-0ce6-44dd-b9fb-9c977558b071",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50f86b96-833e-4f65-a43c-3dd76917f891",
        "cursor": {
          "ref": "8719fb75-80eb-4e38-ba0e-27ba022b32bc",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "b0ce7b43-dd41-45d9-97d4-7f3a77961dd9"
        },
        "item": {
          "id": "50f86b96-833e-4f65-a43c-3dd76917f891",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "90f2f5cf-da1e-4243-a94f-5e5032cd7527",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6db7e58c-4721-4f9b-8c18-ab8ec2345610",
        "cursor": {
          "ref": "2b777cea-33d4-47b1-951b-5c1a82545801",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "05cdf5cf-357c-46a8-93bb-6d27790182ab"
        },
        "item": {
          "id": "6db7e58c-4721-4f9b-8c18-ab8ec2345610",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "068898ba-26c3-4ada-8faa-c63ae63f86da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7ac1e35-1d0b-4f1b-b514-d0fb5bf30c4f",
        "cursor": {
          "ref": "2b79f3fb-2f5f-42ad-9cf6-7ff4ba908fdc",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "75b37110-b8fb-4b0c-b13a-d6f0115e2b4a"
        },
        "item": {
          "id": "f7ac1e35-1d0b-4f1b-b514-d0fb5bf30c4f",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "266505cb-bf21-4c2e-b6b5-f88bceb3d2d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 138,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f42d2d1f-ad88-4d1d-b6dd-4e17e2cbd2ae",
        "cursor": {
          "ref": "123c38ac-7efa-4f23-a6f8-31688ebb77e3",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "10ace445-638d-40e9-a02e-7f2487476914"
        },
        "item": {
          "id": "f42d2d1f-ad88-4d1d-b6dd-4e17e2cbd2ae",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "12a8c1b9-bd20-4c53-b68d-b2fa2a769cc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 356,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "f06aa14e-2104-4d13-b87f-52c4febe6aba",
        "cursor": {
          "ref": "f5ad0475-ab5e-4d16-ab57-949c3263a958",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "2c4f9f06-aeb4-4d95-be6b-9834c9204af4"
        },
        "item": {
          "id": "f06aa14e-2104-4d13-b87f-52c4febe6aba",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "0ce9c9e2-4606-496e-bf5a-d16c0bc8217e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a67076e-be5d-4c4f-a0fa-2c6adca8a502",
        "cursor": {
          "ref": "ea69d3f2-4540-49e5-9e53-750ec4b4e7da",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "52ed3702-24ef-44ef-927b-8abf4149fdca"
        },
        "item": {
          "id": "6a67076e-be5d-4c4f-a0fa-2c6adca8a502",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "e3944c78-0227-4eff-a62b-327e1e9ec15a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0be10c02-1955-49cd-9251-356b45cacdfe",
        "cursor": {
          "ref": "c88db052-30c6-4f7f-910f-00c730ff0968",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "e9ce88ff-74d8-4ffb-9c57-6b9ecb199fd9"
        },
        "item": {
          "id": "0be10c02-1955-49cd-9251-356b45cacdfe",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "a08e1ed9-caf5-47b1-bbea-c5447d709355",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ecd1dd3-6cb8-4d79-91b6-c6e383d9fbb5",
        "cursor": {
          "ref": "af9f48b6-b402-48d0-bac5-9f1f9b8cf873",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "1a076638-eebe-4885-af5f-c1874f02c43d"
        },
        "item": {
          "id": "1ecd1dd3-6cb8-4d79-91b6-c6e383d9fbb5",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "bad24e5c-0977-4467-8157-dec3ad4135db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40189ec0-dd3a-47eb-8c23-ac2b2c442c92",
        "cursor": {
          "ref": "81d12fb8-5627-41f0-b92d-824fbc411da6",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "d4878b2e-9ae5-48e9-b3e9-42bf13b4f0d0"
        },
        "item": {
          "id": "40189ec0-dd3a-47eb-8c23-ac2b2c442c92",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "496fcb5c-4c8c-402c-be93-f239706a25dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98923149-cb76-4796-b2e5-963ea2050840",
        "cursor": {
          "ref": "c0d221cd-d615-4fdf-8467-1aa6d2d33fe6",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "dec7f2df-3ddd-4b87-9691-36e2480e153c"
        },
        "item": {
          "id": "98923149-cb76-4796-b2e5-963ea2050840",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "960058c8-03a4-4117-be57-f483eeb0d7d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67a9ddee-2c96-41f2-a016-595ac232f87f",
        "cursor": {
          "ref": "c5398606-dfb2-48ff-8089-b0f4e6fa9312",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "26c1cb2d-354c-4ca0-95f9-619abcb0a1c8"
        },
        "item": {
          "id": "67a9ddee-2c96-41f2-a016-595ac232f87f",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "84f0df36-e9d9-489a-bf0c-ed7f42ad7470",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 239,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "8caf4daa-cded-4294-a4b7-423f271fd4b0",
        "cursor": {
          "ref": "243e83d7-79ec-4324-bcf5-4148443f6c13",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "ef87e503-bc18-4325-9be3-9d0662384f31"
        },
        "item": {
          "id": "8caf4daa-cded-4294-a4b7-423f271fd4b0",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "f4c489bc-d228-4279-a530-8a8129504ac1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5117e32-f356-4ad2-885c-7870d4fc7fcc",
        "cursor": {
          "ref": "cb117586-7297-4012-8087-3a133897a5af",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "4238793d-2bf9-4056-9c17-96b78479cb19"
        },
        "item": {
          "id": "a5117e32-f356-4ad2-885c-7870d4fc7fcc",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "8fc1881a-1465-4ea1-a083-789cf3f9868f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bfc986d-8fd2-4a83-af5c-87af0d9f329e",
        "cursor": {
          "ref": "8f1fd0b9-e1be-4d27-b249-119d008cf7a4",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "8f0cc151-1c54-4af8-b7ba-268141bf0f35"
        },
        "item": {
          "id": "1bfc986d-8fd2-4a83-af5c-87af0d9f329e",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "7c0b27d1-670b-4889-9a07-7277eaf75153",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd43c313-7fe6-4a67-984a-4dbbc19e8c47",
        "cursor": {
          "ref": "3e5a2d36-1ba9-43d3-83e7-e3af0af0886e",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "42af9e1d-1778-411a-a2e5-fdcf49d55ce8"
        },
        "item": {
          "id": "dd43c313-7fe6-4a67-984a-4dbbc19e8c47",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "f9eff6be-2a66-4349-94a4-efbcd7785485",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1380077f-84bf-495e-bbd4-3360a72d426a",
        "cursor": {
          "ref": "2f5e84dd-134b-4e68-b751-37cd8b4e3cff",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "8f8ff437-4759-423e-9888-fc7e22b270b5"
        },
        "item": {
          "id": "1380077f-84bf-495e-bbd4-3360a72d426a",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "0f7f8c8e-7d84-46db-94c6-5cf40948ef39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 266,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b13ef42-30af-44aa-9e44-a2830168fa10",
        "cursor": {
          "ref": "36d01c7b-a8a8-4333-829f-a81c3dd765d6",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "597782ea-7f19-4d7b-bf96-7673cdd33e40"
        },
        "item": {
          "id": "4b13ef42-30af-44aa-9e44-a2830168fa10",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "96c7017c-f130-4d5c-9588-9bd17781d2ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c1e3f19-c4d2-48e3-adf5-eda9a5ba9632",
        "cursor": {
          "ref": "80435aa8-3ce3-4f77-acd2-f0d56683c6d0",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "06b4c69f-05c2-4dff-b7f8-e59bebe9cadf"
        },
        "item": {
          "id": "7c1e3f19-c4d2-48e3-adf5-eda9a5ba9632",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "27acbdff-1793-406d-9271-471703887865",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d42d59e-29a7-4cc0-8546-14ac3d536fe9",
        "cursor": {
          "ref": "197d5cb6-e4be-4882-af60-c1d6717c31b6",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "ae4284a9-dca8-4d62-b7f6-78d42b067bbd"
        },
        "item": {
          "id": "6d42d59e-29a7-4cc0-8546-14ac3d536fe9",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "c6886c5a-48aa-4aa1-8d1a-30317bf80346",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "540c2846-2403-48e3-b111-34035635912b",
        "cursor": {
          "ref": "e9af35e6-d97d-4010-a90e-1df8d2787397",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "f7ebd409-49f5-440b-9206-2f8b4e6ab1e3"
        },
        "item": {
          "id": "540c2846-2403-48e3-b111-34035635912b",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "5685241c-dcfb-4f69-a38f-9e7a7895f54b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "588b4796-3708-4be8-b158-6dd8b00f3d7b",
        "cursor": {
          "ref": "9c90cff0-2fc4-40fe-a997-fadeb3797526",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "23a858a1-6def-4950-8e10-29576fa047d5"
        },
        "item": {
          "id": "588b4796-3708-4be8-b158-6dd8b00f3d7b",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "5405eff3-2597-4f75-bc99-ece14570d9ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf55610d-50bb-4a11-a6ae-0a7efa54b93d",
        "cursor": {
          "ref": "d1ceb0a5-ffab-4095-be14-5009848ec147",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "90f5ac3e-6abb-4c04-8fd5-dda7167d5b13"
        },
        "item": {
          "id": "cf55610d-50bb-4a11-a6ae-0a7efa54b93d",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "11832813-811d-4dfa-a53a-46e1a5987c54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a357f71-cc53-4e0d-88ad-21ea1896c328",
        "cursor": {
          "ref": "4ce0e4e3-b9b0-484e-bb70-0c223bebef95",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "54358965-6e9f-41d1-87aa-64ca45dce5c3"
        },
        "item": {
          "id": "3a357f71-cc53-4e0d-88ad-21ea1896c328",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "fee4570b-b028-481a-ae77-bce0f1e41fcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "856e11c7-5b6e-450d-b0b3-925b8f9f8d1f",
        "cursor": {
          "ref": "225b4782-a45d-4531-8890-1d563df4277f",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "9874a597-3e8c-4069-8ec4-971312664a78"
        },
        "item": {
          "id": "856e11c7-5b6e-450d-b0b3-925b8f9f8d1f",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "d226efa9-7346-46cd-a483-4fc3836cc785",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d09b8e5f-cf43-4bea-9079-6a0ebfb5e16e",
        "cursor": {
          "ref": "a0e0d7a7-cc7b-4a45-a900-03f8dceb5e4e",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "9b80668f-2b72-4d5d-837e-69f7e85d8082"
        },
        "item": {
          "id": "d09b8e5f-cf43-4bea-9079-6a0ebfb5e16e",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "a19653e7-6c58-4b9e-b6ac-bd8d70b68f9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "769eece7-6a87-4935-b3ac-adbbb4ffd98e",
        "cursor": {
          "ref": "6a768b8a-30c8-4818-8147-717fab415649",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "f9230519-23cb-4179-8fea-03ea0eaf1472"
        },
        "item": {
          "id": "769eece7-6a87-4935-b3ac-adbbb4ffd98e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "6713e6c0-8e06-4e89-a953-8007b945ece1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7146588-2d4c-47ff-903f-a3c3db6942dd",
        "cursor": {
          "ref": "22cee4ff-333d-41be-9741-5e90941c9685",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "ac6ee4ee-55c8-4dd3-9733-40eb7d08119d"
        },
        "item": {
          "id": "a7146588-2d4c-47ff-903f-a3c3db6942dd",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "903528f3-6b49-421a-9fac-2bd011be628b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77b8e705-df1f-41ab-814e-6daf49cb35c6",
        "cursor": {
          "ref": "f1b9ae00-83d8-43b6-a95b-5aaa3a8a38c5",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "26b48513-e6e8-4da6-8859-5dd92954cd08"
        },
        "item": {
          "id": "77b8e705-df1f-41ab-814e-6daf49cb35c6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "1df00037-9003-4562-a4d9-8207f91da73d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 339,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc632858-0667-441b-81ba-7c704cb334e3",
        "cursor": {
          "ref": "1b224ad0-4335-4aaa-a6ee-0a8c89b04a6a",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "68826419-ac12-405f-baf9-af7639f491d2"
        },
        "item": {
          "id": "bc632858-0667-441b-81ba-7c704cb334e3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "83ecb6f2-d351-401c-9ea4-d5b8608c9307",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96160e9c-ecf0-4791-97f1-19461c142e94",
        "cursor": {
          "ref": "37e419a8-250f-416c-a84d-16b15ffa38cf",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "a80f69ee-07df-47d5-9617-06c4d8d03286"
        },
        "item": {
          "id": "96160e9c-ecf0-4791-97f1-19461c142e94",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "5c4d5eb1-2f38-44b0-906e-c5b4c8d38e36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "508f06de-e7bd-4ecb-933f-038f4f4d45c2",
        "cursor": {
          "ref": "414f1c08-9835-4cf5-b242-919154a406fe",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "82d15496-de76-4841-b787-ec4dfadef2a7"
        },
        "item": {
          "id": "508f06de-e7bd-4ecb-933f-038f4f4d45c2",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "819a28d8-d30c-48f2-918d-14bf46e1dd6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9efa839-a235-4ce0-9926-dca89450b431",
        "cursor": {
          "ref": "194f35fb-36d3-4c03-85c8-ad67221c9651",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "30cd60af-6375-4fa8-b5dc-ce5d479e2772"
        },
        "item": {
          "id": "a9efa839-a235-4ce0-9926-dca89450b431",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "8f6b88a4-45a3-4f5e-a87d-dd275d6d7b54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48980b3a-2dd8-443c-85b5-c0d11b15e98a",
        "cursor": {
          "ref": "10e81714-17d9-46d8-a101-c8e65067f3d9",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "57789a6a-e3f5-448b-9fbd-4f6e19dd03f7"
        },
        "item": {
          "id": "48980b3a-2dd8-443c-85b5-c0d11b15e98a",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "c9351582-9d05-4b3f-86e2-776f97aa7a04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4776bc5-1443-464f-82f1-710911790f40",
        "cursor": {
          "ref": "c3b6f412-e597-40e6-a0d4-a419a8c79435",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "0b5e75cb-d8c6-43cb-8d30-b4f13e832e37"
        },
        "item": {
          "id": "a4776bc5-1443-464f-82f1-710911790f40",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "477e1c12-b93a-47de-8eee-91e9ba94a94e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4b77dbd-e194-4939-a65c-e730ab675053",
        "cursor": {
          "ref": "23aa6a84-6b8b-40a4-9585-eedc6405a863",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "01547f21-5ed2-4812-9e31-a03b54000758"
        },
        "item": {
          "id": "b4b77dbd-e194-4939-a65c-e730ab675053",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "83367c3f-36cf-490e-86e3-412265b97fa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b109e55c-d468-4204-b64c-1e8159579499",
        "cursor": {
          "ref": "e9e7f851-ca71-445f-aca2-ab8ebe7955e9",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "0c5c2b0c-47fa-42c9-9ab2-d5bb0b9e2d46"
        },
        "item": {
          "id": "b109e55c-d468-4204-b64c-1e8159579499",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "8a0916a7-5615-45f0-8e32-c9a704d03bb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e869dd18-eaa8-4956-bde3-c0c94e8f8253",
        "cursor": {
          "ref": "a02251ed-fd87-4ec0-bd72-3cb6b29a8b76",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "bffaa77c-432a-4e8c-b6f4-3b3137b7ae64"
        },
        "item": {
          "id": "e869dd18-eaa8-4956-bde3-c0c94e8f8253",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "86ef4d5a-7fe4-4208-b145-0bcbc5b89f9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0322f860-2bed-40fb-b587-a993d09ecd1e",
        "cursor": {
          "ref": "c7b8c83c-abbb-4eb2-9b9e-a6eec8050fca",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "5131c570-5c48-4d67-b4af-16f7f1a584d8"
        },
        "item": {
          "id": "0322f860-2bed-40fb-b587-a993d09ecd1e",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "c1b22fcf-48b1-4fb3-bc8b-2be27fbb8776",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5083307c-8922-4b85-ac4b-f5a1975e27b5",
        "cursor": {
          "ref": "0569b173-441b-4d2b-8120-48235a991c6e",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "153140f6-82df-4a86-b651-7a596490634d"
        },
        "item": {
          "id": "5083307c-8922-4b85-ac4b-f5a1975e27b5",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "9a83db09-8211-4d91-b467-64ef4fc3ad6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "952d65c6-9676-42bb-8097-4996acb82599",
        "cursor": {
          "ref": "e251c792-1f38-4cd5-8ec3-a094f743ba98",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "dd463759-f0ce-4b4c-8226-44234ca8257f"
        },
        "item": {
          "id": "952d65c6-9676-42bb-8097-4996acb82599",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "eccd5f3e-a6ed-4ee5-8d34-fe32de3512f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da5a9a95-afb9-4418-8f5a-d786f4f38f0d",
        "cursor": {
          "ref": "8b684684-8cb3-4c2c-b8b2-000092715128",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "d9407eb6-20c1-452b-8fa8-8b1b7ac5fa60"
        },
        "item": {
          "id": "da5a9a95-afb9-4418-8f5a-d786f4f38f0d",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "a63afa70-9038-422c-9350-5fe477e07f83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb496a98-df43-4ad0-a8c2-752a7766e737",
        "cursor": {
          "ref": "ebbea439-f6e9-4aad-9e4f-9dcab85a0d3b",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "0060ed6c-2ae4-4d12-8ac2-75201f3c3a09"
        },
        "item": {
          "id": "bb496a98-df43-4ad0-a8c2-752a7766e737",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "18377811-9467-4e53-8c70-6b6817b4d566",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 570,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee0913a9-fadb-4bd4-a1c7-8d89081e9c18",
        "cursor": {
          "ref": "ada54f9f-bfb8-4912-b68b-57a74704c711",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "b56e6c39-8ab2-4986-bf0a-67b59c0ff38d"
        },
        "item": {
          "id": "ee0913a9-fadb-4bd4-a1c7-8d89081e9c18",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "6bea000e-55c0-4c49-880d-3916283010b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "489f1dee-f6a3-4494-b0be-abe2d0cbdd78",
        "cursor": {
          "ref": "60ea00ba-426d-4fa4-bea4-ab653dd51318",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "9f9f1032-259f-491b-bf44-9e3415dc9f7a"
        },
        "item": {
          "id": "489f1dee-f6a3-4494-b0be-abe2d0cbdd78",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "457f9cde-2567-464b-a390-35670e97f4a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dae2ff5a-cbf7-446c-97be-6367a31fcef9",
        "cursor": {
          "ref": "f5c7efd1-6a46-4f71-af58-e5613fc74e2a",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "a2632d2b-153f-4bae-a807-700dcb4b2d9f"
        },
        "item": {
          "id": "dae2ff5a-cbf7-446c-97be-6367a31fcef9",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "566b2d55-4bf8-4ce0-8ffc-2467f33c94d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cbfd968-449d-4328-9ad8-3beff6bca1d8",
        "cursor": {
          "ref": "18085721-93b1-4823-993a-27a5e34c66b2",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "fbc444c0-4237-4869-99a7-62fec73af818"
        },
        "item": {
          "id": "0cbfd968-449d-4328-9ad8-3beff6bca1d8",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "6c9673ce-0976-4b36-8c5f-4bd8f4da333f",
          "status": "Created",
          "code": 201,
          "responseTime": 604,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "3810f29f-5e86-49cf-9579-21db8b071bba",
        "cursor": {
          "ref": "1a7f25cc-8d5c-445a-9aec-c3dca7de02b0",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "b5b45fd5-803b-4711-b986-492e4087f97c"
        },
        "item": {
          "id": "3810f29f-5e86-49cf-9579-21db8b071bba",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "f30c743e-833e-4809-b517-ae52114af602",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b19cc435-f25f-41d2-a7a0-2a1ce656d51f",
        "cursor": {
          "ref": "a39a4929-6aa0-460f-968f-75cf5dec71ea",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "8cee75a4-98d3-4545-abe3-cfea57cf56cd"
        },
        "item": {
          "id": "b19cc435-f25f-41d2-a7a0-2a1ce656d51f",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "f1277788-169f-494c-96be-8933005a5f39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db988030-210a-4a8f-93a8-649da3ab3687",
        "cursor": {
          "ref": "1b1b2a2b-537b-4222-82b9-5a0467a926fc",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "42b81b6e-3473-4f6d-af57-ab8b173edb31"
        },
        "item": {
          "id": "db988030-210a-4a8f-93a8-649da3ab3687",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "4d897dae-b459-4056-ad20-52b79f7aa009",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 145,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81c5af0c-196c-4b39-8393-1d529e391ceb",
        "cursor": {
          "ref": "0aa7252e-c8e3-4750-bc80-2035a52b99b9",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "e5c7b897-b247-4edf-bccd-84ec080f89bf"
        },
        "item": {
          "id": "81c5af0c-196c-4b39-8393-1d529e391ceb",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "10d6c0b0-e372-4e06-9f51-a0f44765175c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf20b9da-395d-43d3-9c82-717e29366cba",
        "cursor": {
          "ref": "fcf4d543-0b30-4136-8808-a87fbe1cbc82",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "41f0d7fb-b348-4454-a527-6983bd7aa1cc"
        },
        "item": {
          "id": "cf20b9da-395d-43d3-9c82-717e29366cba",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "a787b44d-7595-467a-aafa-95c21634caf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb9eded3-fa2b-422f-b810-0abe7003af2d",
        "cursor": {
          "ref": "02587947-9ab4-4f8c-aa28-2f7a5739abcf",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "4b5f1c21-72ec-41ec-ae48-398391c43d98"
        },
        "item": {
          "id": "eb9eded3-fa2b-422f-b810-0abe7003af2d",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "8985ede3-272d-4021-807a-b6066e4ff3d9",
          "status": "Created",
          "code": 201,
          "responseTime": 581,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "fa668cad-e0ac-475f-a6f5-6176d5883e63",
        "cursor": {
          "ref": "34fff01d-68d2-472c-8e2c-b2f77addc7a0",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "e4879b99-266a-4fdd-afc7-f456fdd568f3"
        },
        "item": {
          "id": "fa668cad-e0ac-475f-a6f5-6176d5883e63",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "bf0ef7a6-8ba4-4004-807d-5859064e02ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "734d8a78-1e8d-41d2-acd9-268f55c4c188",
        "cursor": {
          "ref": "6c194b53-510c-480a-ae08-242d15584778",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "470472aa-f6ca-4cb6-a004-4d57e6aab0df"
        },
        "item": {
          "id": "734d8a78-1e8d-41d2-acd9-268f55c4c188",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "54ef7d94-9c3d-4b4b-a832-e82917f3e05c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27315e6a-5eb8-47cb-9661-aa506f9ebb9d",
        "cursor": {
          "ref": "7b95d0f9-da65-49ee-afab-77ad44256322",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "218871de-6e21-441e-be9e-e5af83f4ee50"
        },
        "item": {
          "id": "27315e6a-5eb8-47cb-9661-aa506f9ebb9d",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "dfbf8d00-1d09-469d-b3c6-c0a3462505fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8c20673-8ad8-412e-bd96-ac3192440bd4",
        "cursor": {
          "ref": "d3607bd8-da98-4ccf-acf2-ffc48b432056",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "8d7d2e04-41b8-4afe-bd4c-b5d23b8f9712"
        },
        "item": {
          "id": "e8c20673-8ad8-412e-bd96-ac3192440bd4",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "452cb194-52d3-4906-956e-c2774d4e414a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04e756c9-3e2e-4c5d-be53-36263da75524",
        "cursor": {
          "ref": "4f4b97a3-5754-468b-9caf-c4b34a51ee89",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "0b92bc39-c613-4b82-bd3e-502a447a4a74"
        },
        "item": {
          "id": "04e756c9-3e2e-4c5d-be53-36263da75524",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "c41c92fc-62f5-454a-aeba-16fc67f9289a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61f42a10-0112-42f4-a12e-43b9de33960b",
        "cursor": {
          "ref": "33a19f9b-f756-42de-a9bb-15c72583c1fd",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "679ff52e-cb7c-4d2b-92c5-1007924010fb"
        },
        "item": {
          "id": "61f42a10-0112-42f4-a12e-43b9de33960b",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "057709f3-7b6b-4a8d-8416-9a179d735144",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40efafea-de47-44e7-9388-d9dea1a1109f",
        "cursor": {
          "ref": "b0bb1073-72d3-461d-a2e7-274c8fb9daf7",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "81e8eb05-9b6a-4fec-9e20-56619094058a"
        },
        "item": {
          "id": "40efafea-de47-44e7-9388-d9dea1a1109f",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "04b5c50e-1741-458b-a1e8-51f16eb05ace",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 238,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13ce6d33-f3cb-49d2-b784-fc75542ded52",
        "cursor": {
          "ref": "01c2be25-2c85-49a8-8815-ca1aa25b8541",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "79a7bdc8-f123-47c7-ad9e-51be96710533"
        },
        "item": {
          "id": "13ce6d33-f3cb-49d2-b784-fc75542ded52",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "04807ed7-ff09-4173-b0e3-f2dc35c2cdb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a94f54e-68f1-4462-bb0a-dc6e453f823c",
        "cursor": {
          "ref": "213bb3b3-5f1a-48c9-952f-5e5b135da132",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "55947ab0-6186-44fd-a002-c7911c3e76a1"
        },
        "item": {
          "id": "1a94f54e-68f1-4462-bb0a-dc6e453f823c",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "e3fa4fee-32a6-4a49-8139-647dedb92b7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "2d8cf27d-9234-4638-a8f2-f6ca0482412d",
        "cursor": {
          "ref": "d1d06c06-b776-4401-9077-df882dddc6e7",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "ee69931b-87cb-4d6f-8b47-66f44c0b7db7"
        },
        "item": {
          "id": "2d8cf27d-9234-4638-a8f2-f6ca0482412d",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "52219416-b92f-4ad5-901f-621cf4589bad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 152,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "115757b2-6245-4d4d-81be-2527829b10ae",
        "cursor": {
          "ref": "854dafc4-8749-4abb-bcd5-e12cfad9ff94",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "599dd30c-5773-4185-9a89-5d2847254ae4"
        },
        "item": {
          "id": "115757b2-6245-4d4d-81be-2527829b10ae",
          "name": "credentials_issue"
        },
        "response": {
          "id": "11f4026b-ad10-4324-80e9-d2cc6a86820b",
          "status": "Created",
          "code": 201,
          "responseTime": 638,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "3838dcb7-cb8e-4028-86fd-fdfa0c81dc9f",
        "cursor": {
          "ref": "1f472db6-5fc5-4779-9078-5a248b664bc8",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "b876095f-4c4f-4e6d-8f15-3a6a5c1e0a60"
        },
        "item": {
          "id": "3838dcb7-cb8e-4028-86fd-fdfa0c81dc9f",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "92fd5436-e966-45d6-a50b-a20197bfa070",
          "status": "Created",
          "code": 201,
          "responseTime": 787,
          "responseSize": 591
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "328f8c9d-8663-42df-9572-ca13f0bf37d5",
        "cursor": {
          "ref": "70d3dd28-b794-4547-a16e-b86a6d5fc49e",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "0599b179-6f3b-4bc5-8e8b-7d47cd059d02"
        },
        "item": {
          "id": "328f8c9d-8663-42df-9572-ca13f0bf37d5",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "87e46641-2e4e-4ebd-89a0-1f1f27930128",
          "status": "Created",
          "code": 201,
          "responseTime": 733,
          "responseSize": 537
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "eac5145c-3745-40d1-904a-57f9a9b829be",
        "cursor": {
          "ref": "c15e1c8f-f672-47fa-9a7a-ee5b294ff4b4",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "9df5c8bc-28e4-4122-b37e-69bc4fc84e16"
        },
        "item": {
          "id": "eac5145c-3745-40d1-904a-57f9a9b829be",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "12002b62-a449-4e42-ad15-3a20d3db4573",
          "status": "Created",
          "code": 201,
          "responseTime": 626,
          "responseSize": 560
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "daf90f94-2d29-4755-a35b-0641df0c4826",
        "cursor": {
          "ref": "f9731993-1558-43e5-b9f5-deecf5eaa6d3",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "02ce8f72-ec31-4e64-bf33-91c5abb3daa0"
        },
        "item": {
          "id": "daf90f94-2d29-4755-a35b-0641df0c4826",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "1d49bd98-f9b7-497d-9321-2dec5eb25bbe",
          "status": "Created",
          "code": 201,
          "responseTime": 610,
          "responseSize": 528
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cf2e5e2-bd7b-4358-83f6-57117923fc4a",
        "cursor": {
          "ref": "1be9365a-2943-4f22-8fc8-db00827a3330",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "c5e6c14b-cdb6-4695-a0d6-382ffa6f3794"
        },
        "item": {
          "id": "0cf2e5e2-bd7b-4358-83f6-57117923fc4a",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "84bb899e-c83b-4348-b374-d23ffb5064ae",
          "status": "Created",
          "code": 201,
          "responseTime": 604,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f58ff03-ab39-4859-af92-4950d445d39b",
        "cursor": {
          "ref": "f5cc7600-2cd9-4f08-9c9c-1844edc4e44a",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "46414abb-fec2-4524-8443-0641a0ffabfd"
        },
        "item": {
          "id": "0f58ff03-ab39-4859-af92-4950d445d39b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "55debc40-3b76-4c0c-9677-25f626fa5387",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "0f58ff03-ab39-4859-af92-4950d445d39b",
        "cursor": {
          "ref": "f5cc7600-2cd9-4f08-9c9c-1844edc4e44a",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "46414abb-fec2-4524-8443-0641a0ffabfd"
        },
        "item": {
          "id": "0f58ff03-ab39-4859-af92-4950d445d39b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "55debc40-3b76-4c0c-9677-25f626fa5387",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "db599740-d9c5-47b5-b69a-2f0d29cb8c35",
        "cursor": {
          "ref": "f9408154-0527-471f-af4e-3ccbed6d29bc",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "8e776498-1585-4f2f-bb24-ba938a7d506d"
        },
        "item": {
          "id": "db599740-d9c5-47b5-b69a-2f0d29cb8c35",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "fcd7fc8e-d130-4f22-957f-63ee57116549",
          "status": "OK",
          "code": 200,
          "responseTime": 50,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "9bd7c0e5-4f5e-4236-9993-e2f6df0696de",
        "cursor": {
          "ref": "d2b03bfc-c505-4fd3-bf53-03134b9923e2",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "ab69436d-7387-4742-9c94-8ded565b7296"
        },
        "item": {
          "id": "9bd7c0e5-4f5e-4236-9993-e2f6df0696de",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "2e22d88e-a28d-4195-9e12-7b1c9f33ae5e",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "9ddb0a66-2186-4c88-bde5-6d8e0ac3c311",
        "cursor": {
          "ref": "fe755ea4-59df-4410-9356-c7d216e4f131",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "dbf4de0e-8fb3-4823-a21c-3949c26cc841"
        },
        "item": {
          "id": "9ddb0a66-2186-4c88-bde5-6d8e0ac3c311",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "1a312482-baa1-4214-bd57-0f796a66f109",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "cefe05bd-aa9c-41f5-9be7-9a70b6922d0f",
        "cursor": {
          "ref": "a20b9b9b-7dca-4e6d-9e10-a91e4cdbb443",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "82d576ce-bece-427c-be4f-7defd316e8af"
        },
        "item": {
          "id": "cefe05bd-aa9c-41f5-9be7-9a70b6922d0f",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "c65bd69a-b724-4c52-ab2e-6021d4075633",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "b8469dda-a817-4e8a-8495-ab4b22803002",
        "cursor": {
          "ref": "ca741da0-3383-4a44-9977-de988f7894fa",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "53530023-3cf6-4ded-a8c2-422e72098ad3"
        },
        "item": {
          "id": "b8469dda-a817-4e8a-8495-ab4b22803002",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "0469d75d-c73e-4141-b10d-022908e38b04",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "a27476ce-8b78-47d3-9306-f2fdc8c4f4a4",
        "cursor": {
          "ref": "fb31f6c6-9092-4840-91b3-b4762c4ad5e9",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "b240eb8a-7c18-4174-a70e-d9f9745983ea"
        },
        "item": {
          "id": "a27476ce-8b78-47d3-9306-f2fdc8c4f4a4",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "11da029a-d7d6-4711-a93d-3210aa27878d",
          "status": "OK",
          "code": 200,
          "responseTime": 58,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "90557718-ffdf-440b-b31d-aab8db3673fb",
        "cursor": {
          "ref": "117f61b8-cdfb-45ae-9440-c52e0984dd19",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "bccd6ef0-73b6-46b9-b8b3-80bc6c6ea667"
        },
        "item": {
          "id": "90557718-ffdf-440b-b31d-aab8db3673fb",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "755af2c4-3bfd-432a-9a66-09cb34ceb902",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "75fd868e-6656-4fbe-985b-cf2c6976bc20",
        "cursor": {
          "ref": "f55ea7aa-1aad-4b6b-92f8-99a91a8fb15b",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "8928736e-20f2-4f0a-8c58-f3acf997a469"
        },
        "item": {
          "id": "75fd868e-6656-4fbe-985b-cf2c6976bc20",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "84c9861b-9b4a-48aa-bf2e-86406e4082c3",
          "status": "OK",
          "code": 200,
          "responseTime": 62,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "5544720a-be08-4c82-832a-234db9b3d58e",
        "cursor": {
          "ref": "986a46ef-5848-4ddc-802b-a99d60af45e7",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "07bea45a-a5c9-4242-858d-220c3755376d"
        },
        "item": {
          "id": "5544720a-be08-4c82-832a-234db9b3d58e",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "47292be9-5e48-405f-9a2b-03ee2c409023",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "7ec8a8cb-6305-402e-b076-eb8adcfa48d7",
        "cursor": {
          "ref": "e7d56e96-b5e5-4acb-9054-244a4d90669e",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "8f6d7c74-8ac2-477a-9b68-aca76fae0950"
        },
        "item": {
          "id": "7ec8a8cb-6305-402e-b076-eb8adcfa48d7",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "64cb47f9-041e-4e49-a62a-d7e73ec0ae67",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "2879534a-cad3-401b-89e8-d21f4a6ed7a3",
        "cursor": {
          "ref": "ae92c5f8-0b00-4de9-a026-b1185b052412",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "42749eba-c62b-460f-8c47-95bd397b617b"
        },
        "item": {
          "id": "2879534a-cad3-401b-89e8-d21f4a6ed7a3",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "bb296430-7f6b-4102-8366-f86bd5dc38a3",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "4c71849c-a00a-414d-847c-43800b3d7294",
        "cursor": {
          "ref": "aacb60df-52d7-40a0-a629-dca3d9461e3f",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "e6947021-5e51-4582-87bf-67c70ac3e592"
        },
        "item": {
          "id": "4c71849c-a00a-414d-847c-43800b3d7294",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "9650ebac-6cc0-4a82-8580-d28af13f1ec8",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "8e47f04f-c0a0-468f-ab6c-cbba5f6f3e14",
        "cursor": {
          "ref": "78767573-d40c-4b6c-86e5-115c42e37385",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "2947d36f-36cb-42d1-8af0-91cb3b890d67"
        },
        "item": {
          "id": "8e47f04f-c0a0-468f-ab6c-cbba5f6f3e14",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "48dba3e8-fd75-4318-8714-baec9f07eeed",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "7eedff25-a851-4b7e-89c0-21eab20a1984",
        "cursor": {
          "ref": "0b7ffaba-a31a-449d-9c4b-7f1b68ab6686",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "e3bb0dba-ae9d-46f0-97a1-974077ea5535"
        },
        "item": {
          "id": "7eedff25-a851-4b7e-89c0-21eab20a1984",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "c1908615-716f-496c-999c-84942795824c",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "8923c987-6c0f-41e2-b3d4-303ade6d4f46",
        "cursor": {
          "ref": "0e12375d-d36a-4051-9267-b7d11ed9211f",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "3b4636d3-501a-4d90-acf3-eae4a7f62948"
        },
        "item": {
          "id": "8923c987-6c0f-41e2-b3d4-303ade6d4f46",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "00251ceb-917c-41bf-a30d-4ce01c56e0e2",
          "status": "OK",
          "code": 200,
          "responseTime": 46,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "0d703107-6bec-4790-ae9c-3612f689eb20",
        "cursor": {
          "ref": "33d50a97-a92f-4951-aa9d-4700b019de9b",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "cf234e59-928a-4a57-b147-bea21e4fd434"
        },
        "item": {
          "id": "0d703107-6bec-4790-ae9c-3612f689eb20",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "2ba889f1-aac4-4454-bc10-89fcc1c665a2",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "e728a080-8f6c-43ea-b5df-15f21ad655ee",
        "cursor": {
          "ref": "224a85a3-9d16-4454-b258-ffbaf44b49f5",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "02d1be48-9c73-43ba-85fe-8ae5ad6546b9"
        },
        "item": {
          "id": "e728a080-8f6c-43ea-b5df-15f21ad655ee",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "cebc61d9-bf28-43bd-b749-e661e0e76835",
          "status": "OK",
          "code": 200,
          "responseTime": 58,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "899f3079-3c59-412c-9fa0-840c18479805",
        "cursor": {
          "ref": "8fd665a6-1e4d-4eee-b46c-dc26a1761e11",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "a351495c-707d-4a4e-b091-12a9552868e3"
        },
        "item": {
          "id": "899f3079-3c59-412c-9fa0-840c18479805",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "311ecc87-c730-4c1c-b3a6-3bb5437737d5",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "3538dad3-a0a4-4a77-9ba4-9609e615d1d4",
        "cursor": {
          "ref": "909672dc-1240-4d11-8475-b4994664aec8",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "e4cd2ad5-fd80-4558-ba5a-2d7002ff69ff"
        },
        "item": {
          "id": "3538dad3-a0a4-4a77-9ba4-9609e615d1d4",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "3808ddf5-4054-471b-8b63-c0313cf1953d",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "e5ee4b29-4f67-43a8-ac7a-7493fdafcf25",
        "cursor": {
          "ref": "3abb56df-b438-447a-beeb-1aab1533a8df",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "d9f7fe1d-6d56-407b-9267-1c07dafa171f"
        },
        "item": {
          "id": "e5ee4b29-4f67-43a8-ac7a-7493fdafcf25",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "b79f7798-b5b8-4eec-a450-f07f3bfb0be9",
          "status": "OK",
          "code": 200,
          "responseTime": 50,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "83675242-790e-4a32-a6bf-36daca0838dd",
        "cursor": {
          "ref": "827d0bc2-e25f-4d38-815b-625a47069b60",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "2f50386b-9279-49ef-ae7e-27c74e0a184f"
        },
        "item": {
          "id": "83675242-790e-4a32-a6bf-36daca0838dd",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "b5632cce-7743-432f-a1e4-db61ec5da662",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "ff41943f-d34e-4a89-bd4b-a80dca34e238",
        "cursor": {
          "ref": "682ec25d-cf0c-4157-a1f3-570be16d1149",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "fddeac60-570f-4041-8455-ca8fb5d7c6fd"
        },
        "item": {
          "id": "ff41943f-d34e-4a89-bd4b-a80dca34e238",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "08a34f35-c52a-42e6-a58c-1ad7b637e0ac",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "cdbf152b-3afa-4a27-b2ec-dfd5e40b8d05",
        "cursor": {
          "ref": "8b16a9c6-a106-4c7d-b409-9676ccc151cf",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "a237e8bb-a971-4e10-b87e-eba295a5bca6"
        },
        "item": {
          "id": "cdbf152b-3afa-4a27-b2ec-dfd5e40b8d05",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "7afd7eb6-1599-46c2-91b9-084bfbcd4699",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "2b8f5840-da6b-44a2-a9a1-f644107c299c",
        "cursor": {
          "ref": "514de126-9ae8-4103-8dfb-a26235f247ef",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "eb97d5b7-9c6e-470b-a9d7-801515c6c29c"
        },
        "item": {
          "id": "2b8f5840-da6b-44a2-a9a1-f644107c299c",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "db1083de-513d-4870-a812-8776c8e4715b",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "389333a3-34a9-442f-a013-8f4e3b0eb2b0",
        "cursor": {
          "ref": "68065af0-8712-4ab8-aaa2-312bd4b905df",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "4a8dd4ce-572f-4369-a3bc-91804165f200"
        },
        "item": {
          "id": "389333a3-34a9-442f-a013-8f4e3b0eb2b0",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "1b2c2a30-2553-4169-9650-74029f2400fa",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "80f89a13-6644-4215-996b-683d4ae6b6cc",
        "cursor": {
          "ref": "1463946d-112f-4837-b5dc-34454332dd96",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "4f3f6fcc-ded8-4dc8-8b3a-2bc22b30c20a"
        },
        "item": {
          "id": "80f89a13-6644-4215-996b-683d4ae6b6cc",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "692ac0c7-444a-4dfb-9b7f-18da24812c53",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "bb09c303-7df6-4369-9ce7-65da46e25309",
        "cursor": {
          "ref": "6ccafb5e-ef86-4ce7-9829-19d69516efde",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "3906db47-5642-4f85-90ac-46890e6c4deb"
        },
        "item": {
          "id": "bb09c303-7df6-4369-9ce7-65da46e25309",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "904c8798-0872-4110-bba4-5466eeaab4c3",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "b2df5492-b6b2-4ec3-a08e-11c8197521aa",
        "cursor": {
          "ref": "4f4d1c06-01aa-42c0-8edf-bdd270abab39",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "c4ed977a-baef-4997-a01d-26a664ff1366"
        },
        "item": {
          "id": "b2df5492-b6b2-4ec3-a08e-11c8197521aa",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "eb95e355-7cec-48f2-a006-1b3494a784a0",
          "status": "OK",
          "code": 200,
          "responseTime": 50,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "6f8a02a2-db28-4462-b2e1-e2abe577ceaa",
        "cursor": {
          "ref": "9e73e642-8909-4b08-8589-c240072cfb9e",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "9c834e8b-8f7d-4f34-b5ef-8fb11b5fa7e8"
        },
        "item": {
          "id": "6f8a02a2-db28-4462-b2e1-e2abe577ceaa",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "084744fd-9fc7-479a-a068-53b214a2a2ba",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "72e400a5-7408-430a-81e4-deb4596bbc5d",
        "cursor": {
          "ref": "40f30a17-b9f0-4028-8a0e-27b72b4ac3d5",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "dcd7c2de-2d89-47b1-bcee-cf4651b9e2d6"
        },
        "item": {
          "id": "72e400a5-7408-430a-81e4-deb4596bbc5d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "590d2bc8-2a1f-4686-8ec3-9861e70ae72e",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "01531b28-0d80-40f4-93e5-845e07e74e91",
        "cursor": {
          "ref": "ed422094-81e1-4969-97fd-00e3af092f00",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "12b63eb9-df86-41ef-98eb-9293572fcc8c"
        },
        "item": {
          "id": "01531b28-0d80-40f4-93e5-845e07e74e91",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "e33026f5-e9b0-4f94-bdbe-45f76f69a199",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "6b089a23-7462-4e16-a5c5-1d976ef59411",
        "cursor": {
          "ref": "fbde96ec-e4bf-4ea2-a4fa-2366c384a32c",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "0b6d6aa6-194c-4732-a152-9002e4f230dd"
        },
        "item": {
          "id": "6b089a23-7462-4e16-a5c5-1d976ef59411",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "6bebeda9-86fb-41a1-8587-0817c3640f83",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1149f39-841a-4924-aa11-ae5a0b40b0a5",
        "cursor": {
          "ref": "90a2183d-1885-445e-89e0-6b046266ce6b",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "92da9b86-d2d5-4025-b64a-294b9474ca5e"
        },
        "item": {
          "id": "e1149f39-841a-4924-aa11-ae5a0b40b0a5",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "245f2b0f-841c-441f-9116-38738fdf0b09",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 39,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6aa5ba1-aeaa-4113-bb1c-135890cd4750",
        "cursor": {
          "ref": "714a0a7d-7077-4a3a-9493-246d2be6c4b8",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "ebf63d02-6349-4a10-9754-9c62265cda38"
        },
        "item": {
          "id": "a6aa5ba1-aeaa-4113-bb1c-135890cd4750",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "dd0d867a-e85f-45bb-b3b0-47360b2f462f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6aa5ba1-aeaa-4113-bb1c-135890cd4750",
        "cursor": {
          "ref": "714a0a7d-7077-4a3a-9493-246d2be6c4b8",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "ebf63d02-6349-4a10-9754-9c62265cda38"
        },
        "item": {
          "id": "a6aa5ba1-aeaa-4113-bb1c-135890cd4750",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "dd0d867a-e85f-45bb-b3b0-47360b2f462f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d980300-745f-4422-ae2b-d9e16f77c89d",
        "cursor": {
          "ref": "81163509-af38-45ee-a9a3-773bf614e038",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "cd2fecea-b54c-4820-95ee-b692579895e3"
        },
        "item": {
          "id": "8d980300-745f-4422-ae2b-d9e16f77c89d",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "ffab98b6-235e-4c5e-babb-92c9225b3fd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "297e620c-8f02-4370-a51d-ea40c30b3414",
        "cursor": {
          "ref": "408b5845-72c5-4f89-b8e9-0d8ff8c179ad",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "50ad6dc4-7973-4703-ad80-4e1157fac379"
        },
        "item": {
          "id": "297e620c-8f02-4370-a51d-ea40c30b3414",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "0d7db65f-08be-4206-b44f-373d7cb55f30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64f14eba-86c7-49fd-8aa8-6ccb05feb2ef",
        "cursor": {
          "ref": "dcdddbdc-492c-4d39-938c-4daf0134f8ce",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "02a25964-0f22-407c-8dc8-d5ce41290d20"
        },
        "item": {
          "id": "64f14eba-86c7-49fd-8aa8-6ccb05feb2ef",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "fda9136c-06e5-41df-9c8b-666413394738",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dde935c0-3692-4072-b1ee-ccd7c9aa02b0",
        "cursor": {
          "ref": "7ab1b7b8-3d4f-492b-98b5-c859f417da37",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "c5da99e8-497b-4c72-962b-638a983d9abd"
        },
        "item": {
          "id": "dde935c0-3692-4072-b1ee-ccd7c9aa02b0",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "ab702c27-d169-40e9-825b-5280fa8e8d06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0ddffd7-640c-422b-a14e-b13010048d09",
        "cursor": {
          "ref": "1957f334-d65f-45f9-8400-0de01920d218",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "34bcf225-2fcd-4967-b965-4f8974472391"
        },
        "item": {
          "id": "b0ddffd7-640c-422b-a14e-b13010048d09",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "c5b239d9-5752-4b86-bd10-aded8b93adf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf1ffb1e-b7e5-4dca-9b78-a269568d86ba",
        "cursor": {
          "ref": "372df673-a4fc-48fa-baa8-5319cb5306cd",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "ff8c3ccb-dbe6-43b6-b3af-6bc9907e5dba"
        },
        "item": {
          "id": "cf1ffb1e-b7e5-4dca-9b78-a269568d86ba",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "9ffe16c9-b9f7-4e35-bf77-84e6fa65fd1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 713,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8ac8367-54df-45a8-9709-a75033442ff3",
        "cursor": {
          "ref": "250cb730-5947-4186-9066-820cbd99c2cb",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "240ad506-95a1-4649-8488-535cb499918a"
        },
        "item": {
          "id": "f8ac8367-54df-45a8-9709-a75033442ff3",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "02cf64dc-3c90-4480-ab8e-ec12f8308483",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9db0bb9f-18ef-4562-b885-90c0cf982e31",
        "cursor": {
          "ref": "32c91c36-53e1-45bd-8f2a-f574252ea4ca",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "e9a8e860-b30a-4cda-aed2-88f5f68919fc"
        },
        "item": {
          "id": "9db0bb9f-18ef-4562-b885-90c0cf982e31",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "d5002978-1594-4ef8-af78-fd6cd7243d05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a80f8f69-05b1-49c9-9fae-9e173e19d118",
        "cursor": {
          "ref": "c504ff20-06b8-4ce2-af72-67aa296d25d3",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "aa30414c-f917-4ef8-aca3-dfea65fa1ae7"
        },
        "item": {
          "id": "a80f8f69-05b1-49c9-9fae-9e173e19d118",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "592bfcba-fc53-4a27-9351-6b10323650ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38fac015-b88e-40b4-9939-e70f8a481b00",
        "cursor": {
          "ref": "a53c48b4-e45c-4513-8d47-2b73aa6b792b",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "472e7491-a743-4bb7-9bb0-875765e96072"
        },
        "item": {
          "id": "38fac015-b88e-40b4-9939-e70f8a481b00",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "a8ee62b9-a697-4f87-9b12-a110dc031479",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e8d6902-e3bf-4398-8928-ec53554adb2d",
        "cursor": {
          "ref": "0b73c68c-e69c-410f-b51a-21f595c6f5f4",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "c1fc0434-646b-47e2-bbb9-75de67fff0da"
        },
        "item": {
          "id": "0e8d6902-e3bf-4398-8928-ec53554adb2d",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "0a21e174-5601-48fd-a7b7-c32183a900a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fae4ec2-dddb-407c-a7b2-bb9d22d59820",
        "cursor": {
          "ref": "8d667465-221f-4f71-b1b0-3807ff1f2c68",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "d7f10858-b467-4127-bdca-de9ae0e3811b"
        },
        "item": {
          "id": "6fae4ec2-dddb-407c-a7b2-bb9d22d59820",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "a0cbd17a-4b7c-4e9f-abea-fbe4a0a13308",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10be7542-fd49-4302-b0e2-7395b43e886d",
        "cursor": {
          "ref": "189111bf-9bb8-45aa-87d2-01bbbe34c992",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "3f7334d3-32be-4c97-9c05-bebf21bdd6ee"
        },
        "item": {
          "id": "10be7542-fd49-4302-b0e2-7395b43e886d",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "4b6be6ee-c012-436f-b37d-f7fd46e2433e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ea72b2d-e7bf-460a-896e-2f6e94e94baf",
        "cursor": {
          "ref": "3618f102-37d8-46c6-9101-fed7a87d4f30",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "e35351ea-506e-42fb-b6aa-56c9490002b5"
        },
        "item": {
          "id": "2ea72b2d-e7bf-460a-896e-2f6e94e94baf",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "25019f19-8f6a-4932-af09-0a30c22e1570",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0b2abe3-6c56-484a-b8a9-7b380d3502b6",
        "cursor": {
          "ref": "abb28a28-a9fa-42a0-bc1b-b9b4b8e2f1ed",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "8fe9d535-9134-47a6-b51c-e82977069767"
        },
        "item": {
          "id": "d0b2abe3-6c56-484a-b8a9-7b380d3502b6",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "13d3c365-7507-4248-8095-4a1ba6cc243a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aaf34af-88ec-4a57-907e-660283c66891",
        "cursor": {
          "ref": "1b9938ee-c83c-410d-8aad-0710dd01779e",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "74a6e515-b34c-4a79-ac82-ef5e28044269"
        },
        "item": {
          "id": "5aaf34af-88ec-4a57-907e-660283c66891",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "475e6af6-9c42-4a01-9bee-f830564b5816",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "706d761e-8e19-4d41-a639-c5840b533fe2",
        "cursor": {
          "ref": "cd52c206-9294-47cb-8191-1b0e12e69edb",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "57b37f87-20d7-43c9-83a6-9da567a7290e"
        },
        "item": {
          "id": "706d761e-8e19-4d41-a639-c5840b533fe2",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "be8b90bf-fca8-4c0f-8a84-b1219ad50ef0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 490,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0332c282-0f97-4141-a088-7fec52e97152",
        "cursor": {
          "ref": "a00aab14-e2d0-4255-a51c-e22168342e1c",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "a9405d1b-d50f-4356-b001-58ac59694d91"
        },
        "item": {
          "id": "0332c282-0f97-4141-a088-7fec52e97152",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "f7e29043-6057-4a4a-9efe-b068dd7d29f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 549,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "504c099b-b82a-4837-b69f-3be8bf523f61",
        "cursor": {
          "ref": "55a8dd18-f741-4961-b3dc-97a3e8f1d3c6",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "8dc67deb-858e-4e55-8bce-2218f48b01e4"
        },
        "item": {
          "id": "504c099b-b82a-4837-b69f-3be8bf523f61",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "eb3027c1-d1e9-4c1a-a64d-2e95e3536ae9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 277,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e0d40f8-0950-4aaa-8146-fa910dc92260",
        "cursor": {
          "ref": "bfef79e4-7d86-46ef-bac4-9e517073fb1b",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "6e1d0ec7-2c18-41b2-9128-373e2a25b6b9"
        },
        "item": {
          "id": "1e0d40f8-0950-4aaa-8146-fa910dc92260",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "e7cce5de-36ca-43a7-bd5a-3abc172b46c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 375,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf161f11-0c07-4040-ba1d-4a3cae1f0fb2",
        "cursor": {
          "ref": "a676c3b0-3b31-4c76-8acf-d2fe494105bd",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "8ac02f18-b659-42fd-8d1c-483df18114fd"
        },
        "item": {
          "id": "bf161f11-0c07-4040-ba1d-4a3cae1f0fb2",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "a061de65-1417-419e-8be2-ef6cfc27d78e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 426,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98ea5bcb-90b6-46e3-b09e-61d31e4a0985",
        "cursor": {
          "ref": "a9f19bc6-eb53-4391-ba10-7ab6e7d9dc64",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "f4249d81-4eab-483c-b02f-7a2f991bd0d7"
        },
        "item": {
          "id": "98ea5bcb-90b6-46e3-b09e-61d31e4a0985",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "bea69180-3a07-4690-8dfd-ca4a09b6f687",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 318,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38bc9057-6f7e-457b-bf48-a6b1b969735c",
        "cursor": {
          "ref": "2b6a1e62-1a42-4724-b03c-736eebefac81",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "5287704a-0a01-43b3-b2fa-2a26be7c3824"
        },
        "item": {
          "id": "38bc9057-6f7e-457b-bf48-a6b1b969735c",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "d963d6e6-014c-4fe1-909c-c9385aa37760",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2084699c-283d-409e-9fa3-9fbef212e908",
        "cursor": {
          "ref": "3dfbbb98-bcec-4da5-a361-0bc0775f4d17",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "2a5a47cd-02c5-4c91-8871-b8a740ed4067"
        },
        "item": {
          "id": "2084699c-283d-409e-9fa3-9fbef212e908",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "c3d39b72-0bc5-4d0a-85c7-744728551ab7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "732a9004-005e-4b44-bb77-830fc3256629",
        "cursor": {
          "ref": "02dc4a55-b9fa-4f01-ab11-8cca4db9f500",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "76b38ded-39e5-4648-8c95-7ede8c570557"
        },
        "item": {
          "id": "732a9004-005e-4b44-bb77-830fc3256629",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "79e6f6c3-d106-48dc-9103-739cb93eb9a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 513,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59aa3ed6-0e9c-4cd9-a487-eee80b5c4e4d",
        "cursor": {
          "ref": "f8e08c21-b1b7-470e-9eef-95a8c4812f16",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "68c3c81d-8b32-440d-a01c-d33eb9dcc420"
        },
        "item": {
          "id": "59aa3ed6-0e9c-4cd9-a487-eee80b5c4e4d",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "ffbb810d-2456-4d5f-9930-ff4489286689",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d4ebfa0-cab8-469b-9937-a3576f96707f",
        "cursor": {
          "ref": "539286ea-2b03-40f7-8309-3a66bf63bfcf",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "db0aded1-10f1-4fcd-8930-a62466547e9c"
        },
        "item": {
          "id": "2d4ebfa0-cab8-469b-9937-a3576f96707f",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "9b11579e-dbb9-4045-bb17-a05818f0e9cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8367682d-d6c9-4329-9013-d42773f0d44b",
        "cursor": {
          "ref": "2b3a7047-b2b4-4c5a-9a2f-ab04f505c017",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "45a2b749-92bc-4a5a-9899-2c9e9b88bcd9"
        },
        "item": {
          "id": "8367682d-d6c9-4329-9013-d42773f0d44b",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "5c568e33-0a08-4a2f-a0d3-48c2f832f1fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 403,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c287ed26-1ee9-4333-8c49-5cacd7f07a2d",
        "cursor": {
          "ref": "2c275cb8-df9f-49c8-8fe6-42f8bfa9c32c",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "45403468-d13f-49a8-a5b2-09441318bf52"
        },
        "item": {
          "id": "c287ed26-1ee9-4333-8c49-5cacd7f07a2d",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "75c28362-726e-4f66-b7bf-b077dd567aed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "045cf3cf-23cc-4d37-9bf5-1bce8154c985",
        "cursor": {
          "ref": "0d9eba8d-67dc-4262-aa2a-6dabdc6e0126",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "75105e1b-e13e-4d09-b76b-3a6f3b0a82fc"
        },
        "item": {
          "id": "045cf3cf-23cc-4d37-9bf5-1bce8154c985",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "f01bd561-748d-4c43-8dc3-56c0bf2effdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b1e3c02-66b3-448f-a1cb-c5b18ea652fd",
        "cursor": {
          "ref": "9d5214ad-8178-46dc-8b5d-c14de59a7376",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "c6ed8f8d-091b-49db-940e-7aa6df9f256d"
        },
        "item": {
          "id": "8b1e3c02-66b3-448f-a1cb-c5b18ea652fd",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "e336f6a2-9811-444f-b98f-7bbe41286322",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bedc85d-3513-44dc-8b5c-a9e5e6cf6538",
        "cursor": {
          "ref": "3df8dbf0-6f73-4382-8376-4ca9a2659ec1",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "6c7e5e74-e4c4-41a5-80b1-71ded54f4b51"
        },
        "item": {
          "id": "2bedc85d-3513-44dc-8b5c-a9e5e6cf6538",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "4ae25af8-6c2f-48a5-8535-34d10f40ce17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 697,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a26256bb-10d3-47bc-b886-397ff37a6dcf",
        "cursor": {
          "ref": "50291b74-0bbd-4757-b6f3-9866e4e6453c",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "c5c27be4-d2e2-4d0e-b976-e0ec796ce9eb"
        },
        "item": {
          "id": "a26256bb-10d3-47bc-b886-397ff37a6dcf",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "d7ad55fa-8af8-40b4-9c81-488f920c07f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58964acd-d6c8-4edd-a824-927172deb597",
        "cursor": {
          "ref": "2079ea6d-2efc-4eeb-ad7f-389cf20eda5b",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "13fd4e2e-c265-41f1-82ab-4a48a2f4641c"
        },
        "item": {
          "id": "58964acd-d6c8-4edd-a824-927172deb597",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "feca340c-333a-49eb-b31d-5f61b7f2a503",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 420,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb48a59c-f5bd-4d12-a78a-83f1361785c4",
        "cursor": {
          "ref": "f2541275-9de7-4c0b-bbb2-8a98baa60883",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "32515eb4-678c-4bec-8cac-4dacda535946"
        },
        "item": {
          "id": "fb48a59c-f5bd-4d12-a78a-83f1361785c4",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "0a5a4277-3289-4a03-9e9b-a25339196e59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 274,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac0e0535-e810-406b-a628-d53c159b5c07",
        "cursor": {
          "ref": "961ae4db-f0d3-4090-9c97-33efe943f139",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "7bb8a59f-2190-4212-b5d3-afb85f8c416b"
        },
        "item": {
          "id": "ac0e0535-e810-406b-a628-d53c159b5c07",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "f901ffcd-7136-412d-8c7c-a6b865a710eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 641,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d71119e-d7b4-4e63-abb8-a41c1a7155b0",
        "cursor": {
          "ref": "ef54df14-9587-4b22-81cd-c604dbc954f3",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "1ebcb6ef-41c4-4a67-8fe8-c0d32280a2d9"
        },
        "item": {
          "id": "3d71119e-d7b4-4e63-abb8-a41c1a7155b0",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "94447efe-5c8c-48db-baf1-766e4251ba1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 338,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0439e4f0-2727-4b08-9afd-2faf1470aa84",
        "cursor": {
          "ref": "e5579cb0-3b08-4e5d-ae9b-5d8dc6a4ccd8",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "e315df61-1a34-49c1-bf43-6bf083c4bef6"
        },
        "item": {
          "id": "0439e4f0-2727-4b08-9afd-2faf1470aa84",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "effd498f-b6c7-456b-b845-6f8e8e796302",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 381,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efe88437-75ff-4f8b-bcfe-ce9c15868734",
        "cursor": {
          "ref": "7234eae4-e2c1-4b1a-91df-0db533977f8b",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "9eb0eb6a-58f7-4cff-82cd-43ba0cf7522e"
        },
        "item": {
          "id": "efe88437-75ff-4f8b-bcfe-ce9c15868734",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "f13a2682-d9f2-428f-9e43-0ba3a898c595",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 313,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a67002d6-8d04-47fe-8a31-ac662a8a2937",
        "cursor": {
          "ref": "8c779a0c-0cf5-4f60-81e1-350ccaab8fd7",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "d67ba278-5f21-4987-85ca-44df3c2d02ff"
        },
        "item": {
          "id": "a67002d6-8d04-47fe-8a31-ac662a8a2937",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "b7ace3b4-b94b-422f-9fdf-37d5c9793734",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 299,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "820cf795-3067-4484-b980-8ed883bc264e",
        "cursor": {
          "ref": "c69951c2-50e2-457c-aaeb-bd530f0e6a9f",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "6ce7b93f-a048-41b6-ad8b-3fa25076a89e"
        },
        "item": {
          "id": "820cf795-3067-4484-b980-8ed883bc264e",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "6fd04c65-312c-40ab-a48c-757b16fcb544",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 359,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90d697b8-7ee5-43a7-aac1-375148b922c7",
        "cursor": {
          "ref": "f40a2b25-ecd9-4866-a0ce-fbc32ffa46d9",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "473d91e3-af28-44f2-bbad-3ddf9550ceed"
        },
        "item": {
          "id": "90d697b8-7ee5-43a7-aac1-375148b922c7",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "025d85b4-911f-4f3e-bdd1-12af23cdd5a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 433,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d3c4f96-868c-4473-97f9-df96a5469e76",
        "cursor": {
          "ref": "30405c21-380c-401b-a2fd-0c594352ea37",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "a050c595-6d65-49c2-b879-a99a906adc42"
        },
        "item": {
          "id": "3d3c4f96-868c-4473-97f9-df96a5469e76",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "af8a7185-23ac-4376-9837-f4846cd86cf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 308,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "872c5626-4960-4fdc-99cd-740606c16d3c",
        "cursor": {
          "ref": "ca458d36-0408-4332-9aa1-4d457af76060",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "17511fe7-51f8-4ac4-b9de-d77642271ae7"
        },
        "item": {
          "id": "872c5626-4960-4fdc-99cd-740606c16d3c",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "921e44d8-6b58-45be-a7ec-6934d312126c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 321,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c90babf-a6a0-45f1-b017-e3848770b193",
        "cursor": {
          "ref": "6d2a51d0-bacb-468c-ae37-c6f814277d79",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "988d8dfb-c6a1-41c1-a8f2-7bbbbfc58406"
        },
        "item": {
          "id": "7c90babf-a6a0-45f1-b017-e3848770b193",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "723571f0-5a4e-44d2-87f2-9b041a4291a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 471,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "957115cb-070b-45fe-8082-e258aefb3ea9",
        "cursor": {
          "ref": "f1992c51-541f-48ff-8152-298c079b7bf3",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "c2108b45-1256-4d9e-afbc-dc1063585a68"
        },
        "item": {
          "id": "957115cb-070b-45fe-8082-e258aefb3ea9",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "25722468-3938-4343-a980-bbea2cd83e03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 424,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49076b86-f729-4314-a112-ff78a84ffd06",
        "cursor": {
          "ref": "c3cb3853-4a2a-4b00-bab5-10f7339d31e7",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "196d7672-d8e1-4a31-9786-095a3f97d2ba"
        },
        "item": {
          "id": "49076b86-f729-4314-a112-ff78a84ffd06",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "7e2af7d8-8efc-4765-bd2a-05925a055d6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 339,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff5b396a-4700-47fc-a47e-6e108d21674c",
        "cursor": {
          "ref": "a063100f-7586-406a-84f8-96b0faf3097a",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "54107d82-f3a0-40d1-b8d5-5c8fe6f69c77"
        },
        "item": {
          "id": "ff5b396a-4700-47fc-a47e-6e108d21674c",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "42edd606-13e2-4493-b5f2-74d027bcce94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 471,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efcedc98-4a04-4a5b-9bd3-1714c5fa11e3",
        "cursor": {
          "ref": "ecce207f-41a3-4773-808d-46ac95ec31eb",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "ab115873-d8f4-453d-832d-5c169743313c"
        },
        "item": {
          "id": "efcedc98-4a04-4a5b-9bd3-1714c5fa11e3",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "31365ac5-3019-4016-aa08-59dd5bc5ad62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 276,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3282fb78-a63f-4d74-aa10-cd18535d1e90",
        "cursor": {
          "ref": "2024d099-2bc5-4767-b70c-a42bd8b200a0",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "3c9132e2-f7e5-429b-9ba6-1feba459e97c"
        },
        "item": {
          "id": "3282fb78-a63f-4d74-aa10-cd18535d1e90",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "8ba035b8-84fb-4037-9aa5-9962b5c61c20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 309,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cad4f553-bdbf-49d6-a1fe-82b5e7ea99da",
        "cursor": {
          "ref": "17827852-9ff8-4c96-bb57-1fca6476ff3e",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "42787223-d7bc-4dc3-baba-e8842b25af0b"
        },
        "item": {
          "id": "cad4f553-bdbf-49d6-a1fe-82b5e7ea99da",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "9a9d4819-2bbe-4ad3-ac37-a884811e3d59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 298,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18904ec3-1a09-4195-b396-6b7a6d915f65",
        "cursor": {
          "ref": "b268543a-29cd-43b3-b552-7ced14ce8ba1",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "c881561d-1d33-4179-9c0b-288d942c7a00"
        },
        "item": {
          "id": "18904ec3-1a09-4195-b396-6b7a6d915f65",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "985ba048-a1f6-4f5a-a641-001ef239d0e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 552,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b83b63f1-42d1-44e3-b8e8-760872f2c6df",
        "cursor": {
          "ref": "57614874-3f82-4428-a6db-bc09a3158f17",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "ed32793f-cb2a-4c89-9a81-88d9751b5b61"
        },
        "item": {
          "id": "b83b63f1-42d1-44e3-b8e8-760872f2c6df",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "d534ec69-f748-4eb6-98b3-f33efcb1b791",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8535b29d-2863-4a48-bf4a-e3da2ed8920a",
        "cursor": {
          "ref": "6229f0f9-d8bb-4eea-a83a-d58c96dddc7a",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "67c5b6c5-e66d-4fe7-989f-181bc69d817b"
        },
        "item": {
          "id": "8535b29d-2863-4a48-bf4a-e3da2ed8920a",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "edb2a235-6f2a-46f7-a2b6-4793141bdec4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0588685-718a-4244-9ed3-1a6f46f693b5",
        "cursor": {
          "ref": "d0ff40a4-def3-4b80-b331-029b484b451a",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "6eb52dfa-7db3-4a6b-8dcf-7a7e9d465129"
        },
        "item": {
          "id": "f0588685-718a-4244-9ed3-1a6f46f693b5",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "735efc4e-6e6b-40bf-848c-5a21313ffc9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41ba0cc4-c724-4e2f-88ca-73dbf96ee926",
        "cursor": {
          "ref": "90a8f6f3-c730-4b41-a10c-9bd1249b4414",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "6a33a17d-e429-4ae7-a11a-f9909cf69ba2"
        },
        "item": {
          "id": "41ba0cc4-c724-4e2f-88ca-73dbf96ee926",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "8612eacc-728c-420f-b963-e6e1893c4792",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 405,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cdc58c4-5cc6-406b-b4ef-39a548c65e21",
        "cursor": {
          "ref": "af5b6f89-48ea-4d5c-ab94-262e117c4e47",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "1b537f4e-9401-4cbd-b0f6-438c62ecd711"
        },
        "item": {
          "id": "6cdc58c4-5cc6-406b-b4ef-39a548c65e21",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "c36103ef-858c-4c72-950f-99c350037184",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "473fb8f6-ac50-4585-8114-d5a273611288",
        "cursor": {
          "ref": "ec7849fb-4d65-44b1-9a66-08385bd5000b",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "98b75a24-237b-4685-ad93-a3d4c923eabb"
        },
        "item": {
          "id": "473fb8f6-ac50-4585-8114-d5a273611288",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "1190c5fd-5c34-45ab-a85d-909844df338d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "268ca063-6917-42a9-ab29-210f9064f4d9",
        "cursor": {
          "ref": "bdbb2d72-844a-4ee5-b584-2b4e1c2cdf64",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "921dee37-2f7f-48b2-992f-b37ea856c7bf"
        },
        "item": {
          "id": "268ca063-6917-42a9-ab29-210f9064f4d9",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "4f98ec59-7771-4405-9c1b-25267fcac989",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 176,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0407f59d-1c85-4c9c-bed1-11e448a6d6b0",
        "cursor": {
          "ref": "52a9bee7-e354-495b-b6af-61668a9ed011",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "afa2ec21-bbd7-4bc5-aba5-f4c2fdfffed1"
        },
        "item": {
          "id": "0407f59d-1c85-4c9c-bed1-11e448a6d6b0",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "ac7685e8-c898-4583-9101-5017e1929a92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 182,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04505631-2267-4bf1-92d8-d626f516da64",
        "cursor": {
          "ref": "e01c3543-f19e-4b08-95ae-080e84e65220",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "bfbf0c29-3982-4508-a044-e0f14d6fb1ff"
        },
        "item": {
          "id": "04505631-2267-4bf1-92d8-d626f516da64",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "646ad527-e880-4cb2-aee2-ce1f9b0152ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 629,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0981c978-e3c6-4582-8cb4-f38dcf61cd27",
        "cursor": {
          "ref": "0c950f7f-1ebf-4a15-af64-e0e952737d0a",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "8ffab988-ba72-443c-b878-afada53bff54"
        },
        "item": {
          "id": "0981c978-e3c6-4582-8cb4-f38dcf61cd27",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "c5afd2ce-de0e-4478-82e8-86ba93de483e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11bd99d5-f822-4576-b979-a2d7c5123e8b",
        "cursor": {
          "ref": "911d99d5-b094-4b51-9681-57f5acb35018",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "0c30ab66-61c4-4f4d-a761-a57846bf1361"
        },
        "item": {
          "id": "11bd99d5-f822-4576-b979-a2d7c5123e8b",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "905d24df-6271-423c-9f9c-76c3f470d0b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "700b5fb3-c3a6-4928-b0a2-ff072f82d51f",
        "cursor": {
          "ref": "e6782426-1175-4744-ab0f-b3980f952239",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "d20b49d6-60c4-4dd8-9e2f-d4a1797ee520"
        },
        "item": {
          "id": "700b5fb3-c3a6-4928-b0a2-ff072f82d51f",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "e936e48d-8194-4844-afaf-e6e88025e8a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbbd6a22-b561-4608-96b0-f44cb389931f",
        "cursor": {
          "ref": "00c35e65-8e9f-4a09-a129-42da9a4cdafc",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "f0f986d6-3599-49bb-9960-41781ec116d2"
        },
        "item": {
          "id": "bbbd6a22-b561-4608-96b0-f44cb389931f",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "eac70266-0668-43a4-b1a8-f879494adbac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe0d2bb2-22f8-492a-ab15-d34a50c84ff5",
        "cursor": {
          "ref": "7c639e1f-a210-47ee-8a8a-edc5d04dd621",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "1d753836-ee64-472f-be86-a5ac5d4b4068"
        },
        "item": {
          "id": "fe0d2bb2-22f8-492a-ab15-d34a50c84ff5",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "f2299d3c-ab59-47e4-8402-4bad8756f05e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da6f0aef-a4c6-44dd-807f-188a6e98c830",
        "cursor": {
          "ref": "f3709376-ef62-44fa-a41b-c62e856e93ea",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "5965ad3d-0425-4de7-a8c6-7f0f02d76dfc"
        },
        "item": {
          "id": "da6f0aef-a4c6-44dd-807f-188a6e98c830",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "e40bf2af-2864-4463-add8-eddea9ac2b9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f232fd3-3a4d-4eec-b58b-734dda41cfbc",
        "cursor": {
          "ref": "71808ea6-d7e3-421e-bad7-c9e276ca4fd5",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "1ec04356-4908-4697-bd95-8b73b34c4411"
        },
        "item": {
          "id": "1f232fd3-3a4d-4eec-b58b-734dda41cfbc",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "7278266e-7163-4fa9-be4c-041dd9e2fac7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f3d4197-cb00-4cfb-84cb-b693a3514e18",
        "cursor": {
          "ref": "0b9850d3-87d3-4073-bdc2-c5d2b07ec9da",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "0ffa04e0-3f56-457e-944a-15371646e650"
        },
        "item": {
          "id": "9f3d4197-cb00-4cfb-84cb-b693a3514e18",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "43127392-613d-46eb-873b-47253b0d5bbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f25fcc97-ab49-4ba0-b0fa-208306bf5e6b",
        "cursor": {
          "ref": "b00c3ebd-daf8-4607-b677-3c080a4ff077",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "ff6c3e66-bb3c-439f-910d-2be09ab2947f"
        },
        "item": {
          "id": "f25fcc97-ab49-4ba0-b0fa-208306bf5e6b",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "ea6c5616-8967-4c41-bed4-ae6612f33328",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 121,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99c1f087-564d-4ed6-937d-5561ed5bf9f9",
        "cursor": {
          "ref": "de3d0d66-5b45-4951-baf6-60dd207bd2db",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "3beb4c66-47b1-420d-aa1c-c385fa4990bd"
        },
        "item": {
          "id": "99c1f087-564d-4ed6-937d-5561ed5bf9f9",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "1dcea46c-6d16-4e1e-bb27-922562b5800b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec93e306-4501-48e2-a6b9-0455ef2e9d0d",
        "cursor": {
          "ref": "e90dbd4f-40e5-458c-b46f-7a85735252e7",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "b75cfbf1-aae2-4cee-90e1-232967da2c1b"
        },
        "item": {
          "id": "ec93e306-4501-48e2-a6b9-0455ef2e9d0d",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "ef3c7779-6173-4a32-b6c1-ad3794c55c95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fc66de5-e752-4213-94b5-5a9d920796cf",
        "cursor": {
          "ref": "92aa63ff-f119-4fd7-8a3e-55049b189bb8",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "4a1a4eec-6ce1-465d-a97b-8185cc1d19eb"
        },
        "item": {
          "id": "4fc66de5-e752-4213-94b5-5a9d920796cf",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "f454e88b-1d7f-4dc4-b91a-a6f8a1166703",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5228ab84-b95f-4a1f-86b7-76bf9c543cbc",
        "cursor": {
          "ref": "7d1a3f46-c99d-43a0-8e60-709dbdff156e",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "796aeb6e-678c-4585-aa34-15c758f893de"
        },
        "item": {
          "id": "5228ab84-b95f-4a1f-86b7-76bf9c543cbc",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "1b238548-4c12-4585-a70a-61707e169233",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a96e4ac7-2bdf-4245-98c1-cc5c68686f09",
        "cursor": {
          "ref": "a0d1a68b-664e-480c-85d1-4679cb9e5fe7",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "7c9307ba-6927-4f52-a03e-a96d4dc8114d"
        },
        "item": {
          "id": "a96e4ac7-2bdf-4245-98c1-cc5c68686f09",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "7c6a5710-442e-4ded-8b89-19f0d1b410ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ab2cd8b-ac5e-456e-9a9b-0f7efadb4f7f",
        "cursor": {
          "ref": "dd622b98-3704-4854-9879-3ddbe503d594",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "66449425-aa30-47fc-95c9-a7686d89d743"
        },
        "item": {
          "id": "7ab2cd8b-ac5e-456e-9a9b-0f7efadb4f7f",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "39b94a0a-5409-45fc-a9e6-94f5d31eef62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38e19088-73d8-441f-aa4c-203c875ed524",
        "cursor": {
          "ref": "51b4ae1e-81ae-4b15-b8f7-086bca5ee4fc",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "1242a630-659b-4d41-b882-42478d58b236"
        },
        "item": {
          "id": "38e19088-73d8-441f-aa4c-203c875ed524",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "bb99ef95-e8a9-4b97-94e7-c0249c9b2eee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d75843b-2396-4dcb-a758-82e655c54010",
        "cursor": {
          "ref": "501b2a9f-da64-4084-a6d8-dff080f67b77",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "3bd06301-bc2a-4b4b-bd3e-3dd892cce922"
        },
        "item": {
          "id": "2d75843b-2396-4dcb-a758-82e655c54010",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "2db80edd-9bf9-43a5-a5e9-d514fa94f062",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca1c5e40-c5a5-4b69-8374-6149e5b9ed46",
        "cursor": {
          "ref": "06746ddf-38c9-44c4-bce3-66784f64b43d",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "dc6ab708-289e-4111-9e19-2d61c33a573c"
        },
        "item": {
          "id": "ca1c5e40-c5a5-4b69-8374-6149e5b9ed46",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "346c80c1-fc7b-43bc-b201-f86eddceac48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5db8b427-1315-4485-9522-f880a87421cb",
        "cursor": {
          "ref": "9f0ff6e1-d24b-469f-baad-7ce0a27fd74b",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "37f5a0cf-8f08-48c7-b19b-eb8037d5b19b"
        },
        "item": {
          "id": "5db8b427-1315-4485-9522-f880a87421cb",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "7848225e-2d3b-46e7-9e60-954376af06b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b40791ef-3105-488c-b6f8-b90d882bae79",
        "cursor": {
          "ref": "fd492a8f-79bf-4ed6-9eeb-0627d4c3ed91",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "ef1daee5-cde9-4124-a114-a2fc587f740d"
        },
        "item": {
          "id": "b40791ef-3105-488c-b6f8-b90d882bae79",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "c509f581-1e2b-4341-ad6b-5e3cbcc0598a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "760d5641-a0ee-4982-b25c-8538f5ac0ce5",
        "cursor": {
          "ref": "7baedc43-5b6a-453e-bcfc-0a4d9344daaf",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "e6b93bc5-c6bd-4edf-affd-37229a862a64"
        },
        "item": {
          "id": "760d5641-a0ee-4982-b25c-8538f5ac0ce5",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "34974fcd-282b-4bc5-b5aa-58c53f32b37d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a45f7a5-1028-4114-9ae6-67afcd4fe912",
        "cursor": {
          "ref": "6b040855-9a55-488a-9f60-5c3f2816bcb6",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "2359c2e6-f616-43da-8b32-5f66d7cb4680"
        },
        "item": {
          "id": "3a45f7a5-1028-4114-9ae6-67afcd4fe912",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "0ee8e32c-f5fd-44a1-87ab-7826a4cdc80b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a57a47b3-e6a2-4f74-88ff-251079c7691e",
        "cursor": {
          "ref": "28c06a35-1cb1-4e11-bbd1-2432d966ed53",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "074ae849-a56e-431c-aa1e-1e0fbd5c50b0"
        },
        "item": {
          "id": "a57a47b3-e6a2-4f74-88ff-251079c7691e",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "d6c54baa-f089-4c11-9f5f-fa6cb2acd36c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a8047b6-95b4-4f2d-8247-cafa41339992",
        "cursor": {
          "ref": "fbf3972f-d53e-4ff6-84f9-fb98523d2d20",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "2f503d1c-6e01-4f1b-861f-8679d48ec219"
        },
        "item": {
          "id": "8a8047b6-95b4-4f2d-8247-cafa41339992",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "01ad9e21-b73b-48c4-ab9e-d88cd83c4d99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80edfd5a-a684-4d15-b875-9542f0d79524",
        "cursor": {
          "ref": "4c91efba-3e39-4540-92c3-1d9013148643",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "1d2770bb-449a-49c0-9217-679b2a488830"
        },
        "item": {
          "id": "80edfd5a-a684-4d15-b875-9542f0d79524",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "4951318d-495d-47d7-bf59-6382d679d3e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d19454db-9505-4e40-a8be-8f443a77a56d",
        "cursor": {
          "ref": "40b83549-0dc7-4af6-8d85-78c92135fff0",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "e9b35121-4ace-41aa-9a06-893104d1ba25"
        },
        "item": {
          "id": "d19454db-9505-4e40-a8be-8f443a77a56d",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "1c25000e-30f8-40a2-b2be-d07418d476f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13f2e1fb-0da4-413e-a9b9-214d97d0322b",
        "cursor": {
          "ref": "ed080998-04fe-4319-b75d-33088dd25e3e",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "e62a18df-3ba0-4148-a2dd-60741c1dcfbb"
        },
        "item": {
          "id": "13f2e1fb-0da4-413e-a9b9-214d97d0322b",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "83ed08a6-2866-419c-8d83-621c67075880",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e90b8ccb-0f05-4a0a-bedb-5365c951c849",
        "cursor": {
          "ref": "95ffd175-801b-477d-b849-46c5cdd03c60",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "7600d3d5-4a08-4715-9813-e826d145743f"
        },
        "item": {
          "id": "e90b8ccb-0f05-4a0a-bedb-5365c951c849",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "223e661f-b0a0-4c06-9014-3e7af07f8767",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6be7dc1f-378c-4861-a1ba-92cb4824126d",
        "cursor": {
          "ref": "e6fb3b02-7b15-445a-abad-6a30600ea6bb",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "52b7fc7e-86b7-4a21-8a5f-d0e573186cfe"
        },
        "item": {
          "id": "6be7dc1f-378c-4861-a1ba-92cb4824126d",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "274fa16c-bab1-4864-b2bd-7251b7a8d40a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8dbda5e-6767-4592-9ba0-c8d1a763a77b",
        "cursor": {
          "ref": "a1f83f72-d683-42bc-8435-68e013a02aea",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "d39c4319-616c-4588-bcb1-5b17ce29bd5a"
        },
        "item": {
          "id": "b8dbda5e-6767-4592-9ba0-c8d1a763a77b",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "49f12d18-fabb-41ac-bb97-d0b3ff9fe423",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b0c0e20-1e48-476b-a277-e8decdc80d56",
        "cursor": {
          "ref": "3399bdd8-e3d4-4139-8e3e-31d3c925c98b",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "61c96dbb-297d-4205-9915-790cbd57105d"
        },
        "item": {
          "id": "5b0c0e20-1e48-476b-a277-e8decdc80d56",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "0d42dddd-c21d-4d8f-b579-761f2a2f8cda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b643807b-e49b-4e53-82b5-03a8dc454adf",
        "cursor": {
          "ref": "af26c2fb-0e48-4ddd-8a7b-4916a1675ea9",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "c5e49953-5415-4dc1-8ea1-e07b5124bc60"
        },
        "item": {
          "id": "b643807b-e49b-4e53-82b5-03a8dc454adf",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "1accb65f-897d-43e5-b55a-fd52885a595d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f85dcaf-3d0d-4b3f-80ba-e89886141474",
        "cursor": {
          "ref": "f0f67d2e-74e2-4d4c-8dd6-615b531c435c",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "8db19743-59c4-45fb-9286-5bf960e3f43c"
        },
        "item": {
          "id": "2f85dcaf-3d0d-4b3f-80ba-e89886141474",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "7ecbef05-04a2-45a2-bf59-bae81be18ca1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac98f72c-1a74-40ee-8499-4f76fe211923",
        "cursor": {
          "ref": "b0a5dd8b-b86c-4eb7-b3ea-791cee7f3c88",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "6f55a31d-2fce-4aed-963b-4181bcd4a39c"
        },
        "item": {
          "id": "ac98f72c-1a74-40ee-8499-4f76fe211923",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "fee0bb65-bf36-42ab-afbf-24ad8da3e6f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bc43e68-b6e9-4bdc-998a-a5cb90584013",
        "cursor": {
          "ref": "5a8bd4f6-6cd8-4374-a340-183df9a72795",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "693ef249-2cb4-42b4-b329-51db97005571"
        },
        "item": {
          "id": "3bc43e68-b6e9-4bdc-998a-a5cb90584013",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "5d52fb94-6205-40e7-8bcc-13ff61b4fe31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dae402a-a498-416e-877c-742529faa36d",
        "cursor": {
          "ref": "af997c7b-4d44-4d1e-971f-786fd65369bd",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "4980cc4a-3350-4032-a799-114cffb1684b"
        },
        "item": {
          "id": "0dae402a-a498-416e-877c-742529faa36d",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "d8e06314-45a9-40ca-a54e-954d766d6aff",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea8adb9e-357f-48e4-a320-b1c8f96ba224",
        "cursor": {
          "ref": "0a7bdca7-9e80-4386-83d6-50531cf58929",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "58bf18eb-ab90-4a9d-8284-1c057da08b7f"
        },
        "item": {
          "id": "ea8adb9e-357f-48e4-a320-b1c8f96ba224",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "a7baa804-814c-45d5-b3af-5bfb9b060af1",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 56,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4db2264c-bd5e-4c98-8be7-00007f7da36f",
        "cursor": {
          "ref": "eaf12a8f-ce8e-433b-bd4c-6425c3cf1c70",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "0c0643dc-e2ea-4c49-8949-3b5aceff5b3f"
        },
        "item": {
          "id": "4db2264c-bd5e-4c98-8be7-00007f7da36f",
          "name": "credentials_verify"
        },
        "response": {
          "id": "7cea5ae7-f721-42e3-87c1-518e46f02911",
          "status": "OK",
          "code": 200,
          "responseTime": 719,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19288c8d-17b4-45aa-acf4-080efd7c977e",
        "cursor": {
          "ref": "ba357f08-e14f-45ff-9524-3a40b651aab3",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "29aab24e-7798-46b4-932e-f91989deaf8b"
        },
        "item": {
          "id": "19288c8d-17b4-45aa-acf4-080efd7c977e",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "a5831f65-eaa5-4474-90d0-c165ce727b65",
          "status": "OK",
          "code": 200,
          "responseTime": 769,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dbf08bb-b18d-4ffe-a053-c5a272f89fac",
        "cursor": {
          "ref": "3fef7794-68cf-420e-aa64-f8ee46ca3d0c",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "b6ecf3ac-3c88-44b4-811d-e2a3cd54e0d4"
        },
        "item": {
          "id": "0dbf08bb-b18d-4ffe-a053-c5a272f89fac",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "0ebafe96-3f7a-4096-80a9-d16abf2a0cb6",
          "status": "OK",
          "code": 200,
          "responseTime": 2145,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06d11c48-5dd0-4de7-87cc-9513b149e3f0",
        "cursor": {
          "ref": "6af95314-da1d-4177-98c9-4407a5963d79",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "0bad35f2-bc8f-4edb-a363-fd73d3dadc5e"
        },
        "item": {
          "id": "06d11c48-5dd0-4de7-87cc-9513b149e3f0",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "545638b9-3b7c-49c1-bfd3-6f64fda86414",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 125,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06d11c48-5dd0-4de7-87cc-9513b149e3f0",
        "cursor": {
          "ref": "6af95314-da1d-4177-98c9-4407a5963d79",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "0bad35f2-bc8f-4edb-a363-fd73d3dadc5e"
        },
        "item": {
          "id": "06d11c48-5dd0-4de7-87cc-9513b149e3f0",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "545638b9-3b7c-49c1-bfd3-6f64fda86414",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 125,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06d11c48-5dd0-4de7-87cc-9513b149e3f0",
        "cursor": {
          "ref": "6af95314-da1d-4177-98c9-4407a5963d79",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "0bad35f2-bc8f-4edb-a363-fd73d3dadc5e"
        },
        "item": {
          "id": "06d11c48-5dd0-4de7-87cc-9513b149e3f0",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "545638b9-3b7c-49c1-bfd3-6f64fda86414",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 125,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f416408-a5f4-4622-9ad9-15eea830e18e",
        "cursor": {
          "ref": "03092ca6-9138-49ac-96dd-2735fc761426",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "95c3a80b-68c1-4e0c-b377-232f9557ba4e"
        },
        "item": {
          "id": "2f416408-a5f4-4622-9ad9-15eea830e18e",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "90813fe6-aff8-4157-91db-d0bccb966c04",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 52,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d177028e-3d95-46fa-8dd7-d801eaa5821d",
        "cursor": {
          "ref": "26c4c62f-47f6-4e83-afa7-1ff233040ae2",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "60e894f9-5da0-4acb-a2ec-97015de05f75"
        },
        "item": {
          "id": "d177028e-3d95-46fa-8dd7-d801eaa5821d",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "6b9a91e2-b1b6-4e78-9348-f51b4d244b97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "d177028e-3d95-46fa-8dd7-d801eaa5821d",
        "cursor": {
          "ref": "26c4c62f-47f6-4e83-afa7-1ff233040ae2",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "60e894f9-5da0-4acb-a2ec-97015de05f75"
        },
        "item": {
          "id": "d177028e-3d95-46fa-8dd7-d801eaa5821d",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "6b9a91e2-b1b6-4e78-9348-f51b4d244b97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "0a4d6dd2-8003-40a0-8b3c-1f52c88a7b91",
        "cursor": {
          "ref": "06b392a9-e5ba-41fb-8845-55c7235ffd59",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "7717c691-5a2b-4de0-a8c6-da03e9fd48ee"
        },
        "item": {
          "id": "0a4d6dd2-8003-40a0-8b3c-1f52c88a7b91",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "09f70858-30cb-40d0-9363-04e594a80d97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "367ae6bd-544f-4faf-978f-b667ff1de343",
        "cursor": {
          "ref": "f0e4457e-dd0f-438a-9808-1f16111e6115",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "1a7ed660-8ee6-4f90-8d3f-fd6871d45cd1"
        },
        "item": {
          "id": "367ae6bd-544f-4faf-978f-b667ff1de343",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "5071494f-2cdd-4914-a965-882063dfce76",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "367ae6bd-544f-4faf-978f-b667ff1de343",
        "cursor": {
          "ref": "f0e4457e-dd0f-438a-9808-1f16111e6115",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "1a7ed660-8ee6-4f90-8d3f-fd6871d45cd1"
        },
        "item": {
          "id": "367ae6bd-544f-4faf-978f-b667ff1de343",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "5071494f-2cdd-4914-a965-882063dfce76",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1835dd5-7941-45f5-9ff5-fee8c2bfc8f3",
        "cursor": {
          "ref": "4671ede1-6d6f-43ed-be5d-bd170ca0b1d1",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "a03b0846-fa2c-4cf0-ae6f-71f35a4bba38"
        },
        "item": {
          "id": "d1835dd5-7941-45f5-9ff5-fee8c2bfc8f3",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "6561768d-ac69-4a08-9d2c-a4da3f398631",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}