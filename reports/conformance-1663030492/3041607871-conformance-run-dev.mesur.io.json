{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "0ee9ffdf-79eb-4d8f-9e81-1c0a18f5d612",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "b005f110-5466-464e-a707-a5a4b677ba49",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f9c4d376-b804-4dba-a91a-8c6dc3637d4b",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8593c51a-4bf4-45c7-bd58-2bb27c91018d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "54f2eddb-bdbb-4604-96cc-226f7823f9e1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "a93e93f1-2dc4-441f-a9e9-1625184aaac3",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "a345938e-48f2-4f86-a9eb-2a5220dd9c92",
            "name": "Negative Testing",
            "item": [
              {
                "id": "392f65ed-a115-44a7-b8c3-213b71b7ab6d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "aea76a0f-b589-4e4d-9c7e-c3292bdc6f66",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7034c5b8-5f64-4a08-9dc1-2f0994f747dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8a198e19-cdaa-42b5-9dc4-e3d42fc77a39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8addeb7-2c82-4d6e-ab91-c0e515dca990",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4627a39-a2af-4625-8041-ee4cf07adaf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3a0436ed-7ffb-4534-9c4c-b28b12ca5cad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3390f5b2-d3f8-456f-897e-6f16deab9cd4",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4953fde1-5889-44ab-8e65-395183e9f759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fbb136df-e733-4e45-a896-20a2ffc6de64"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d9f8d8f0-8288-49fd-aac1-2e337ffe8f6f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f4b39f44-17f6-4717-b40c-4102d9c93017",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b829769-5fa9-40cf-9e4b-2a01d8d72b66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "962db3e3-30e1-4ba3-81a5-61c64ec3132e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a4ae185-7231-46f2-8cce-989c08a448b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a38012e8-062e-4e2c-a47d-ce47bc8c7c5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e629b54b-72c7-443e-bad6-93437c23393a",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8940c26-34bd-48f5-bc6a-82f563222f37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1b7f68bb-faed-4d09-929e-51edb26ad409"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53fe786d-9ecb-4e40-9ae1-3ca6f4c41e33",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "d9cbd578-fbb0-4ad6-ac1b-a53b967bebc2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "3c689a4f-9780-43b8-a2a0-5d6b08d66ec6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6849fa96-40f9-4925-97a0-ca7560c4bd8e",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "de060308-21f9-4bf6-a49f-e8ecdc530951",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "cb56e429-2386-4734-860a-c356cde95a7b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c9f77ebe-0382-4e03-bfd9-0e8e3ddcd707",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "c1fb4741-c7e5-4003-baa8-e18a2ae44880"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "08bb95c0-e96d-4939-8660-538d85811806",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c2b747df-289b-451c-8a07-2ce0b8144ec9"
            }
          }
        ]
      },
      {
        "id": "7f8a2a7f-d54d-4d12-8c6e-da309ae06c67",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "85da6283-d872-4131-9075-026b8f43625c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "eed190ae-4301-469e-896d-213b11172422",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "60f96eb5-6f59-4097-93e7-c7c8ac08771e",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14c34376-97eb-4855-846a-404a5e61ef4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fe29ee4-35d5-4e2a-8d38-d0d0946a00ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0924aaa-d8a0-46d7-be8e-61fba23a96c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f16c2ace-90f4-423a-a83c-01e3f323356b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94bc2eb8-bece-4e05-b3b5-3b1e6c33a446",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "213be708-8264-40d2-8972-5bee5eb0e21f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34ddb0c3-9512-4759-884b-ef119791e9f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a31d609-b6cc-4fd5-ae98-ed935c85fea3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee46bc5b-3d85-4614-9456-42cd1dd2a2cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "590e6e6a-da08-4af6-8fa6-b18d97baee1a",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49494566-cbab-4658-b5e7-ae41a504a583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d121baa-bcfa-4aa6-b8c5-230e8a8211a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63c35891-bf2f-4064-b783-c6bb49e26ba6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7d9488a-ae10-4c79-a037-2c60a051fb2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c0b6959-6b0d-4fc9-8b20-8350f76cd1b4",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46992b7c-1602-4c1d-948a-ea36553fb320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddeb41ee-d654-44c0-931d-6b58e8a73d1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e6a4ad7-56b0-4347-9361-e912056e3e8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ee56667-9155-4b59-b82c-f0dc654b0064"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9871f26-5b0e-4bf2-a4c9-f9879999079f",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac0c6f34-e06c-4a5a-9677-c993d18e4fe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0258eb81-4cf0-4ab0-b7c2-3b39dfa35379"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38e2125d-c274-4c10-b2a3-cb22a2fb33e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0682510c-e811-4ffe-988b-8d85585cc24e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddb5c766-a641-4ab9-85f4-939a78e61edb",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e700442-2c23-4ec6-a532-58469a67d313",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07a9604d-5b85-4bb5-ba16-6cf85e51f331"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4c6e163-16dd-48fc-9441-44fd1d62be3b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "969ac42c-06f8-4915-be36-fe67dbd5bf81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f033e839-ca77-4d5f-862d-c4b7f01a1a29",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2f285f4-2d02-4e63-88f3-96a4b42eeb86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1aa73c06-ad07-4a39-acfa-9c4e527607d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff33a47f-ff8f-40e1-9c82-cef628c76ae4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5fa1b43-80a4-42d2-95e0-55e66f108758"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29f90f06-2319-4ade-ab99-7b6f09e31243",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b90e45dd-8265-469d-9e5b-e6f1d66d8b3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d513dc1-38f8-46dd-a100-3f21b81298ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fc75b9f-c21b-4429-b7a9-fbac4d9ee6a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93fedfe0-c665-425b-9d99-7cbe2bd9f0d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa3200d2-11b2-4112-aad7-fa986eec9626",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db6c6858-0876-4840-bff8-398cbe8ffbce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "656fdabf-e39e-4208-89cf-1e57fe5cda7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "950018c1-2f66-4142-b203-4e7c7aa01377",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "423506e4-2c90-47c4-94c1-b8c086c9ccd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4f1f015-3d9d-4917-8f56-0f86af1f3f36",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faedec0d-dbf2-4298-8a29-2b8f7326fbb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dedc6cbf-0e85-4286-812c-326d5a3cf030"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fb9d409-1ab8-4965-b841-1e340298700e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61a95ba0-9788-4334-8d03-e1d7bd41dd64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2067f43b-4ec0-43ad-ab26-6508a7b27c6f",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3e99828-e99f-4daa-aba9-66a6ccee9ef0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5101f069-76a6-4177-af46-585584921c31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9397fc7-5773-45ed-b4a6-e464c86cc745",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "d7e04b1f-7936-41d9-999c-18da1d281c7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad1d882a-0a2f-44a2-a40d-72b77241b484",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffbeb77d-bda0-489f-af71-5326548c7fac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fef73f1-930e-496d-ad27-383af9619ae7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c5aaa3f-11c3-42fb-80b6-2efc4a79512b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "55e25803-e3c6-44f2-aff2-d427dece49a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50685420-d96f-4d5c-a458-69a9be227814",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45cb379e-a2e9-4625-9f49-4a93457340bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bca3dc05-48dc-4973-b38a-079465d3fc2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef3c7852-7226-4380-8d15-e2c9d928fb17",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0009bad-7780-464d-96cf-30ff59e9c58f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adce8bb5-d45d-4df1-8c18-2a119cc000a7",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff6f4070-2081-4f85-82ce-e100171368f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f334632-a484-4227-84ea-5beb40373ccf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df3455b1-4dad-48bd-9034-efcc7ad86ddc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07b8bbf9-7ac0-49b2-8d21-2f44f9eaf2eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab5a8e71-ac14-496d-b3fb-2677de059476",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeaaab5b-b37a-4473-a5af-1b938f2e44c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d42c7f3-143b-41c8-8d57-20c880c2a5e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb4107e2-df0b-4808-a597-aa1eb4fd399f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "b7f66fcc-eb23-4fc9-90dd-ce1494ddb8ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ad6145b-11a6-40f8-a508-21006d7a6e08",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1212b5b-886f-4a31-a63d-8b9aa25ddd15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da1e2dfa-9ee6-4465-9115-ed095d755afe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22b1f533-598f-43c2-ad7a-678e46f6602d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "c84fbe1c-835b-4ed2-ac70-6d972822c1d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1382b9d0-7dfc-442e-adcc-568c44b847b8",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9d46237-f23f-4842-91c3-664aa0490ebc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7ff4319-b3ad-4c52-8e2f-1f6cbe68df61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "290e783a-2a6a-46af-adb1-ab93a4110d72",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70e1ae10-7f58-4b87-b7b1-66b9a3c90aa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57e9eae8-e809-425b-b182-fff9dc03c87d",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d2f03c8-45ac-4326-9138-f67efd06eab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f872bd5-08a8-491e-9189-24a668818351"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91c4d0ee-232d-4f09-a752-65dd8eaa70a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8310b673-81ef-4d27-a6d4-92783449e9b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "536c46ab-81af-47df-9ab1-33232b79d42a",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c907f44-f466-4ad4-89fc-b05c3c01fc30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca5e40c5-7da2-40d4-9760-c95e722931d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3071fc7f-f883-48f2-a0ff-484a4121b2c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59c4e53f-e741-4cd6-a585-37f6366c4342"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c09dd999-3dab-4b02-9ec0-d12b0909a6c7",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "481fb837-9650-42d0-a730-be37bbcce716",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f711b458-0601-4544-8aa0-2fe06cba211a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79c33e14-a771-4007-aa7d-e133e0de3742",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38cdc196-36c5-4b88-bd02-8d59b80c088b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01225f5f-9e3c-4dbb-9930-939c5e63ad9d",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37c9063e-7175-4933-a104-bcf46fea72be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7400582-55b4-4b5e-a00d-9f0a25a84c41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c781090-1f59-45c3-bf83-cbe7aaabcab3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be an object",
                            "rawBody.credential.credentialSubject = \"did:example:1234\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "687ebed1-c90d-47b5-8e52-a130ae716444"
                        }
                      }
                    ]
                  },
                  {
                    "id": "507faa57-ecae-47f0-be41-8480bea53bc5",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7681241d-2b6e-4b51-8759-1a0888a17409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc37b35b-9453-45c4-9bde-daabc7b8e941"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5175eece-40b8-4655-9d79-fe38b69621d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"did:example:1234\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d5c6827-765b-4aa8-892c-bbbe580b9dc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "144b2894-98f4-4899-bf69-31718af1859f",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5abea75a-ab8a-4983-a2e3-7c0f66d9386e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4af4475-e77a-4e1b-8d91-055f637f999c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3662da9-3329-4ae5-a1d0-887b4cf69a59",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a06597c6-d33c-4f0e-8894-10bcd037972c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0400bcc0-cb9f-4e2c-98c8-75ef1c998c70",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3042949c-d5e1-44a9-872b-7c6d18c57e15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ce96aa8-880d-4832-b768-637522fcabe5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44877a71-9ac6-4938-b145-c21f839e35f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee5b62eb-ac75-41a7-864f-7834b5850ccb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d2e31b2-650e-4ccf-bea5-0d53d113cf80",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cd03909-1ddf-496f-90a0-9e03ab9093f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84713b63-4ce5-402e-bc94-3d75c9793560"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9790a7ea-ea32-45e1-89ee-24f852a5e236",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3534fb39-9ea5-42a3-96d6-5dedcb82bbcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea219f50-8119-492b-a0fd-5e9ffbe9b7f9",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb9f2b32-da2b-4383-9610-096a8a5da47c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d0e1928-6c54-4d85-871d-02f8f3e8a6d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2332e686-d18d-4e73-8116-2493adbc6768",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "621363d7-d835-4a6c-8007-bb2becd83f16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32d16737-a810-4882-9cf3-b4d2b94ebd0f",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fcdefbf-72f4-4306-9ebb-fe8b75c5d8ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "456b66ea-64a4-48b7-95b3-cad7e0dddde7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2bf9fe3-71e2-4a7f-921f-f1d2b198f0a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea380f1b-efd7-426c-b317-bcdddc410ba3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2cb848a-4646-4ded-a39a-c7cd6759f2c9",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a4ee649-71a6-4164-9608-7dd4a9ab6ecd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "760092d2-979f-410c-9411-955b682728e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efd113bb-c34d-4a98-b815-d2825dbaadd4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8dd4132-bd88-4527-bf75-7e291ec24e57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1604545-aca4-483f-aaae-ba6b5d5fff96",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "068ea4fa-1df5-4717-91b3-c6884969ff23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ac5c3e1-73cc-48dc-8cf2-f8195232c50a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b936ad0-54b7-4954-a019-1d616ed2bfde",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58edd86e-b72e-4a57-a3e0-87db451c0a4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a808228-0830-4d59-aa96-1b2d6adac705",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7d6012c-09a1-4c43-916d-4cd3bc19725c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d863d81d-64c3-43d3-813b-fe84f6f6f4d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16c8ecaa-f0a5-42ac-ba97-bcc535b8b7b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7fbb54b0-e79a-409f-aaa3-0d0a3e2a792b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d6a325c-549b-4a67-bc2e-73a6b46499a0",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8111649b-2b9c-4c1e-9c1e-298e60fee163",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "42a1852e-4cd9-4c3e-a5dc-8166358196ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d002770a-38dc-4154-83e5-6fa6c541ccd1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e7049c1-2098-441f-bd32-99c820978c3b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d1a4e930-3510-4826-90ca-7298c10f6c85",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "46bf36ed-f57d-4a65-ac61-5bfdb8fc68b3",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4373a779-bba7-47d4-8a88-c93cb76ce88e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c5773d0a-befe-434e-9dc7-374c8f8a4194"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e371962-01a1-4816-af18-e23d6f2d7151",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "af95c4fe-c617-419e-8660-05208f3aff8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4df4cac8-ed46-4606-b087-284fe6e189b0",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a033d32-6bdd-4450-bf38-ab6b0646294c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0f565e48-e21d-4082-9412-a9361d92a8e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5b950b7-6bff-4a36-9ff2-9e0503ad2219",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "1bc57e7a-392d-4865-96de-edcd51925be9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2486897f-1ec4-4237-ad4f-342c90a64009",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e0c5a297-b339-469f-a504-edc3722bd957"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "74aff567-bab0-448b-9293-af420cb3b765",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "46831a7f-eb43-446e-9610-304f554ec80d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b1e61539-d9b2-48e8-bef0-e2880716c032",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "48d4feb4-8e55-42ee-830f-fa078180b58c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e96221ca-5f70-4700-83fb-57515e017d32",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6380f9ab-2270-4464-ae3a-b25e8a914ed8"
                }
              }
            ]
          },
          {
            "id": "1f060a35-d8e2-413e-8cd6-c107476c8ca3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "113a72c2-e8d6-4256-9d7f-3a62df0d3c18",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a8ae8d56-8ed4-48d7-990a-34cef531e43c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "34d89f25-c6c8-46e6-b4e4-daac6bb15668"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "964489bd-2915-4a58-abbc-1d7c976b1814",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "7d94b9d8-f163-4987-a218-eeb6bfaf2e51"
                    }
                  }
                ]
              },
              {
                "id": "3652b4a3-d37f-459b-968c-ef5c6ac73c44",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f87029c6-aeac-4ae5-b0b1-015f8b278db3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c32f161a-045c-4f24-a7ab-75f265c3181c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "168480ce-5808-4ae1-9029-83849d9ff96b",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "672989c1-a3f9-4c64-824d-805a111d5e85"
                    }
                  }
                ]
              },
              {
                "id": "80b830de-f6df-4141-83c8-24e378c106c0",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5026557d-b594-442f-be0d-c2a781c576cb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "213e496e-1c78-4765-927d-c434ce70b29b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "025a305c-7b73-4da7-88bc-e7c1f1e52010",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "4e59d14b-d240-46c6-a820-3ada6f6a47fb"
                    }
                  }
                ]
              },
              {
                "id": "306f75a1-3c77-4e58-969b-f21c289da357",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7c12438b-6563-4fb6-a5d1-7cd9380db82c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1757eb9e-b135-4527-a31e-a7844f03ad32"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "20660e2c-56dc-4a48-881d-4b7039f72a16",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "59784f3f-62ad-4945-a432-76e1dd911287"
                    }
                  }
                ]
              },
              {
                "id": "74b0a4ea-d88f-4ed1-b48e-cee71e4fdc99",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2c623f99-065e-4787-a49e-0b71b19f41c4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bfe659ad-a8dc-4f67-b3b0-2188f1439db8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c8449900-5922-44eb-81cf-9942088362e7",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "ca3532d3-9c4f-4807-8e42-653c99612324"
                    }
                  }
                ]
              },
              {
                "id": "1d95b054-76e0-42e4-9137-a87f46adefdf",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fe40a964-f4ff-4504-9249-208712b7c6ec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7d540a4a-23f6-4202-9a72-6eb637cc9aec"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5465d1ce-50c6-47dc-8446-021b24ff67e9",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "5b427380-559f-419e-b619-aaa1dcb9497a"
                    }
                  }
                ]
              },
              {
                "id": "90fed5f2-3e43-4b48-9843-66bbde5f4310",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "da18b04a-1893-4db3-83bf-2dd5511b5669",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "658ffee0-31a1-4c20-9b10-6277c8cd940a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4f7a03b0-a25f-4286-89cb-a27f3bc5e9a4",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "0e151651-a7ae-4a6a-947a-594ed46cbbc0"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0a054542-6381-4f78-8c97-5411da3e5da8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a71abfdc-20e6-4515-a102-b7ddae2c7d16"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6b7f226c-dcbe-41a5-8a2b-b0f46b25abd9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4dd689c2-9604-41fe-9726-151fa70dd063"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7b1ac495-949c-4d81-bae3-6caaf30d3462",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "562b8013-24a6-4e5f-b94c-c12cf5c6cdfc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0a12026b-7316-4349-bfe2-d517d693dde3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f58948d1-21c7-4ff1-ab64-723468264a44"
            }
          }
        ]
      },
      {
        "id": "cef7564e-75b4-43f3-ab3a-99e4b45e02a0",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "2c0ae95b-bd26-4f51-8be3-2c3fe9de6fb7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "91ef56ae-6851-4457-9aac-e5fab49c8150",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "30fdc6e1-9909-495a-b9d0-970305255eb8",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "725176f1-0a28-49c1-b828-c8879ca3ce20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2531deba-d568-4dfe-95d9-8fbbba2579d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "973dd141-9b11-4b87-a876-c03c0b33d4ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "baa231a0-cbc0-4392-892d-b9ac9eac4c48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6de989e6-aad9-4e96-9704-b76b456756a1",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "285aff7e-5cb2-425d-a4c7-bdaf0e1dcba1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "971b5ba2-2049-4bc8-a765-c6ba988db1ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce0acd42-cd2c-447c-9f74-642aac69bc0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ec7d5dd6-581e-42c0-bddc-7bce270e6afc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e4c5009a-2115-491b-a898-cd52ff1368dc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "265488bf-aaa9-49ed-89f7-c1aa74682595"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b32f33de-1d5c-49e9-b73b-614fac68a06c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5dbbc709-affb-43c2-b8c7-27f24913f905"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "93c07192-52ab-4770-a158-c9f858b2fc1a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "74fc818c-e8d0-4b73-a80c-8feea267ea1a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "83c37463-3507-4717-a52b-ba8cf717a87e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2be182da-5a5e-4e0d-8b40-14ac892ff398"
            }
          }
        ]
      },
      {
        "id": "dfac1ee5-c02e-4749-9b47-cec013064ea9",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "7618da25-c6d7-47a9-8b0c-a9a066762bea",
            "name": "Negative Testing",
            "item": [
              {
                "id": "595279e7-024a-41da-a5f3-8732de09746f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9aba23a3-aa0e-493d-a6cd-0cb927cffcea",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8f35a64-8d11-4bdf-8233-f82387346114",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7461b9ab-255e-4300-ae48-c2030ffed175"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4292c669-f4c1-4b5c-a615-8624be0a9d5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7e0d84cc-01a3-4de0-9976-c673a3ea2a5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77f76cec-dcd1-4325-847d-dd9c8af5a106",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02e07c13-6af9-483e-bfa2-35a2be25aa8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e9a8f8e-afa5-492a-bdf8-b7d33a5a309c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a48a3c0-38e9-46de-a7ff-b3677111629e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "07e6f6fe-6db6-4014-b886-d83cfae30082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5af1b8fa-b364-4635-9033-dafd5c38f9d6",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e538d8c-0ea7-4633-b1a4-b5520c6ac224",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0cea477a-428c-40da-8b25-eba9393e7639"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2956358-0165-48dc-851e-edde76320813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ecbed86b-1650-431d-85cd-b0c2511aec59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33496a0e-f2c9-4063-a3f5-4bb105713da5",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edab48df-c77b-4734-892f-ed873d18af35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38e8faea-deff-4cc7-bff0-3c875139af1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d953a793-2aca-434f-b18a-766fb91d57fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7994d3ee-a6e0-4a3e-934f-3cd9bb6d379a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc184872-2b4b-4159-b6e4-c36dbef97b43",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6984f787-6f7a-4ea1-baf1-fdb62552449d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b73fb121-642b-4b96-8eae-6357468470ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b784b0b9-0bf8-4c19-8dda-c06c743e1304",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "11e95eec-c325-4e3f-94aa-3ac707a4a5b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e756b585-68ce-4904-94d3-f0089108f26f",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f258e6f3-6da0-4a77-9180-5e7ca528ce39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa0d07ea-2889-47c1-aa01-e0d5b17798b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80f1cef5-b0c5-4f29-95ba-a3647ee4aa0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "28ad8810-4c77-42a7-a958-0a3603d60794"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b5c26f4f-e807-4e36-886e-e4074c1c48bd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "04969728-c312-46d7-a203-f79735e15465",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86ba30c6-1c5f-4204-b218-0f0932ec0b80",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "ac453416-85d0-4927-8178-d1dccc94ce8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7d7b791-f3f8-452f-83db-cdc53644f98e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6ddf75c7-f61e-426e-a472-2ecc0d4a1c97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc0615dc-67f4-4f0b-892e-7790bc9c36d6",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43c431f7-db12-4878-aae0-6ce43cb4fcd4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "6275b244-a772-4b2a-992c-ad5a174a9a5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be94459e-f0fb-4939-8d40-c71f09a11bb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "42697dc2-db81-41e9-95f0-c7201ea7c9b5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d0a61cf4-b35a-40cf-a6e2-7722937ca11d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3bb0a54e-5e25-4d0b-ad0a-556c975d7682"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "46e10886-69e4-45b5-b265-1003f2746bc9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "52b9662a-38e8-4103-9631-50a43dcdc0d3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0de65356-6c4f-4dbb-8677-a63e5810e5e0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"dummyVC\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": \"did:example:123\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "c75d4000-7fd5-47fc-82d7-33619476bbdd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0eda0e91-405f-4a9d-a9cf-cf37010aaac5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5198690a-b8de-4217-ac87-9c2c23233aab"
            }
          }
        ]
      },
      {
        "id": "3004497d-3e2b-4bdb-a703-e05125dc3c54",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "4e050a4b-b6ed-4d37-b0cc-69e39212011b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "16661828-b953-48d6-a0bf-79cbc1479b3c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4329d2f1-3866-495c-a2a5-b2ff6d32038e",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f34d0ef-d455-48b8-8787-7e5b8a1a4bc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8475a72-3af4-4745-b84c-e5b994e4d7ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d84dddc-b504-4120-8dcc-f3d8745b1b97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fdd6a268-615d-43f4-8caa-74ab5a7213fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51924b61-a8f6-41f5-9980-8d8bca269a05",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f84e214-b1e2-404b-a57f-7297c78ee50e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "15f97e8f-0ad0-460c-892d-665dafd99c95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "050ae8d8-21a9-4cfd-9b35-a985d185018a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1befaf86-c69d-4b03-b60d-e10efd6f49c9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "21f914dc-0372-4bd0-a2bb-328939524e0e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "83c20d01-6a8c-45fd-a80c-77a41f659463"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "38944db8-689b-41be-91f6-9aef9f678e2f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "60288249-458d-4ddf-80b7-6541d955a01c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "975a4da3-0426-4b93-953b-2bdf0da532f8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "224d8789-b5db-4520-b1f7-00e018fd9954"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6f9c1e7c-09e7-4eff-b68a-36f3e3fcdd71",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1d49d35f-8aa1-4082-9f68-ae50f2f722ad"
            }
          }
        ]
      },
      {
        "id": "18f757a7-4d79-416b-9521-874822539f03",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "feea5feb-5016-4d7d-b825-10db8febef31",
            "name": "Negative Testing",
            "item": [
              {
                "id": "57691306-804a-4c16-9d9c-b4f84088f31d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f7e52b2b-aac6-4c84-9d52-db57e6ff38f0",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0345a869-f7b1-47f0-ac04-010f2545aa93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6186dd47-1d3d-46d7-a64a-5d86f5d77848"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "546b89fa-9f21-432c-b604-095d0f8ee349",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9a593ea6-0c73-437c-9dd1-e42b615855f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dbf8a1b-26ca-4edf-b1bb-24e9a2b50d50",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "710fbd06-400e-41a8-a1e3-2d6c8b99c30f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "3b83b693-c1f1-4c12-9dab-dda6136e51ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a500b01-1ce1-4d10-b769-ff061eafcbf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8787610a-9e49-4a46-ac56-31452e16912d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc61e26f-4cab-45dc-a8cf-fe55e5f1cbfc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c8ffdf3b-9b8e-4d88-adba-ad26f0489c8f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "620082f5-7f55-43aa-835b-52cb20d2a0fa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8623f103-5c84-4945-a808-33f698817c4d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "06cd5574-d253-4769-92c2-e0527b80fc04",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "35eaeb01-cb51-4689-9ded-4f10182ad9a9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "34eb9ec2-cd74-4a62-a42e-a7468891c61b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b70790c3-558e-4ade-8f19-961a7ac185a4"
            }
          }
        ]
      },
      {
        "id": "4a12169d-5d79-4694-8d68-06729dc731b5",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "553f57c3-8002-4a53-9520-c28167609efe",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8a509fc5-6368-4e9f-bd30-313b83131af2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "22f0a896-1a24-4579-b100-475d00cb1dae",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab55456e-c6ef-477d-9b18-0b7ed0aa4beb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74c79ccc-b38a-4ece-8761-6f675ed90a71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f1e1793-9e2f-46ad-9a3c-548afcf315aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a285a267-dcbf-47b8-bf45-719e6551cfbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7c08d0e-ae23-4fac-80ab-b43695e882d5",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55327a4a-6195-4f17-b9fc-ceaf087522d8",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "dba9e684-e43d-4eb3-9b8a-ab7ee2eede1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8669518-ef55-4233-b99c-7e88e78221c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "12692d0a-113b-447a-acd8-8b1258ea2814"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6c551fd1-7f46-497c-b463-e1039277667a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c0a47ecf-e80a-4d8b-829d-b40d7a8396c2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d0c8b242-5cb4-41de-8cae-89dee6accf46",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9fa7c7fa-2331-45bf-9f89-cb53dc0166dc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "576cc7d9-e538-4e6f-9950-e4a3d230d6f5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "d424943c-ca78-40ba-9c37-3522a718dcfb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "313759e6-497e-4ee2-9d6b-130b605bc4e3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c1c6ab85-686a-43b6-80d0-770de737dbb4"
            }
          }
        ]
      },
      {
        "id": "f9ebf970-e07e-412c-8338-60c442069bfb",
        "name": "Presentations - Notify",
        "item": [],
        "event": []
      },
      {
        "id": "34f985c3-7944-4609-8a6f-201d50053fd8",
        "name": "Presentations - Submit",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 63,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 475,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 63,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 111,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 63,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 131,
        "pending": 0,
        "failed": 8
      },
      "testScripts": {
        "total": 240,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 235,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 88.98198198198202,
      "responseMin": 32,
      "responseMax": 1448,
      "responseSd": 176.21091896826172,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1663030347443,
      "completed": 1663030360393
    },
    "executions": [
      {
        "id": "f9c4d376-b804-4dba-a91a-8c6dc3637d4b",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 63,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "3a5ec95b-bf32-4dc0-bf83-735f7ddb69aa",
          "httpRequestId": "e344a6f4-0dcf-46c3-9d41-0325553a9ea8"
        },
        "item": {
          "id": "f9c4d376-b804-4dba-a91a-8c6dc3637d4b",
          "name": "did_json"
        },
        "response": {
          "id": "88df0290-c1c8-4b50-9289-da1ee5073517",
          "status": "OK",
          "code": 200,
          "responseTime": 221,
          "responseSize": 1002
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aea76a0f-b589-4e4d-9c7e-c3292bdc6f66",
        "cursor": {
          "ref": "c2eeff20-7cb6-4eb8-899c-8ae513b81b32",
          "length": 63,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "8bbc90bb-3e7c-403f-b1d3-2a461e93dd93"
        },
        "item": {
          "id": "aea76a0f-b589-4e4d-9c7e-c3292bdc6f66",
          "name": "did:invalid"
        },
        "response": {
          "id": "ace8fec4-781a-443d-8b8b-0ec5ab8400c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aea76a0f-b589-4e4d-9c7e-c3292bdc6f66",
        "cursor": {
          "ref": "c2eeff20-7cb6-4eb8-899c-8ae513b81b32",
          "length": 63,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "8bbc90bb-3e7c-403f-b1d3-2a461e93dd93"
        },
        "item": {
          "id": "aea76a0f-b589-4e4d-9c7e-c3292bdc6f66",
          "name": "did:invalid"
        },
        "response": {
          "id": "ace8fec4-781a-443d-8b8b-0ec5ab8400c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8addeb7-2c82-4d6e-ab91-c0e515dca990",
        "cursor": {
          "ref": "de145c2d-42ad-4c30-b878-71678346ebba",
          "length": 63,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "626ac05e-79a5-4ba8-84fa-e52306509aeb"
        },
        "item": {
          "id": "b8addeb7-2c82-4d6e-ab91-c0e515dca990",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "9d4abb96-1640-49df-b1b5-0d95863d2ede",
          "status": "Not Found",
          "code": 404,
          "responseTime": 96,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3390f5b2-d3f8-456f-897e-6f16deab9cd4",
        "cursor": {
          "ref": "3cabfbe4-2fe5-498e-9614-6410bff2dc4d",
          "length": 63,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "42e2a568-63f9-4526-bc90-bb2b2e9336de"
        },
        "item": {
          "id": "3390f5b2-d3f8-456f-897e-6f16deab9cd4",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "bd21815a-8e96-4309-8568-4048daa4d0fd",
          "status": "Not Found",
          "code": 404,
          "responseTime": 36,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4b39f44-17f6-4717-b40c-4102d9c93017",
        "cursor": {
          "ref": "2ba66a5a-88d1-44a8-bead-3bed666b5830",
          "length": 63,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ca16ac99-cabb-4a14-b122-b46a5ad953a9"
        },
        "item": {
          "id": "f4b39f44-17f6-4717-b40c-4102d9c93017",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "87216757-60c2-4bc7-94d4-a64f53328004",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e629b54b-72c7-443e-bad6-93437c23393a",
        "cursor": {
          "ref": "4157815c-384e-45ce-a728-1886efe86a02",
          "length": 63,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "362e1b8e-6825-4e5f-a5b1-b5957ca91908"
        },
        "item": {
          "id": "e629b54b-72c7-443e-bad6-93437c23393a",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "1301748e-ae50-4fb5-a2e7-aaf6d5ba37ca",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 37,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e629b54b-72c7-443e-bad6-93437c23393a",
        "cursor": {
          "ref": "4157815c-384e-45ce-a728-1886efe86a02",
          "length": 63,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "362e1b8e-6825-4e5f-a5b1-b5957ca91908"
        },
        "item": {
          "id": "e629b54b-72c7-443e-bad6-93437c23393a",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "1301748e-ae50-4fb5-a2e7-aaf6d5ba37ca",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 37,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6849fa96-40f9-4925-97a0-ca7560c4bd8e",
        "cursor": {
          "ref": "a7c15d8f-3e90-45e4-af1c-101673cf683c",
          "length": 63,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "3b7de7a9-4f41-488a-9049-43ce8ead0d5e"
        },
        "item": {
          "id": "6849fa96-40f9-4925-97a0-ca7560c4bd8e",
          "name": "identifiers"
        },
        "response": {
          "id": "7c93b3ab-a9b6-407a-955e-b556f5157ba9",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 1018
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60f96eb5-6f59-4097-93e7-c7c8ac08771e",
        "cursor": {
          "ref": "2df0d6f9-effe-4a1f-8746-7490241940b5",
          "length": 63,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "cdcf2da6-0151-4757-a586-b15aa3b0851d"
        },
        "item": {
          "id": "60f96eb5-6f59-4097-93e7-c7c8ac08771e",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "657a0bb8-3028-4056-8f2d-a62db71a6d38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60f96eb5-6f59-4097-93e7-c7c8ac08771e",
        "cursor": {
          "ref": "2df0d6f9-effe-4a1f-8746-7490241940b5",
          "length": 63,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "cdcf2da6-0151-4757-a586-b15aa3b0851d"
        },
        "item": {
          "id": "60f96eb5-6f59-4097-93e7-c7c8ac08771e",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "657a0bb8-3028-4056-8f2d-a62db71a6d38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60f96eb5-6f59-4097-93e7-c7c8ac08771e",
        "cursor": {
          "ref": "2df0d6f9-effe-4a1f-8746-7490241940b5",
          "length": 63,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "cdcf2da6-0151-4757-a586-b15aa3b0851d"
        },
        "item": {
          "id": "60f96eb5-6f59-4097-93e7-c7c8ac08771e",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "657a0bb8-3028-4056-8f2d-a62db71a6d38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94bc2eb8-bece-4e05-b3b5-3b1e6c33a446",
        "cursor": {
          "ref": "ace5bb12-cb50-4a6e-9e76-7be1ba60efb4",
          "length": 63,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "60c0f1a3-5b17-4622-99c3-c9515c888b7b"
        },
        "item": {
          "id": "94bc2eb8-bece-4e05-b3b5-3b1e6c33a446",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "8af8b84b-df49-4d1e-a673-85df7ef5a577",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94bc2eb8-bece-4e05-b3b5-3b1e6c33a446",
        "cursor": {
          "ref": "ace5bb12-cb50-4a6e-9e76-7be1ba60efb4",
          "length": 63,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "60c0f1a3-5b17-4622-99c3-c9515c888b7b"
        },
        "item": {
          "id": "94bc2eb8-bece-4e05-b3b5-3b1e6c33a446",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "8af8b84b-df49-4d1e-a673-85df7ef5a577",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "590e6e6a-da08-4af6-8fa6-b18d97baee1a",
        "cursor": {
          "ref": "15441744-4b16-4f9e-97c6-9887f434c43e",
          "length": 63,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "00cd489d-2608-45d2-890f-46b4c38c6b50"
        },
        "item": {
          "id": "590e6e6a-da08-4af6-8fa6-b18d97baee1a",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "09d2b131-d003-4a07-91ac-250d7958b3fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "590e6e6a-da08-4af6-8fa6-b18d97baee1a",
        "cursor": {
          "ref": "15441744-4b16-4f9e-97c6-9887f434c43e",
          "length": 63,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "00cd489d-2608-45d2-890f-46b4c38c6b50"
        },
        "item": {
          "id": "590e6e6a-da08-4af6-8fa6-b18d97baee1a",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "09d2b131-d003-4a07-91ac-250d7958b3fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c0b6959-6b0d-4fc9-8b20-8350f76cd1b4",
        "cursor": {
          "ref": "0947e038-d537-4cec-b307-9ea0fbdd3bbc",
          "length": 63,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "0acd20e7-f180-49b7-afd7-8b1559dbd014"
        },
        "item": {
          "id": "7c0b6959-6b0d-4fc9-8b20-8350f76cd1b4",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "43a4c016-4ce9-493d-b383-d3c199f880db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c0b6959-6b0d-4fc9-8b20-8350f76cd1b4",
        "cursor": {
          "ref": "0947e038-d537-4cec-b307-9ea0fbdd3bbc",
          "length": 63,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "0acd20e7-f180-49b7-afd7-8b1559dbd014"
        },
        "item": {
          "id": "7c0b6959-6b0d-4fc9-8b20-8350f76cd1b4",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "43a4c016-4ce9-493d-b383-d3c199f880db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9871f26-5b0e-4bf2-a4c9-f9879999079f",
        "cursor": {
          "ref": "666a44aa-eeaa-42ff-83b8-517e4f3007d7",
          "length": 63,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "b8d620e8-be01-4eee-be76-b56a1d7a9d49"
        },
        "item": {
          "id": "a9871f26-5b0e-4bf2-a4c9-f9879999079f",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "ce8531d0-4c37-4467-849f-e38c6e3120cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9871f26-5b0e-4bf2-a4c9-f9879999079f",
        "cursor": {
          "ref": "666a44aa-eeaa-42ff-83b8-517e4f3007d7",
          "length": 63,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "b8d620e8-be01-4eee-be76-b56a1d7a9d49"
        },
        "item": {
          "id": "a9871f26-5b0e-4bf2-a4c9-f9879999079f",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "ce8531d0-4c37-4467-849f-e38c6e3120cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddb5c766-a641-4ab9-85f4-939a78e61edb",
        "cursor": {
          "ref": "1eb77059-c510-4e09-a924-72eb9388165d",
          "length": 63,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "6c28e184-c1a1-46b6-9d3c-49afa58c08fe"
        },
        "item": {
          "id": "ddb5c766-a641-4ab9-85f4-939a78e61edb",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "0744bec2-0ea7-4e45-a1f1-982c93360a67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddb5c766-a641-4ab9-85f4-939a78e61edb",
        "cursor": {
          "ref": "1eb77059-c510-4e09-a924-72eb9388165d",
          "length": 63,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "6c28e184-c1a1-46b6-9d3c-49afa58c08fe"
        },
        "item": {
          "id": "ddb5c766-a641-4ab9-85f4-939a78e61edb",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "0744bec2-0ea7-4e45-a1f1-982c93360a67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f033e839-ca77-4d5f-862d-c4b7f01a1a29",
        "cursor": {
          "ref": "09b8454d-5db1-4d06-849b-6b441f1ba5a6",
          "length": 63,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "baeb4613-2c1c-49ca-89a2-c20947210697"
        },
        "item": {
          "id": "f033e839-ca77-4d5f-862d-c4b7f01a1a29",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "ee608eb9-6816-46e5-b9cb-998fd6aa6a42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f033e839-ca77-4d5f-862d-c4b7f01a1a29",
        "cursor": {
          "ref": "09b8454d-5db1-4d06-849b-6b441f1ba5a6",
          "length": 63,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "baeb4613-2c1c-49ca-89a2-c20947210697"
        },
        "item": {
          "id": "f033e839-ca77-4d5f-862d-c4b7f01a1a29",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "ee608eb9-6816-46e5-b9cb-998fd6aa6a42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29f90f06-2319-4ade-ab99-7b6f09e31243",
        "cursor": {
          "ref": "1a8a84ac-7aa7-42f1-b766-e7edb51917b6",
          "length": 63,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "2af9b26c-15a4-4973-8576-d17f4bd28de1"
        },
        "item": {
          "id": "29f90f06-2319-4ade-ab99-7b6f09e31243",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "c7b87e10-1df4-48b4-b031-e23fb3fcd451",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29f90f06-2319-4ade-ab99-7b6f09e31243",
        "cursor": {
          "ref": "1a8a84ac-7aa7-42f1-b766-e7edb51917b6",
          "length": 63,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "2af9b26c-15a4-4973-8576-d17f4bd28de1"
        },
        "item": {
          "id": "29f90f06-2319-4ade-ab99-7b6f09e31243",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "c7b87e10-1df4-48b4-b031-e23fb3fcd451",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa3200d2-11b2-4112-aad7-fa986eec9626",
        "cursor": {
          "ref": "e5964021-8e72-481b-94a7-edd5043c9117",
          "length": 63,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "7536b13e-db35-4913-8bdd-36430a6aaf5a"
        },
        "item": {
          "id": "fa3200d2-11b2-4112-aad7-fa986eec9626",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "430b0670-8114-491b-ab7a-fb3f6b018f15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa3200d2-11b2-4112-aad7-fa986eec9626",
        "cursor": {
          "ref": "e5964021-8e72-481b-94a7-edd5043c9117",
          "length": 63,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "7536b13e-db35-4913-8bdd-36430a6aaf5a"
        },
        "item": {
          "id": "fa3200d2-11b2-4112-aad7-fa986eec9626",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "430b0670-8114-491b-ab7a-fb3f6b018f15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4f1f015-3d9d-4917-8f56-0f86af1f3f36",
        "cursor": {
          "ref": "e14f575a-e5f9-4d27-949f-ab4d8f8d25ea",
          "length": 63,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "bcebd7b5-0e5a-4add-9019-917179718bd2"
        },
        "item": {
          "id": "d4f1f015-3d9d-4917-8f56-0f86af1f3f36",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "b5231717-1bee-4789-89dd-cd4fc711a349",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4f1f015-3d9d-4917-8f56-0f86af1f3f36",
        "cursor": {
          "ref": "e14f575a-e5f9-4d27-949f-ab4d8f8d25ea",
          "length": 63,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "bcebd7b5-0e5a-4add-9019-917179718bd2"
        },
        "item": {
          "id": "d4f1f015-3d9d-4917-8f56-0f86af1f3f36",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "b5231717-1bee-4789-89dd-cd4fc711a349",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2067f43b-4ec0-43ad-ab26-6508a7b27c6f",
        "cursor": {
          "ref": "9959511b-a8be-48fe-883e-1e332c786227",
          "length": 63,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "fc10dc55-54b8-4553-9ddc-3fb2646837c6"
        },
        "item": {
          "id": "2067f43b-4ec0-43ad-ab26-6508a7b27c6f",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "8c4cfded-f823-4725-af81-82e44f182eea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2067f43b-4ec0-43ad-ab26-6508a7b27c6f",
        "cursor": {
          "ref": "9959511b-a8be-48fe-883e-1e332c786227",
          "length": 63,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "fc10dc55-54b8-4553-9ddc-3fb2646837c6"
        },
        "item": {
          "id": "2067f43b-4ec0-43ad-ab26-6508a7b27c6f",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "8c4cfded-f823-4725-af81-82e44f182eea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad1d882a-0a2f-44a2-a40d-72b77241b484",
        "cursor": {
          "ref": "1d139221-4b67-4e8f-b6d3-2720ea99bbc4",
          "length": 63,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "4d69d987-3541-4205-ae65-7df01a9b4a10"
        },
        "item": {
          "id": "ad1d882a-0a2f-44a2-a40d-72b77241b484",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "e5527291-88de-49cd-895f-f78cdad1b8fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1002,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad1d882a-0a2f-44a2-a40d-72b77241b484",
        "cursor": {
          "ref": "1d139221-4b67-4e8f-b6d3-2720ea99bbc4",
          "length": 63,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "4d69d987-3541-4205-ae65-7df01a9b4a10"
        },
        "item": {
          "id": "ad1d882a-0a2f-44a2-a40d-72b77241b484",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "e5527291-88de-49cd-895f-f78cdad1b8fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1002,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50685420-d96f-4d5c-a458-69a9be227814",
        "cursor": {
          "ref": "cca09d4f-e80d-47ae-9624-e7c34e83cd47",
          "length": 63,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "d5a6ea03-1171-4bf2-8caf-2f146cc1451f"
        },
        "item": {
          "id": "50685420-d96f-4d5c-a458-69a9be227814",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "4d0ce793-f7db-4ca1-9d7f-e8bd95c01db8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50685420-d96f-4d5c-a458-69a9be227814",
        "cursor": {
          "ref": "cca09d4f-e80d-47ae-9624-e7c34e83cd47",
          "length": 63,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "d5a6ea03-1171-4bf2-8caf-2f146cc1451f"
        },
        "item": {
          "id": "50685420-d96f-4d5c-a458-69a9be227814",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "4d0ce793-f7db-4ca1-9d7f-e8bd95c01db8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adce8bb5-d45d-4df1-8c18-2a119cc000a7",
        "cursor": {
          "ref": "2e6ac8a3-2787-4fd8-abd4-d7e4bb69a36e",
          "length": 63,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "28e8315d-e9b3-46c2-83c9-daf82213f36b"
        },
        "item": {
          "id": "adce8bb5-d45d-4df1-8c18-2a119cc000a7",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "71978af3-fec9-43cf-94e8-09c59eb9d766",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adce8bb5-d45d-4df1-8c18-2a119cc000a7",
        "cursor": {
          "ref": "2e6ac8a3-2787-4fd8-abd4-d7e4bb69a36e",
          "length": 63,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "28e8315d-e9b3-46c2-83c9-daf82213f36b"
        },
        "item": {
          "id": "adce8bb5-d45d-4df1-8c18-2a119cc000a7",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "71978af3-fec9-43cf-94e8-09c59eb9d766",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab5a8e71-ac14-496d-b3fb-2677de059476",
        "cursor": {
          "ref": "2096458c-5e3c-43d6-b0f7-16632859a884",
          "length": 63,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "cf59a129-1312-4c2f-be77-51784a603ae6"
        },
        "item": {
          "id": "ab5a8e71-ac14-496d-b3fb-2677de059476",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "5d2ef650-5971-4392-b08b-214e0cb47742",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab5a8e71-ac14-496d-b3fb-2677de059476",
        "cursor": {
          "ref": "2096458c-5e3c-43d6-b0f7-16632859a884",
          "length": 63,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "cf59a129-1312-4c2f-be77-51784a603ae6"
        },
        "item": {
          "id": "ab5a8e71-ac14-496d-b3fb-2677de059476",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "5d2ef650-5971-4392-b08b-214e0cb47742",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ad6145b-11a6-40f8-a508-21006d7a6e08",
        "cursor": {
          "ref": "de976e4f-39fd-407d-84e2-d6b38c2b16fd",
          "length": 63,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "ca2325a7-8b66-4998-a5a2-90b4074fef78"
        },
        "item": {
          "id": "2ad6145b-11a6-40f8-a508-21006d7a6e08",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "e7c595f2-7b44-4b63-b252-3ddd4bfed5c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 168,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ad6145b-11a6-40f8-a508-21006d7a6e08",
        "cursor": {
          "ref": "de976e4f-39fd-407d-84e2-d6b38c2b16fd",
          "length": 63,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "ca2325a7-8b66-4998-a5a2-90b4074fef78"
        },
        "item": {
          "id": "2ad6145b-11a6-40f8-a508-21006d7a6e08",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "e7c595f2-7b44-4b63-b252-3ddd4bfed5c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 168,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1382b9d0-7dfc-442e-adcc-568c44b847b8",
        "cursor": {
          "ref": "9e16132a-fece-452c-86f4-ad4c7c0fdd26",
          "length": 63,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "74c799d9-0abb-4d36-80e8-60e974979a28"
        },
        "item": {
          "id": "1382b9d0-7dfc-442e-adcc-568c44b847b8",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "c900a1c6-881f-42d8-940e-338a52798364",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1382b9d0-7dfc-442e-adcc-568c44b847b8",
        "cursor": {
          "ref": "9e16132a-fece-452c-86f4-ad4c7c0fdd26",
          "length": 63,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "74c799d9-0abb-4d36-80e8-60e974979a28"
        },
        "item": {
          "id": "1382b9d0-7dfc-442e-adcc-568c44b847b8",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "c900a1c6-881f-42d8-940e-338a52798364",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57e9eae8-e809-425b-b182-fff9dc03c87d",
        "cursor": {
          "ref": "44a41d9a-f304-4c62-989c-fb60f3c301a2",
          "length": 63,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "023af31a-005a-4a35-8fab-531aa6483d44"
        },
        "item": {
          "id": "57e9eae8-e809-425b-b182-fff9dc03c87d",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "e35cde66-dea6-44fc-a623-c0a37e0ff61f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57e9eae8-e809-425b-b182-fff9dc03c87d",
        "cursor": {
          "ref": "44a41d9a-f304-4c62-989c-fb60f3c301a2",
          "length": 63,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "023af31a-005a-4a35-8fab-531aa6483d44"
        },
        "item": {
          "id": "57e9eae8-e809-425b-b182-fff9dc03c87d",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "e35cde66-dea6-44fc-a623-c0a37e0ff61f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "536c46ab-81af-47df-9ab1-33232b79d42a",
        "cursor": {
          "ref": "1eafc701-a7a7-4806-842a-13a444a91ff1",
          "length": 63,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "498f5e07-fda4-4e5b-bd89-bdc00f4ba12f"
        },
        "item": {
          "id": "536c46ab-81af-47df-9ab1-33232b79d42a",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "393c5cf0-316c-4c20-8d81-e18fd0acf3a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "536c46ab-81af-47df-9ab1-33232b79d42a",
        "cursor": {
          "ref": "1eafc701-a7a7-4806-842a-13a444a91ff1",
          "length": 63,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "498f5e07-fda4-4e5b-bd89-bdc00f4ba12f"
        },
        "item": {
          "id": "536c46ab-81af-47df-9ab1-33232b79d42a",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "393c5cf0-316c-4c20-8d81-e18fd0acf3a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c09dd999-3dab-4b02-9ec0-d12b0909a6c7",
        "cursor": {
          "ref": "29af8401-ef3b-4939-904a-e9e89a49c905",
          "length": 63,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "f34a7c66-4d1e-4d7d-b050-a35df4fca042"
        },
        "item": {
          "id": "c09dd999-3dab-4b02-9ec0-d12b0909a6c7",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "dd585a31-1754-4cbc-b246-8cb25fa4429b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c09dd999-3dab-4b02-9ec0-d12b0909a6c7",
        "cursor": {
          "ref": "29af8401-ef3b-4939-904a-e9e89a49c905",
          "length": 63,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "f34a7c66-4d1e-4d7d-b050-a35df4fca042"
        },
        "item": {
          "id": "c09dd999-3dab-4b02-9ec0-d12b0909a6c7",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "dd585a31-1754-4cbc-b246-8cb25fa4429b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01225f5f-9e3c-4dbb-9930-939c5e63ad9d",
        "cursor": {
          "ref": "adbb63e1-1fbc-43bb-9eb8-b6671f836a13",
          "length": 63,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "132cbb40-2af5-4bb2-a456-58451b48656c"
        },
        "item": {
          "id": "01225f5f-9e3c-4dbb-9930-939c5e63ad9d",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "d259aa7b-5011-4394-abff-b7a4701e20a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01225f5f-9e3c-4dbb-9930-939c5e63ad9d",
        "cursor": {
          "ref": "adbb63e1-1fbc-43bb-9eb8-b6671f836a13",
          "length": 63,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "132cbb40-2af5-4bb2-a456-58451b48656c"
        },
        "item": {
          "id": "01225f5f-9e3c-4dbb-9930-939c5e63ad9d",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "d259aa7b-5011-4394-abff-b7a4701e20a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "507faa57-ecae-47f0-be41-8480bea53bc5",
        "cursor": {
          "ref": "246625d2-d01b-43c7-91ca-790d7d34eafd",
          "length": 63,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "4606c11c-6016-4a0c-bca8-b4fdd6265864"
        },
        "item": {
          "id": "507faa57-ecae-47f0-be41-8480bea53bc5",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "98209ee1-020b-4fae-a5aa-fc74a24415ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "507faa57-ecae-47f0-be41-8480bea53bc5",
        "cursor": {
          "ref": "246625d2-d01b-43c7-91ca-790d7d34eafd",
          "length": 63,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "4606c11c-6016-4a0c-bca8-b4fdd6265864"
        },
        "item": {
          "id": "507faa57-ecae-47f0-be41-8480bea53bc5",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "98209ee1-020b-4fae-a5aa-fc74a24415ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "144b2894-98f4-4899-bf69-31718af1859f",
        "cursor": {
          "ref": "3fb39355-f7c9-4872-9804-253206f97789",
          "length": 63,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "8171784f-b32c-49fa-a9f0-04c0a22e25dc"
        },
        "item": {
          "id": "144b2894-98f4-4899-bf69-31718af1859f",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "edd21310-c83b-4692-9c3a-59df1a66b99b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "144b2894-98f4-4899-bf69-31718af1859f",
        "cursor": {
          "ref": "3fb39355-f7c9-4872-9804-253206f97789",
          "length": 63,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "8171784f-b32c-49fa-a9f0-04c0a22e25dc"
        },
        "item": {
          "id": "144b2894-98f4-4899-bf69-31718af1859f",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "edd21310-c83b-4692-9c3a-59df1a66b99b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0400bcc0-cb9f-4e2c-98c8-75ef1c998c70",
        "cursor": {
          "ref": "63d66c29-e624-4f5e-af1b-926009870a3a",
          "length": 63,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "c63f400a-29dc-4458-ac10-c5e2f234d855"
        },
        "item": {
          "id": "0400bcc0-cb9f-4e2c-98c8-75ef1c998c70",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "b3c4b9e1-30f2-4dab-96a8-5e6c1eb00c64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0400bcc0-cb9f-4e2c-98c8-75ef1c998c70",
        "cursor": {
          "ref": "63d66c29-e624-4f5e-af1b-926009870a3a",
          "length": 63,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "c63f400a-29dc-4458-ac10-c5e2f234d855"
        },
        "item": {
          "id": "0400bcc0-cb9f-4e2c-98c8-75ef1c998c70",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "b3c4b9e1-30f2-4dab-96a8-5e6c1eb00c64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d2e31b2-650e-4ccf-bea5-0d53d113cf80",
        "cursor": {
          "ref": "aa194132-c386-46af-a429-58efd709166f",
          "length": 63,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "9fa82ab9-245e-4714-a1f2-fc38223e0bde"
        },
        "item": {
          "id": "1d2e31b2-650e-4ccf-bea5-0d53d113cf80",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "fffac61a-b6e7-4f1b-8c86-71dba92537d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d2e31b2-650e-4ccf-bea5-0d53d113cf80",
        "cursor": {
          "ref": "aa194132-c386-46af-a429-58efd709166f",
          "length": 63,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "9fa82ab9-245e-4714-a1f2-fc38223e0bde"
        },
        "item": {
          "id": "1d2e31b2-650e-4ccf-bea5-0d53d113cf80",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "fffac61a-b6e7-4f1b-8c86-71dba92537d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea219f50-8119-492b-a0fd-5e9ffbe9b7f9",
        "cursor": {
          "ref": "590bc288-c316-4957-8385-f36575668108",
          "length": 63,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "2f7681d7-69f8-4f30-9ea9-045fd2223626"
        },
        "item": {
          "id": "ea219f50-8119-492b-a0fd-5e9ffbe9b7f9",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "26c9adff-c862-4f49-8374-14f00261039d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea219f50-8119-492b-a0fd-5e9ffbe9b7f9",
        "cursor": {
          "ref": "590bc288-c316-4957-8385-f36575668108",
          "length": 63,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "2f7681d7-69f8-4f30-9ea9-045fd2223626"
        },
        "item": {
          "id": "ea219f50-8119-492b-a0fd-5e9ffbe9b7f9",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "26c9adff-c862-4f49-8374-14f00261039d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32d16737-a810-4882-9cf3-b4d2b94ebd0f",
        "cursor": {
          "ref": "dc542ee2-6ecc-4b64-9b08-adcf97378fa7",
          "length": 63,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "0cb8ade6-c2d5-4b4a-b342-36020ba7c5f5"
        },
        "item": {
          "id": "32d16737-a810-4882-9cf3-b4d2b94ebd0f",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "823fe09d-88de-433b-b73a-18b6e91bdc93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1448,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32d16737-a810-4882-9cf3-b4d2b94ebd0f",
        "cursor": {
          "ref": "dc542ee2-6ecc-4b64-9b08-adcf97378fa7",
          "length": 63,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "0cb8ade6-c2d5-4b4a-b342-36020ba7c5f5"
        },
        "item": {
          "id": "32d16737-a810-4882-9cf3-b4d2b94ebd0f",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "823fe09d-88de-433b-b73a-18b6e91bdc93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1448,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2cb848a-4646-4ded-a39a-c7cd6759f2c9",
        "cursor": {
          "ref": "60e71459-b1cd-45d3-a023-c6a921d96ef5",
          "length": 63,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "ec155edd-12b6-4805-9cec-5c15692b846f"
        },
        "item": {
          "id": "c2cb848a-4646-4ded-a39a-c7cd6759f2c9",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "f06af5e3-4cae-4722-956b-6caeabc9e75c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2cb848a-4646-4ded-a39a-c7cd6759f2c9",
        "cursor": {
          "ref": "60e71459-b1cd-45d3-a023-c6a921d96ef5",
          "length": 63,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "ec155edd-12b6-4805-9cec-5c15692b846f"
        },
        "item": {
          "id": "c2cb848a-4646-4ded-a39a-c7cd6759f2c9",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "f06af5e3-4cae-4722-956b-6caeabc9e75c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1604545-aca4-483f-aaae-ba6b5d5fff96",
        "cursor": {
          "ref": "dbbca18e-18c8-44b6-8a6b-9979765d11d3",
          "length": 63,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "9e66392a-f501-4702-97a6-7f801a3f25ce"
        },
        "item": {
          "id": "b1604545-aca4-483f-aaae-ba6b5d5fff96",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "a3305956-462d-493d-aa46-3025339bc447",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1604545-aca4-483f-aaae-ba6b5d5fff96",
        "cursor": {
          "ref": "dbbca18e-18c8-44b6-8a6b-9979765d11d3",
          "length": 63,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "9e66392a-f501-4702-97a6-7f801a3f25ce"
        },
        "item": {
          "id": "b1604545-aca4-483f-aaae-ba6b5d5fff96",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "a3305956-462d-493d-aa46-3025339bc447",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a808228-0830-4d59-aa96-1b2d6adac705",
        "cursor": {
          "ref": "76c619bd-a5ae-414d-808c-56332b6f7c81",
          "length": 63,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "7418efc0-b257-44e8-80e2-35ef8e7096cb"
        },
        "item": {
          "id": "3a808228-0830-4d59-aa96-1b2d6adac705",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "15d2a31e-5928-4aae-844c-1e2d340f7dce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a808228-0830-4d59-aa96-1b2d6adac705",
        "cursor": {
          "ref": "76c619bd-a5ae-414d-808c-56332b6f7c81",
          "length": 63,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "7418efc0-b257-44e8-80e2-35ef8e7096cb"
        },
        "item": {
          "id": "3a808228-0830-4d59-aa96-1b2d6adac705",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "15d2a31e-5928-4aae-844c-1e2d340f7dce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d6a325c-549b-4a67-bc2e-73a6b46499a0",
        "cursor": {
          "ref": "bae725df-d1ae-4980-a5b6-bce30a7e8d89",
          "length": 63,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "14594f3e-5cda-4582-98d7-2fe8a72d6204"
        },
        "item": {
          "id": "6d6a325c-549b-4a67-bc2e-73a6b46499a0",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "6e70f60b-c15f-445c-9582-fc8dbaef8dfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d6a325c-549b-4a67-bc2e-73a6b46499a0",
        "cursor": {
          "ref": "bae725df-d1ae-4980-a5b6-bce30a7e8d89",
          "length": 63,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "14594f3e-5cda-4582-98d7-2fe8a72d6204"
        },
        "item": {
          "id": "6d6a325c-549b-4a67-bc2e-73a6b46499a0",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "6e70f60b-c15f-445c-9582-fc8dbaef8dfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46bf36ed-f57d-4a65-ac61-5bfdb8fc68b3",
        "cursor": {
          "ref": "234f5f2a-9744-4eed-af5f-fc3a111c3d5a",
          "length": 63,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "313369a8-c98a-4076-8143-c951cf4d9b2d"
        },
        "item": {
          "id": "46bf36ed-f57d-4a65-ac61-5bfdb8fc68b3",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "74c6aa5b-1391-40f2-b1a9-8c2153f1ea51",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46bf36ed-f57d-4a65-ac61-5bfdb8fc68b3",
        "cursor": {
          "ref": "234f5f2a-9744-4eed-af5f-fc3a111c3d5a",
          "length": 63,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "313369a8-c98a-4076-8143-c951cf4d9b2d"
        },
        "item": {
          "id": "46bf36ed-f57d-4a65-ac61-5bfdb8fc68b3",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "74c6aa5b-1391-40f2-b1a9-8c2153f1ea51",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4df4cac8-ed46-4606-b087-284fe6e189b0",
        "cursor": {
          "ref": "bc205ce1-f88f-4b66-8bf8-ef0ea8624b09",
          "length": 63,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "35a3be78-e999-42c2-9d56-8942bd9611b0"
        },
        "item": {
          "id": "4df4cac8-ed46-4606-b087-284fe6e189b0",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "2669b8e1-3587-4be5-abc3-8a022fbd7a2c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4df4cac8-ed46-4606-b087-284fe6e189b0",
        "cursor": {
          "ref": "bc205ce1-f88f-4b66-8bf8-ef0ea8624b09",
          "length": 63,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "35a3be78-e999-42c2-9d56-8942bd9611b0"
        },
        "item": {
          "id": "4df4cac8-ed46-4606-b087-284fe6e189b0",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "2669b8e1-3587-4be5-abc3-8a022fbd7a2c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "113a72c2-e8d6-4256-9d7f-3a62df0d3c18",
        "cursor": {
          "ref": "b15ce0ac-e0e0-4350-b78d-27c3474d14f2",
          "length": 63,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "edd2b75c-9ae5-43de-9dc6-820370802358"
        },
        "item": {
          "id": "113a72c2-e8d6-4256-9d7f-3a62df0d3c18",
          "name": "credentials_issue"
        },
        "response": {
          "id": "af833e68-6e4f-4626-8391-c19a2414a985",
          "status": "Created",
          "code": 201,
          "responseTime": 377,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "113a72c2-e8d6-4256-9d7f-3a62df0d3c18",
        "cursor": {
          "ref": "b15ce0ac-e0e0-4350-b78d-27c3474d14f2",
          "length": 63,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "edd2b75c-9ae5-43de-9dc6-820370802358"
        },
        "item": {
          "id": "113a72c2-e8d6-4256-9d7f-3a62df0d3c18",
          "name": "credentials_issue"
        },
        "response": {
          "id": "af833e68-6e4f-4626-8391-c19a2414a985",
          "status": "Created",
          "code": 201,
          "responseTime": 377,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "3652b4a3-d37f-459b-968c-ef5c6ac73c44",
        "cursor": {
          "ref": "da1c813a-9faa-4842-8ea1-85b8d633ea42",
          "length": 63,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "1cba1124-c6a1-49cf-b2b3-441b5eb8026d"
        },
        "item": {
          "id": "3652b4a3-d37f-459b-968c-ef5c6ac73c44",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "ec113faa-3df2-42ef-9b53-bff76ffdfdec",
          "status": "Created",
          "code": 201,
          "responseTime": 347,
          "responseSize": 607
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3652b4a3-d37f-459b-968c-ef5c6ac73c44",
        "cursor": {
          "ref": "da1c813a-9faa-4842-8ea1-85b8d633ea42",
          "length": 63,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "1cba1124-c6a1-49cf-b2b3-441b5eb8026d"
        },
        "item": {
          "id": "3652b4a3-d37f-459b-968c-ef5c6ac73c44",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "ec113faa-3df2-42ef-9b53-bff76ffdfdec",
          "status": "Created",
          "code": 201,
          "responseTime": 347,
          "responseSize": 607
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80b830de-f6df-4141-83c8-24e378c106c0",
        "cursor": {
          "ref": "429d0c5b-cc9b-4201-96cc-0ab5365c2742",
          "length": 63,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "00bd047f-32d2-40b9-bf8c-1e4864dae3a0"
        },
        "item": {
          "id": "80b830de-f6df-4141-83c8-24e378c106c0",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "01b889f5-37f2-421d-859c-2366f5d7ddda",
          "status": "Created",
          "code": 201,
          "responseTime": 323,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "80b830de-f6df-4141-83c8-24e378c106c0",
        "cursor": {
          "ref": "429d0c5b-cc9b-4201-96cc-0ab5365c2742",
          "length": 63,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "00bd047f-32d2-40b9-bf8c-1e4864dae3a0"
        },
        "item": {
          "id": "80b830de-f6df-4141-83c8-24e378c106c0",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "01b889f5-37f2-421d-859c-2366f5d7ddda",
          "status": "Created",
          "code": 201,
          "responseTime": 323,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "306f75a1-3c77-4e58-969b-f21c289da357",
        "cursor": {
          "ref": "6a8b7931-2c7a-4111-920b-c54f8bc69ec1",
          "length": 63,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "2463a074-ab9e-40fb-859b-a2d331a0689a"
        },
        "item": {
          "id": "306f75a1-3c77-4e58-969b-f21c289da357",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "afd54fbd-8881-4f26-93fc-3e1a836d54bb",
          "status": "Created",
          "code": 201,
          "responseTime": 330,
          "responseSize": 576
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "306f75a1-3c77-4e58-969b-f21c289da357",
        "cursor": {
          "ref": "6a8b7931-2c7a-4111-920b-c54f8bc69ec1",
          "length": 63,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "2463a074-ab9e-40fb-859b-a2d331a0689a"
        },
        "item": {
          "id": "306f75a1-3c77-4e58-969b-f21c289da357",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "afd54fbd-8881-4f26-93fc-3e1a836d54bb",
          "status": "Created",
          "code": 201,
          "responseTime": 330,
          "responseSize": 576
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "74b0a4ea-d88f-4ed1-b48e-cee71e4fdc99",
        "cursor": {
          "ref": "1002b15a-40ab-458b-b44d-c695f2555723",
          "length": 63,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "c2cbdbfe-2308-4829-8931-018555ecf233"
        },
        "item": {
          "id": "74b0a4ea-d88f-4ed1-b48e-cee71e4fdc99",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "89e9cdcc-f555-45a5-af90-6360372b047c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "74b0a4ea-d88f-4ed1-b48e-cee71e4fdc99",
        "cursor": {
          "ref": "1002b15a-40ab-458b-b44d-c695f2555723",
          "length": 63,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "c2cbdbfe-2308-4829-8931-018555ecf233"
        },
        "item": {
          "id": "74b0a4ea-d88f-4ed1-b48e-cee71e4fdc99",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "89e9cdcc-f555-45a5-af90-6360372b047c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "1d95b054-76e0-42e4-9137-a87f46adefdf",
        "cursor": {
          "ref": "8b00d261-216a-4308-9253-8416afa9d5cf",
          "length": 63,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "0de293a1-2d19-47a5-8575-adf2210dd2eb"
        },
        "item": {
          "id": "1d95b054-76e0-42e4-9137-a87f46adefdf",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "e23d89ad-a194-4bcd-9400-842ba22330c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "1d95b054-76e0-42e4-9137-a87f46adefdf",
        "cursor": {
          "ref": "8b00d261-216a-4308-9253-8416afa9d5cf",
          "length": 63,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "0de293a1-2d19-47a5-8575-adf2210dd2eb"
        },
        "item": {
          "id": "1d95b054-76e0-42e4-9137-a87f46adefdf",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "e23d89ad-a194-4bcd-9400-842ba22330c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "90fed5f2-3e43-4b48-9843-66bbde5f4310",
        "cursor": {
          "ref": "f2bd2839-4835-405f-bd57-5e7bb0fef4b3",
          "length": 63,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "b51b49ff-65ab-4b87-9e14-ab388ae70006"
        },
        "item": {
          "id": "90fed5f2-3e43-4b48-9843-66bbde5f4310",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "4d09a724-8ced-4b4c-8d53-15da80b9c844",
          "status": "Created",
          "code": 201,
          "responseTime": 341,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90fed5f2-3e43-4b48-9843-66bbde5f4310",
        "cursor": {
          "ref": "f2bd2839-4835-405f-bd57-5e7bb0fef4b3",
          "length": 63,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "b51b49ff-65ab-4b87-9e14-ab388ae70006"
        },
        "item": {
          "id": "90fed5f2-3e43-4b48-9843-66bbde5f4310",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "4d09a724-8ced-4b4c-8d53-15da80b9c844",
          "status": "Created",
          "code": 201,
          "responseTime": 341,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30fdc6e1-9909-495a-b9d0-970305255eb8",
        "cursor": {
          "ref": "f8fcbe92-1e0c-4c5e-a668-457e8b4d2863",
          "length": 63,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "62c3113c-20b9-446b-99e3-cfdfb04ad4a5"
        },
        "item": {
          "id": "30fdc6e1-9909-495a-b9d0-970305255eb8",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "d12d440f-7bcb-40ea-9323-aa0576af18fd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30fdc6e1-9909-495a-b9d0-970305255eb8",
        "cursor": {
          "ref": "f8fcbe92-1e0c-4c5e-a668-457e8b4d2863",
          "length": 63,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "62c3113c-20b9-446b-99e3-cfdfb04ad4a5"
        },
        "item": {
          "id": "30fdc6e1-9909-495a-b9d0-970305255eb8",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "d12d440f-7bcb-40ea-9323-aa0576af18fd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6de989e6-aad9-4e96-9704-b76b456756a1",
        "cursor": {
          "ref": "10432ddb-cf04-4a40-94c7-53e98d6b820d",
          "length": 63,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "9f098dea-804d-4410-b9c9-9ff159166067"
        },
        "item": {
          "id": "6de989e6-aad9-4e96-9704-b76b456756a1",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "c64fe54b-daa2-45f6-8267-bc44b38f84b4",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 34,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aba23a3-aa0e-493d-a6cd-0cb927cffcea",
        "cursor": {
          "ref": "8ab2fbd0-f862-4d58-a212-0b1fdd705894",
          "length": 63,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "aa83aeb7-0d86-4a54-ac79-33eb43f8610a"
        },
        "item": {
          "id": "9aba23a3-aa0e-493d-a6cd-0cb927cffcea",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "6d6e7256-ac28-490c-942b-c37101d058da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 175,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aba23a3-aa0e-493d-a6cd-0cb927cffcea",
        "cursor": {
          "ref": "8ab2fbd0-f862-4d58-a212-0b1fdd705894",
          "length": 63,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "aa83aeb7-0d86-4a54-ac79-33eb43f8610a"
        },
        "item": {
          "id": "9aba23a3-aa0e-493d-a6cd-0cb927cffcea",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "6d6e7256-ac28-490c-942b-c37101d058da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 175,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77f76cec-dcd1-4325-847d-dd9c8af5a106",
        "cursor": {
          "ref": "ab5ae690-15b3-4b9a-9243-f3b2c390f582",
          "length": 63,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "db2e44d9-370b-492e-8892-4901942cf631"
        },
        "item": {
          "id": "77f76cec-dcd1-4325-847d-dd9c8af5a106",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "11d1bbbf-c7d5-4341-85a5-085c6afa3ddc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5af1b8fa-b364-4635-9033-dafd5c38f9d6",
        "cursor": {
          "ref": "ce66cbd5-2546-43e6-bb21-71d7c11aecf9",
          "length": 63,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "28cd0c53-1cdd-4da7-9f1e-09769831231d"
        },
        "item": {
          "id": "5af1b8fa-b364-4635-9033-dafd5c38f9d6",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "0cad0940-183e-4e4f-969a-1a7e4296c1e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 175,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33496a0e-f2c9-4063-a3f5-4bb105713da5",
        "cursor": {
          "ref": "d4b04ec7-d408-49b2-b534-8032307cffbd",
          "length": 63,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "beacead7-3bf0-42ff-9ec1-9b0da2f9ef8c"
        },
        "item": {
          "id": "33496a0e-f2c9-4063-a3f5-4bb105713da5",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "142cab41-f291-42dc-a2db-797a85928154",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc184872-2b4b-4159-b6e4-c36dbef97b43",
        "cursor": {
          "ref": "b15d923b-3541-46b6-92db-816608d1e372",
          "length": 63,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "5e0526d8-5831-4d53-a978-8cbd7669f84f"
        },
        "item": {
          "id": "cc184872-2b4b-4159-b6e4-c36dbef97b43",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "9b6f03a5-2b6c-4394-b9f9-7a0a977ae03a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e756b585-68ce-4904-94d3-f0089108f26f",
        "cursor": {
          "ref": "c59402a1-b4ef-4ee7-9264-e95225ad7d85",
          "length": 63,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "ecc4af1f-e31c-474e-a2f6-25f7ca187757"
        },
        "item": {
          "id": "e756b585-68ce-4904-94d3-f0089108f26f",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "3486b15d-2fd8-4876-9af2-1f126c5f24f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04969728-c312-46d7-a203-f79735e15465",
        "cursor": {
          "ref": "154f7be2-7fa7-48c8-9b1a-b8cff4b7b775",
          "length": 63,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "77c0a222-1b1a-439f-9f1e-62fbfe03cbc8"
        },
        "item": {
          "id": "04969728-c312-46d7-a203-f79735e15465",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "aa94b596-7655-438d-8d61-c73a16ce5b1c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc0615dc-67f4-4f0b-892e-7790bc9c36d6",
        "cursor": {
          "ref": "48526e99-76f7-4be1-b6a3-0d3563352740",
          "length": 63,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "7b6b0ad2-7e51-4e84-b761-500e9e5b2ef6"
        },
        "item": {
          "id": "dc0615dc-67f4-4f0b-892e-7790bc9c36d6",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "98e7c30a-a0cc-42c1-ad58-7300689cbf44",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 35,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4329d2f1-3866-495c-a2a5-b2ff6d32038e",
        "cursor": {
          "ref": "30b788cd-24c3-4da9-9cdb-c8dabbff1021",
          "length": 63,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "77d3ef00-8ba1-466c-9314-604568cc97f7"
        },
        "item": {
          "id": "4329d2f1-3866-495c-a2a5-b2ff6d32038e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "fa612682-84f9-4c50-a906-a99e51172fbe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4329d2f1-3866-495c-a2a5-b2ff6d32038e",
        "cursor": {
          "ref": "30b788cd-24c3-4da9-9cdb-c8dabbff1021",
          "length": 63,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "77d3ef00-8ba1-466c-9314-604568cc97f7"
        },
        "item": {
          "id": "4329d2f1-3866-495c-a2a5-b2ff6d32038e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "fa612682-84f9-4c50-a906-a99e51172fbe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51924b61-a8f6-41f5-9980-8d8bca269a05",
        "cursor": {
          "ref": "420dce25-8c2c-42ee-b42a-9437624da79c",
          "length": 63,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "0cff494a-7a87-4b64-8f91-f5327cebac31"
        },
        "item": {
          "id": "51924b61-a8f6-41f5-9980-8d8bca269a05",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "503b5b71-e769-49ff-93cf-10119db2e971",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 41,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7e52b2b-aac6-4c84-9d52-db57e6ff38f0",
        "cursor": {
          "ref": "af7e249a-b873-445b-9f07-7339729e58d6",
          "length": 63,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "5a629f92-de61-4171-ab2c-032515d52667"
        },
        "item": {
          "id": "f7e52b2b-aac6-4c84-9d52-db57e6ff38f0",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "b9c2fb12-c495-40f8-a19f-b1d8802de6fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "f7e52b2b-aac6-4c84-9d52-db57e6ff38f0",
        "cursor": {
          "ref": "af7e249a-b873-445b-9f07-7339729e58d6",
          "length": 63,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "5a629f92-de61-4171-ab2c-032515d52667"
        },
        "item": {
          "id": "f7e52b2b-aac6-4c84-9d52-db57e6ff38f0",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "b9c2fb12-c495-40f8-a19f-b1d8802de6fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "6dbf8a1b-26ca-4edf-b1bb-24e9a2b50d50",
        "cursor": {
          "ref": "18b49088-2933-4d1a-8b15-238df9d915b7",
          "length": 63,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "6edceb86-b8d4-47a1-879e-f84fe1d40b12"
        },
        "item": {
          "id": "6dbf8a1b-26ca-4edf-b1bb-24e9a2b50d50",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "6b4983c9-ca8f-45f1-aff6-f3552863a3c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 135,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "22f0a896-1a24-4579-b100-475d00cb1dae",
        "cursor": {
          "ref": "87c00518-54e5-4883-aa14-2afe2e65dd85",
          "length": 63,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "f4abf40f-4a39-43bc-8791-7146c2131f8d"
        },
        "item": {
          "id": "22f0a896-1a24-4579-b100-475d00cb1dae",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "abc49351-8f71-45db-b479-5134e42d116c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22f0a896-1a24-4579-b100-475d00cb1dae",
        "cursor": {
          "ref": "87c00518-54e5-4883-aa14-2afe2e65dd85",
          "length": 63,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "f4abf40f-4a39-43bc-8791-7146c2131f8d"
        },
        "item": {
          "id": "22f0a896-1a24-4579-b100-475d00cb1dae",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "abc49351-8f71-45db-b479-5134e42d116c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7c08d0e-ae23-4fac-80ab-b43695e882d5",
        "cursor": {
          "ref": "7565ed30-7ee5-4a96-8393-91245cadff56",
          "length": 63,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "c0b4ce09-d620-434f-aa6c-1dcea8f2fd0f"
        },
        "item": {
          "id": "d7c08d0e-ae23-4fac-80ab-b43695e882d5",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "0c28645e-2e42-4ef8-b9c4-8b52240ef903",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}