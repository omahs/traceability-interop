{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "2e4a2da9-6c34-4f65-8740-4c601f86342c",
        "name": "Clear Cache",
        "item": [
          {
            "id": "b1326ea1-548d-4fa4-b4bf-e57540f53591",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0c8f5b59-35cd-4201-b5eb-736b39e44fcc",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "849cab33-58be-4a68-b0dc-0a22616ff567"
                }
              }
            ]
          },
          {
            "id": "49292cbf-a983-4b33-a86c-018bbe48046c",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "49284f23-5505-4cad-8769-60a312fcdc20",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "0394ffe5-f3bf-4276-bde0-d3790153843a"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "b028ce1c-5280-4221-a27f-fc88b938cc02",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "b0d44e6a-dab3-4948-9bd8-3be237443a33",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2bdb7620-44d9-4b7b-b000-7a85b87dbdfd",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a43a45c5-9da9-4bf6-8226-865c67568f2e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "37e8968b-8c09-4e45-b5b6-8330127cd194"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d943f048-da03-48d3-87a2-336e78397fe4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "41820f7b-27f4-4dd4-a6c3-b2b333aaf7c1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c5b5a741-0b73-4dd7-bc40-4a3da1c64290",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "635f1796-ce32-429f-af58-057da824c251"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "015b0ae4-1dd8-49f1-8412-1f409184819c",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "ce64daa1-b43c-4ee1-aa9c-32ebfd84ab33"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6925358b-da4d-4085-ab42-94b691527ec5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "aea373f0-6627-48c9-944e-9549a1bec2d0"
            }
          }
        ]
      },
      {
        "id": "dd84f82b-b29a-4c81-801f-ce54be5c7c2e",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "460de891-56fc-4be7-ae5c-a5435155a39c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1f51dcbf-2ea2-436f-88c9-9aaaa87924dc",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "947e5f60-546c-40bc-8d52-08a976b0eb50",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3115b1b8-818d-4ffc-a51a-7cf1d7fd9d36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b2184ae8-bd87-4c9e-ac05-986ec5c7d5e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bb80edd-28d9-44de-924f-29313edb0087",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac0b12de-0ab2-4dd7-9f67-def641a4d341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "396951d9-6676-4ad8-be81-5f5dd3a3dcff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80940c5c-d991-48a5-b0ef-b3022fdd9c47",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa42dc07-f16f-4221-bfa3-276074c15f7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8de05da5-4727-4d70-90ba-01297960c15b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e536755a-da53-4bd3-9522-b32a846d2a6a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7646a71b-476a-4183-9749-7f451f9d0777",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4bbb39c-d66f-429d-ba8a-8fd042905153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "06f5c15f-403b-43f0-a331-e615b762c0ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a2d9d7b-9277-45ee-8583-cac6aae941b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2be7664c-8fba-465a-bf58-e521987cfdbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "548a23fc-d1b6-48f2-962a-fd0164131ab7",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4d725b6-fb06-4554-bee4-5890ada718ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1d670700-c3d3-4cde-b529-55ee68b3563a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f9b8032-9b0e-4edd-a3a3-c29434af3afb",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "f1e49aae-dc24-4750-a802-d0623e054924"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "942319a1-e47f-4618-9dd5-8f081f40a554",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9b6edbb8-bf3b-4148-9463-a47b8ba65c2c",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1144a5ac-a998-42b2-992e-6d1931f6bd6d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "036e13a1-9a8f-4dc9-9cc8-5d8210dd4c5f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "66909fd8-d3db-4ccf-ae18-3c4ac729517c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "c34a6917-f52d-4749-8755-a9619aa3a678"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a10a4872-2ad6-42ef-8e0f-ae6ee0a2c511",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "679de16f-8b81-40a4-92a8-6bf0319a5571"
            }
          }
        ]
      },
      {
        "id": "6baca43c-94e0-414a-b105-8d2c99aa554d",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "9f77dcad-8e30-4d55-8b0c-078ae14a3670",
            "name": "Negative Testing",
            "item": [
              {
                "id": "705be298-3efa-48f4-8bf3-588181d2888b",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "1f331a4e-8c72-4f92-801f-459b03ed58f0",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f68161c-9238-4993-a4c6-1708e371c93a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b04bcb7c-3d0d-4bd0-bcec-d94bb44e6a5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01be278b-e015-40ae-94f3-22fc2f9ff29a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a80b7228-91d0-4261-9420-5776d127d3f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8120abcb-1af2-4a0e-a4ed-a9d1652fd930",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d007787-776f-4788-a83a-1180ecb0e6f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "966e4c7a-4cdf-49a2-965a-d14a3bc630a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c821ccd6-3751-412b-b6c2-3869e6b8d27c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9da40660-0a2b-41c6-bc64-a8ac425ff963"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dfaff10-90f9-4a30-9678-3f2d716694b0",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68a8feb8-e65a-4690-9185-b9d8cd91c0f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24e09409-bcb9-4e84-8bba-af73933d6704"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52e05913-dbd8-4195-bcd7-776b1374cae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2cbe7bc7-ba4b-47e7-9edb-dfaeb65bdf43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b29b4d6a-18d3-46fd-aa58-dcf5051a6859",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29ff6441-6a29-4cb8-a9f7-9c7159c441c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "800ca9a6-2118-420e-8a9c-a796ca96277e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18ccf328-c56b-46a9-ac35-3f03ca6aa2d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "30ec0016-62fd-44ec-8467-b6430096b992"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b025ebc5-2f79-44e7-8923-18c914a594c8",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f287d131-5459-4db1-ba11-22249cb31ed1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05b17031-a67e-4c02-a4f7-d655c7ec046c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ebd2205-5bdf-40b6-a75a-dd801ad4cfab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "62d05849-000f-44db-91c6-c10adc2ca296"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2536847a-c835-4680-b85a-72726c02ff37",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92ec5379-0bfb-409c-851b-0d8553f1bc2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3a28266-3cc9-405c-8202-8d02060c227b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b55f6e2-3cf9-45bf-8e19-065437fb15e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1721d662-9a73-46c6-bf0e-0b1b99c13113"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5fdfb0e-b190-48d3-86a9-43448512af33",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00a67617-5d9f-4f50-98c1-c3727a966adf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a5ee9f4-d946-42e0-9813-62be58e13a90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f2e4bae-bed4-4185-84e0-4aca0993210e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "561de9c3-7aa3-4753-b4ae-4ad44fba6459"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61ba4c49-88bf-4979-9fcf-3b28e005ee61",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c01ea1e-80e8-4bd8-9fea-3e255c24444b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79f3a933-fe83-4587-93b7-87b11d2e009d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "653972dd-df25-4062-b0b3-780722d99582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d1244359-3786-48d9-9d6d-5a41dc749e7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b381562-f858-48f8-b7d2-2cf63e2198e4",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd618cd9-153b-4947-9ea4-799585bd0727",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e00517e3-8a19-4f23-93a8-fd0173ff18b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77d4a709-658f-4272-a6b9-90901f0ca139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ebd155f3-c197-4769-9387-1541b4e5349f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cea0baf0-4742-4eba-baa3-ff7d5f37bf9a",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee3189d9-eb68-4d0b-9ca4-27a18f72dd44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df229c69-e45f-4127-a997-b40531c30f3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6d4e87e-ab28-4fe1-907a-c41c695b8a09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7db08675-ac24-4e95-ad42-c76cf5f12586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddbd5127-18f7-4989-b8f3-33377464e664",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16bfbf70-d1d8-4968-adaa-497c6837e706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccd4b41d-8a3c-4ea8-aa59-182fb2ca803f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c41ef949-7ab8-4847-91e1-9a1c267f50f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a9b7598e-58a9-42de-bf59-5c94773146e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7edbfc5f-b450-42d2-823a-0c480cd9c774",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e5514a8-c66a-46eb-8ea8-027d4b6a6cc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0db6f8dd-1bd7-4267-8c12-2c0ad9d108f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb5a598d-9423-4987-8a1e-174a8e008194",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d306907d-bc75-4a6c-9042-0a01fe04644c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "655529e1-83c0-4890-b54e-fb689424a256",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd7b00c8-1511-41f1-a3de-e5734351aa31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ccbaa21-a41a-4729-b2e2-4c37ce1e4447"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef61ca28-93d1-4e9b-b350-1d14fa1ff836",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "daa1b4e9-114c-4ceb-b82b-17077c5d13c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7ac82ad-d82d-4805-9233-c584480c5d5e",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88458c92-34d1-416c-9b40-1cd9122ea849",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4d53c81-79a5-4c48-8140-75fbaec87a45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "362c9af9-6277-4e60-a6ef-94f9ffd408cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cd768921-5ab4-43c9-8fb2-cf132fab38e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "197b8831-83db-40f1-9eaf-76dd3ef9737b",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "358ea06c-0ad8-47bb-ae30-edca8626edef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f3a6689-5e89-4d4b-a5b6-0e3e1dd6c78d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7505eb8d-f862-4146-9f9b-157e32179213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e2efbb3e-111c-48e3-a735-c58d9d560b67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52cc2129-fb2f-4941-a992-6ba3c5da7f2a",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93f0cd2b-7867-4349-b152-5a11bf405443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1905bbea-6668-498f-82c5-8e5cec342fe2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5cea723-5338-4281-ac7a-d1b5f6f0e24f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1355f302-3597-4c16-99d2-59ed37b19a80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8630ed3-a19b-4e8b-870e-572abeb7e8d7",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bea68986-8700-46c6-b703-b9d2b1a3a200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24d218fc-dee5-43a6-a3cf-d54fe55df7f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf1eae12-1f15-46d0-8b2d-ed98596b951b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f022ca65-b69a-4d58-82dd-982986ec2878"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2deec78-018f-4397-bdad-d36b5e225e60",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b2356f8-fb15-44cc-a599-90b3ed3aba9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c2a66e5-b71a-4c14-b17a-9ee6d8f60b0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2574d8f6-e8e7-4e4e-a2ea-faa7d2321b3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "323c4f8f-4bcd-4cba-b157-8212621a2c25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bf1300b-df42-4deb-b8c4-ad68cddc7267",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef807da7-b8bc-4848-a637-f72b2eb7b0e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cebb82a8-04f4-4076-b80c-f90ee45f5eb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a1288cc-03a3-4c32-a705-14c95772bef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1b5a1d3-d20c-430f-9d8d-5c2acca948fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8a0cebe-5d1c-4a4e-927c-18108225f4a1",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bce4fa5f-e963-48b6-8a4c-785e8d60effc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "894e4da9-c0f6-4b5c-a5a8-1cd056f90305"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cca9fb33-719b-4511-85e7-c460a974d9f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "56b7201f-cd43-4861-9417-ea6383f72a09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42e6679b-d47e-41bc-a35f-46bccbf229d9",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a2130b0-c34b-4385-9987-fef256d4e57d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f63ce67b-fd0c-4432-99eb-eee8e7307906"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d29261f-12d4-4715-9953-230faecfcbac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b3c47ed-2056-4df7-9c81-758ab0530a27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31f77eb1-e282-4647-82de-1accc1668619",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb61b45e-7b11-47b2-8dad-166d500ac4b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc5657c1-0944-4dcb-aaca-cf445d59fe29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09c39465-9ffb-43a7-8e80-de7ba90827f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7ce55555-c854-48c9-9b46-66f56ebd44e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7171bb49-5f0f-4293-8598-b58bda122047",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26befc72-e709-46c1-b1d5-4076f954f8c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "261bc653-3029-4624-999f-6ca92c57e46a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cd5a2dc-e45a-49ed-9404-a08351c4e53a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "634261d3-5a69-43da-94cc-c77eac4b8925"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7011ccb8-6b98-4c15-b7a9-06fc77c1062a",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ae6d939-370f-49c0-9517-4311829f1d1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d600227-f454-4c28-9fc1-ff1f59e735e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43d1ea0e-abad-48d6-9943-56bf3f1aa0a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e5424e9-5274-41cf-bc27-1937e716e683"
                        }
                      }
                    ]
                  },
                  {
                    "id": "624719a3-a406-4aa7-aa30-96ba0ac24065",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb6feeab-833a-441d-9e12-8dd3056e24e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27603a8f-0fbb-431b-8cea-280d0b83c742"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12b88bbb-a19f-4c41-90a9-fae919ce5f07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "087814c7-db27-426b-829c-e010743257ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07242c92-556b-43bc-b78d-7297802bf19b",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f886795-bab0-4952-823e-7d525be5d0f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62cf0cb0-be8c-4dfe-a675-ccf41d43b887"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75823a53-d84b-4463-b582-a1274cebf4a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "44810dfe-cb50-4777-b4f6-6fe087ac9e06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33374b82-584a-4b62-ab10-23ff65ecb96c",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c1994ea-ca11-48e5-99de-1ecc376ca51f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1267a55-c265-45a7-8027-8d074f2081b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6993ab0-6bc2-4cfa-85a1-2941d8a08ba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6348ece-d419-416b-9b12-8ecf8179a4fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d7e17a7-57d6-458d-96d2-1b1ff8eb1a0c",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffdc0a3a-2390-48c5-a0a8-a48ecaf592f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c07fb04b-adba-4c0e-9c8a-84231bb97126"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48290c0e-1bf3-4c07-92ba-efcac993b401",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "db3f0eb5-442d-4fe6-9735-756bfbb63197"
                        }
                      }
                    ]
                  },
                  {
                    "id": "275427bb-51f5-43df-a075-d3d1d85b31f5",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2853d270-28da-4524-bdc6-5adc01a6d70f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "155d33c7-06ff-4a78-881f-16474f343f22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "024a78a3-aa56-4777-bbf0-d8005d5dd430",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "82b60a20-2f83-4ccf-a383-630b8b5d8c17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db3e28d5-ac49-4916-bcad-5b7c99d4976f",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ca67df6-a1af-4fea-ad4d-f69e787b2d22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8ffdda8-d7e1-4af6-9224-b64126657913"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb50e417-f44f-42d5-9e53-7061eafdf334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f74027c-11e9-495d-b40e-794d75baeecf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c44bc19-15bf-40c8-8c98-0162aee69479",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c3247de-5cfb-4c6e-9dd9-79a6c39d9f63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea15303d-bad2-4b39-bc75-2fd331234923"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "994c06a6-b911-4225-b1c0-263ab4788666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "67656ed2-bd4b-4a96-bfa4-8d5fd2e24932"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e30dcc8-248d-4969-8316-5dd29e58f68a",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6729d2bb-48a3-43bc-aea6-eabe216295c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62605671-6a28-4aee-a4a9-e60451663436"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30889905-fc15-414f-af1b-46f2ffedf218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "56d66f32-5759-4524-bd67-cea43a6eb7c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48e41e33-4b7b-45a8-93f9-99289fd01ce5",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcb1a417-9529-4f3a-aea9-f85875a894f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "712ce99f-bf3b-44a9-8329-01851759bf82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15689c1f-a668-461a-abdf-66ee373a0ec0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "813c47c4-5eee-44b6-b8d7-39ccb156c824"
                        }
                      }
                    ]
                  },
                  {
                    "id": "327c8fcb-a17b-4e4a-a9ad-a7b0dd4f633a",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17b9770e-316b-4a02-aa7d-4e27ba9722bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a54dda34-5d93-44bd-8383-8b752a9effec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68761a0e-17b3-446a-abb0-76b6cb60b5a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "11cdd5f1-a1fc-47b8-8644-05548e40fc27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "065cc677-d951-454d-9d0f-37a5ccc2b1a1",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4436338e-a1d5-4555-91e0-62e7274e96f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39bf20ec-941b-4a0d-a336-50df0f6e593f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50567e95-718f-4a76-8a93-c6193047044a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "241979f1-70c3-461b-bc72-eda372e9b1d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a3cd9d6-9016-4166-9a5e-78a3675103fa",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dd68869-9aa4-4136-9b99-567542b3a10d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "52f6ef5b-8d20-44fe-b0d5-99e483140948"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6fc0523-01e2-4fae-8000-b6744b707247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8a997a40-2067-479b-baa0-40e15421eb20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6766da35-772a-4ae1-b76e-26e14d656dae",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1181f95-37ff-4b91-ac0d-a84a62445272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "601799ba-3967-45f9-a34c-7b053ae039e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88b2b3c7-5c0a-43a8-9bd6-eb50778dbec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "eda55f68-6bba-4a29-b4c0-5aa5f68cb84a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9243515-c886-4b48-9c14-9c068df41126",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d174450-0e43-45c4-b7b4-c862942b0bec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9bcd78f-6945-438f-b215-e02b4a34b157"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "371281ef-630d-4cda-b61d-ba32730b20f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "444ab1f0-3ae9-45dc-a40f-2d463bfe6cd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10efae34-d695-49f5-998c-f1a5c99d91de",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10c55d29-3050-499a-b991-e663580c56c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96b7c648-83af-4c5a-be82-637ad6ee63f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4b9bd6d-d635-4dfb-9737-ca9cd5898ce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7e8a20ba-7dc9-4918-8da5-31ab6fd8be53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c72fc34b-d5bb-4625-b34f-ef0d75da6fa4",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "910d91e3-11c1-4375-b31e-ed25f6f82fde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8f0af63-4f7e-469a-bdd1-3f5873884771"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9456891e-dea6-434b-9f81-6f73b7658320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "40ba0ed5-e490-4530-ad83-bc7f7e826fd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c36f4628-af2a-4140-b56b-ae0f881d7471",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "896ec8d8-5bd2-4c5c-b030-7c896d16f93a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd2899e9-4ee2-4b6d-b1bd-a907ef6aa43b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adda616e-1465-49cd-9471-69e93f0cfff0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ea11cad2-91fa-41d6-b38b-aa4d42c40970"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7da283a-d2b8-404c-92d4-f7b6f0b497bd",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b47dfa4-f08c-44f4-b584-eed0536abc36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2f72a08-e942-4ffa-9992-db17e5af1bbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "783d18ce-8535-4bbf-ac12-a2a9bf3d1a4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "42f4c77a-d40e-40ff-a7c7-4028384617da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5afee889-9bca-4ba5-85c5-4e950b4c0b67",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "633d6b99-a534-4c06-aa43-d19cf475ccfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51e1d2ec-12b9-4a58-94b3-0c5ac3f6d3ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b413e5d7-7505-4b40-8ef1-3f2a9f22fe98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c1b18c17-885e-426e-b33a-3bae1987aa12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e538698-4667-4783-8a94-b4e5fc61f9bf",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b8e324b-16f5-419c-bc8e-d3a2c803715a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae65a38f-d609-4640-b8bd-35226c7b4dd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49dca0a5-ce1f-415f-adce-3eb85f9075f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7b73e3a-a589-4bad-8784-a00ce0e788b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fcb334e-0f61-4ca4-a486-1e3cc7039301",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d55d07d-832c-495b-a6ff-84a8bb59d000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7833adff-e8e9-465f-92f4-bb839377d49b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eb6144e-c85b-46ac-a59d-2b8d5afbf892",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1befd2d-e549-40dc-aabe-157b771b16c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d819232-38b6-423a-b2d4-77846f4ca8c0",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88e0168d-8357-4ddd-bdde-4a1de0907822",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0039c2d8-8c37-4c06-a2a4-69fbc2aee7dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c12a692-6087-4bbb-81cb-1655e5424084",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c5d5d79-f504-46b2-a31a-808d79432426"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1baedf4f-c9cd-4060-ad0d-fef041d4b876",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09422fc4-28b2-432e-88f4-eca8ee6ddfc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "004ceaac-bd70-457d-b747-bda16dbc731b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ad0f8c9-3c37-4e95-a4c2-5dba7bb48996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c62a3ab1-ec30-4f37-8732-3814e1a0139b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9302f74-5d45-4a90-81be-7193b66a056b",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "666e362b-52bc-44c6-b57f-ed9ba04f8f12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01d49b25-e771-42b7-9ade-59de307d40b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12fe615a-28e0-4f11-858f-092423dba675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d06db733-e875-4d87-8928-a8d55eb5e3da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a0765ec-de3a-48a7-aa18-a0b30812bf97",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4507b36-129d-4ae3-a1de-9871ae70a451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9429662d-c4f2-49fa-bf19-28158a4b1093"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf9e8c5d-944e-4212-96b0-7314ca7bf53a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "01f6455c-be50-4f38-9161-0895d35ffa17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "827a0d7f-200c-4f0f-8d69-a14a01e074fb",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6a7d732-3b59-4244-b72d-0c7f3fa719f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4898d23b-b73c-4a0e-abc9-b687fc44ee79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8f9e7ce-8e41-46bc-96d7-16942331ec51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fd81fad6-8830-4ede-b80e-99d52aadf94f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e14ad11e-3955-474e-acdd-d16ca205a4cc",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40d8c655-b26b-4149-a53d-383a6522130b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16612048-1a87-4909-bbbb-5587416033f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d61f4ef-b141-4e03-b947-4e8971606942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "d0501d1a-078e-477e-b107-55c2241a53b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87632578-45c3-4008-b2e9-9dfaa98ae09e",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c71918d-6288-4e08-91d4-58dd60a56be0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ed9b859-761b-4246-8149-0d459f3006cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fc68845-c004-4b99-9b11-e0f7c1c1cb6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c43c89b7-4e32-4b8e-92a5-f6b0e4985025"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b340e194-79a0-4555-9fdc-6b108c91cfea",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76745663-f240-4375-92ad-f7c8b1a6d1bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b96dff7-eca3-44dd-9a78-5d0c0c2ef325"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0f2cb19-e1d1-484b-9f6b-a28d1f15ae0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "11738578-03f8-4cec-9e5a-d92ee8d45481"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebe71465-9e9f-436f-8333-80829c4c618c",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd5c61c6-5d9d-48fb-906c-7128252db296",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37a8cabf-0d7d-4c5c-965c-f9d8974e906e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ba1447d-c368-4aba-b5ee-f0270be00f62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a4411a3-8bc7-4d94-aefa-61c9e2f30733"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd327edc-c0f6-4a29-ac2c-f39b7547ef39",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43f604d2-7adb-4b00-a98e-140e8f80551a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d63fdaf-29ec-4b5e-95f7-1cfe3dd9242a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4adf1b6d-82a4-406c-b28e-e8fa5a35e8aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "95a20294-3348-4a5a-8fad-361f4a706bb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a490a2f8-6143-4b19-b2d3-a8ac855e28a8",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6baffdd-72bc-4335-991a-3c02be3a5af8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57f1cba0-c718-428a-8983-12b4b14408d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9237b993-de12-45ed-bb42-9fe4bc4458dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "2805a4c3-e632-4dcb-b7ba-05a2cf73fc33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6329e6cb-4482-4053-a26a-98cdf6bd5746",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29e9ba78-77ca-45ab-820a-70fea13bdd0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75656446-fdc2-46e9-a156-bb944be231f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30d30166-0d4f-4aa1-9c18-d8c35acb71fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6ee97d30-7312-467a-a4bc-e0af15abfbb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d41f7e41-13d0-46fb-b14a-18fee0e5bb8e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfe50ed3-f8f1-4840-9d81-9c4f138e507e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a7cf53e-6d94-45da-a68e-ac14b68a0284"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05c4beec-2cbb-45e5-aa60-a9a12c5044a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "53d1a985-7ea6-439a-8a8d-0faceeb60468"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed42ccc3-32d4-405d-8b0c-e707072c44c9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ea1785b-ff3e-4432-ba22-0d825d571add",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a874e3d-3bd0-4e43-9f6a-2e0d8daa5abf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "471434d4-640e-4065-be9c-b8fc16099996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f61a840d-7bf7-42cc-8146-f823997408ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c61e6e75-1459-4003-bf05-866dff7e989c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "389308c8-cdcf-4d76-bce6-7ff03b2a2970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18e00e34-703f-4daa-ab8d-ffad7c7e7981"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b672c140-0a23-4d74-b0fd-ecaab5cda19e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1c5e04ca-b705-4b6b-a815-74163051c374"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70b2bbc9-5c50-4a8c-97b2-ea59c6335f42",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91c4189c-9311-4801-a130-618c33b93200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ebb0c69-7c00-447b-8d4e-ec35a14fd284"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0284206f-7009-47c9-be3d-29eceec13872",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "080bdc46-67ae-4c20-942b-34e15a61a2b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d28e70c5-6dd2-436d-aadb-21f25ed49491",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25f79cb9-b631-49a6-a070-fe0d5d7d5290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ff1daf1-7d1f-4730-9e40-c746d5ad04b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e69dec77-cf09-49bf-9b24-fcdc4d98fdbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "07fbd78d-cc7f-4060-84ac-e6c0cd0cdd85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ad7e87b-0834-49e9-a704-46ecef8e28d3",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fb68429-bc64-41fe-8236-a1cdba3b3155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74d58051-5e7d-4a6b-90d0-7a8f7eb28602"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc7193fc-1b1a-4ff8-b8f3-6472e979df9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a1df167-a1ff-4437-a00b-56340945b4ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0e42d30-6df7-4ae9-9db8-f1a92cf0c3eb",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e21cb60-381d-4cae-9853-258862243436",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0090442d-8b7a-4701-aa6f-02b01d775bab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e2cd3c3-2cb7-4257-9d78-5f512eab3be3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ead38023-ca37-411e-89b4-3f4dd4b9352b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "424c66ea-8657-46fe-a7f8-42d70adf5379",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5489117d-f9de-4103-966b-eec70b018ad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4276eeaa-ab77-45d9-845f-70c03871e9cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0c7a120-69bc-4652-8098-1a6654f7cb63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d876602-3041-4fea-94bc-78b1af379932"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6dd5fdf-dc79-4f96-9ef7-4146c06d0564",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f42ea634-22ed-4816-824e-d97cebdbc232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6db71b6-a8a0-4f01-9e97-de54238fe076"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5e9bd46-1b27-49c1-8d77-f2e913ead618",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8adb14b-df8a-4f36-a7af-ed3e92a70571"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c832a723-fab8-412d-bd52-2b3c2d0ed46b",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96c8f6c6-f60d-4860-9bf9-604cad4f3bbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f740761f-a6d3-4c71-8711-dd3f4897f9fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "203c960d-dde0-4d11-a829-6431770bd0aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e7ffb04b-f195-4233-8199-d83c0b96e48e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03dab7f0-76da-4e9c-a343-e7418e9697e1",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66766d5c-40a9-4589-9bd0-e7df403b4915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95d58c48-f2e5-43f8-a395-1da79b369254"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40f25faf-90a8-4c00-a915-ef8bdd9a1b76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "57396aa1-07c4-4470-881d-69aab0242d1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efc0bffc-53a5-4912-84b7-604e6bd108ef",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4e0e622-7cd9-42e1-907b-31fe1ec7b13c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58899711-4c38-42d5-be09-6777d0c7800e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb384eea-c1c7-4f22-9f17-6aa3b1269a7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b9c6dc20-0076-47f3-8050-89bacbfd4e41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d88dfc1-fabd-4037-9edd-a1af1d1067fb",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f56ff86-c7ee-45fc-8a45-58a231ff6f63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa58a560-5409-457b-a2f8-97f07d15c5df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ae98545-fe78-4120-8d6f-0f056bb71b05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "61a1cf23-b153-4026-92b6-43d635b8ea6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1777bb37-3231-4ff7-b871-f63f0e0aedad",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40eec715-2b51-4348-91ef-d20472dbf5ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "771d9e64-aeeb-4a4d-93ba-f20a95eb34af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c35566d4-50b2-476b-9890-3f295115d7eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6843a2c6-7fef-4f14-9b70-27314000a0c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9e6aa61-a5bc-4768-ac8e-ec8579888f34",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5778dc6b-3543-4795-a84c-ff94eea13fd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fb5fd5a-184a-4124-8e2b-5549a46d1a36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae481bab-87eb-44b0-ba4a-e14828254fe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "88c21f13-fded-4a11-b9dc-a948f418d620"
                        }
                      }
                    ]
                  },
                  {
                    "id": "640254e0-5150-4f2f-a0ca-faab50ccbf62",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f592444f-2046-49bf-be8f-732564636610",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fb73668-5ff0-4a74-b2c2-2405c84e2d5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c8e2c71-48b2-41da-9a54-19908f6bcd26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ed2fafa4-ef85-47fd-96c7-5c06f9255d7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f6afc47-9173-4ec0-8060-173f22ac79a7",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00cd1461-4c82-4497-9d8f-0e3be2ea635a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed178228-b3c0-4dce-8eb4-14ac581a85cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35969af1-8f17-4b5c-8aa1-2e772b2c28d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "13e7f523-3eda-4f88-9055-3f94d29b99a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8930bf0a-b170-4403-8bc4-a11ddc9ab426",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53119179-fd47-4d8d-9ee9-c1f76d4668aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7481a023-0341-4dec-9e03-a9a3dff352e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2c49014-ccf8-420d-8d00-72a04a257b32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "95fb40a9-e80d-4aef-8832-f240bc44f7ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94f61f11-8e43-4a29-9965-571a656e814f",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "547fb764-5e88-44c3-871f-483fbf50f3b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "779815c2-78b7-4d31-be9a-b010db586965"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "503b10ed-ae04-4717-8db7-843e96778f65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "227c5065-544b-4bf2-bbe2-56ed36f70121"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55b84826-8c6c-4427-93b7-0accddc0e67a",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4246831-300b-40f9-a403-f27dc82ff929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "286b1a3a-6fa5-4b78-bcca-d9fa3a585930"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fc32573-938a-4d5e-8924-8d87df709d7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd433f9a-ed90-46ec-8c8a-8c7a5468a312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47c91131-8cd3-47b3-900d-dde075f01ba9",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba1d63ff-3f5d-46b6-9231-8ab9ee11d764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2434c944-bb5e-4c53-919d-93482bec819e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0a0da63-80d6-4ef6-bd93-d31d708d4687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3f4c043-c7ca-45b0-8dce-b4b0e37ce3de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fd9ce22-3729-4935-9ab8-5847bf918fbd",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18a762b6-785d-41e3-8059-dbf64e705847",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33c4fc61-2aa9-415a-a373-80083d45348c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7721e73e-2bab-4134-9278-868fde7e7d81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "134f8fba-053d-4349-b146-22cc0b1024f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f809e221-db2c-451a-9c03-927ce4eeac20",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2a3d1a3-a355-4d97-a78d-260fc4549408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48a38ba8-50f3-45ba-9c61-09c00f9e5099"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1358f35a-779e-4b3e-8493-d5e2dcd0f762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6f27e40a-7b45-417c-9d10-eeddfc50f548"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1a3e59d-d0f4-4c17-915b-5059aeebde15",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3148e28-0f97-407e-b871-546780370b05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "532eb888-78db-4e96-b378-d5825af4e3db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47f4d8ec-0e60-43ab-8f11-ee6cfe7a410f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "08c7c2d2-f445-442d-b874-46e0504fda53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93515e25-a31d-4e37-9519-e3ccb541d1d5",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4e69b84-1715-4f5f-a0e6-8238d48953c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f3931db-aacb-48ef-8c63-4603139400d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f07ff0e-04f1-485c-aaed-4d825608987c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "80ee4c82-f919-4da2-ba1e-326306f02fb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bed847e9-4ab3-4942-a8ce-423425194cb9",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ba567fb-09f6-41d1-825c-266c24fcab39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dad85a22-101a-4c33-87d7-56269d1e3695"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1c578c8-ef57-4f34-a316-59f7ed9e13ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a96a18e-b7a5-4fbc-9847-b995c0db05b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bef7b43-3c7f-4406-9674-2049cd86053d",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48c1db5e-5a31-445c-9057-64639e707f71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a353cc9-e7ee-4a2a-9e51-a3383d648824"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8ac25fd-aea6-4f15-b4c9-cbbfdb8d7ec0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4dd61b5a-6999-45e2-a539-3b833676ca1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22437c54-9bd7-448f-bf42-1ff82ae6ef44",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "379378f2-ac12-4bd4-b80e-ff334041d6cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b86ab05-6234-4bc2-9382-fb7a93093f24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c490e7ff-c3b5-4abc-a5b2-572a5dd8bcd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a106d88b-4d5e-4f95-9b17-098a68ce900d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5484d0db-21a6-49e3-860a-d44972592f80",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9b1bd76-2863-4a0f-ae19-a1a1443c0edc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1923356d-94dd-4639-93ce-d2e5675ded98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c1a3565-3597-4cb3-9052-e536c992ed08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4be99db8-6425-478a-861b-9420951ff255"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd1e5dde-a0d8-48a3-af83-f971df293c04",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10f8485a-9d4f-42c2-8267-beb03f5af507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "822e621d-c948-4a00-a72e-59bd25293e6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c2c035a-3275-41cf-a7d4-16098f18f583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "66b769e8-ee33-494c-97e1-9a56a5e22db1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d3126fd-f78e-4352-a32e-4a2ccd1dff92",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c56fca8-5fae-4d11-8649-5c048eb97b6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe6073de-8b5b-4eed-8b74-08fa2e44b99e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31273759-6553-47af-bfe7-e4d4e2d5797b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ed5b8675-4455-4982-bcc7-d107ddf9c3e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90baa56d-646d-4d59-a64b-84081dde8d92",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "408fce8b-a22b-43b1-baf2-8e98cf9c92fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f619763-cf71-44cb-bf58-86a47f224164"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a38a1798-f0fa-434d-85d7-5ca24caa89f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b2a448d8-d7f2-4627-a4ca-f08dc950fe22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78d47c18-0cbd-4665-8884-a642bfb4fe58",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d4eda90-93dd-4210-a2c4-5185fde435b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b198c8f6-b230-4f4d-96df-d542386d0409"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8780616e-af5a-407e-8d4c-859571d2ea95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e42a15ae-c966-41ac-9f0d-3bc777b60ebf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a504e23-60ab-4da3-b8bd-dd853bda4032",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f80215b-48e2-4a11-9f74-41175631d457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf402d51-bd0a-431e-9f41-53e21fa0f121"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d38380c-98bd-40ca-9c0f-a447d2327256",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2aa23c62-f6f2-4812-a224-096b73cf9ebd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec66d2e3-c80e-4a65-b325-88d21c0f7345",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6813e3bb-02b4-43e7-8a9c-5f9672d8ac7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "00f5e131-b8b5-4f75-83ac-97d48ef23005"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "201ce774-b937-4bee-bbe8-d6a3375b4b86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "0202f5cc-f045-4122-83a9-f6926c2d4f53"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "267b9c64-ff6e-480e-99a5-8caf370a3172",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b63741af-43e8-402d-9980-d7765c3ae8bc",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58c5e90c-8dd6-41ae-adc1-8fb94d010448",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "547015ef-b59b-4d17-8863-00cf121a9a8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fccd007-766d-43aa-9e31-5006a3f69a86",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "fad2426c-fb25-4803-aa73-841ac6a7d73e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d31b5020-129e-458a-be2a-3c573a09a793",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5adeead-b758-4ea6-86e6-a7aebb8cabb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2a1d586c-59dd-4613-9976-e73cccf9ba18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eab549b-b708-42f4-8355-845a3c7cbee8",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "ac710c2c-77ee-4081-b0ac-179554091391"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "247c3c73-ee5d-4326-bfb2-498415cf74b9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7f47ffe1-16ea-49a0-9e0d-111835681148"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "14f15644-50c0-4708-93be-29f57bbbfde6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fdeab63b-5cc1-4262-a5b3-f5e24041c325"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "46c230d3-1714-49da-bff3-6b3d1f6ae3f7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "39783cf2-e73a-4c86-87f9-9b242af276fc"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9970c906-f374-490e-9550-87f7a09d0a69",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "657166dc-54eb-454b-9a81-f6ff4a9f32d9"
                }
              }
            ]
          },
          {
            "id": "081f4201-3a4e-4357-9bcc-c5036d64f0eb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4481b702-eea6-4cd0-b167-94b3f8f6367b",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bcbbfff2-8eb2-4ec0-a2df-0f887f3611ba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json();",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d7cda004-1043-4005-8a0a-9b9f9d6074f5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "169059a6-baf4-412a-9dca-eedcddba7cc2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "aa967cab-f2ad-4cce-8c5a-27395fb3cd53"
                    }
                  }
                ]
              },
              {
                "id": "9bb75547-a49f-4f26-b5da-4bdc2c693a05",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "954104ac-e854-4e28-92af-69f364081a04",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "030c1efb-8bb1-4533-94b3-e100877fa4fa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e445c9a7-c6bd-4edd-a8fa-bdac2868e137",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6bf90b9a-0a38-481f-be9b-7ae4932cca96"
                    }
                  }
                ]
              },
              {
                "id": "6085b808-5d70-4599-81ee-b2b6ed5566d4",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "567ad338-2994-4c6f-9907-3d8e58723b34",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "55549055-b722-480b-b506-c4c5a3272160"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "800fd41c-bd1e-44fa-acf2-e2a604adfa41",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d5837263-9517-4714-b3e1-1b6502f0c805"
                    }
                  }
                ]
              },
              {
                "id": "4a6cfb7d-6303-4ea5-b26a-ddbe01a2cfec",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0ef33351-65e1-4a52-b190-a420c66cbdc4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0ab0128b-f190-414c-9b29-cf13844ca2f9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "36f23887-0601-4413-8417-c7acda7b1a0f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "9621e16c-4fc2-4876-ac28-1d0d74e5def9"
                    }
                  }
                ]
              },
              {
                "id": "06a7e084-b042-4f2f-bd8b-779b5d4e1c37",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bf1beb37-a594-4c03-bdb8-dd6de07b2b2e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a5a6fe95-c604-43a8-9cbe-0a0281e5cf2d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7d70a71f-76e5-42a5-a85d-6a4dafd19d8f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "38cdfcc6-bba5-48a2-a0ea-08aae7d4ba66"
                    }
                  }
                ]
              },
              {
                "id": "ad8af2be-0f08-42a2-abd8-055a982f91df",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "31235f5f-3161-4b52-bdd1-ab241eb57695",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2342fb2a-0e33-4245-8e5e-177d6ac55898"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8ad728e2-11d1-4378-8a3c-e597b3acf1d4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ae913feb-985d-4bf1-a435-f6a7b4257f60"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2bd78944-e639-4bc5-bf5c-c7e428f96cb1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1225204b-78ec-4884-a2c0-be23b93cf107"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6859722c-5e4d-4178-b0c9-d43862064736",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "91019884-2b37-4723-891c-ddc09a96b18e"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ed1aeb98-e5ce-45a6-baf9-0ccbaf17b40f",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "e0a7de9d-b5f2-4578-b766-9ebff633cbcb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "539a2793-eb0d-495a-a72d-bebafa490e24",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8bfa5346-d2c2-4c05-bded-bfb8fcb55b8e"
            }
          }
        ]
      },
      {
        "id": "f4b7ec58-6c60-4b22-a316-aca8f57cdd49",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "48f9ab02-bbb1-4b9b-a295-93c31618a53b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bb92195e-4724-420b-b90c-39f54044fb0e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2cb25d7f-7949-4ae5-a93a-72a44f59f9dd",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c3aace1-5237-40ce-ab6a-d1fc6081fd1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6af65ee0-9faa-42c6-a80d-c2807148a0fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "588932c5-cfe8-47f6-8daf-4a5d9ce35548",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1ea5cf6-3e66-430b-ac87-b8968a3f7e31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58b1e2dc-f347-40af-928b-4929a08f5306",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c2feede-2a35-4df7-90a1-e2ab493c1166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "920d956a-43f8-4423-96fa-ae918831d5e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecda8ce4-059d-4e05-8645-3f278456f716",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7843588-b840-4a7e-8405-b6a451115845"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9f74bdf-b87b-4a83-8499-6463343554ff",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "463b8933-b6bb-42c4-b3f2-f4d3cb709531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77120852-b9ae-4694-b4aa-d8838af4aeca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e1e6170-54fc-4a70-bf5a-4cb0e3afeca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8fa9629f-563d-4e39-9672-51c943c0420d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35af5259-223d-4ca5-a68b-b2f4ad6433a5",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3606193-3b00-490b-8b7f-8eb110fab53a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d24b376-8a9b-418a-ae18-0b44ade662fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f6335c3-c59f-4bf5-94b7-48e5be65ac00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "07a6de05-fb89-4f44-a0c7-9ecf7559be40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfc88d9a-00b9-4df7-96b0-3632534c1430",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "933da65a-e360-48bd-888f-0847147fbb5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdf861c0-9be0-4288-b34b-28d48cc79301"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a7142d6-047b-44cb-b2ca-7ecd1f63113b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "11199eda-553c-4e2f-86e6-f360f5fe309b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a02444f8-da07-4024-9e04-713dd79ece07",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3e1e5d2-fd7e-423e-9d34-ed50dd2f4159",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2cfdb96-fa9c-4a27-a22f-1481ff90e5ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff763ddb-b1ab-453d-bfef-ae1aa2591d73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "09bcdfc9-c5e7-47a3-8298-5ebd8b3a2858"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4451fc54-5920-40dd-b491-0855aee172e9",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e0bd7e2-c9eb-40e7-a828-b043bce36481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8cc935e-6dca-4da8-9caf-57190ea0aad8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "729875c2-9cbe-4488-b995-571d169b51a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "1451490c-2e07-4962-b07f-e7811ca79b72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5504feb8-33ef-4266-8315-b7422897a6b0",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "407baaf4-56e1-4cfd-97c1-2ba33a05dd61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf51e9a2-e8c6-444f-b63d-85550c98cbd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f5da1d4-904f-4515-9fbd-aa77a9e403f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4bcc988a-fc59-4e4a-b739-f7836c25ac4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd2ea122-1dba-47ae-8669-9852d955bdd6",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea126d29-22ac-4a32-ae04-c3ce1cfcce47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff8e48ca-8e84-459d-877c-48bb02a58e84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d53fe6a1-3417-479f-bc02-37819d39f83d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac64261a-1b36-4750-a59d-1cb513a12f01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f71001d5-5358-4660-94cf-b6fd2f0ee8f3",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f28dabb4-4542-4e90-b36d-9d6622b118e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71ef0eef-3090-495e-b7f2-4064fee07866"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eaeb1c4-fbef-49ea-a70d-474ced84b4ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "db7c0d7c-47a0-4b4d-b03e-1d8b405a25ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d44202e0-bf82-40e1-af59-fcf5c7b35e27",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66e4f605-3035-4f52-9433-35cd6bd9ee97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a16f3bf3-a990-48af-8ba3-f5afd4ee528a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3540ff92-6c0f-4305-ab6b-e90649851897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "a35f0e34-721c-470d-b360-51524d8c1077"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07ad594a-ffb1-4aec-909d-2dd2c3b46775",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb62d2c5-240f-4796-91b2-55d4a09cc485",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53fcd3bc-7421-4c64-98c3-3bdf6a7f0e29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5893107-8d0f-4c0b-950c-b1d5971cbc42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7ddf715c-b61e-4adb-8345-61554b565f2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a156cbab-87a7-46b2-aa8e-2673d6ccec43",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8390f576-4ee1-4f59-9cea-05989a829f21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e74046e-c4bf-41ad-89aa-a39fd07373d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f722d56f-cddc-4a47-bb7c-abd0771bee4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c85f9ca-efa3-47bd-b649-da72e35f87fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53022690-a8fa-44cb-9b88-0088b892090b",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd41c2d0-fd3b-435a-ab47-4e864fc78ae3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7cf429a-5095-4d85-a10d-e311f83fdccc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fed831ef-25eb-4c9c-9c1f-13fcb967e611",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "11c51f52-134d-4626-814f-d23a6d5b6877"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36b63840-7ad9-4342-8e9b-93eaac2e4e8b",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e02dfb9-0427-4846-a6c8-9f14e6ed0548",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4de94745-2445-44de-b10a-5881e35aa0b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6693bdf2-d7f5-489d-b4f7-b344e0f37ec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "97cf9e4f-2abd-4e84-9577-2e5aabbfb4f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bae29d4-c8e8-452c-a7bf-b3e5e451452d",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01037024-98e1-42e3-a6ae-9d34357c0051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e35d2782-05d5-4d05-8ee0-d9a9cd2d77db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d22b094e-4262-4412-b5d9-36b16c0fb8b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "077ca256-02f8-417b-8566-223da93f199e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3243ad4-298f-4388-8e54-c7954a02b0b1",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5132b01a-8535-45b3-85d1-c8173c87f4bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "613c98cf-f190-44c8-bf46-662d86961c3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c733d66c-18fa-4282-8bd3-a34cffb57cf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "f58c6373-7077-4b0d-a729-dbaffb64f2c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21539383-104b-4eb6-a647-cfc2fe4acc86",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c8ec4c4-2930-42e7-b427-ee9aaa3f491d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6aae0fc9-3dd9-4521-b9e5-63750d68580a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ed4863e-befd-4f8c-ad38-9dc5926e7ed6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "af1622ba-8f59-4046-80df-bb9dad4c927d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e2a9937-be1e-4f7b-b7ed-b87be992d678",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bc08bc2-1904-41d8-8164-45fcfb51d0aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfb22a0f-0a28-45d3-8c58-5db9b491f7ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27933672-0200-4d40-af8f-68cb881cb40c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ef0c956-85f0-4c03-acfa-bc20ac572f63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e650bb51-321b-4478-b604-6ed7688b42c5",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "744ac3b9-69dc-4544-b03c-e1b37402989b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5b2fecf-ffc6-49c2-9aea-5bfbd66a46e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "061c7574-3ae8-48a3-907a-3250d2f827de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fce94aed-966c-47d3-be00-d66e9721cddc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b12a5ec2-566d-4e00-91bf-bbbcbdc55fa2",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c21259e-a17c-4998-b484-4fee69599c84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6aabbb83-157b-4ef0-a63b-92577c2ade68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e89e4866-6129-42f7-b932-8c567e02b5ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "addcb3a1-c877-4de1-9256-94566dd2a3bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b15b2212-1f3f-4082-9f43-a051c62ed817",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a817692-fc3f-46ff-9fef-9e26aa2f4f62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "105a3238-40a8-49f9-b18b-ab8284fd00e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a8959a7-7ac3-47ec-b6fd-436cca6b0e81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e4013cb-112e-4bb9-80e1-63632704508e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d3a6a88-b6ef-48f2-acdd-10bddbf8cd76",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a64dde50-37fe-4cc0-9014-629275a6747d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f975afa4-5f8a-4ae4-b559-5647234b3c9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2fedb30-0ba5-46fe-8e68-b7d8a03440e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "083ff11b-e525-4aba-a181-644f4c87d119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dd9e73c-0e5a-40d3-8251-c35e439f6a87",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afc00271-5e76-4309-8f4e-eb65531874f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad717411-f47b-49bc-9a20-40f66fd183aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60aec920-f426-4cf1-811c-30b160802c8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2578c710-1b45-468b-abe1-7416487444e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f9b2acf-c14a-437f-bbcd-386d48b208f9",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "573c7abf-e40b-40fe-9d5e-91de99665144",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85f2e6b8-8b65-456f-acc1-b656cc0cd0f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9154264-7cc4-4599-97b8-9fb355c72d71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a0069ab-41f9-431d-be32-c434cb870d09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a242d20-861c-4ec0-b022-83daa60f4e64",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4449e61f-55fa-4aa1-bed3-9f1c006bc4cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc3af9ef-b285-4991-aee8-9a7e23c9c0c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6751373e-89ed-4ca7-a3ac-b3049b32126b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "623152c1-cca1-41de-abf1-0c5708fe12ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c2c6f17-95be-4f15-834f-d45e7e0b83cb",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad2c2303-22c6-4670-9681-34fabc5eff48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee1af2b5-f778-4bf7-8ed3-5ef16bcf338c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5ff9f6d-8e70-4ebb-8978-34533e70faec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a855f930-83fc-4658-9646-5cdf0db66cc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cdbcc3e-25fa-4be5-90d5-4c1e303b09c7",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07b03f00-db44-406c-9d4e-915adc722882",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6633df0c-9787-47c5-89cf-ef435ec47148"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5936c77-846c-4b53-b3fe-b7ba0cc2429c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1be0da62-5919-433c-92e7-b7fe9c95d1c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5ba92e1-80dc-491f-b11b-32c836f23afd",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "237528d7-8866-4dd5-8066-78b9ffb42510",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c174537c-fb6d-4817-a9a0-2266b3f3a94e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e579ee5c-fad8-4d46-9f78-adee58691258",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1821ae5-6e05-434c-bf20-5713acdb3e84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3782a21c-9864-49ba-9cd2-943279920612",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ad840c4-c9cd-4382-8d32-796596dca7f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5073cc2-83a6-438f-a2fa-0edb24b7489e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7860ad1c-00a8-4465-a9ec-5c6b83c37172",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c81e6347-a6ee-48cb-8417-f8257e2940bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab9705cc-d979-43c6-9b21-8c9c05517e52",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbe41303-2826-4c04-816e-e346a6c6213a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc010a58-5ff2-4a72-88fa-da482d7aa240"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8a7a101-b3d2-4929-81c5-93f82164a9c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7858c27a-06c7-4fca-961f-da9e4e98f4be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c98eae9a-99b9-489c-9774-ade981cbd638",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a10571f6-e2ff-4055-af30-fc86ff74f4d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6857c72a-269b-422b-9bd0-f2d03a05e90c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8556211a-cccd-49fe-82b5-f54034a06fcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b074b4dd-2a7e-4c1f-bf31-8b4cc658f6da"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7a3e52f0-bb6f-499c-9560-19fc0af1910c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e717f25f-5f15-45a7-8ad2-d51af980c795",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dda3d03-c20e-4234-803a-5c1c7ba60394",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27675e98-c4b8-47c3-9c97-d131aa45b73c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92fd1533-1088-486d-9110-f180a6ca6bcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3cae7ca1-8c9f-46d9-9779-8652fa12d27b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab52895c-9def-4aba-b2ad-ab2d1ed4d377",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77c72d04-24b6-4179-b738-adbe7fa20e5f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "010d5e85-8714-42bb-9bba-fe720c0f0aed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66a7435f-e2e8-41ef-b91f-a5d5fffc2738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "97ab1ceb-c425-474b-94b1-b7400542836f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3331d259-ef15-418c-9e69-eb03bfb4aa15",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "37bc8f21-2cfc-40ff-95ed-fa51b23da0c7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b93234bf-9d4c-4fb1-b894-217e758a4778",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ddb602d0-8580-4ee0-bc1b-50d1198c5961"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b20d4956-c993-4a8e-a5b4-d348939171b4",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "fca747d9-7788-4f63-9a33-ac5c6509a37b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "318a12e7-6f02-49ad-a723-89018f1edb5b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ceef2574-9125-4cbc-83b2-a7610fc5f000"
            }
          }
        ]
      },
      {
        "id": "f5975e49-c6a2-4782-adfe-c123bdfb7d8e",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "bb57b614-ea63-485b-ab8e-52c88741f65f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7078e2f9-d9c5-4785-9397-746c3d098c52",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d4de079c-9cf0-4b97-9b2c-6c52b49d2191",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cbc5a6f-90f2-45cb-812b-d83f12e385c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a44588e8-7a04-4ea8-b735-d19adff22e99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e492821-e1ec-4eb8-8b3d-1e8c7e042d7f",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48ad7453-0043-49f9-929f-055bb97e74cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4de90fec-1b61-4404-a310-e49bd58efea8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e64cefd3-6582-4f02-9e12-dcc1b7851076",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cdfe08a-ab7e-4f4e-9945-6dd2652028f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de7f304f-6fcf-4c65-8393-42d7534fe8ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce8d7bc7-7f0f-43a4-bc05-0932f6381bbc",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b89c032-ffdc-43d1-a2c8-ec4400f710ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5490f63d-57c7-42ce-acfc-78c8b9a71766"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71dc00c3-bd87-4022-963c-7626229e11d9",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af91e3cf-4ff8-40a5-afbb-96c9784cb8fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dd5cee6-c746-4711-9de6-a48f8739d61f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd614167-9e7e-4d71-9a3f-b268c13961f0",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "558f50f2-d7cb-4c54-a4f4-3a21ecbce122",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc861d3f-e04e-4c2e-a389-6a0ba2b5e5ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19926c5f-a10a-478d-951f-92b3a161301f",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fc20353-79b7-4a93-a2a6-178b30d4f3bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "905adb28-e55e-43f1-8c56-5b59cc28f4de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eda5c8a8-ea49-4454-ad62-5c7817330269",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c36032e-6d6f-4267-9972-eedc1e723a8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31f0d25a-4c24-4251-a86f-352902dc6b48",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22e139f9-f524-4971-b521-c7b34e511549",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c21a693-773d-42e9-8713-f01b0830ff1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b8d2239-d175-4b04-9bee-2806185fb8d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63476df8-3359-4fb5-a33c-f8de2f7ec19a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2e288d2-8bc7-458d-8b07-5d200d378586",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82814c38-149a-413c-a88b-97a68dbb0af9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67218c17-c28c-499e-b3c4-f31acfce7975"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cddc1e89-0b21-4bbd-b82a-5ca1d77c8e52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57ceb016-9e15-4169-8fb2-8bf27df63a91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc192910-f8f5-4868-a80f-c860ecd9f77f",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4f7621d-ab35-41b8-bfa2-87070ae58a43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e337392-e4c2-466d-bad9-cdd5bf42be88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa5e97f2-6568-4eb8-a7c3-b830b879e5e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "758faf41-2b21-47d4-96d6-46757fb157bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "398b9ed9-8e21-4cb3-a14f-7df803c61695",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48cb7ed6-7b4d-4092-9ab4-c3d5be8bbf1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba30984e-e192-4f1f-9f4a-b611d801a944"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddf76c7a-a7a7-4e27-9d8f-f353d0ae31d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "107b5e17-00ed-4159-b2be-ce04978768dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8cca1b1-0250-4d58-a191-576e5f83c06a",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8fdaf7b-0c60-4cb5-8a54-a8ed65926cea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a57557b1-78d2-45a8-90a2-955092ffb756"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08db6a46-59e1-4b2c-baa7-f5b7153584ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dea5cb69-9343-45c7-9171-9d2600026cf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdfabb8b-9358-4330-b2b3-1bce9d6b6b6b",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e8e3149-7ddf-4a67-8b9b-d0967af99475",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d370d1d-1f1b-4fe5-9122-60cf6e3e59be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "759e8c3c-d512-4f07-b97f-d9833f834cec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55702dd4-4892-4b12-803e-d3349cfe79c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8302706c-45f1-4b05-95aa-033320c62117",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a35dfdf2-7034-46dc-83f5-2b15d2d450e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2b7f650-05c3-4340-930c-3c9dfa0e432d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3890dd49-b30b-4d8b-b9f8-429595597b71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e19ef072-049d-4342-bd50-cd1570369101"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9815ff8d-579e-4369-a90a-fd639053bcb5",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6595510-748e-45fc-b768-24c8d4d41cc8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c732ad9-ed87-4f14-99a7-65f1e9370a1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92c92a05-16b8-4398-8e94-bf0c9c8a755f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ea20080-b9ce-4e7f-8c2a-50bfcec5445b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01e0b6db-b24d-4ac5-a86c-e5230f1c3215",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c4c143a-ea73-4d0f-8a52-ffe6076daa40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "975edf4c-5dfe-4e93-a792-eebe62460e26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50c5cbed-a760-44f4-a9f6-a5423c45675c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "539b8e81-b68c-41bf-a239-9bb9ffbed300"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58aada99-fc5e-46c5-bb92-620798cd99d3",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00da85c2-1be2-4bce-90a3-263a765c6ff2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4a0a77d-fa6f-4378-9ab8-dfc73255de8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1340b84-46ef-4cc4-a6b1-afb77af3af38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9550a3fe-c793-47fd-bb44-6330e3cbec22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d5f6390-3dcd-4dc0-93e1-bfeecb1cdedb",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a6ebb36-91a5-43b8-a75b-126f97f49145",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df14a7f4-e975-4460-a9cb-aab9dabb4080"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b7d3468-64cc-4deb-a5dc-c7d4d26d54d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3efc3818-1efd-4a4b-9c1c-dfb4cbd6b189"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a2a8e86-0d63-4734-b195-170cc1c7f559",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d59cbe00-f315-45a1-b589-c0e82a3f97f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9995c098-9c38-412c-97ef-ec0c653cd3ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e419e20-2c77-4007-866f-f4ca0635134f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ab72ec9-d169-42f5-81ff-450b5ec7d75f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c79a93de-d982-426a-978c-fedc01f907d7",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4384f219-84ef-4856-82d8-5c93263d7fcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e70d598f-3628-4b14-b8af-a0b2dd9dd714"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27bbda11-62ea-4f6a-acd2-b5267fa91c70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fc216e8-bd04-46cb-b703-b37d1a14a1cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed69e83a-1246-418b-9623-4a0749b951cf",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "421eed15-a159-42cd-b2e1-9b3ab4bf5616",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78b4ca2b-0d91-4c99-a832-3eda21ffeb47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f6ad3ed-51b9-4029-b83b-4f49daf7c7ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c79b3871-14eb-42d8-a348-840871e5c777"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8c60fae-ca6f-4f57-bfc9-f98cf73a1a9e",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f673c44e-558e-4fc1-b4c3-d4d3e47cfdbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e96b68a0-4c14-4208-9e56-e2eea34f8b82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c3799cf-d376-484a-80a3-178a90458785",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db5d0170-a5a3-4aa8-899f-5ac2e5b97419"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69e97438-74ee-4095-9694-4ba6c840d442",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c759a53-fda4-4a01-ab27-45ac508bc2c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc42d3c6-227e-4e5b-bdd7-f199b5c19f1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f765d466-4e21-4879-97c6-5d3a5de337d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c776a4d-e4f6-42db-8261-9886a1a5f436"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d6ce0db-3d69-40e6-baf5-a51c4e08b649",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84312164-eece-4954-8f3c-ff047a8c870b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4c70d95-16ec-45fc-8698-90e8374f0aa0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1432cc1-91f7-49b7-b971-7af8880aeef4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93a72acf-d556-459f-9274-83319d010917"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71ba93cd-988b-4637-aa48-cbeb5e387425",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24799f78-c92b-49d6-b919-c91758c27943",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0f46a97-f894-492d-bbe7-0a11cc5db4ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cd3987e-a7d5-4155-9394-9b013c6e17f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9239716d-d23a-4d77-9da3-e1f084c631ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9a5ef7c-d230-4ed6-ad7a-af09331b2d13",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "046a8123-684d-449c-ab4c-735ba6a6942a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41fd7e0e-d8a6-4712-ba36-5d71763fa49e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e68fb578-69ef-4d31-9ec6-832ef7526107",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "345305fc-88df-443c-9ca7-c72465b379e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74c65b36-8632-483a-bea5-59d8afe0ad61",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf484d8a-ca2a-4688-84f3-3b0e48a13966",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "084876ba-dee4-4b64-8a97-84fcf0be56d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a898fce-6256-4fef-990e-9c031bad886f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c64a0fc-5bbc-454a-a61a-84c1ce1205bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abf0358f-0b67-48b8-b6c2-36b1254b50ca",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d8d6b7a-bf85-41c1-9454-d5e8cd0a2b3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29187238-4735-42c7-a7c3-c9b37968fab8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2cb0b68-9ae7-4dcd-9e59-63b597b4cda5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2904cbe5-db88-42e1-a9fc-6ada0e3d3308"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3422cb05-95ca-4221-a725-f9a1f24e063e",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88cfc8df-69db-4f2d-bbaf-2c44f7a10399",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8cd75e25-aa5f-493b-929d-d0df475470ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac3fee6d-a5eb-4d60-a7fe-4755fba6947c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f16f3cf6-f37d-43f1-8952-452038e749bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4ab096d-2c7c-4a75-b408-83832b1275bc",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c02304c-8949-4c3c-b836-1da5beb95319",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09542f36-4054-4b58-92fc-6a4151df8672"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbbf2c92-409e-442f-9cbd-6219bee090eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7359563b-53cc-4eb8-b572-697327a48132"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ced9c8a-e3e5-4107-b8e5-970b30eb617c",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "115edcca-b8a9-4fe5-885a-00a897ad085e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9986837-341b-4e12-8150-38b12c72b879"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b84a33bc-fbaf-48d4-99b9-89a739ca8827",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edc26566-3e81-409e-b9d4-e33f202a5aa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a61c9eb-a7e4-4313-a42f-a8f4ac80d86a",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "678a9ec1-3299-4676-a400-1324f36c962e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b4dc2fe-c23c-4d9d-8eb6-c3a9ca6e0fab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abab7abc-020b-4e77-860c-a2ac68f7470f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48767e12-690f-4265-a237-9c7792f31c9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f631fcf0-cd05-4e20-9cd4-98d49e3de262",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3028675a-2bd9-467a-b1a5-b3ddccf706ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79d783e3-8d96-49a8-a5c2-fc91771bf737"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "115c2dc1-bfbb-4031-8179-121a94cff1cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df214fd1-497a-4899-8bbe-b600e2d34676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ae7c7ed-2f29-4b86-bd19-c39580ff4d1b",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08d15225-5a25-4c2d-a05a-c10b9d7b199c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b721cae5-335f-4129-88ee-a4ac5c66b7c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c807c291-10d0-4fa3-b78a-820530cd6aa6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eab68440-89c8-4012-856c-b2201cc84427"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd4c8fd2-2e64-444f-80a4-796ed4adaa30",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75e56ecb-3b90-4e97-bb6c-f3abc23230c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8485e2a4-fe1b-4b60-881e-b165fd1d2801"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9908513e-22d4-463b-93f5-e5a6f42a5c02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f85a7648-885f-48a3-b910-6ed3e0b72234"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fa43d23-f9cb-4b54-9a8e-efde91ed5d14",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a883ea6-0e67-4637-8251-6da01cacca76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4913a82-6280-40ea-9657-ef64ab0275a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be2c4145-14ec-44b8-aee2-1dde85003a11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "138ab090-1a9e-4a2e-91af-1f5bccb3469b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be6092ab-a45d-4d80-b77c-0e15f5b53f91",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07dba788-4d54-44b1-96be-d2bdf77a4c7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0611146-d8bb-4215-9792-1e077231d73f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c83a25a-e9b7-4016-8f72-30056a39f822",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "187cd9cc-c93d-43c1-be8b-bb3ca8db185a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "093d5dc4-bd72-494e-9f92-20e4abc3c5cd",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98d51b90-ee41-4b07-bc79-343c156742d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0928ee9c-e76a-4af2-aabe-aa386ccf3acd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fceaf25-7865-4650-b23c-915771fd37ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86830aa9-3836-449d-9785-dbc3fd00ddb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "116a7bf9-6978-4159-ba3c-e8830bb55f80",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05f34860-27d1-4b73-885f-cbf3829e0c89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b8d29e7-c930-4a58-ab15-e76b5ecd0df9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff588a6d-78e4-4c79-a908-c85ddf9a6f50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ebec9e4-8765-463d-abe0-b2cdec8d3be0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c9d75ae-814b-4315-b938-fd6debdd69c1",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eefe4ac8-0e61-437d-9e8b-bfbd30f96252",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fe02761-6545-4644-ba26-04f1a5b51685"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25e77670-099a-43e7-ae49-ca9c24c0912a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a678ac7b-2526-4045-88de-313aacc581bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c26a7707-c653-4927-91bb-5d5ad1ab6656",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "403febc9-19ad-456d-afd4-4bd760908229",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d6c7969-5785-487c-83f5-83d334dc1cc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbd8fd84-b621-41c5-83bc-f5993767be7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c13565ce-a639-4507-bc59-415686d606a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ba7e4cd-92d6-4e13-8348-ce882cfac0e3",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2dec0dc-7cde-4bc1-b505-1b4127904922",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0113e8c-b383-4b09-8e73-a618a52b6527"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a40a8d77-9102-4a02-b202-32ca1e0deb12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46af6da3-386e-489d-a34d-19fb3e13a647"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ecb568f-1eba-4562-87bf-3a226eccac45",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f53e776-1605-47c1-9c36-1fcc843bff19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60935d5e-7531-4ddc-a96b-7f1a73417bfd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8962eb65-a068-49d2-90e5-4e4aa1e4b548",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0561ede-5689-4651-adaf-8041673a3903"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6d1e01d-1f25-41bf-95da-ba3250b8b85c",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d6cda21-6215-4057-92d7-7b47563a10f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75d2dcea-61a2-4a41-a284-2cff3371ff16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b59a584-c412-4ae4-9a6d-6663285673fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7be50b25-4804-48d5-a9b0-03fed6dcec38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67c6723f-b9c4-41a5-914b-7deaa9297dea",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95a641f7-d1f6-4149-9edc-3c5c6625508c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1d387ef-3ed5-465a-b891-65e85419a4db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eb32a84-ad14-4b08-97cb-caeb92e29401",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a51b56e-752f-4ea9-86f4-f4e04153eb92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b7c6b57-6ced-49a6-988d-1f78949bad49",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66fd3cda-d22f-4e0e-8677-0f85a5a089f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07630d20-10de-4444-b705-67813f565343"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cd88c91-5fd8-4381-99cc-d769fe81a8a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "638d5137-c328-4cbd-ae72-c01312c72cb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b54ff05-c217-4342-8c1b-72cae884c3c1",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54c2d43c-2280-44e7-b7f8-04c51e6cedc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a0c012f-9879-4e5b-811b-ac384d84785a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0df7a4ba-41ef-4422-9707-b54fa9fcd658",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a86e740-d6ae-41fe-826d-445b0e4602c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1c4ded8-3d07-4b34-87d5-0ef7c384b96d",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4be21c0b-ac99-4992-9d60-8748c4fbe92c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "488c7277-d5c7-41e6-8ca3-30b534e38f89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "005f3de6-19b0-49ca-ac35-255cbac8dc0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f032ad7-6a98-4925-8373-0889f4e4cdf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dee654f2-ffbd-4b31-b291-df0699d0b1f4",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a883e25-4d2c-4de9-99f3-a6c939461f61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b863059b-1926-4a42-872a-195540752eeb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1568ecee-3703-47de-930a-a9f056bef218",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10bcdfcb-bd3f-4290-a5a8-0eeb4ee86894"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3865a36c-1662-494b-9c53-f77c9d8e88af",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8a691c2-92b7-4f9d-876b-bc0a0ceb4ab4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0217c18b-f23d-4e31-a9f9-a6ea91ad1a1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "440c4d07-5ad3-4782-ab68-7aac6e6456b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c83931e-0ae7-4e74-b4f9-d5fb893eb992"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4904960-4d99-470c-8420-024d9d07e6a9",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0337ea9a-2ee7-4bc2-837a-6b8078213e64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bdf05a4-e7fa-4ce0-b4e0-fab1788e340b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c632636-fd01-4d61-93aa-da84c8a7fbe2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56acec06-6cd5-453a-964b-def5eee82a82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaac1f9d-c504-491c-8e86-078421cec765",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8af51f66-aea3-4bc8-936a-661c60c9bfd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d82979f5-c4fa-4ee7-91de-1bcd2dabd956"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a27a370-3782-4a69-8878-4df335cdfd7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ead89bf8-9fc1-47db-8b78-975a83a13df6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d644e05-cce0-4a01-88ef-e16316e7661d",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcd0a0d9-24fd-4f7b-a758-97e6c1125683",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3243e671-b72c-4e23-a0db-4d33cdc87a57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42a6b966-36b6-45ee-9a49-29bc527be691",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51145248-463b-4275-857d-58a20257c0c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c07aeae-91b3-4981-8d52-28264084851a",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a273b8f-3572-4e4a-8438-be47925f854d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd282980-a06b-406b-be7d-813b2f51fa61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ceb22d7-c11b-4c85-bdb4-4c81ebae5fb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c556d03a-a7db-45d1-bd78-5b396151e3b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c79056a6-fcbb-4a7c-a920-cd7ae85a3508",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe6a86cb-c5e8-4e49-bbe7-94062bd6900d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fda63b46-8fae-4bf9-8f49-7a1e6cc3c7c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5335e24-2aa4-45f3-b75e-fed18499bf27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6b67ecd-7817-41de-8da2-356ca9703e20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72742979-1ec7-4278-98cb-1f6c859c1088",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "995b1e4a-4f98-4c52-b699-a30819955d2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "777044bb-5342-4ea4-950f-ef09f124938b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1edac6b8-3708-4f7a-a236-e45171a0dc2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0b34ac1-1a2c-446b-80b1-ac3e6af2bd68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59a9aeec-8906-4664-b10a-df36c6e3cf2d",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2db86b4-68c2-4256-9270-b2ae058aa2d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1ae95e6-8705-487b-addd-19d6c37ac066"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa428de5-ec44-4ff3-b895-98eda483da15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44f1b48c-0952-481a-88cc-3c13058377b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "970949ee-59ba-4568-af07-ed785a848fac",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b0528bb-368e-4be7-9270-452842765197",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc1188f9-a9ce-483a-ab68-cab26d804803"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "505aacab-64d1-4a35-98fc-14a3618ec95b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4e20794-1e4a-44ad-9342-05515c7a5f6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e80a32e9-b30e-42fa-887f-b1cfb05ec742",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4802216-8127-4709-8df8-a13cc58de2b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7638cb41-06cc-4cbf-a7c0-3e9abc7979d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "635f05fc-2bf3-4e9d-8784-1fa8b7ff5cb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c84629bc-4c8b-483f-b5c8-07560769642e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99a52b55-8d05-4271-aead-9a70c0195a43",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfcab60b-94e1-484c-941c-2318000e8526",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6da94421-5662-48ed-bc53-78e58d4a9cff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6867b76-fe83-4fbc-9240-a093abd97b14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6dfa3d3-fb5d-45bc-8f4c-212e681ff227"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9af4d1a3-1d48-47e3-8727-22e56ac3c83d",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b00f1df3-b97f-48e1-88dc-cd611456a507",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36c79a05-1573-43c3-973b-807f58c6dc89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8854c86-0206-456c-b311-df96ffeb7cd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22b2e04c-c0b1-4239-9ded-adb2e1ed5150"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9624ad6-b6f1-44ce-a9f2-547234d020df",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed0c22d8-368c-4062-a1e8-8c5f2b8010a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f5c2156-5c9c-4ae5-94cd-79e9a938b227"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43a61fea-4422-48d4-86f5-082c469f984e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53f15e30-276f-45e6-a5f7-8914d3f0f3bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73463a5e-ccef-45d7-977b-64a9bf567919",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0efb4e6d-8206-4130-a771-fc24d0ea11e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "258f8f58-0059-487b-ad34-87c56e33d87d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "203b62ba-f4f6-40be-840e-24f467ff81b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a46a5d4-19d6-4277-9df3-e58dc09584e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "504b519b-97f9-4527-a7e7-fd891ebd4a60",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d788ad95-387e-454a-af6e-c4b8f8288607",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce30a8dd-4a06-4443-bb88-645f3894bb67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad19782f-d3df-4e50-a910-4b52bd02d3ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf555716-694e-465a-a85a-dc067c43e8ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f26e583-1771-4f13-9c0b-3e84fadf4b7e",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85f17d11-801e-4090-85ac-3b6718e243d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "382b2ef7-4f93-4913-8fc8-50e8ef319cb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c252252a-857c-4da2-8de4-00ac2ca25330",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddd71dff-f7fc-4700-9e9f-7d98ac61147f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "725c4adc-73ab-48dc-b4d8-c6ea2703d004",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68ba469c-a9d4-4275-8177-1236be472df3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b45987aa-1232-4888-a173-e5b6576b9f72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7861ce96-bb3d-475f-9f3a-86ea604bc82c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "309296e4-7725-4439-90f4-89b1c8216542"
                        }
                      }
                    ]
                  },
                  {
                    "id": "016d161c-688b-4a90-b0f9-47fca08ceef0",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c080990d-3a38-4638-9937-649a5e274e89",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e458a950-1dbb-430d-aa0e-bb7fcb9953d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac6bfb34-f239-4c87-9623-11eae5ff01ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b014a2f0-881f-4ef8-a85a-80b08b05842f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d188f95-4b38-4f48-8d41-e1af0fcd534f",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db37adc0-cc7f-4e65-9980-1401be6b548d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d881a364-39b8-481b-bec1-66a91f8c61e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "002b8d96-b13e-441a-9fe4-57d093e23653",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "800ad829-51ec-4968-834e-92c4400af0cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3f6a78b-7074-40eb-96e9-5115d7a5c39a",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4b9f76e-3116-42d0-9921-90bcd1309441",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0e5c5df-b595-4d6c-8064-41b29474384d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3369df4-315f-40e6-91cc-334a350781a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb948435-802f-41b2-9e28-ea9b33353a1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd171674-7bab-4af0-96d4-6f11b610a1e7",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0228394c-a38a-4b22-bff1-cf5f06cd1620",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0accb230-100a-447a-ada9-bd51ce1e8f76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08aa9f2c-0531-4529-855d-b43a4c4e8d10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de4b7f45-3748-42e7-8d36-ec8a601ab6c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f50aac05-9ffc-4bc9-a156-f0b17fd8bc18",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3342022a-71bb-4110-b724-4fc9ffb147bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "619f0961-1dcf-4d92-862e-892b743a83a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "272954b1-5ffd-4153-bb23-9289d5c0a260",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9252cc6-9ed0-4d6b-b48b-3eae467bac3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97cb20c0-aeec-4b41-a3e7-23877302fde0",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73b303bb-ed76-46e1-ab04-e367bedefeeb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5f911bf-c109-44d6-9ec1-e22e533a8a9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3b85084-92b4-4783-98f1-8dd1abde7600",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "725aebea-5890-4258-81ac-976c7b9f9433"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5042ae56-ffb2-4a06-83bc-c25719ffb29a",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da4acdcf-5f07-4c9f-8379-fc7cf7ed16e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "029c12d7-e4fa-4f89-9639-7e7da8e520ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "812457a8-d57d-4ce1-a5e7-a56d4f208e8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b8ac7a9-e8c8-439e-9515-28bf0a1203f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d80461c6-d227-4646-9efa-2eadd2dba922",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56840104-d6b9-4732-98ca-51d67cd19907",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76128569-3f6a-495b-ab76-77b7fac30878"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43467d91-4aec-4ca3-a769-6f2c26736167",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b487596-c713-4759-a5c3-fd7bd01c272a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce914fe7-6d36-4342-b0ac-761f258194df",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51af3df8-66e1-45a3-ad01-f89e22ff1986",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "029f6ad0-2155-4cb4-851a-ef87a1c9e8e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d926a1d8-84c5-48e6-b8e7-64be4c6dc69f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e82f6b9-95bd-4802-b754-ee8f82df4be9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7b98407-cce5-4414-a810-5d12b5a8618b",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bfe5ecd-1e17-4a23-88bf-510aeafd1374",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ec48e26-ffff-4c40-9962-b88f5cb68980"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61ce6cca-0522-4aa1-a92e-85c76cc18608",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1f5e2a2-4566-4cfb-b8e5-7697061bf57e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9957789b-f804-4991-b360-7d5bcb65c9cd",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00c0e571-a416-4908-9685-74cde924cc8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b88d5845-a4bf-4004-afbd-5eed781cd3e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "411b3367-91c8-4106-9c6c-2800c9a8ec02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01700ae0-1c6b-4f1f-ac0b-4f4622a46767"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01e9027e-eba7-4ae1-97d3-fd6477ea0bde",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4261eba2-1f7e-4b4f-9a8a-f39ab2f02c01",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a679f45-9c77-4589-82c6-7997277e813a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cef6d0da-37bd-40aa-95ff-946e83a2de70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa5c41f2-df15-48bc-8e21-f3dc064c0d0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca0ee87b-f75b-4a0a-87df-dab8438f182b",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b47deae-7785-44b4-94dc-c5fc1be2085c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "974bb1e7-4b73-4e0c-948b-833bef040a7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b12909b-dddb-4804-8526-7937a5ecbea7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d12ebe78-6a94-468e-9a5e-5f7e5877acea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "238a6bfd-ff60-4c1c-8096-ef4d00542876",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb475250-ffd9-4f2a-b16c-206bfe19243b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00436917-819a-413c-800e-326201adbabb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c91fdad9-6e32-4067-8c01-2b72a51605d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdd60ea3-fd04-4933-a8ed-28d8af4c8d9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f548049-77fd-4d5d-8ac2-401e3c77f06a",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93071ea8-111c-4a18-89bb-d53a8ebbd412",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "786a6585-f815-4673-af5a-fec069e2acc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "051e399b-fc5b-4e12-82dc-ba33bff4e96a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45f18c9a-a186-457d-9357-db7bb2554891"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93975824-368f-4f11-9444-6e85741e020d",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40244faa-7f00-4340-9943-cc1821d14790",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "abb0196f-33e2-4ae8-9880-dc2bbcaf3b27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5debbf74-1f22-4f87-b62c-52849949483e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d29c671-03f3-4c20-bf85-8f42453df366"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0978057f-dbf9-438a-9bdd-62114d40b532",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "071b73d3-16e2-4af1-820a-619170ce860c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e275b77a-8942-4ba8-a03e-3d0dc46ac86e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49416d62-2a5c-43f0-8f43-1e3a79a0182e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a110b44b-6047-4294-8450-d5655121ac2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05c32c56-e3ca-4698-a2bd-f41039820451",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaae7f1b-5736-4728-bb76-a6268b1bdc84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3a49fe8-c186-4d69-903b-dfa4378d3e80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42312da0-c149-4aa5-ad9a-d19c87378e41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ced29efb-58b0-4aff-8757-376576fa9b11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "586ab7fb-7cab-4591-842c-eefbf65fe824",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bb8046d-b837-4a63-901b-20dba08083e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25ba2759-b6df-4e84-9749-b67b4f57d52b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69e2157f-b35c-4d61-8286-516e76df7baa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dc0d4a0-c190-4faf-94dc-52d4563aeda0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a9abd8a-6ce3-4f18-acc0-069d6aa9151d",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1253bcac-cfbe-4e44-82d3-857095cc113e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f86387f-5985-4f49-ad5b-701571ab8a2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3868d576-ced4-4082-ba03-2e04e1067a75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7210c77a-58f5-490d-9bde-67f7a8613946"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b6fe832-9e39-471f-9970-ba749915732b",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f123831-3f0c-4f61-aaa5-c57ad7d01349",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2bc7f068-207f-4194-b58b-514e0f5a982b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21b45a27-6e82-4009-9bf2-9f36cf575720",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3964a4c-0008-49a4-8f63-9437e3dd05dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bd8e295-8515-437b-816c-d76326a840f4",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebb0a87b-17e7-4059-85cb-083b5508efdb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0355155e-e477-4f51-8801-3d04a536884f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3015d848-0c33-4cc9-bef9-848f87f0c3e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38e1262c-4a69-48c6-8d2b-205fb63d586b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b10680ee-a515-4c21-a898-9b6e854cdc3a",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58245146-83c8-4609-b32c-89c9cb444ddf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e08e3a14-c9a3-44fb-bc3d-ce67fa695163"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1827c8c8-1cff-473e-99b5-df13e1117802",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d75617e-1bd8-4c16-ae2e-1ebc2af910d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d22c18c-bcde-4205-b8b0-38e0d53037e4",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bae35557-8b6c-4789-955c-4c1b6b1ac7ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6221e24-770d-488c-8240-20e45f45cbbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "734b0ea0-d468-4f84-b95b-4f54337bb9da",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36dbd641-29b9-4626-87ba-ca0df80c5fe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c58e51e-4650-4200-9450-f7eef7babf6a",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fdd5860-aeb1-44f8-a96c-071d2f18fae9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a12d7fe-06da-47ae-91c5-ea49c3e330e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04cc0efe-b6b0-43fd-ae8d-67b53e23cdfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c7c22f3-cb69-43fe-baf6-719bfba1d269"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2cfd1de-7e8b-459d-aeb8-98e5a6763f6c",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "302fec00-b8ef-4ccf-9604-a9f2c2c1cbb3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00201ed3-10da-4b40-b7be-bb705560a640"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6b6a60d-b42c-43c7-a2db-d822e3cef164",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b12c7e00-fec8-4b6c-adce-2b0d1cd8c5f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c583c4e-12be-4a37-b7db-c64b23d0fb76",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10ba77dc-815c-4ac3-afa7-5eaafe809cc0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d23adb1-de0a-4bdd-823d-c10b3d804533"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f217a18b-7298-4fdc-aaab-9ab99d22681c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17ea9ce7-2f4e-44bc-afbd-35d212f590cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b04d795b-1242-42ab-b9a1-aa6dd5154fd4",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91003127-e794-40eb-b8f0-3bda768eda9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93e8812a-a91d-4131-b600-db326615033a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2d56272-6688-486d-b859-af968ca841f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03d5cacc-d6ff-4c3e-96cd-8c0b01d12421"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e8b5a11-0228-45c1-bb69-f09ba2ea80e7",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8e682d1-e6f6-49fa-8713-68395afc946b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ee9e435-f259-454d-ae91-1967aef5923a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "945114dd-f578-43c1-a8a4-51a730852bfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df02ff8c-b312-4c81-bafb-831ca7b437c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f3bbd02-1154-4ba4-a2e0-cf23896dccee",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e1a4dce-c7ad-4904-8de8-1d67985e8610",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "074b5ca4-56cb-4627-bb95-5f012c7c62ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5fc71fb-f57d-4a67-b06b-80766645065f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed3b0f16-f5ba-4635-9478-f0f828af9c3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a832f6d3-b01d-4167-837c-51f6f5b5ae95",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9e89511-0fd7-48d2-a153-a342cd7667e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e231f06-1cf9-433f-a43e-886f45626ff5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16dec4a3-510e-4c3a-9fb0-54d2f4b4f5de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ed43b04-b6bd-4a2d-99ad-6436d98ee2c5"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a598b11b-5765-419d-85ce-0317fa2a20df",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6ab3f834-2d45-485d-a510-eb99fc7d8b59"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "398ca123-2a81-49f2-8e8f-fff04850c845",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e49f7f39-c12e-4b7e-ac9d-5d50328ed6c9"
                    }
                  }
                ]
              },
              {
                "id": "e14687bf-d845-49eb-8fc8-17dec6e96094",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8bf0dc0a-043c-45f8-98fe-b5232684a17d",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85f39294-71ac-475c-b515-df66fdec6c40",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "d094e638-23c4-488d-9a0e-c4da0692b613"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5d49e32-aaf1-4e7d-a945-d121e68a99c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c210bc5d-99c0-406f-9620-0f5a6126532a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "753cef47-7579-4c07-9fea-4bafb44af163",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3cb7bf5-5cdf-4ab0-aaca-2c9f0474c30b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "7e1fd0d3-fa99-4cc5-a9c1-8e5a1f2c75f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb4467b8-5697-41b9-be86-fc726f1b4ce6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "08b46be5-9caa-41a3-ba10-75fe32e4f0a1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "702f12f7-14b7-485d-82e5-613d96596222",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "318a350c-4d1b-4c05-83ca-559b6dbd56b3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "397a14d6-1f83-41f0-b0d0-a178a960ac6d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "af0ba2b6-65ce-482e-b260-0552aad8f2d5"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "410be6fb-291d-4ecc-9b55-690b312c3a22",
            "name": "Positive Testing",
            "item": [
              {
                "id": "aef1c086-27f2-4499-ac54-000f85f063f4",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7d3dc897-b565-4ddb-a7d1-67a5c7113dd0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c01eb1f2-d2dd-4bfb-b20a-348675ed966d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "82e2cbbd-1ab6-4762-b82a-90bca754e680",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f5e1014f-2d53-4189-bc56-8c91e533a87c"
                    }
                  }
                ]
              },
              {
                "id": "b9705d71-8e5c-45cc-921b-2c2d54e53cfa",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5bdfd792-01ec-442a-8a46-8f094f0fe99a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "60ae3495-4081-4a2f-8974-d85c37e8591a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f4b23ecb-18f0-4393-96e3-c976801abef6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0eee3263-61d4-4257-8ac7-943de06daeaa"
                    }
                  }
                ]
              },
              {
                "id": "966f9364-0b7a-4f53-b6eb-3b223730c07c",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "592f16ef-09eb-4486-aa07-ca3b0a8bee10",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "619f980d-6129-4f86-af36-c88b679655d8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "75870711-3342-4dbf-8394-09f23c49e618",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c96709ce-4bcf-4f98-b7d9-6ddc657e3746"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cee56fbd-82da-4e8b-adc6-d8d5feec4a9b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "de695be1-d222-4d93-9b2b-a22dda0a0df5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4af1e362-c48a-4e1d-82fc-0622bdc0da51",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "49be953e-fad3-4101-affe-e5bdde832e7a"
            }
          }
        ]
      },
      {
        "id": "a8b8e502-5a02-4085-867a-7d1da1f6fbf9",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "ac5f059c-afa6-4fed-8108-58caf66faafa",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f2c870a9-9701-47df-909b-1bc20e57e59a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "74d2aad2-f2bf-4839-9cfa-0b4f133da15d",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a8167e9-ee85-41c9-a9dc-eec96b1a576d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "576f3b23-a64c-43b4-ae06-44857bbafcd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b03198a-570d-4ecc-a9de-9014199f3956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4f7fc0d4-3345-48c6-927f-f1779916fd89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcda5409-4ac3-4a69-bc61-abbf116732b7",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63f809ee-b6ab-4bd5-8096-11e2eac6a1ba",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "8462a406-5a9f-464e-af5d-d36d726712ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57eb0f10-77c1-4a09-8689-3f90d33f32b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "088bfccb-1620-4aa7-bf7a-beee150082c5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4382147b-a220-40df-ad56-b2f9131f06ef",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a8e53369-f5cf-42e7-aa69-11ea0799622a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c6dbcfc6-a639-4efe-bb78-2ac8fa0541c8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3b92c566-adf7-4060-81ce-dbc563b4193b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e53cd061-d853-4398-bfe4-7a87bf369c42",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "0dbbfc5c-2c72-4bcf-b71f-4aa2cfcb8fd5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "74491e7d-8ead-4ec9-9341-79436ba3f4a8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "33ce5096-225e-4d3c-b24a-b43df4a25b78"
            }
          }
        ]
      },
      {
        "id": "0ac80673-fb7b-41e2-aff7-a1ff20f5c75a",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "faeb635b-7969-49ba-826b-1da9693e0a18",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1bda6199-8c23-46f5-8e83-fb2e439a311f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ca651031-e28c-4012-a209-114c81b20ae4",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f16ce39a-de9d-4d85-8e75-111a71e6059d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "bb6fc15c-0c29-44d2-bd34-3fc18568b93e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c97b6c5a-a4bb-400b-af95-bac441da0bee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b9de100d-481e-49bd-9de0-a42e89d82dd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2494520-a3b5-4a60-a748-18da630f840a",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e08c3290-478c-483f-872a-68c2cf06045b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "486b4ba8-c7ca-451a-bf8b-8a0e0267d2f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12cfba16-4a3b-442a-b7cb-c0284f74e15f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "16dd2121-be29-40a7-92af-0348f8c9a82e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8f5d3a9f-9d79-45d9-90f4-97903e134686",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dc39d237-8a68-4454-890c-18fc4c093460"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c75c2427-f0cb-41c6-a05d-6c3bb11ef468",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ecd189e3-ef4b-49eb-b47b-82231cbcc3ec"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1374a2c3-ece7-4848-b738-ea1acb57ac8d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "673ef8ad-40aa-4edc-a41c-24ad56892b64"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8af803a3-73d0-4ed2-b2f5-6f1d02f5c787",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4aeabcf6-2776-47e7-bd9a-3c0f44f89043"
            }
          }
        ]
      },
      {
        "id": "438c89ec-ef4b-4534-9607-a6bd0e9713ec",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "e943201d-46f9-4f5e-b90b-f88c93510fd1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "15782468-27da-4c63-bd8e-c7717d225c26",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3cf052ed-cd44-4942-b566-ad83b7f4dcb2",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0224cfbf-df67-4eb2-aceb-bde701a82bc0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b59753cb-7491-4aeb-a43d-3a24416c3b71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87a3c76c-f253-4a3b-8eaf-f4a0fc5f210f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4acdfcd4-5177-4db3-a45f-e5dee7086ef2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e88b7ff-a8d6-4d83-a4a2-dd0ad917165b",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43fed17f-2a5c-46bb-a1f1-0dca14e976b1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3d304ff3-7cbd-401a-ad96-8bd579affd6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfefc263-681e-44a4-9281-c327f0c5b7ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e355f1d0-f53a-4303-905a-e791782c389b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1f23e9dc-2b85-4f0d-8b9c-15fe985d71ae",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "198e7c0d-c248-4a48-965e-768bcc5c6c4f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "abf47d1a-46d6-4529-bcd5-ad67bba705f5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "823bd0c1-182e-4c01-981d-43e15bbe6a10"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2ec4105a-fcc0-4ae0-948f-848fd83c6e73",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "2d41719e-96a7-40b8-bf2b-8ca4e3b98c62"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "25e9c47d-b2fa-42d4-a9ef-1adcf5df68c4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0e20b422-7a94-4d7d-b717-bb0a2504ac70"
            }
          }
        ]
      },
      {
        "id": "26d3e20f-3e3f-48ad-ac55-f465b1f8b183",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "96691a53-3756-4631-accc-7a0a40912d9d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3d5d85f4-6c0f-4c51-8991-c3a92fac979a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "fc20dd2f-6050-4fa1-bb7a-958db16b802f",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0ac113fa-fcd3-4ea8-a3ca-21953a75274a",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "69e76e07-2779-421e-a045-077243a7663d",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 505,
        "pending": 0,
        "failed": 338
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 454.8576923076922,
      "responseMin": 7,
      "responseMax": 3816,
      "responseSd": 434.69231264378027,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1665968629956,
      "completed": 1665968759926
    },
    "executions": [
      {
        "id": "b1326ea1-548d-4fa4-b4bf-e57540f53591",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "7ecfa726-cd6e-488d-850a-10883f97d1f6",
          "httpRequestId": "507a756f-a4bf-43d1-a715-9e62dfc08748"
        },
        "item": {
          "id": "b1326ea1-548d-4fa4-b4bf-e57540f53591",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "fe0a52fd-77f6-4021-be00-4f91dd119908",
          "status": "OK",
          "code": 200,
          "responseTime": 56,
          "responseSize": 0
        }
      },
      {
        "id": "49292cbf-a983-4b33-a86c-018bbe48046c",
        "cursor": {
          "ref": "d3d193d9-ca86-4b96-8689-e212c78cf6eb",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "2636ad78-4abb-4902-a0c2-e5712a7d4ba8"
        },
        "item": {
          "id": "49292cbf-a983-4b33-a86c-018bbe48046c",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "f0a44626-5344-417f-87ba-c5fdc8182c48",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "2bdb7620-44d9-4b7b-b000-7a85b87dbdfd",
        "cursor": {
          "ref": "f4508056-bd5b-4c4a-8ac5-c58b149f0469",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "e4697c2b-ec27-4a8c-a572-05dcbe3be162"
        },
        "item": {
          "id": "2bdb7620-44d9-4b7b-b000-7a85b87dbdfd",
          "name": "did_json"
        },
        "response": {
          "id": "d6992fde-f548-4123-9ece-01a11d6e2c7a",
          "status": "OK",
          "code": 200,
          "responseTime": 767,
          "responseSize": 1640
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "947e5f60-546c-40bc-8d52-08a976b0eb50",
        "cursor": {
          "ref": "db411804-c72e-42cd-a956-eb3eea134318",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "9771db3f-08c5-4ddc-9c40-734d47fef2bd"
        },
        "item": {
          "id": "947e5f60-546c-40bc-8d52-08a976b0eb50",
          "name": "did:invalid"
        },
        "response": {
          "id": "b607418b-3de7-451c-bebf-c73718bf1b60",
          "status": "Not Found",
          "code": 404,
          "responseTime": 614,
          "responseSize": 64
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "947e5f60-546c-40bc-8d52-08a976b0eb50",
        "cursor": {
          "ref": "db411804-c72e-42cd-a956-eb3eea134318",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "9771db3f-08c5-4ddc-9c40-734d47fef2bd"
        },
        "item": {
          "id": "947e5f60-546c-40bc-8d52-08a976b0eb50",
          "name": "did:invalid"
        },
        "response": {
          "id": "b607418b-3de7-451c-bebf-c73718bf1b60",
          "status": "Not Found",
          "code": 404,
          "responseTime": 614,
          "responseSize": 64
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "5bb80edd-28d9-44de-924f-29313edb0087",
        "cursor": {
          "ref": "4a929024-3b4b-4b29-9337-2bab2c0e7f47",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "614fc07c-ce83-4638-aa5c-d46ba393b72c"
        },
        "item": {
          "id": "5bb80edd-28d9-44de-924f-29313edb0087",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "526abc10-f2c8-47fb-b12d-d54ba3d704b8",
          "status": "Not Found",
          "code": 404,
          "responseTime": 510,
          "responseSize": 64
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "80940c5c-d991-48a5-b0ef-b3022fdd9c47",
        "cursor": {
          "ref": "588fad2e-82d2-4bed-a9a5-0081c9d72c2e",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "d9d54195-2a45-4541-89b9-f2fa0431d92c"
        },
        "item": {
          "id": "80940c5c-d991-48a5-b0ef-b3022fdd9c47",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "787ae563-380a-4739-bb59-363f14898ffd",
          "status": "Not Found",
          "code": 404,
          "responseTime": 414,
          "responseSize": 64
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "7646a71b-476a-4183-9749-7f451f9d0777",
        "cursor": {
          "ref": "79d6617e-0892-4cff-81ea-6c169662ae1f",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "f49c3c24-3325-4c37-9c45-f9fca8b3a7dc"
        },
        "item": {
          "id": "7646a71b-476a-4183-9749-7f451f9d0777",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "c0bf3565-c7b6-49f9-9cb4-82bb13468fd3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 40,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "548a23fc-d1b6-48f2-962a-fd0164131ab7",
        "cursor": {
          "ref": "4fa55d57-c991-47a8-b35f-ad8705206007",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "d4b8e48a-28cf-4f56-9081-e1302396414d"
        },
        "item": {
          "id": "548a23fc-d1b6-48f2-962a-fd0164131ab7",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "f4b26a68-b59f-44ea-bfea-08735a4c4fea",
          "status": "OK",
          "code": 200,
          "responseTime": 594,
          "responseSize": 1656
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "548a23fc-d1b6-48f2-962a-fd0164131ab7",
        "cursor": {
          "ref": "4fa55d57-c991-47a8-b35f-ad8705206007",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "d4b8e48a-28cf-4f56-9081-e1302396414d"
        },
        "item": {
          "id": "548a23fc-d1b6-48f2-962a-fd0164131ab7",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "f4b26a68-b59f-44ea-bfea-08735a4c4fea",
          "status": "OK",
          "code": 200,
          "responseTime": 594,
          "responseSize": 1656
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "9b6edbb8-bf3b-4148-9463-a47b8ba65c2c",
        "cursor": {
          "ref": "1b50e40c-2abe-4b74-998f-8e10fdc02390",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "cd7e163a-85c6-42d5-81e2-474a4d3b4685"
        },
        "item": {
          "id": "9b6edbb8-bf3b-4148-9463-a47b8ba65c2c",
          "name": "identifiers"
        },
        "response": {
          "id": "07f1b430-ab6d-4348-9829-a1185950aa05",
          "status": "OK",
          "code": 200,
          "responseTime": 627,
          "responseSize": 1656
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f331a4e-8c72-4f92-801f-459b03ed58f0",
        "cursor": {
          "ref": "d656b535-5177-4461-b5cd-c194e02ad06c",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "6e577137-acaf-4860-a413-924dfbfd6670"
        },
        "item": {
          "id": "1f331a4e-8c72-4f92-801f-459b03ed58f0",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "4b309d28-3027-4543-adc9-e4852ca7ef2f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 429,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "1f331a4e-8c72-4f92-801f-459b03ed58f0",
        "cursor": {
          "ref": "d656b535-5177-4461-b5cd-c194e02ad06c",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "6e577137-acaf-4860-a413-924dfbfd6670"
        },
        "item": {
          "id": "1f331a4e-8c72-4f92-801f-459b03ed58f0",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "4b309d28-3027-4543-adc9-e4852ca7ef2f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 429,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "8120abcb-1af2-4a0e-a4ed-a9d1652fd930",
        "cursor": {
          "ref": "c0bc5f61-28ca-4e0c-af67-499216cd117d",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "a7ab7ec4-40c8-47a1-a583-df7d840de690"
        },
        "item": {
          "id": "8120abcb-1af2-4a0e-a4ed-a9d1652fd930",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "0fba1e2b-5add-4375-b1ae-6b875cab521d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 453,
          "responseSize": 441
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "6dfaff10-90f9-4a30-9678-3f2d716694b0",
        "cursor": {
          "ref": "880848d6-f31b-4b86-b139-46bf1b3c583e",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "8d37a202-ad0f-42bf-8950-c733fc9f0ef7"
        },
        "item": {
          "id": "6dfaff10-90f9-4a30-9678-3f2d716694b0",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "145eadfe-ee64-4e02-a0a7-4b4280206a83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 438,
          "responseSize": 960
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "b29b4d6a-18d3-46fd-aa58-dcf5051a6859",
        "cursor": {
          "ref": "d243d777-59d6-4302-a39b-68cdb512bd02",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "f0aa99c4-4720-4bdc-a20c-5e24f48a010e"
        },
        "item": {
          "id": "b29b4d6a-18d3-46fd-aa58-dcf5051a6859",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "bdfe3196-f748-46f4-a181-7650fd68ffdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 412,
          "responseSize": 957
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "b025ebc5-2f79-44e7-8923-18c914a594c8",
        "cursor": {
          "ref": "11b19f5d-673c-40c6-ab10-426bee7b4d9c",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "7e8f20a4-a006-4fc2-86e7-c64b029eb1dd"
        },
        "item": {
          "id": "b025ebc5-2f79-44e7-8923-18c914a594c8",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "8d68f780-a5de-45fb-bff5-31317e6fd850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 447,
          "responseSize": 959
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "2536847a-c835-4680-b85a-72726c02ff37",
        "cursor": {
          "ref": "1d3aace5-0664-4472-bbc1-fbdc454f1149",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "55cf2b8c-8be7-42fe-9798-735ebc10e970"
        },
        "item": {
          "id": "2536847a-c835-4680-b85a-72726c02ff37",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "14bb381d-9933-4f40-be05-e916d36af5d7",
          "status": "Created",
          "code": 201,
          "responseTime": 1611,
          "responseSize": 645
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "c5fdfb0e-b190-48d3-86a9-43448512af33",
        "cursor": {
          "ref": "42a1f126-3dc6-416f-bac1-211a7df3b8b8",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "e6f96fca-9028-4955-a9a4-aa579c4df722"
        },
        "item": {
          "id": "c5fdfb0e-b190-48d3-86a9-43448512af33",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "f2b9cfc6-8b44-4f6b-a09d-a61dbd8ff82e",
          "status": "Created",
          "code": 201,
          "responseTime": 1661,
          "responseSize": 634
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "61ba4c49-88bf-4979-9fcf-3b28e005ee61",
        "cursor": {
          "ref": "eecce273-d24c-4519-bb43-9b088cd55a29",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "3f60e681-d5f9-4f6d-9ecb-e1cea3444724"
        },
        "item": {
          "id": "61ba4c49-88bf-4979-9fcf-3b28e005ee61",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "7dbefc5c-89cc-4546-9e5f-213ec484bac7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 424,
          "responseSize": 1448
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "2b381562-f858-48f8-b7d2-2cf63e2198e4",
        "cursor": {
          "ref": "5c14fa21-cc28-4c3f-8ed2-475f6963c94a",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "fe786bbf-2b6b-4f73-98bc-b71f0839d831"
        },
        "item": {
          "id": "2b381562-f858-48f8-b7d2-2cf63e2198e4",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "09f78526-9938-4162-986e-05ceba26e4d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 437,
          "responseSize": 1417
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "cea0baf0-4742-4eba-baa3-ff7d5f37bf9a",
        "cursor": {
          "ref": "3f77a604-148a-4413-9d29-cee56a05e64d",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "af21ef9f-88d1-4970-8301-cc50bf01884a"
        },
        "item": {
          "id": "cea0baf0-4742-4eba-baa3-ff7d5f37bf9a",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "a4d8c589-4a5f-4bc7-a875-74aecb0bcfe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 445,
          "responseSize": 1414
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "ddbd5127-18f7-4989-b8f3-33377464e664",
        "cursor": {
          "ref": "3db1e85c-3ab5-4a75-880d-113523e046f0",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "104dc8ee-3484-412a-a4dc-926b4809a4e7"
        },
        "item": {
          "id": "ddbd5127-18f7-4989-b8f3-33377464e664",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "4975778f-cfe1-4ee9-b04a-05ce4acb8f8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 439,
          "responseSize": 1416
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "7edbfc5f-b450-42d2-823a-0c480cd9c774",
        "cursor": {
          "ref": "1a35fa5f-e243-4e3a-b4f4-bdbd8e35ad77",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "cfb23d14-c955-438e-86d9-2c6bd4a7d61b"
        },
        "item": {
          "id": "7edbfc5f-b450-42d2-823a-0c480cd9c774",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "bae734e3-606d-49a3-af7a-6ec890297030",
          "status": "Created",
          "code": 201,
          "responseTime": 1687,
          "responseSize": 682
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "655529e1-83c0-4890-b54e-fb689424a256",
        "cursor": {
          "ref": "2f7561e7-4a31-4bba-8197-5865cb5028ae",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "6b8c040f-b068-4816-a5ca-77fca400e782"
        },
        "item": {
          "id": "655529e1-83c0-4890-b54e-fb689424a256",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "31a82a30-f688-488e-a941-588170c50c9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 429,
          "responseSize": 522
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "b7ac82ad-d82d-4805-9233-c584480c5d5e",
        "cursor": {
          "ref": "e03842aa-285d-4037-85be-7b5d45a5e068",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "faab6890-907e-4d64-b814-79e0974a314f"
        },
        "item": {
          "id": "b7ac82ad-d82d-4805-9233-c584480c5d5e",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "99069cff-fb0a-488c-b877-cab5538377f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 447,
          "responseSize": 478
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "197b8831-83db-40f1-9eaf-76dd3ef9737b",
        "cursor": {
          "ref": "0bd3fc19-9f75-4480-8f9c-123ae9e49561",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "025419da-1ace-4f78-b620-0cc792ad1c5e"
        },
        "item": {
          "id": "197b8831-83db-40f1-9eaf-76dd3ef9737b",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "3e7363df-ecb4-4d94-9cc2-66cccd49162a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 412,
          "responseSize": 475
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "52cc2129-fb2f-4941-a992-6ba3c5da7f2a",
        "cursor": {
          "ref": "d2faca94-7a17-4b70-aa3c-63c908b276e0",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "9d3e30cb-bdd3-4841-bff5-f9c2e59406f4"
        },
        "item": {
          "id": "52cc2129-fb2f-4941-a992-6ba3c5da7f2a",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "7dc4d238-d801-4c34-a891-551238b8dfff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 476,
          "responseSize": 477
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "c8630ed3-a19b-4e8b-870e-572abeb7e8d7",
        "cursor": {
          "ref": "0b715783-9a9c-4884-9f8f-6d59da9dce97",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "e024580f-4065-45fa-a670-5027e2f3a235"
        },
        "item": {
          "id": "c8630ed3-a19b-4e8b-870e-572abeb7e8d7",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "6f87efcd-7ca1-4bd6-96ef-a6393b264f35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 436,
          "responseSize": 527
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "d2deec78-018f-4397-bdad-d36b5e225e60",
        "cursor": {
          "ref": "30c38630-e044-4609-a678-d4ba095eee8c",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "852d8020-de73-4086-8851-ad8b24f5bcda"
        },
        "item": {
          "id": "d2deec78-018f-4397-bdad-d36b5e225e60",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "6cd7d027-8ff9-4e29-919d-0d14017c33ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 432,
          "responseSize": 455
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "3bf1300b-df42-4deb-b8c4-ad68cddc7267",
        "cursor": {
          "ref": "12db0a6a-c22c-4e0c-88a9-f3e7c770abae",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "27b693e3-e439-4a17-8aef-9b675da6613f"
        },
        "item": {
          "id": "3bf1300b-df42-4deb-b8c4-ad68cddc7267",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "834dbc5e-758a-4e7b-a34f-374bb4f56464",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 422,
          "responseSize": 757
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "c8a0cebe-5d1c-4a4e-927c-18108225f4a1",
        "cursor": {
          "ref": "19801c55-ff79-4034-8b4a-adb4ca39987c",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "527ae118-9bcb-45df-9694-de8f149a2c7c"
        },
        "item": {
          "id": "c8a0cebe-5d1c-4a4e-927c-18108225f4a1",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "f105ad51-2a33-4810-9798-20400b365b51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 429,
          "responseSize": 754
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "42e6679b-d47e-41bc-a35f-46bccbf229d9",
        "cursor": {
          "ref": "83a7397a-0ca2-430a-a895-ea3fc10e9956",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "528321a7-e8a8-431c-bcf2-db5ee8dec3c6"
        },
        "item": {
          "id": "42e6679b-d47e-41bc-a35f-46bccbf229d9",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "907ea50f-b77e-447a-a089-9e2061410ad2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 436,
          "responseSize": 756
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "31f77eb1-e282-4647-82de-1accc1668619",
        "cursor": {
          "ref": "4da206ed-f638-4452-8829-de1288a21417",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "8065e192-3653-4b0a-9320-37378c6223ef"
        },
        "item": {
          "id": "31f77eb1-e282-4647-82de-1accc1668619",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "14455096-846b-492e-9cbd-0d83d1f6e07d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 461,
          "responseSize": 754
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "7171bb49-5f0f-4293-8598-b58bda122047",
        "cursor": {
          "ref": "fcbca8af-3d5d-4a0d-bf6d-881566d07674",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "4c2c9884-276c-4a18-a41f-65d537087047"
        },
        "item": {
          "id": "7171bb49-5f0f-4293-8598-b58bda122047",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "e4e04ebd-dd7f-4be4-9609-7df831cf9f74",
          "status": "Created",
          "code": 201,
          "responseTime": 1541,
          "responseSize": 634
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "7011ccb8-6b98-4c15-b7a9-06fc77c1062a",
        "cursor": {
          "ref": "2a0f30ae-a7e4-4e4b-91aa-c4d11287b3f4",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "2fdc11e5-c246-4d66-a7b1-38fcadff142f"
        },
        "item": {
          "id": "7011ccb8-6b98-4c15-b7a9-06fc77c1062a",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "e573a5e6-4def-4f98-9fa8-75536bd7426e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 423,
          "responseSize": 174
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "624719a3-a406-4aa7-aa30-96ba0ac24065",
        "cursor": {
          "ref": "c09e14cd-61ae-4284-9d9c-2a9f09453b3b",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "427b8509-8c8b-489d-a0c3-989d39524fcf"
        },
        "item": {
          "id": "624719a3-a406-4aa7-aa30-96ba0ac24065",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "f539d4bc-1d58-4646-b9e0-fd86e66451e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 411,
          "responseSize": 802
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "07242c92-556b-43bc-b78d-7297802bf19b",
        "cursor": {
          "ref": "40dedb1b-7833-47b3-86ca-4ee7b7064cc3",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "5283f2a2-684f-4859-9ad5-cb8a1c1ce36e"
        },
        "item": {
          "id": "07242c92-556b-43bc-b78d-7297802bf19b",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "22481aae-8c11-46d4-a718-11b4ae2f22cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 411,
          "responseSize": 792
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "33374b82-584a-4b62-ab10-23ff65ecb96c",
        "cursor": {
          "ref": "960d114b-7e01-407b-ac46-418762438a43",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "6925e560-442a-463a-97f0-82b0a7fc017a"
        },
        "item": {
          "id": "33374b82-584a-4b62-ab10-23ff65ecb96c",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "c791b098-9aba-4e34-8715-53d8c904d262",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 448,
          "responseSize": 789
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "5d7e17a7-57d6-458d-96d2-1b1ff8eb1a0c",
        "cursor": {
          "ref": "92a5fc3b-5243-4c2d-a7f5-ada002563e96",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "ff687c63-fb2c-4ee4-a4f3-aea3ba9e0b18"
        },
        "item": {
          "id": "5d7e17a7-57d6-458d-96d2-1b1ff8eb1a0c",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "3c181fb3-9561-4227-b512-337dee5597a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 436,
          "responseSize": 791
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "275427bb-51f5-43df-a075-d3d1d85b31f5",
        "cursor": {
          "ref": "71153e0f-fb46-49e2-b8f5-05722347c764",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "5e045813-0c43-4373-b211-9a44893789e8"
        },
        "item": {
          "id": "275427bb-51f5-43df-a075-d3d1d85b31f5",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "8105dab7-606e-490d-8c88-da32b707bde0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 445,
          "responseSize": 789
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "db3e28d5-ac49-4916-bcad-5b7c99d4976f",
        "cursor": {
          "ref": "7b3ce05a-c42d-491e-b87e-f1889b283e23",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "b8c39a59-aabe-4646-8012-92c8ab9367c2"
        },
        "item": {
          "id": "db3e28d5-ac49-4916-bcad-5b7c99d4976f",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "3c1f9945-7556-4b64-99b4-70eff40ec7f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 423,
          "responseSize": 407
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "2c44bc19-15bf-40c8-8c98-0162aee69479",
        "cursor": {
          "ref": "926f48d3-450d-4b26-8c3b-8667e2f25671",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "5c859d5d-a647-45b9-bf64-c7e435ddd742"
        },
        "item": {
          "id": "2c44bc19-15bf-40c8-8c98-0162aee69479",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "41cd7a24-b174-447c-b4dc-6f1eebeb112f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 408,
          "responseSize": 753
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "3e30dcc8-248d-4969-8316-5dd29e58f68a",
        "cursor": {
          "ref": "7f95d76f-223f-4f08-9cb5-a83fee3a86fb",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "9b4f8a69-8802-4a53-adb4-a2004f1f2f85"
        },
        "item": {
          "id": "3e30dcc8-248d-4969-8316-5dd29e58f68a",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "4fd64ae2-2288-4f08-bca5-94d57eecda15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 406,
          "responseSize": 682
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "48e41e33-4b7b-45a8-93f9-99289fd01ce5",
        "cursor": {
          "ref": "78730137-8151-4d3a-ba05-3af0fb6a2c4c",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "11145655-74fa-4c7f-b506-9c7ad2149e9b"
        },
        "item": {
          "id": "48e41e33-4b7b-45a8-93f9-99289fd01ce5",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "a8b8045b-a22a-4a07-8809-5f40eee04a02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 443,
          "responseSize": 679
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "327c8fcb-a17b-4e4a-a9ad-a7b0dd4f633a",
        "cursor": {
          "ref": "e18ca6f7-173d-404f-8067-de83750dec1a",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "d4dd4f0e-18cd-4941-964a-a4100766dfdd"
        },
        "item": {
          "id": "327c8fcb-a17b-4e4a-a9ad-a7b0dd4f633a",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "eeef604c-30b6-4dce-aabf-5175b82a818b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 431,
          "responseSize": 681
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "065cc677-d951-454d-9d0f-37a5ccc2b1a1",
        "cursor": {
          "ref": "5c8e8c3e-fd7a-4e33-b58e-3037e40bb8d0",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "345ce824-1923-47e1-aac5-30409b022feb"
        },
        "item": {
          "id": "065cc677-d951-454d-9d0f-37a5ccc2b1a1",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "e9052c42-3b53-4c5a-9534-12192a730627",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 423,
          "responseSize": 930
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "5a3cd9d6-9016-4166-9a5e-78a3675103fa",
        "cursor": {
          "ref": "07d054c3-1afc-40c0-a4c3-7d04e8051aa2",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "34d88406-8a21-4979-abde-9d2a7a3b8503"
        },
        "item": {
          "id": "5a3cd9d6-9016-4166-9a5e-78a3675103fa",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "0b7ff940-9f3f-4cb6-a9ec-ba57ec19a363",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 473,
          "responseSize": 966
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "6766da35-772a-4ae1-b76e-26e14d656dae",
        "cursor": {
          "ref": "34060489-7ff8-494b-aaae-e73d41efc983",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "dc56acba-8002-47de-9b49-f3dc703bb861"
        },
        "item": {
          "id": "6766da35-772a-4ae1-b76e-26e14d656dae",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "3039886f-de0c-4ca3-9bf6-a0c71ada70df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 511,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "d9243515-c886-4b48-9c14-9c068df41126",
        "cursor": {
          "ref": "d3904b8b-f97f-4fbd-b306-458e15bd438d",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "398586e1-b0d2-46fb-80e8-35df3edadd5f"
        },
        "item": {
          "id": "d9243515-c886-4b48-9c14-9c068df41126",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "4e1eef01-5121-44b6-a48d-d174111b5544",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 423,
          "responseSize": 778
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "10efae34-d695-49f5-998c-f1a5c99d91de",
        "cursor": {
          "ref": "bf789854-c0bf-4b59-beec-34639d29918f",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "8b4365c9-7a6c-4da0-8044-53e0cc159d45"
        },
        "item": {
          "id": "10efae34-d695-49f5-998c-f1a5c99d91de",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "5a4b4369-3647-47f1-b463-cc3235f574fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 444,
          "responseSize": 707
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "c72fc34b-d5bb-4625-b34f-ef0d75da6fa4",
        "cursor": {
          "ref": "bf2a98a0-2090-4e0e-8fca-7cff0a062a5b",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "9aa03ed1-9087-4229-9ff0-4b6f4f34a4ec"
        },
        "item": {
          "id": "c72fc34b-d5bb-4625-b34f-ef0d75da6fa4",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "10ffbeb7-df69-4d91-a1d5-bacd837dc7cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 457,
          "responseSize": 704
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "c36f4628-af2a-4140-b56b-ae0f881d7471",
        "cursor": {
          "ref": "59e4fc9f-d618-413f-98e8-a7733622e99a",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "9da2d4ce-7e85-4255-8906-2c3fb434241d"
        },
        "item": {
          "id": "c36f4628-af2a-4140-b56b-ae0f881d7471",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "c35a2a20-4ec5-4bf6-a070-5b2dce0fb5a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 433,
          "responseSize": 706
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "e7da283a-d2b8-404c-92d4-f7b6f0b497bd",
        "cursor": {
          "ref": "a251057f-0903-4a9d-bab7-ec2e2b4b4bdc",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "e19840fd-fffa-4ec6-b50a-34fa68855c0b"
        },
        "item": {
          "id": "e7da283a-d2b8-404c-92d4-f7b6f0b497bd",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "55e868c0-fac3-4a18-8ebc-c4c0591c1357",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 451,
          "responseSize": 955
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "5afee889-9bca-4ba5-85c5-4e950b4c0b67",
        "cursor": {
          "ref": "aa62373e-a838-43d6-bbe9-639ea56230d1",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "b67ef025-6cec-408a-9ea8-02326b02ca47"
        },
        "item": {
          "id": "5afee889-9bca-4ba5-85c5-4e950b4c0b67",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "1b898405-d628-452f-b347-38287878b46f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 442,
          "responseSize": 991
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "7e538698-4667-4783-8a94-b4e5fc61f9bf",
        "cursor": {
          "ref": "af0bd7fb-4181-485a-a317-977e03573a4b",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "41530f0a-b4f2-4616-a0fb-33c597f6e568"
        },
        "item": {
          "id": "7e538698-4667-4783-8a94-b4e5fc61f9bf",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "43aa7ce6-0a0d-4f13-9c11-aa94a7d7093f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 442,
          "responseSize": 465
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "1fcb334e-0f61-4ca4-a486-1e3cc7039301",
        "cursor": {
          "ref": "0e6de703-287a-492e-92b6-dd16a5ca0c84",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "75ca3853-37d5-4e7b-87c6-30abb4446e1c"
        },
        "item": {
          "id": "1fcb334e-0f61-4ca4-a486-1e3cc7039301",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "1b2285ea-fe34-47ee-843a-64fff36aa385",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 416,
          "responseSize": 489
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "3d819232-38b6-423a-b2d4-77846f4ca8c0",
        "cursor": {
          "ref": "93e83cca-5efc-4068-9ebe-d99b5359e413",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "ead7a3f2-eb20-4c62-a0f0-2091d0266965"
        },
        "item": {
          "id": "3d819232-38b6-423a-b2d4-77846f4ca8c0",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "b6dbceeb-6fc6-4655-a03d-18551cc9740f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 423,
          "responseSize": 470
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "1baedf4f-c9cd-4060-ad0d-fef041d4b876",
        "cursor": {
          "ref": "6b40b745-53e7-4dd5-a9b2-544c1193a0f1",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "27764591-0c0a-4f2a-aa7c-d40bfbd46608"
        },
        "item": {
          "id": "1baedf4f-c9cd-4060-ad0d-fef041d4b876",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "e99c408c-5ef3-4412-a8d7-4011202402c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 421,
          "responseSize": 467
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "a9302f74-5d45-4a90-81be-7193b66a056b",
        "cursor": {
          "ref": "22922da9-f299-412f-85a6-5a93891e6c28",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "2b9ebd10-34c8-49d3-bfc3-895cca3d69e0"
        },
        "item": {
          "id": "a9302f74-5d45-4a90-81be-7193b66a056b",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "39ef9d31-b0dd-469c-8331-9e16d9838716",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 436,
          "responseSize": 469
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "1a0765ec-de3a-48a7-aa18-a0b30812bf97",
        "cursor": {
          "ref": "0eb1ad97-6c24-4ed7-b841-0bf22b9b824f",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "4ae18340-4c07-4b83-abdf-8201fd68784f"
        },
        "item": {
          "id": "1a0765ec-de3a-48a7-aa18-a0b30812bf97",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "b46f75e4-edcb-4b77-8fe8-b8a6bfe41f62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 436,
          "responseSize": 467
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "827a0d7f-200c-4f0f-8d69-a14a01e074fb",
        "cursor": {
          "ref": "6173e406-ba7e-492c-b20f-c14aad0bea1c",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "8fa95055-5d92-4395-90ac-4db0240198bc"
        },
        "item": {
          "id": "827a0d7f-200c-4f0f-8d69-a14a01e074fb",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "a5b15756-cb9d-4711-9f3c-5533b6949c34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 441,
          "responseSize": 237
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "e14ad11e-3955-474e-acdd-d16ca205a4cc",
        "cursor": {
          "ref": "71e4bfbe-82f6-4c40-9e4b-5ac44402d5a4",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "7c6eecbb-771f-4e44-ba12-805c475bd6e9"
        },
        "item": {
          "id": "e14ad11e-3955-474e-acdd-d16ca205a4cc",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "7dcb3706-fd07-4af9-9b32-73b6fcb033b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 446,
          "responseSize": 490
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "87632578-45c3-4008-b2e9-9dfaa98ae09e",
        "cursor": {
          "ref": "00744a3b-39a5-4e74-9f34-07e013686de8",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "5f279347-862d-451f-86fe-0e6fb05f0c1a"
        },
        "item": {
          "id": "87632578-45c3-4008-b2e9-9dfaa98ae09e",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "f1ae9d0b-616c-4cb2-9bd0-5f4c6155813c",
          "status": "Created",
          "code": 201,
          "responseTime": 1544,
          "responseSize": 653
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "b340e194-79a0-4555-9fdc-6b108c91cfea",
        "cursor": {
          "ref": "bfbd687c-aa5e-4a9e-bcd6-19037ef96bb2",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "e38b3e32-ff15-4378-95d7-ed0a8c410f3c"
        },
        "item": {
          "id": "b340e194-79a0-4555-9fdc-6b108c91cfea",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "46e37b7a-cb76-4bc7-9b80-6a0405555011",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 428,
          "responseSize": 935
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "ebe71465-9e9f-436f-8333-80829c4c618c",
        "cursor": {
          "ref": "e21cb661-dbbe-4a5e-b1ba-cba2a6ba1c35",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "003ced56-04ce-4863-93bb-a38f52656afe"
        },
        "item": {
          "id": "ebe71465-9e9f-436f-8333-80829c4c618c",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "4a96c219-a50b-435a-bef3-8f43365253a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 527,
          "responseSize": 932
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "bd327edc-c0f6-4a29-ac2c-f39b7547ef39",
        "cursor": {
          "ref": "67b1f437-6e5f-461d-86ed-01dba02c8ec9",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "fa9e1fa5-4558-4d51-94f5-bc007e608d13"
        },
        "item": {
          "id": "bd327edc-c0f6-4a29-ac2c-f39b7547ef39",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "87279929-2722-47ad-9550-1fb6c63cd0e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 455,
          "responseSize": 934
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "a490a2f8-6143-4b19-b2d3-a8ac855e28a8",
        "cursor": {
          "ref": "13c0cb48-bf52-4c95-b0d3-fa2021681421",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "b32084c8-6040-42ef-9629-88d74f21293e"
        },
        "item": {
          "id": "a490a2f8-6143-4b19-b2d3-a8ac855e28a8",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "24fbe58f-d032-4f80-add2-9d4226becbd2",
          "status": "Created",
          "code": 201,
          "responseTime": 2609,
          "responseSize": 651
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "6329e6cb-4482-4053-a26a-98cdf6bd5746",
        "cursor": {
          "ref": "b2fbd1b6-041b-473c-aa4c-07d7110bc90c",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "1be833e5-0ddf-48a5-9fcf-36c6ae73bfc2"
        },
        "item": {
          "id": "6329e6cb-4482-4053-a26a-98cdf6bd5746",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "3a24c7ec-be83-495e-bcad-5546f91ed8a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1325,
          "responseSize": 1273
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "d41f7e41-13d0-46fb-b14a-18fee0e5bb8e",
        "cursor": {
          "ref": "8dee4f41-3c7d-4972-bdf4-cc698f5c3fcf",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "8b3659c3-3967-407d-bdb0-8da90b6d296e"
        },
        "item": {
          "id": "d41f7e41-13d0-46fb-b14a-18fee0e5bb8e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "223c45f9-995a-43a1-b298-873ca4b5b2db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 884,
          "responseSize": 1259
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "ed42ccc3-32d4-405d-8b0c-e707072c44c9",
        "cursor": {
          "ref": "ae93594c-de68-4b25-bccd-277f6b5dc315",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "45603c62-dbae-413b-93ab-9c7095985944"
        },
        "item": {
          "id": "ed42ccc3-32d4-405d-8b0c-e707072c44c9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "94e8ab7b-22ae-4ede-9c9a-55ae2b2ce843",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1062,
          "responseSize": 1256
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "c61e6e75-1459-4003-bf05-866dff7e989c",
        "cursor": {
          "ref": "a9a8f781-8066-47a9-9c54-217d3fb7e26d",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "b215cc88-d021-4143-88c0-883c3c066bc7"
        },
        "item": {
          "id": "c61e6e75-1459-4003-bf05-866dff7e989c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "ad9c30cc-f64b-454b-9799-1c3dd76c49af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 624,
          "responseSize": 1258
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "70b2bbc9-5c50-4a8c-97b2-ea59c6335f42",
        "cursor": {
          "ref": "18953cda-7971-41cf-9bb6-bf20c8d7d19d",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "9d9e1649-5128-49ff-ae2d-e7fcdf2b14fd"
        },
        "item": {
          "id": "70b2bbc9-5c50-4a8c-97b2-ea59c6335f42",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "631b952d-85f7-42ca-a817-c380bf32c8ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 658,
          "responseSize": 1256
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "d28e70c5-6dd2-436d-aadb-21f25ed49491",
        "cursor": {
          "ref": "4af66f4d-64e8-4b27-8a15-3de51464d9b0",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "3a33b43b-8ed3-4d3c-b10d-562c2c2167a2"
        },
        "item": {
          "id": "d28e70c5-6dd2-436d-aadb-21f25ed49491",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "43aa29ef-0942-493e-bf6c-03c202a3e1e2",
          "status": "Created",
          "code": 201,
          "responseTime": 2637,
          "responseSize": 636
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "2ad7e87b-0834-49e9-a704-46ecef8e28d3",
        "cursor": {
          "ref": "0f3faf97-76db-4ccf-bed7-41db56a61832",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "bec419ea-3cf0-4a85-b2ac-6bd8b280404e"
        },
        "item": {
          "id": "2ad7e87b-0834-49e9-a704-46ecef8e28d3",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "6d6d8074-cd86-4f92-8e62-dc5dd326679b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 437,
          "responseSize": 460
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "f0e42d30-6df7-4ae9-9db8-f1a92cf0c3eb",
        "cursor": {
          "ref": "330a7e38-edc2-4ded-b6ac-44572bf67361",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "9443d218-3a8c-4f6d-848d-b870fb98a373"
        },
        "item": {
          "id": "f0e42d30-6df7-4ae9-9db8-f1a92cf0c3eb",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "b7a9c4c7-b140-4e39-8f26-eccedfc8abca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 456,
          "responseSize": 463
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "424c66ea-8657-46fe-a7f8-42d70adf5379",
        "cursor": {
          "ref": "8efdbbbe-2cf6-47d1-8b74-04ecc9b04c72",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "4ccdb689-7a29-4b62-8c02-71b2610ed83b"
        },
        "item": {
          "id": "424c66ea-8657-46fe-a7f8-42d70adf5379",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "ac03c734-5871-444b-b5b4-ca8c0572e9d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 503,
          "responseSize": 460
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "f6dd5fdf-dc79-4f96-9ef7-4146c06d0564",
        "cursor": {
          "ref": "a8ac98fb-e2c0-43b3-8081-fe47e88ebd42",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "9108d54f-d20c-4c04-a0b3-dee4fbdc0759"
        },
        "item": {
          "id": "f6dd5fdf-dc79-4f96-9ef7-4146c06d0564",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "df15de7d-ff36-4e94-a8c5-f090bc7cfb8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 463,
          "responseSize": 462
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "c832a723-fab8-412d-bd52-2b3c2d0ed46b",
        "cursor": {
          "ref": "04c4f773-0ae2-4ad0-b9f4-3a4fec539b40",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "03e40af7-c2c9-43b5-9ee6-92ea80417271"
        },
        "item": {
          "id": "c832a723-fab8-412d-bd52-2b3c2d0ed46b",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "d96c9551-b31a-499e-82df-28f66c505f33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 438,
          "responseSize": 460
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "03dab7f0-76da-4e9c-a343-e7418e9697e1",
        "cursor": {
          "ref": "44c30b12-e325-4908-b350-dece6dc15fad",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "af900d22-e539-4acd-969b-ac74874f0a7c"
        },
        "item": {
          "id": "03dab7f0-76da-4e9c-a343-e7418e9697e1",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "5ef79cf8-e700-4e98-8269-8be483a2e0f0",
          "status": "Created",
          "code": 201,
          "responseTime": 1562,
          "responseSize": 636
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "efc0bffc-53a5-4912-84b7-604e6bd108ef",
        "cursor": {
          "ref": "6f11650e-a873-4fd8-9175-2a6e5715e60f",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "e21fb0ac-0362-4073-9095-dd2e65810a47"
        },
        "item": {
          "id": "efc0bffc-53a5-4912-84b7-604e6bd108ef",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "4f53dc37-7184-40a0-aa12-6bcd0983468d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 416,
          "responseSize": 512
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "7d88dfc1-fabd-4037-9edd-a1af1d1067fb",
        "cursor": {
          "ref": "ad1e9daf-e98a-4408-b005-222042897f72",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "dc7c36d3-2bcb-463c-87d6-893a599e4202"
        },
        "item": {
          "id": "7d88dfc1-fabd-4037-9edd-a1af1d1067fb",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "b1f640f8-354e-4637-997b-ded216845a67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 413,
          "responseSize": 493
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "1777bb37-3231-4ff7-b871-f63f0e0aedad",
        "cursor": {
          "ref": "d82faa0c-db0f-407f-ab99-93bf0bc86059",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "384d0f49-d880-43d9-982e-b87d6d451a03"
        },
        "item": {
          "id": "1777bb37-3231-4ff7-b871-f63f0e0aedad",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "b8af4575-6887-4de8-b4ba-548300361850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 428,
          "responseSize": 490
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "c9e6aa61-a5bc-4768-ac8e-ec8579888f34",
        "cursor": {
          "ref": "e0097d5c-d633-40cb-87ea-b4a9df86a76e",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "6fc33ac3-9e26-42de-847d-71ddd33e3c55"
        },
        "item": {
          "id": "c9e6aa61-a5bc-4768-ac8e-ec8579888f34",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "60bc0be8-b10a-4c91-b488-be5d583ed542",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 423,
          "responseSize": 492
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "640254e0-5150-4f2f-a0ca-faab50ccbf62",
        "cursor": {
          "ref": "7d4b24b3-bc05-4eed-9ef6-6fe4c3872cc5",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "2aa12bb5-2768-423b-859f-ec1a95d03079"
        },
        "item": {
          "id": "640254e0-5150-4f2f-a0ca-faab50ccbf62",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "52c7333f-b6a6-4e65-b810-ca4c1fb042c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 416,
          "responseSize": 490
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "3f6afc47-9173-4ec0-8060-173f22ac79a7",
        "cursor": {
          "ref": "4ec9d315-4a24-4db4-bdf4-e8a4dbd4f6fc",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "1a575e8d-1051-4de6-9dbb-3710c26aa820"
        },
        "item": {
          "id": "3f6afc47-9173-4ec0-8060-173f22ac79a7",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "471a3176-7da0-42af-85de-27e4c0a455d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 435,
          "responseSize": 588
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "8930bf0a-b170-4403-8bc4-a11ddc9ab426",
        "cursor": {
          "ref": "f0049de9-c051-4d31-8ae8-5355189a253e",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "e1bdf955-0753-47ae-9434-ab715d32c1ca"
        },
        "item": {
          "id": "8930bf0a-b170-4403-8bc4-a11ddc9ab426",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "9e795e72-e51b-4efb-b041-991471d12131",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 442,
          "responseSize": 551
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "94f61f11-8e43-4a29-9965-571a656e814f",
        "cursor": {
          "ref": "f84ac4bc-f01d-4ad2-8520-7f0446022ef0",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "db8a2488-a0e9-4044-8ee4-b54deed134e2"
        },
        "item": {
          "id": "94f61f11-8e43-4a29-9965-571a656e814f",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "3590e937-a4dc-4439-a88b-7f718f7f1dd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 415,
          "responseSize": 532
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "55b84826-8c6c-4427-93b7-0accddc0e67a",
        "cursor": {
          "ref": "c3170507-3d83-44eb-96d2-b4afda4b9217",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "7e393e7d-f0ba-4839-87ed-8be08bc97796"
        },
        "item": {
          "id": "55b84826-8c6c-4427-93b7-0accddc0e67a",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "24f6bf60-df2c-4e0f-9049-32a4fa79c79a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 446,
          "responseSize": 529
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "47c91131-8cd3-47b3-900d-dde075f01ba9",
        "cursor": {
          "ref": "07fe3385-8475-495b-8aea-1621fd1601ac",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "cd31445e-cd3c-4a6f-815a-d97f418094cc"
        },
        "item": {
          "id": "47c91131-8cd3-47b3-900d-dde075f01ba9",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "d7ea288d-d17c-43e3-aa53-1d38051ec9ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 428,
          "responseSize": 531
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "8fd9ce22-3729-4935-9ab8-5847bf918fbd",
        "cursor": {
          "ref": "1dd9def8-5f9f-4b50-bb41-89183cb245d3",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "44c68f21-c201-4dae-9d7f-7b7a55b99d78"
        },
        "item": {
          "id": "8fd9ce22-3729-4935-9ab8-5847bf918fbd",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "73502b5f-4a77-4eaf-abe2-e37a7b739cf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 414,
          "responseSize": 529
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "f809e221-db2c-451a-9c03-927ce4eeac20",
        "cursor": {
          "ref": "c0efaec2-56c6-4211-9988-31d140c21ad6",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "28bafc46-b513-4f1b-a50e-30d6ce3965d0"
        },
        "item": {
          "id": "f809e221-db2c-451a-9c03-927ce4eeac20",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "564fd39e-a470-4b92-b28d-d744fad4a2ed",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1369,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "b1a3e59d-d0f4-4c17-915b-5059aeebde15",
        "cursor": {
          "ref": "975ba096-5335-4ee2-806b-db404ffaf24d",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "cb2851ef-0b78-44e2-b551-f86f3b0da0b6"
        },
        "item": {
          "id": "b1a3e59d-d0f4-4c17-915b-5059aeebde15",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "aa14c4af-64ea-495d-8af3-6d2739706782",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 508,
          "responseSize": 582
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "93515e25-a31d-4e37-9519-e3ccb541d1d5",
        "cursor": {
          "ref": "76b32633-0ade-4ef2-8a75-9f9572ef0d92",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "1bf9b309-2c61-47a6-b22b-aa6544128965"
        },
        "item": {
          "id": "93515e25-a31d-4e37-9519-e3ccb541d1d5",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "bb11f97a-4851-4e7e-9c74-17ebf2ee82f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 460,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "bed847e9-4ab3-4942-a8ce-423425194cb9",
        "cursor": {
          "ref": "7d6dde05-6360-4d4c-a6f8-0badf9b63bf8",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "8ad70858-86ff-4f20-bfa2-cc56deee39c2"
        },
        "item": {
          "id": "bed847e9-4ab3-4942-a8ce-423425194cb9",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "f1934387-74c3-40f1-91fb-fbb8a269f4ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 844,
          "responseSize": 556
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "5bef7b43-3c7f-4406-9674-2049cd86053d",
        "cursor": {
          "ref": "666e2cab-db5a-4197-a19c-cd50363ac77c",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "cfbf656e-7b7a-4903-9127-6575fea99210"
        },
        "item": {
          "id": "5bef7b43-3c7f-4406-9674-2049cd86053d",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "08fb9609-af4e-4e98-8e39-7fc41cd1cc52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 674,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "22437c54-9bd7-448f-bf42-1ff82ae6ef44",
        "cursor": {
          "ref": "c7278642-a13d-4b01-b584-82979574d2b8",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "9718b212-60bd-4f66-beea-b2562bec733e"
        },
        "item": {
          "id": "22437c54-9bd7-448f-bf42-1ff82ae6ef44",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "fe9e3236-9821-43c5-ab51-a970879857c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 659,
          "responseSize": 580
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "5484d0db-21a6-49e3-860a-d44972592f80",
        "cursor": {
          "ref": "3a586e64-522e-495a-898e-d6341a3d50e3",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "6eb8ea1f-0e59-45ee-9b81-d544c46bd03d"
        },
        "item": {
          "id": "5484d0db-21a6-49e3-860a-d44972592f80",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "f19004a5-73ee-4932-9e8f-6aa60be6cf14",
          "status": "Created",
          "code": 201,
          "responseTime": 3816,
          "responseSize": 975
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "cd1e5dde-a0d8-48a3-af83-f971df293c04",
        "cursor": {
          "ref": "9ee78612-b874-4bc7-b883-7821b34ce6d1",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "f1be4f31-2e4f-4c07-b8f5-90420d382b24"
        },
        "item": {
          "id": "cd1e5dde-a0d8-48a3-af83-f971df293c04",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "a6d0c97d-4403-44b3-83eb-4c0e96a60f93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 381,
          "responseSize": 612
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "0d3126fd-f78e-4352-a32e-4a2ccd1dff92",
        "cursor": {
          "ref": "e59a57e4-2440-4811-a723-8c020cfaa97f",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "347cf139-90fc-44bb-ab7a-5c499eea83fa"
        },
        "item": {
          "id": "0d3126fd-f78e-4352-a32e-4a2ccd1dff92",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "49202ecf-65e7-4c00-8425-105647c43fba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 404,
          "responseSize": 589
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "90baa56d-646d-4d59-a64b-84081dde8d92",
        "cursor": {
          "ref": "4af3190d-25ab-4702-a736-82bdf12871f8",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "c06bd8e7-f82f-4e77-91e0-7f30ef18fc94"
        },
        "item": {
          "id": "90baa56d-646d-4d59-a64b-84081dde8d92",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "f082409c-78c1-4b7c-b317-4c5b43d25786",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 394,
          "responseSize": 586
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "78d47c18-0cbd-4665-8884-a642bfb4fe58",
        "cursor": {
          "ref": "ee95e4c3-b08e-4037-8678-78d90c6a680c",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "35528b85-cefa-41d2-8274-e3070cac5893"
        },
        "item": {
          "id": "78d47c18-0cbd-4665-8884-a642bfb4fe58",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "4cf7d204-c4e2-4d8b-a332-1f6b3f9ee894",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 413,
          "responseSize": 588
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "7a504e23-60ab-4da3-b8bd-dd853bda4032",
        "cursor": {
          "ref": "a06f23f7-b1c2-4489-b285-3cd7a8049ce9",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "57495c37-4e17-4f98-853b-d4fb029cb728"
        },
        "item": {
          "id": "7a504e23-60ab-4da3-b8bd-dd853bda4032",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "db273624-bc53-4123-878f-798c568e65d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 451,
          "responseSize": 586
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "ec66d2e3-c80e-4a65-b325-88d21c0f7345",
        "cursor": {
          "ref": "f5007760-1925-4821-ad2c-652d1c50993a",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "019f01cd-f22f-4765-af03-f254c7541385"
        },
        "item": {
          "id": "ec66d2e3-c80e-4a65-b325-88d21c0f7345",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "fd0fe0ad-b905-4a12-87e9-5755382bfbe8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 391,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "b63741af-43e8-402d-9980-d7765c3ae8bc",
        "cursor": {
          "ref": "8d625887-b346-4945-86b8-89959f14d61c",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "0a1f5275-0350-4f1f-b441-e2fd0d460d6e"
        },
        "item": {
          "id": "b63741af-43e8-402d-9980-d7765c3ae8bc",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "c9f3b57e-0d82-4c03-983c-03e7c4473908",
          "status": "Not Found",
          "code": 404,
          "responseTime": 37,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "d31b5020-129e-458a-be2a-3c573a09a793",
        "cursor": {
          "ref": "42fa8ac3-5c29-4681-84c7-c7327129f38b",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "3c1c7ff1-9c7b-455a-893d-ae93135a63b9"
        },
        "item": {
          "id": "d31b5020-129e-458a-be2a-3c573a09a793",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "d283a19c-0c2f-4f62-bf12-7defa44607ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 426,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "4481b702-eea6-4cd0-b167-94b3f8f6367b",
        "cursor": {
          "ref": "28f8d814-dbd5-4cb3-aba5-6135e1c9cd12",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "bf5b0470-4179-4621-8bd5-b3372ac0aba5"
        },
        "item": {
          "id": "4481b702-eea6-4cd0-b167-94b3f8f6367b",
          "name": "credentials_issue"
        },
        "response": {
          "id": "dcbfdc0e-7ea5-4114-81d4-79f6f8593455",
          "status": "Created",
          "code": 201,
          "responseTime": 1727,
          "responseSize": 636
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bb75547-a49f-4f26-b5da-4bdc2c693a05",
        "cursor": {
          "ref": "b8fc1e0d-dbf6-4c39-8ee2-2484ae41de48",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "81de2eb0-ac4e-4e86-a2b6-af487dbc7dd0"
        },
        "item": {
          "id": "9bb75547-a49f-4f26-b5da-4bdc2c693a05",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "56c298a8-42cc-40c2-86f9-32d5012bcf03",
          "status": "Created",
          "code": 201,
          "responseTime": 1716,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6085b808-5d70-4599-81ee-b2b6ed5566d4",
        "cursor": {
          "ref": "c96758aa-fa7c-4f91-b035-b274d1485a0e",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "c7caa1bb-1bd1-43e6-9446-a4070b6225d6"
        },
        "item": {
          "id": "6085b808-5d70-4599-81ee-b2b6ed5566d4",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "f6c74377-5738-4148-bc6c-59ece8910c2b",
          "status": "Created",
          "code": 201,
          "responseTime": 1492,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a6cfb7d-6303-4ea5-b26a-ddbe01a2cfec",
        "cursor": {
          "ref": "686ce0b1-63db-4096-88c4-ec306edebd2e",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "ccd68b62-91c4-4b60-81c7-996def4ae229"
        },
        "item": {
          "id": "4a6cfb7d-6303-4ea5-b26a-ddbe01a2cfec",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "fa9f17f8-bb2b-414d-bf85-00dee139c13b",
          "status": "Created",
          "code": 201,
          "responseTime": 1630,
          "responseSize": 658
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "06a7e084-b042-4f2f-bd8b-779b5d4e1c37",
        "cursor": {
          "ref": "0d0c7a20-0cc3-4925-9b94-5e330edd8d43",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "efd5fb4d-f3ab-473f-8cfc-e31fc978379c"
        },
        "item": {
          "id": "06a7e084-b042-4f2f-bd8b-779b5d4e1c37",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "26fbefff-bb7f-4e30-834d-3ab7235ec030",
          "status": "Created",
          "code": 201,
          "responseTime": 1522,
          "responseSize": 636
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad8af2be-0f08-42a2-abd8-055a982f91df",
        "cursor": {
          "ref": "8e5aeacf-ae89-4231-aec3-466d8dafc2b1",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "7bb2ba1b-b3c0-405f-8290-d1f2d1d0872f"
        },
        "item": {
          "id": "ad8af2be-0f08-42a2-abd8-055a982f91df",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "fd2ff244-e6c1-42b5-95f7-d273a34e215b",
          "status": "Created",
          "code": 201,
          "responseTime": 2086,
          "responseSize": 975
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cb25d7f-7949-4ae5-a93a-72a44f59f9dd",
        "cursor": {
          "ref": "13b43c8d-fb6d-4adb-aae8-a274509ed55a",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "035ea822-e332-4c46-9c25-a255050ed3e6"
        },
        "item": {
          "id": "2cb25d7f-7949-4ae5-a93a-72a44f59f9dd",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "98e79024-8c2f-4b31-b0d4-29f55346184f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 425,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "2cb25d7f-7949-4ae5-a93a-72a44f59f9dd",
        "cursor": {
          "ref": "13b43c8d-fb6d-4adb-aae8-a274509ed55a",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "035ea822-e332-4c46-9c25-a255050ed3e6"
        },
        "item": {
          "id": "2cb25d7f-7949-4ae5-a93a-72a44f59f9dd",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "98e79024-8c2f-4b31-b0d4-29f55346184f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 425,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "58b1e2dc-f347-40af-928b-4929a08f5306",
        "cursor": {
          "ref": "5f79d6c1-7300-4de0-94aa-797a804ba615",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "bd49b8e9-fac3-4107-b7ab-aa37e142545e"
        },
        "item": {
          "id": "58b1e2dc-f347-40af-928b-4929a08f5306",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "1dca658b-e5a3-4ba8-ac9b-86cda10b66cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 407,
          "responseSize": 327
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "e9f74bdf-b87b-4a83-8499-6463343554ff",
        "cursor": {
          "ref": "8949d73a-1b5e-4a1f-a5f0-c89caf03ff55",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "6498bb5c-63cd-40aa-9b85-bc45d25c232c"
        },
        "item": {
          "id": "e9f74bdf-b87b-4a83-8499-6463343554ff",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "ab796119-f2c2-4a15-b136-da5ef51a6318",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 427,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "35af5259-223d-4ca5-a68b-b2f4ad6433a5",
        "cursor": {
          "ref": "c116114e-c1a6-4cef-8dca-f6bc100e3ddf",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "431ca554-c9f6-470c-b9ec-69717a323426"
        },
        "item": {
          "id": "35af5259-223d-4ca5-a68b-b2f4ad6433a5",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "14a57119-061d-4259-abff-a60039012e98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 415,
          "responseSize": 280
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "bfc88d9a-00b9-4df7-96b0-3632534c1430",
        "cursor": {
          "ref": "04eb8e6e-6faf-4068-b184-aa9014301c60",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "1ab35a6a-903f-45c1-a19b-530d1f19d517"
        },
        "item": {
          "id": "bfc88d9a-00b9-4df7-96b0-3632534c1430",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "676be40f-8137-4898-ba40-af2bca1ae4e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 479,
          "responseSize": 282
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "a02444f8-da07-4024-9e04-713dd79ece07",
        "cursor": {
          "ref": "25d4829b-7a4a-4628-8880-6df3070000de",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "10a619aa-5c73-41e8-bc6d-4986eabf1f7f"
        },
        "item": {
          "id": "a02444f8-da07-4024-9e04-713dd79ece07",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "c5137b37-a758-4c17-919f-e631c0e2f5c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 407,
          "responseSize": 280
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "4451fc54-5920-40dd-b491-0855aee172e9",
        "cursor": {
          "ref": "b2f7c7f1-caf4-4e97-a072-4d4f6406aed4",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "5c234f8f-0309-4948-a1c5-afc7f51110ba"
        },
        "item": {
          "id": "4451fc54-5920-40dd-b491-0855aee172e9",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "25659d34-4bc3-44df-a9d7-e46cfc1d20b6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 404,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "5504feb8-33ef-4266-8315-b7422897a6b0",
        "cursor": {
          "ref": "d9deb3fc-3a1c-4369-bee1-a1ec6e2acf4b",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "68915f65-aa6a-4aa0-94d2-5bf02a3733aa"
        },
        "item": {
          "id": "5504feb8-33ef-4266-8315-b7422897a6b0",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "41050488-2e3c-4a48-95cb-f2eb88ec6922",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 385,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "fd2ea122-1dba-47ae-8669-9852d955bdd6",
        "cursor": {
          "ref": "2dfa7b52-f44b-4b07-a9d3-e4b40ce7f780",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "2bd0a0c5-aca1-4621-b03a-1b9a1c0c8d3a"
        },
        "item": {
          "id": "fd2ea122-1dba-47ae-8669-9852d955bdd6",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "79cb71c7-3759-4e4d-a5dc-e790b1496e0f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 397,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "f71001d5-5358-4660-94cf-b6fd2f0ee8f3",
        "cursor": {
          "ref": "baf13281-c424-476b-b949-c83bc136de29",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "f6a75a19-df10-430e-9962-3c0f0d25c2e0"
        },
        "item": {
          "id": "f71001d5-5358-4660-94cf-b6fd2f0ee8f3",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "77f44b8b-c1a4-439a-9e31-5392958835c7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 420,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "d44202e0-bf82-40e1-af59-fcf5c7b35e27",
        "cursor": {
          "ref": "7744f4e9-3887-4326-8baa-44434b931011",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "1a27f03d-a3df-4643-8feb-b7f554012769"
        },
        "item": {
          "id": "d44202e0-bf82-40e1-af59-fcf5c7b35e27",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "59434a25-54fd-43c5-916e-42772acf3c1e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 425,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "07ad594a-ffb1-4aec-909d-2dd2c3b46775",
        "cursor": {
          "ref": "4aabd137-1378-4dc0-ac1f-3a4fc47dee70",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "8b05ebc8-4940-4f91-858a-104749f349b4"
        },
        "item": {
          "id": "07ad594a-ffb1-4aec-909d-2dd2c3b46775",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "56de1902-899a-4225-a45a-fb95fbdd2b20",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 412,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "a156cbab-87a7-46b2-aa8e-2673d6ccec43",
        "cursor": {
          "ref": "869ae730-5aa6-48d8-96da-1b25cad6e7f0",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "22fbf4bc-36bb-4f65-868b-a8b76a443d64"
        },
        "item": {
          "id": "a156cbab-87a7-46b2-aa8e-2673d6ccec43",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "1788898f-d253-448f-ad02-cdc448c83723",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 391,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "53022690-a8fa-44cb-9b88-0088b892090b",
        "cursor": {
          "ref": "92c4ff23-8a57-4685-bb25-9f86108d2b4f",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "49be81a5-32dd-47d3-8875-91ab434c8299"
        },
        "item": {
          "id": "53022690-a8fa-44cb-9b88-0088b892090b",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "a07c20b5-14a8-4af5-88f2-ad430dd02158",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 419,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "36b63840-7ad9-4342-8e9b-93eaac2e4e8b",
        "cursor": {
          "ref": "14ba7409-9bb6-4fc0-9f1d-2683c49feb11",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "4494c875-b3e0-44ff-b62f-4d9bd292bb5f"
        },
        "item": {
          "id": "36b63840-7ad9-4342-8e9b-93eaac2e4e8b",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "555526ac-e00b-4b15-970f-dd0ee4329943",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 414,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "3bae29d4-c8e8-452c-a7bf-b3e5e451452d",
        "cursor": {
          "ref": "38202178-d976-4cd3-97e1-f84c2a1b511e",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "978b9764-f854-42ac-b2ad-6b180290fdd0"
        },
        "item": {
          "id": "3bae29d4-c8e8-452c-a7bf-b3e5e451452d",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "a4258033-af7b-49f1-afcc-c1be713383c7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 403,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "e3243ad4-298f-4388-8e54-c7954a02b0b1",
        "cursor": {
          "ref": "d6b14002-52c4-4c37-bb25-8e042a8cd3ec",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "6c3fac12-8788-44ab-9d68-cb8b6ece1a9c"
        },
        "item": {
          "id": "e3243ad4-298f-4388-8e54-c7954a02b0b1",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "5c4b1d47-e9e5-42f0-80ae-092e40f2aa41",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 442,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "21539383-104b-4eb6-a647-cfc2fe4acc86",
        "cursor": {
          "ref": "3f08bdc8-0cd5-4afa-a215-1e1f1bf120e3",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "676d748b-2a2b-49ca-a5a5-d02f385a7995"
        },
        "item": {
          "id": "21539383-104b-4eb6-a647-cfc2fe4acc86",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "23433a4c-1daa-4416-b339-398629bcd72d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 446,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "3e2a9937-be1e-4f7b-b7ed-b87be992d678",
        "cursor": {
          "ref": "82d09d8b-8d6c-4529-b973-274e90f88f3a",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "7600ffaf-e7f3-4c0b-bbdf-e8cf701589e8"
        },
        "item": {
          "id": "3e2a9937-be1e-4f7b-b7ed-b87be992d678",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "31ab0951-095b-4ff4-8db5-125aca3fbd08",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 496,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "e650bb51-321b-4478-b604-6ed7688b42c5",
        "cursor": {
          "ref": "6fb4b7cd-c1a3-4d0a-89d1-4dac3347c720",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "9d3befc2-dc95-4bbe-9a20-7e96eda9dcf9"
        },
        "item": {
          "id": "e650bb51-321b-4478-b604-6ed7688b42c5",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "24760ac4-f9d7-4a30-ad1a-7620af43c31d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 588,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "b12a5ec2-566d-4e00-91bf-bbbcbdc55fa2",
        "cursor": {
          "ref": "ad341846-af57-444c-8da5-8348cce4e020",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "c86f918e-dec4-4ec7-ba1d-f7ae64f3f061"
        },
        "item": {
          "id": "b12a5ec2-566d-4e00-91bf-bbbcbdc55fa2",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "b0492030-dcbb-4ce5-9d70-2d8654d7bbd7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 714,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "b15b2212-1f3f-4082-9f43-a051c62ed817",
        "cursor": {
          "ref": "67ce3330-359c-436d-bbfd-c582043a84c8",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "26cd7b18-b7e4-4276-b447-d5721299be64"
        },
        "item": {
          "id": "b15b2212-1f3f-4082-9f43-a051c62ed817",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "e54203b0-d8c1-4756-87df-63d52121f426",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 537,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "2d3a6a88-b6ef-48f2-acdd-10bddbf8cd76",
        "cursor": {
          "ref": "59304344-078c-488e-b019-778bd921f2ef",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "793c6c6a-a811-492c-b4e6-344357d74c66"
        },
        "item": {
          "id": "2d3a6a88-b6ef-48f2-acdd-10bddbf8cd76",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "9b20581e-f375-4dad-8367-9e59d5d57ee1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 913,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "3dd9e73c-0e5a-40d3-8251-c35e439f6a87",
        "cursor": {
          "ref": "c7da433a-d3f5-4f4a-8ee8-52726565c264",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "a56ee21a-a399-46af-9b20-a631902d5a6d"
        },
        "item": {
          "id": "3dd9e73c-0e5a-40d3-8251-c35e439f6a87",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "66ea9c57-93ea-4415-a65a-ea1dce421bbc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 756,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "3f9b2acf-c14a-437f-bbcd-386d48b208f9",
        "cursor": {
          "ref": "34b3dfd2-b00a-4f5d-8396-48f2fce6f649",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "222f8786-2702-4a2b-8143-3d65f5024d86"
        },
        "item": {
          "id": "3f9b2acf-c14a-437f-bbcd-386d48b208f9",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "7d151f94-5bb2-4f11-946c-b991ef4c2c58",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 773,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "6a242d20-861c-4ec0-b022-83daa60f4e64",
        "cursor": {
          "ref": "4c942144-ef6f-47a1-b951-022665186468",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "a05d6288-3985-479c-83ab-9f15d1509fa7"
        },
        "item": {
          "id": "6a242d20-861c-4ec0-b022-83daa60f4e64",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "b5813575-8d92-471f-9ce8-695254260f31",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 976,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "5c2c6f17-95be-4f15-834f-d45e7e0b83cb",
        "cursor": {
          "ref": "984ad614-9a43-43ee-9886-866f9973250f",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "046cc735-88c0-455f-9c48-2dfce00e0044"
        },
        "item": {
          "id": "5c2c6f17-95be-4f15-834f-d45e7e0b83cb",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "a5c39c87-7de1-41a0-90d3-3ebbe5ad4332",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 718,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "0cdbcc3e-25fa-4be5-90d5-4c1e303b09c7",
        "cursor": {
          "ref": "dba3f063-27d6-45e6-922d-d7f27a5412dc",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "e71aca96-3b77-4d19-96fd-bf3f10934fc3"
        },
        "item": {
          "id": "0cdbcc3e-25fa-4be5-90d5-4c1e303b09c7",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "e82e4b61-88e7-43da-b75d-5ebf3ea9948b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 486,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "d5ba92e1-80dc-491f-b11b-32c836f23afd",
        "cursor": {
          "ref": "b9f993eb-0403-4550-8bff-79d71fde6624",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "6724dd17-720e-49be-977e-1bf1bd6aabcd"
        },
        "item": {
          "id": "d5ba92e1-80dc-491f-b11b-32c836f23afd",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "7221ba89-3078-4864-b9d5-8d92a133f9fc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 451,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "3782a21c-9864-49ba-9cd2-943279920612",
        "cursor": {
          "ref": "e0824351-bc4f-41b8-ab9b-077c98bab8d4",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "7e251d89-0d7e-4560-bbcb-9c4330af5a8f"
        },
        "item": {
          "id": "3782a21c-9864-49ba-9cd2-943279920612",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "78eee49f-dd3d-4f88-8788-264ea8956be7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 400,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "ab9705cc-d979-43c6-9b21-8c9c05517e52",
        "cursor": {
          "ref": "b6ef6e7f-4ef4-41fc-a855-70e4cf634168",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "716d49fa-525a-4dd5-9119-bbf50013b3b7"
        },
        "item": {
          "id": "ab9705cc-d979-43c6-9b21-8c9c05517e52",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "887a54bd-56cb-4079-bd0f-e5e3d2ac3603",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 409,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "c98eae9a-99b9-489c-9774-ade981cbd638",
        "cursor": {
          "ref": "8ffe204c-22f4-453f-9e08-cea368f8aa68",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "a5a5da2e-bb14-4e71-a298-975a563e5568"
        },
        "item": {
          "id": "c98eae9a-99b9-489c-9774-ade981cbd638",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "1f58492f-a4ce-439c-8145-a165b3417500",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 407,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "e717f25f-5f15-45a7-8ad2-d51af980c795",
        "cursor": {
          "ref": "b02beb64-63f2-4f03-bf13-ca1c666938a5",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "9408ebf9-23c3-4f54-88b0-ddcf6fa16a0a"
        },
        "item": {
          "id": "e717f25f-5f15-45a7-8ad2-d51af980c795",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "3fb88f2c-e487-4d59-bac4-c76c4e5246b2",
          "status": "Not Found",
          "code": 404,
          "responseTime": 36,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "ab52895c-9def-4aba-b2ad-ab2d1ed4d377",
        "cursor": {
          "ref": "dda05f9b-f053-4446-827d-1781b0073000",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "937981b2-dd7b-4041-8772-05818ff03fa8"
        },
        "item": {
          "id": "ab52895c-9def-4aba-b2ad-ab2d1ed4d377",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "b1e877ac-1966-4828-ae5d-8871a66392b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 414,
          "responseSize": 206
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "d4de079c-9cf0-4b97-9b2c-6c52b49d2191",
        "cursor": {
          "ref": "e8323cb9-2a98-4a06-b7bc-0446447122a3",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "784bcda2-5f7a-418f-8c88-f0db8c832797"
        },
        "item": {
          "id": "d4de079c-9cf0-4b97-9b2c-6c52b49d2191",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "58b1868c-066a-42c3-a586-5a77b8fb2832",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 183,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "d4de079c-9cf0-4b97-9b2c-6c52b49d2191",
        "cursor": {
          "ref": "e8323cb9-2a98-4a06-b7bc-0446447122a3",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "784bcda2-5f7a-418f-8c88-f0db8c832797"
        },
        "item": {
          "id": "d4de079c-9cf0-4b97-9b2c-6c52b49d2191",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "58b1868c-066a-42c3-a586-5a77b8fb2832",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 183,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "6e492821-e1ec-4eb8-8b3d-1e8c7e042d7f",
        "cursor": {
          "ref": "214e32b7-7a18-48d0-b7a5-4b04f946a7ca",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "d8c12a2f-276f-4752-8a1c-357e119107bb"
        },
        "item": {
          "id": "6e492821-e1ec-4eb8-8b3d-1e8c7e042d7f",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "2499c602-a4cc-4578-b52c-ca342ee8b502",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 189,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "e64cefd3-6582-4f02-9e12-dcc1b7851076",
        "cursor": {
          "ref": "ed55a3c0-58a6-4181-977e-66d6644f48ee",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "a576789a-7782-466c-ba50-ec0e26fbb6a2"
        },
        "item": {
          "id": "e64cefd3-6582-4f02-9e12-dcc1b7851076",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "99819087-2ab1-4b53-a211-ab45f17064c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 195,
          "responseSize": 541
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "ce8d7bc7-7f0f-43a4-bc05-0932f6381bbc",
        "cursor": {
          "ref": "a93e5a95-63b6-4d59-9033-9dabb5ffa9a7",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "19b76848-b83c-4f13-bcb2-198cf22acc99"
        },
        "item": {
          "id": "ce8d7bc7-7f0f-43a4-bc05-0932f6381bbc",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "8c8950cb-0bc2-440d-bf93-dcddcf144328",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 197,
          "responseSize": 540
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "71dc00c3-bd87-4022-963c-7626229e11d9",
        "cursor": {
          "ref": "5306162f-c26a-4a36-9b67-d3a261991133",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "9e253425-d40e-4253-9739-80e1ff983e3a"
        },
        "item": {
          "id": "71dc00c3-bd87-4022-963c-7626229e11d9",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "ba87d099-a63e-4916-842e-7be56bc4c2a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 181,
          "responseSize": 541
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "bd614167-9e7e-4d71-9a3f-b268c13961f0",
        "cursor": {
          "ref": "1d6513a7-6599-423e-b1ad-fc7251be7fab",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "c2a516c9-4118-42d5-ab0c-132902633c39"
        },
        "item": {
          "id": "bd614167-9e7e-4d71-9a3f-b268c13961f0",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "f491df26-8a20-4e92-8353-6041d6aeaebf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 296,
          "responseSize": 539
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "19926c5f-a10a-478d-951f-92b3a161301f",
        "cursor": {
          "ref": "95c52bba-2928-479e-9b12-c5c6bf81f464",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "5996a30f-17bb-4293-9b55-44cebc3ae221"
        },
        "item": {
          "id": "19926c5f-a10a-478d-951f-92b3a161301f",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "d905b920-961d-46cf-ae85-4bd358236227",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 221,
          "responseSize": 1154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "31f0d25a-4c24-4251-a86f-352902dc6b48",
        "cursor": {
          "ref": "a95efe8c-6440-4fc2-9fe8-cc24003c7736",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "849d765a-57d1-4d89-8f31-332a34f04b9d"
        },
        "item": {
          "id": "31f0d25a-4c24-4251-a86f-352902dc6b48",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "0bc2fb0b-0aa8-4931-b30d-e6963633ae57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 198,
          "responseSize": 1700
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "b2e288d2-8bc7-458d-8b07-5d200d378586",
        "cursor": {
          "ref": "99027c15-1729-4b48-87b0-173c1ab693f9",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "a8286bf6-9dbb-4863-98eb-5ae4e0385c09"
        },
        "item": {
          "id": "b2e288d2-8bc7-458d-8b07-5d200d378586",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "d086d50d-e633-420a-b561-8b103f1ead5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 187,
          "responseSize": 1699
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "bc192910-f8f5-4868-a80f-c860ecd9f77f",
        "cursor": {
          "ref": "181e02eb-bc6b-4439-8b90-26ea6e192d33",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "8e7109c1-beb8-4532-81fd-bd884c21092c"
        },
        "item": {
          "id": "bc192910-f8f5-4868-a80f-c860ecd9f77f",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "f31d4f9c-c48a-4791-b658-d39e8d273395",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 220,
          "responseSize": 1700
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "398b9ed9-8e21-4cb3-a14f-7df803c61695",
        "cursor": {
          "ref": "33870554-522b-4520-b66b-b191c327220d",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "371cc3ec-ea01-4d72-9252-9be0b9794fe1"
        },
        "item": {
          "id": "398b9ed9-8e21-4cb3-a14f-7df803c61695",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "418e20c4-3fd3-4bdc-8562-9688235ec40a",
          "status": "OK",
          "code": 200,
          "responseTime": 327,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "e8cca1b1-0250-4d58-a191-576e5f83c06a",
        "cursor": {
          "ref": "7c2db3fd-17ee-4826-b20d-5e3ec28c4e17",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "a1db90e2-6edf-4622-97c4-fdbe473075a3"
        },
        "item": {
          "id": "e8cca1b1-0250-4d58-a191-576e5f83c06a",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "5eaf77d8-2619-402b-b2ee-f75b27610776",
          "status": "OK",
          "code": 200,
          "responseTime": 268,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "fdfabb8b-9358-4330-b2b3-1bce9d6b6b6b",
        "cursor": {
          "ref": "cdb8c88e-502e-4969-b0ad-5bc69935f34b",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "56a080af-4f27-4299-b86d-a35863c4b950"
        },
        "item": {
          "id": "fdfabb8b-9358-4330-b2b3-1bce9d6b6b6b",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "f733c29e-96ac-4a16-a403-ef4e73c9d711",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 247,
          "responseSize": 2187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "8302706c-45f1-4b05-95aa-033320c62117",
        "cursor": {
          "ref": "932870e1-93ad-4581-92d2-735c77931e47",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "8c0b19ac-5cf2-44ed-b5f3-86771fb38f4e"
        },
        "item": {
          "id": "8302706c-45f1-4b05-95aa-033320c62117",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "733fd25a-a9fe-4159-9834-ce3f56adb7b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 276,
          "responseSize": 2177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "9815ff8d-579e-4369-a90a-fd639053bcb5",
        "cursor": {
          "ref": "7b22fba9-8f7e-4522-be6b-065b8f84117a",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "b7ad118c-e0f7-42db-b413-1f9cf7fb61fc"
        },
        "item": {
          "id": "9815ff8d-579e-4369-a90a-fd639053bcb5",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "333424f4-f3e0-4936-a82c-6d7ef4dc8364",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 200,
          "responseSize": 2176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "01e0b6db-b24d-4ac5-a86c-e5230f1c3215",
        "cursor": {
          "ref": "1f5e26ff-7e80-4e9b-80d2-b8e75af23afe",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "bb8031fc-56ae-40f8-80da-970a43793f86"
        },
        "item": {
          "id": "01e0b6db-b24d-4ac5-a86c-e5230f1c3215",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "d45bdb02-e130-4000-b143-b514df2d2fcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 183,
          "responseSize": 2177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "58aada99-fc5e-46c5-bb92-620798cd99d3",
        "cursor": {
          "ref": "ad2dc564-d1e9-4d77-9fe3-d1948585a8b3",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "58560daa-063b-4ad8-a26d-232a85c4630e"
        },
        "item": {
          "id": "58aada99-fc5e-46c5-bb92-620798cd99d3",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "6442c7d6-544e-4fe6-9bc3-2e07484797a2",
          "status": "OK",
          "code": 200,
          "responseTime": 286,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "4d5f6390-3dcd-4dc0-93e1-bfeecb1cdedb",
        "cursor": {
          "ref": "b113e3f0-0b8c-4378-bebe-dab1a188fc70",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "e3f72d78-ee2c-4a1e-bd70-a5e9e5d9e3f9"
        },
        "item": {
          "id": "4d5f6390-3dcd-4dc0-93e1-bfeecb1cdedb",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "d0537f2e-1c71-4832-a7fa-3f9e3df4394d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 204,
          "responseSize": 1235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "1a2a8e86-0d63-4734-b195-170cc1c7f559",
        "cursor": {
          "ref": "207b6a97-fc00-4780-879c-8d9e4910865d",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "eb45570a-18ce-44f2-adae-52d62c8b1e75"
        },
        "item": {
          "id": "1a2a8e86-0d63-4734-b195-170cc1c7f559",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "f3efbaba-006f-42e2-acc8-05c3beb729c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 237,
          "responseSize": 1191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "c79a93de-d982-426a-978c-fedc01f907d7",
        "cursor": {
          "ref": "eb63526e-e4d8-42ca-bb82-ffe71940ee9a",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "f556d591-c132-4b21-b476-f0dda58afdad"
        },
        "item": {
          "id": "c79a93de-d982-426a-978c-fedc01f907d7",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "7786d055-3cc2-423e-9fe5-2573dab6b555",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 196,
          "responseSize": 1189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "ed69e83a-1246-418b-9623-4a0749b951cf",
        "cursor": {
          "ref": "41cb2145-53a0-4383-ac79-20e916d13da3",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "75433810-9719-4926-8b33-8cd1031da240"
        },
        "item": {
          "id": "ed69e83a-1246-418b-9623-4a0749b951cf",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "30756ce3-da00-4e03-b3da-7c02c203acb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 198,
          "responseSize": 1190
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "a8c60fae-ca6f-4f57-bfc9-f98cf73a1a9e",
        "cursor": {
          "ref": "fe8f8964-53d1-4d05-aaca-6d659c92d6ac",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "4b2473b6-a61e-4ee7-9d0d-8e46761c644a"
        },
        "item": {
          "id": "a8c60fae-ca6f-4f57-bfc9-f98cf73a1a9e",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "758655aa-ad54-4715-9186-a7c294a92c2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 188,
          "responseSize": 1241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "69e97438-74ee-4095-9694-4ba6c840d442",
        "cursor": {
          "ref": "cb2f3d98-664a-4c8b-9f0f-d984b970e6ee",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "e74af7c0-e1d5-4eed-8e11-348d4f257d10"
        },
        "item": {
          "id": "69e97438-74ee-4095-9694-4ba6c840d442",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "470f461e-d7e0-4943-b569-f69353c576db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 188,
          "responseSize": 1168
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "0d6ce0db-3d69-40e6-baf5-a51c4e08b649",
        "cursor": {
          "ref": "eab1e755-225c-45c5-ab11-ab46a741d069",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "7e79f467-8eea-4ce3-98cc-aeca7a7f3cee"
        },
        "item": {
          "id": "0d6ce0db-3d69-40e6-baf5-a51c4e08b649",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "d942d845-42b2-43e7-b42a-9926087e8d5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 192,
          "responseSize": 1489
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "71ba93cd-988b-4637-aa48-cbeb5e387425",
        "cursor": {
          "ref": "c2a5a24f-5b57-4cf1-afb7-c07a38cee00a",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "b4853baf-e201-4d76-a35a-e03f482d4bf8"
        },
        "item": {
          "id": "71ba93cd-988b-4637-aa48-cbeb5e387425",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "f703b6ef-e049-4d9d-a36c-7f46ed2ba5f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 190,
          "responseSize": 1488
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "b9a5ef7c-d230-4ed6-ad7a-af09331b2d13",
        "cursor": {
          "ref": "a238dc95-f517-4bd9-a4d5-b83e63ddb13a",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "a4f7ba70-dac0-4cbd-b7ef-790c1b0060c0"
        },
        "item": {
          "id": "b9a5ef7c-d230-4ed6-ad7a-af09331b2d13",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "bbefa350-c770-4f68-917c-e52dbb5ff70b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 234,
          "responseSize": 1489
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "74c65b36-8632-483a-bea5-59d8afe0ad61",
        "cursor": {
          "ref": "84543342-27e6-400d-8246-db000a4f1a33",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "bfd2aa12-5852-4791-b07e-a7bfdef027fa"
        },
        "item": {
          "id": "74c65b36-8632-483a-bea5-59d8afe0ad61",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "b6575447-3595-4b52-a7ad-b6807c4cfbd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 187,
          "responseSize": 1515
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "abf0358f-0b67-48b8-b6c2-36b1254b50ca",
        "cursor": {
          "ref": "2d7d122e-39fc-4ceb-83e6-7a4d9aa55510",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "bf6892d0-3e44-4e21-a07a-851a115f82ad"
        },
        "item": {
          "id": "abf0358f-0b67-48b8-b6c2-36b1254b50ca",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "20381966-5601-4417-8146-57c930fbc4dd",
          "status": "OK",
          "code": 200,
          "responseTime": 274,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "3422cb05-95ca-4221-a725-f9a1f24e063e",
        "cursor": {
          "ref": "1407255b-36e5-4dcc-bb1f-66d0c45ae30d",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "92b3a70e-09b3-4d3a-b644-ea23529f78f5"
        },
        "item": {
          "id": "3422cb05-95ca-4221-a725-f9a1f24e063e",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "b29d2b86-b1dd-4bd8-972b-c8d09dc0d698",
          "status": "OK",
          "code": 200,
          "responseTime": 209,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "f4ab096d-2c7c-4a75-b408-83832b1275bc",
        "cursor": {
          "ref": "11ce9c41-3767-45dc-8365-53cd255a2b7f",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "181617da-b77b-4823-8cc8-fa8a8ffc48ad"
        },
        "item": {
          "id": "f4ab096d-2c7c-4a75-b408-83832b1275bc",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "6c09d0da-314a-4428-b547-d4fde18fa1e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 220,
          "responseSize": 1534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "5ced9c8a-e3e5-4107-b8e5-970b30eb617c",
        "cursor": {
          "ref": "c4ca3e75-94fc-4d02-9eae-979605ae1b74",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "e42054e9-78c8-4bb5-9dd6-f63fa5db23a6"
        },
        "item": {
          "id": "5ced9c8a-e3e5-4107-b8e5-970b30eb617c",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "97c2cf92-6be9-4e06-95f1-80d1a8bca62e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 174,
          "responseSize": 1524
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "6a61c9eb-a7e4-4313-a42f-a8f4ac80d86a",
        "cursor": {
          "ref": "61ddae0f-712c-4a13-b9cd-40faad5d9c0e",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "9ccb6f56-58eb-427e-a627-2f38e075a4e6"
        },
        "item": {
          "id": "6a61c9eb-a7e4-4313-a42f-a8f4ac80d86a",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "1e207312-4ef0-477c-bbcf-9c836feb87d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 177,
          "responseSize": 1523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "f631fcf0-cd05-4e20-9cd4-98d49e3de262",
        "cursor": {
          "ref": "5bb53864-10c5-449b-ac3e-1ee9d65f69f9",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "69ad967f-6fbc-4930-b854-de91d358485d"
        },
        "item": {
          "id": "f631fcf0-cd05-4e20-9cd4-98d49e3de262",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "18334e8c-b0dc-4cb2-bc55-e0dc44fff08c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 183,
          "responseSize": 1524
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "8ae7c7ed-2f29-4b86-bd19-c39580ff4d1b",
        "cursor": {
          "ref": "5b35985e-075e-4702-8bd4-e3a965f51071",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "2bb99575-fbdf-44e6-b6de-7f0483391110"
        },
        "item": {
          "id": "8ae7c7ed-2f29-4b86-bd19-c39580ff4d1b",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "fd763111-d052-4ed9-a82a-b963cd6c7740",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 196,
          "responseSize": 1550
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "fd4c8fd2-2e64-444f-80a4-796ed4adaa30",
        "cursor": {
          "ref": "49459e7e-2dea-4e86-b8ba-2fc8f42d72cb",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "7d18eabb-fde3-477b-90b7-6fb8553dd440"
        },
        "item": {
          "id": "fd4c8fd2-2e64-444f-80a4-796ed4adaa30",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "4391addf-3027-4f45-a17c-ea81a765e9f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 188,
          "responseSize": 1136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "5fa43d23-f9cb-4b54-9a8e-efde91ed5d14",
        "cursor": {
          "ref": "41df385f-c446-49d9-b545-e54109c12184",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "4696d177-658a-4a11-839e-e1b0ea937e04"
        },
        "item": {
          "id": "5fa43d23-f9cb-4b54-9a8e-efde91ed5d14",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "18bbd69f-d489-4d69-bb99-49fa0a3c76ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 205,
          "responseSize": 1445
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "be6092ab-a45d-4d80-b77c-0e15f5b53f91",
        "cursor": {
          "ref": "6f17cc49-7add-4f16-b3f2-a1a539be4e65",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "7432d928-4fca-425b-8861-f47529f2e957"
        },
        "item": {
          "id": "be6092ab-a45d-4d80-b77c-0e15f5b53f91",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "9b9f4e1a-e7d1-4777-9bfd-8bf9b5b5b015",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 191,
          "responseSize": 1431
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "093d5dc4-bd72-494e-9f92-20e4abc3c5cd",
        "cursor": {
          "ref": "204ef363-76d9-4a10-9d1a-6909ef075baa",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "fb8e952b-6783-4684-a55f-3a226b9b06ab"
        },
        "item": {
          "id": "093d5dc4-bd72-494e-9f92-20e4abc3c5cd",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "c7c33ae1-773e-43bf-8948-fd99341f29bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 188,
          "responseSize": 1429
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "116a7bf9-6978-4159-ba3c-e8830bb55f80",
        "cursor": {
          "ref": "d2741271-35c0-4368-9f7a-d5a1bba75ecb",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "9b028808-bad0-4ca5-969f-92bd5fd08a5e"
        },
        "item": {
          "id": "116a7bf9-6978-4159-ba3c-e8830bb55f80",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "f9960d7f-1924-42b6-a7c5-8b0427ebeed6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 237,
          "responseSize": 1430
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "1c9d75ae-814b-4315-b938-fd6debdd69c1",
        "cursor": {
          "ref": "907bb03d-c946-4c27-af08-8b8f09d4f099",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "567b7f05-17f1-4a48-adcc-a9959b82aa9a"
        },
        "item": {
          "id": "1c9d75ae-814b-4315-b938-fd6debdd69c1",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "a345d139-0f00-4871-be59-9d3849b91710",
          "status": "OK",
          "code": 200,
          "responseTime": 221,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "c26a7707-c653-4927-91bb-5d5ad1ab6656",
        "cursor": {
          "ref": "29492006-ca0a-43ab-9974-bd736293b973",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "ddd1232c-ec64-4825-a63f-35b7ef7f2e02"
        },
        "item": {
          "id": "c26a7707-c653-4927-91bb-5d5ad1ab6656",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "c7c7aadf-6cb1-4737-bdea-6e4dc9119644",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 246,
          "responseSize": 1470
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "8ba7e4cd-92d6-4e13-8348-ce882cfac0e3",
        "cursor": {
          "ref": "afb11066-0631-4a58-86f2-79afbe64c73d",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "c64b2c0a-f426-4d1b-b899-7c3b1a71e055"
        },
        "item": {
          "id": "8ba7e4cd-92d6-4e13-8348-ce882cfac0e3",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "8db4a526-4669-42af-b45a-1c8ea6fbc69a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 262,
          "responseSize": 1456
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "7ecb568f-1eba-4562-87bf-3a226eccac45",
        "cursor": {
          "ref": "cf1e58a6-d34c-4cd4-bb84-76f660364027",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "ea86604a-6531-4e2a-bab6-f8b1f617ccc5"
        },
        "item": {
          "id": "7ecb568f-1eba-4562-87bf-3a226eccac45",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "1210764b-3128-4aaa-977f-08f860a7f589",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 360,
          "responseSize": 1454
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "d6d1e01d-1f25-41bf-95da-ba3250b8b85c",
        "cursor": {
          "ref": "b9c411a3-ae26-4e7c-a399-cc19bde4a71d",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "a809936c-54d3-41fc-9a91-59583d74a79f"
        },
        "item": {
          "id": "d6d1e01d-1f25-41bf-95da-ba3250b8b85c",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "ef23bf2f-fcbf-492d-bd5d-09aa47339be3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 221,
          "responseSize": 1455
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "67c6723f-b9c4-41a5-914b-7deaa9297dea",
        "cursor": {
          "ref": "d63a9a12-67a1-409c-ae76-40f86d557706",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "403d4941-6a1d-4456-b226-20164abe4008"
        },
        "item": {
          "id": "67c6723f-b9c4-41a5-914b-7deaa9297dea",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "960a4cbd-96c7-4d9e-96c0-e4ecdd7b57fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 303,
          "responseSize": 1476
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "3b7c6b57-6ced-49a6-988d-1f78949bad49",
        "cursor": {
          "ref": "da5d943d-3b2d-4cd9-af2f-e508e225811b",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "128b44b6-c837-4931-b8d9-a5fee01ac760"
        },
        "item": {
          "id": "3b7c6b57-6ced-49a6-988d-1f78949bad49",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "438e4309-a54b-4e7c-9ecb-da19c72de2b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 294,
          "responseSize": 1178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "0b54ff05-c217-4342-8c1b-72cae884c3c1",
        "cursor": {
          "ref": "717bc300-29d1-4a85-879c-59298322e606",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "72b5f02f-9b32-4c56-a863-e95f7fe1aca1"
        },
        "item": {
          "id": "0b54ff05-c217-4342-8c1b-72cae884c3c1",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "f9437c2f-8287-460e-9d98-9c6994936117",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 257,
          "responseSize": 1202
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "a1c4ded8-3d07-4b34-87d5-0ef7c384b96d",
        "cursor": {
          "ref": "74ebffb5-7bda-46e8-8fe7-18d5e982c0a6",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "468623ab-ccf2-48e2-a0e6-23d9c084ffaf"
        },
        "item": {
          "id": "a1c4ded8-3d07-4b34-87d5-0ef7c384b96d",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "fe90e5cd-4cc8-42c5-97d5-526657225045",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 185,
          "responseSize": 1183
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "dee654f2-ffbd-4b31-b291-df0699d0b1f4",
        "cursor": {
          "ref": "6726e4f6-d524-48b2-af55-2e48504d357e",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "9f8348c8-16e0-4974-87e1-fee6ca996592"
        },
        "item": {
          "id": "dee654f2-ffbd-4b31-b291-df0699d0b1f4",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "5c18f87b-bfb7-4f44-bd54-1c329241b21d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 196,
          "responseSize": 1181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "3865a36c-1662-494b-9c53-f77c9d8e88af",
        "cursor": {
          "ref": "5becd9e4-22c4-435a-88dd-ebb9193c3014",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "ccf13dea-0965-40cf-89d1-665286cafd7c"
        },
        "item": {
          "id": "3865a36c-1662-494b-9c53-f77c9d8e88af",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "29f11c94-f9bf-4c74-a025-ab697c62daf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 201,
          "responseSize": 1182
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "d4904960-4d99-470c-8420-024d9d07e6a9",
        "cursor": {
          "ref": "1ec2c79a-8271-46d3-b7f7-8f909c4d21b4",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "0097fa65-e172-4011-aafe-a0977f8d8634"
        },
        "item": {
          "id": "d4904960-4d99-470c-8420-024d9d07e6a9",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "0ee22cd4-9f7d-4521-8ced-3bb327f16f58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 219,
          "responseSize": 1208
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "aaac1f9d-c504-491c-8e86-078421cec765",
        "cursor": {
          "ref": "9c92ccec-b1e3-464a-a15c-fd9e37be09c0",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "2698ad85-885e-4a33-a13c-3316f869fd85"
        },
        "item": {
          "id": "aaac1f9d-c504-491c-8e86-078421cec765",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "d725fbcc-6f14-4660-996c-79717b2e8b82",
          "status": "OK",
          "code": 200,
          "responseTime": 275,
          "responseSize": 333
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "9d644e05-cce0-4a01-88ef-e16316e7661d",
        "cursor": {
          "ref": "18befc0a-b8d8-477c-a9d7-100773f2c16c",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "56acd48b-2b27-4b8c-affc-dbfd55efb350"
        },
        "item": {
          "id": "9d644e05-cce0-4a01-88ef-e16316e7661d",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "0da8c43b-5858-425a-95c0-22765c65e02d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 184,
          "responseSize": 1181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "9c07aeae-91b3-4981-8d52-28264084851a",
        "cursor": {
          "ref": "b2b6f4f2-6dfd-497b-a456-5e84f699d023",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "833f4555-02a9-4ee8-8fa5-7f9495d3613e"
        },
        "item": {
          "id": "9c07aeae-91b3-4981-8d52-28264084851a",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "e012acbe-f9b1-4ca9-9326-5d3c0b76bbc1",
          "status": "OK",
          "code": 200,
          "responseTime": 243,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "c79056a6-fcbb-4a7c-a920-cd7ae85a3508",
        "cursor": {
          "ref": "e4862e3a-b7a5-48a1-bb3f-e50e37c06f6e",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "d12dcaab-8a00-4280-b518-ebdda3808b1d"
        },
        "item": {
          "id": "c79056a6-fcbb-4a7c-a920-cd7ae85a3508",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "b2529a4a-3aaa-4be0-814a-ba42fb418748",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 207,
          "responseSize": 1656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "72742979-1ec7-4278-98cb-1f6c859c1088",
        "cursor": {
          "ref": "9dc936de-0f7a-4717-80e8-9199f11ca6aa",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "28c54dad-8ee6-440f-9a60-cddba2e0cfa1"
        },
        "item": {
          "id": "72742979-1ec7-4278-98cb-1f6c859c1088",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "918a2988-fbcd-43f4-855d-f21eb9b425d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 181,
          "responseSize": 1654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "59a9aeec-8906-4664-b10a-df36c6e3cf2d",
        "cursor": {
          "ref": "a0c08a0c-7126-43bb-85de-28119397ae40",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "4f550252-e8a4-4233-a3a8-2d8ad97ff1ee"
        },
        "item": {
          "id": "59a9aeec-8906-4664-b10a-df36c6e3cf2d",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "f2e51ffa-178c-4ef7-aeb2-f1e77e1a9938",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 349,
          "responseSize": 1655
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "970949ee-59ba-4568-af07-ed785a848fac",
        "cursor": {
          "ref": "d2e884bf-5cf5-4105-8d1c-f4caf42bacae",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "95133eb1-800b-401b-ac1b-a1f0e2ab0c30"
        },
        "item": {
          "id": "970949ee-59ba-4568-af07-ed785a848fac",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "1c5be6e6-d644-478e-8650-4bfaf16be9f3",
          "status": "OK",
          "code": 200,
          "responseTime": 509,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "e80a32e9-b30e-42fa-887f-b1cfb05ec742",
        "cursor": {
          "ref": "1665f889-feb0-4327-87ee-5ab1237436a9",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "a6de1820-e125-4034-b3f6-8e96b293b9cc"
        },
        "item": {
          "id": "e80a32e9-b30e-42fa-887f-b1cfb05ec742",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "a72722bc-b733-4e82-b089-1eba44110464",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 544,
          "responseSize": 2014
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "99a52b55-8d05-4271-aead-9a70c0195a43",
        "cursor": {
          "ref": "afc58a18-8b2d-4ef4-b5a8-bebfe1dca0dc",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "fa2d08e3-b47a-4798-91d5-672d652d7112"
        },
        "item": {
          "id": "99a52b55-8d05-4271-aead-9a70c0195a43",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "291525b2-5c88-4518-b695-ffdf84ad684c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 443,
          "responseSize": 2000
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "9af4d1a3-1d48-47e3-8727-22e56ac3c83d",
        "cursor": {
          "ref": "683a06de-7053-4fec-a44b-b746c0f5a20e",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "34f07a59-f417-4f04-837f-b912e314dc38"
        },
        "item": {
          "id": "9af4d1a3-1d48-47e3-8727-22e56ac3c83d",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "8efc84d1-5bd1-4479-adc9-c093e9b1076e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 620,
          "responseSize": 1998
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "f9624ad6-b6f1-44ce-a9f2-547234d020df",
        "cursor": {
          "ref": "44b7a978-77a0-4e6f-95c9-3b69bb7a0dde",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "da2df4f5-a9d2-4ae4-a97d-faffee1e7c6a"
        },
        "item": {
          "id": "f9624ad6-b6f1-44ce-a9f2-547234d020df",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "1ccc8b3d-3a05-4fd3-9fc7-61dd5ef98a7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 425,
          "responseSize": 1999
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "73463a5e-ccef-45d7-977b-64a9bf567919",
        "cursor": {
          "ref": "7d3655db-8b6a-4fa5-8075-98ab48394cf3",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "06c4f5ba-ea9e-4a18-8d7a-7a5b996bd220"
        },
        "item": {
          "id": "73463a5e-ccef-45d7-977b-64a9bf567919",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "045c3b37-8993-4b09-a9a8-b1e46d4dd477",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 322,
          "responseSize": 2020
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "504b519b-97f9-4527-a7e7-fd891ebd4a60",
        "cursor": {
          "ref": "f292b758-bfa3-457a-bd44-1c840e4a1786",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "19d29317-2efd-4ada-82fd-6d0359ce2bba"
        },
        "item": {
          "id": "504b519b-97f9-4527-a7e7-fd891ebd4a60",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "2c4169b2-2cb6-48a7-a182-0bc737d05b2e",
          "status": "OK",
          "code": 200,
          "responseTime": 749,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "8f26e583-1771-4f13-9c0b-3e84fadf4b7e",
        "cursor": {
          "ref": "4c1000d4-d516-41ad-961a-c445de263509",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "60434c15-41cc-4780-94f7-3745f4d9c187"
        },
        "item": {
          "id": "8f26e583-1771-4f13-9c0b-3e84fadf4b7e",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "8d22e560-d4b2-4ea5-9ffb-c06e5c69756a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 618,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "725c4adc-73ab-48dc-b4d8-c6ea2703d004",
        "cursor": {
          "ref": "8be75a87-f1bb-43a9-9545-4d65b985a23d",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "71d6635f-cf11-4e18-b3b0-d31d125489c8"
        },
        "item": {
          "id": "725c4adc-73ab-48dc-b4d8-c6ea2703d004",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "609f26cf-5690-4adb-a1f2-b7c58006cc3c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 473,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "016d161c-688b-4a90-b0f9-47fca08ceef0",
        "cursor": {
          "ref": "393aef8b-c1d6-4a28-a9da-931e13d53377",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "511de7d8-1955-4ece-9c9f-73dce99f6803"
        },
        "item": {
          "id": "016d161c-688b-4a90-b0f9-47fca08ceef0",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "fb66f38b-f34d-4426-a279-c9da427dbcfb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 374,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "6d188f95-4b38-4f48-8d41-e1af0fcd534f",
        "cursor": {
          "ref": "cf95ae4d-c75f-489f-984e-f60f63c6e80b",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "53da2546-72f4-4922-9d54-0cc436c27c62"
        },
        "item": {
          "id": "6d188f95-4b38-4f48-8d41-e1af0fcd534f",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "7660fba9-563a-46cc-b968-99da204857fc",
          "status": "OK",
          "code": 200,
          "responseTime": 265,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "d3f6a78b-7074-40eb-96e9-5115d7a5c39a",
        "cursor": {
          "ref": "c02e019d-5361-46b0-a7ec-3216b33ebe91",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "31001853-9354-476d-95e9-fa679cc71de8"
        },
        "item": {
          "id": "d3f6a78b-7074-40eb-96e9-5115d7a5c39a",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "cfdaf3ef-b650-4f12-9a96-1f7420936473",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 242,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "dd171674-7bab-4af0-96d4-6f11b610a1e7",
        "cursor": {
          "ref": "dffdf3f8-78b7-445c-8a46-71ceb28864ba",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "11eddaec-cfcd-4058-b985-1c9fc50e3a6a"
        },
        "item": {
          "id": "dd171674-7bab-4af0-96d4-6f11b610a1e7",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "0ea7fbe6-3cc2-433a-9d58-782cb5731823",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 273,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "f50aac05-9ffc-4bc9-a156-f0b17fd8bc18",
        "cursor": {
          "ref": "59359c39-e33d-4c61-b33f-67eea9e3adc8",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "2959e9a8-17fc-435d-becb-4ba12057db23"
        },
        "item": {
          "id": "f50aac05-9ffc-4bc9-a156-f0b17fd8bc18",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "12c135be-ef20-4edb-bd4a-453deebdcab3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 318,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "97cb20c0-aeec-4b41-a3e7-23877302fde0",
        "cursor": {
          "ref": "36c320a5-fe4d-40d3-8b99-9caade5b6200",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "466e121b-2a37-476e-88d9-0a8518220fbe"
        },
        "item": {
          "id": "97cb20c0-aeec-4b41-a3e7-23877302fde0",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "b6ddf9e1-e7e8-4cbf-aacc-75bc92babc76",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 171,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "5042ae56-ffb2-4a06-83bc-c25719ffb29a",
        "cursor": {
          "ref": "0dfde2c9-6a75-474d-b546-15b3dda59434",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "9fca3123-5e05-4fbc-8eb0-68b69423adf5"
        },
        "item": {
          "id": "5042ae56-ffb2-4a06-83bc-c25719ffb29a",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "6ab3fe1e-c423-4b64-a0eb-7308efc435b9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 176,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "d80461c6-d227-4646-9efa-2eadd2dba922",
        "cursor": {
          "ref": "ccc3e956-8b69-48b5-9ef5-29fb0f528b0f",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "8ca185c1-75ee-4abf-8380-11822750819c"
        },
        "item": {
          "id": "d80461c6-d227-4646-9efa-2eadd2dba922",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "83b8c759-d113-4618-bf25-78dfea8075e8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 220,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "ce914fe7-6d36-4342-b0ac-761f258194df",
        "cursor": {
          "ref": "59ca6ab0-24d8-4f2a-bd5d-98c670ac222d",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "563adf4a-ef50-40a6-9834-501aef8e56ac"
        },
        "item": {
          "id": "ce914fe7-6d36-4342-b0ac-761f258194df",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "38be3858-4420-4a35-b46a-6dae1c85fafd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 194,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "c7b98407-cce5-4414-a810-5d12b5a8618b",
        "cursor": {
          "ref": "96c98bf7-9040-40c0-8596-d8bf96ffcd8c",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "26df2965-af32-4052-82c4-a2b73fe7ce71"
        },
        "item": {
          "id": "c7b98407-cce5-4414-a810-5d12b5a8618b",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "510b7436-91e4-4789-9756-0543a3cf5125",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 199,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "9957789b-f804-4991-b360-7d5bcb65c9cd",
        "cursor": {
          "ref": "5a6f5300-f9bc-4241-9dde-2ce85a14082e",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "d3618a05-0de7-49e0-86ff-b93db7a1a3d5"
        },
        "item": {
          "id": "9957789b-f804-4991-b360-7d5bcb65c9cd",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "ae937deb-469f-4acf-89c7-4764c71755a4",
          "status": "OK",
          "code": 200,
          "responseTime": 273,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "01e9027e-eba7-4ae1-97d3-fd6477ea0bde",
        "cursor": {
          "ref": "5c1022c1-7c9c-4c07-95b0-938a22296ec2",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "0ef60a8e-4e18-41c0-81c2-f5b0fbe5ef86"
        },
        "item": {
          "id": "01e9027e-eba7-4ae1-97d3-fd6477ea0bde",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "c8a465bc-e0e5-49c7-a9f8-a6cfcbdf60d8",
          "status": "OK",
          "code": 200,
          "responseTime": 263,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "ca0ee87b-f75b-4a0a-87df-dab8438f182b",
        "cursor": {
          "ref": "76bd3739-4c54-479f-bc04-8401591f077e",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "9c3090f8-2b55-4ead-a262-f0b9976cd886"
        },
        "item": {
          "id": "ca0ee87b-f75b-4a0a-87df-dab8438f182b",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "7daa810f-a5af-4546-b5d7-2bb451a9d17b",
          "status": "OK",
          "code": 200,
          "responseTime": 287,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "238a6bfd-ff60-4c1c-8096-ef4d00542876",
        "cursor": {
          "ref": "347bea9d-e1d1-486a-97e8-d5db900ed95d",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "c8ef7b64-c02d-41d7-9cd3-abed4d308d02"
        },
        "item": {
          "id": "238a6bfd-ff60-4c1c-8096-ef4d00542876",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "7d8191bb-ac32-4e47-9d37-ca6e8a988729",
          "status": "OK",
          "code": 200,
          "responseTime": 234,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "2f548049-77fd-4d5d-8ac2-401e3c77f06a",
        "cursor": {
          "ref": "e0b65dc3-6e65-4651-b90d-225ea3b2b6fd",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "8cf11b44-f886-48d4-a061-8c0473bff41b"
        },
        "item": {
          "id": "2f548049-77fd-4d5d-8ac2-401e3c77f06a",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "03367639-177a-4501-8e9c-039be3cc374b",
          "status": "OK",
          "code": 200,
          "responseTime": 206,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "93975824-368f-4f11-9444-6e85741e020d",
        "cursor": {
          "ref": "2fcee00b-34d8-4fa9-b710-293665a6d5f9",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "789d5b12-d57e-46ac-ad14-5dcc2bc18883"
        },
        "item": {
          "id": "93975824-368f-4f11-9444-6e85741e020d",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "082ab9e4-c09d-47de-a003-5ad7dc3acfba",
          "status": "OK",
          "code": 200,
          "responseTime": 210,
          "responseSize": 303
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "0978057f-dbf9-438a-9bdd-62114d40b532",
        "cursor": {
          "ref": "16a4aae2-408f-4670-ae89-035a9a78c8be",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "01c12cfc-5823-4d5a-b9ba-696a37d91069"
        },
        "item": {
          "id": "0978057f-dbf9-438a-9bdd-62114d40b532",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "be3e1d06-3f1f-4ccd-b547-f386598a85ac",
          "status": "OK",
          "code": 200,
          "responseTime": 207,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "05c32c56-e3ca-4698-a2bd-f41039820451",
        "cursor": {
          "ref": "798eaf7e-e775-4af3-9b51-d2853a34b2ad",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "b98b8f47-598f-46fe-b2b7-6242ee7ba3e6"
        },
        "item": {
          "id": "05c32c56-e3ca-4698-a2bd-f41039820451",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "3b22dc6f-cc0b-4e30-a34a-1c01756e5250",
          "status": "OK",
          "code": 200,
          "responseTime": 201,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "586ab7fb-7cab-4591-842c-eefbf65fe824",
        "cursor": {
          "ref": "10f3d8b5-2965-4e95-88c6-66e1fe14453a",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "226ec7c7-750f-4b5f-9729-d0f2eed0c299"
        },
        "item": {
          "id": "586ab7fb-7cab-4591-842c-eefbf65fe824",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "e6c67479-9fb3-49dd-9ed2-d370a0781d52",
          "status": "OK",
          "code": 200,
          "responseTime": 206,
          "responseSize": 237
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "0a9abd8a-6ce3-4f18-acc0-069d6aa9151d",
        "cursor": {
          "ref": "c62cdcc0-9400-48a1-bf5d-0bf63fef6eeb",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "eb6dd566-7341-422d-9ce0-aef777ca0a4d"
        },
        "item": {
          "id": "0a9abd8a-6ce3-4f18-acc0-069d6aa9151d",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "a0103de8-8ca2-4a19-815f-0691df2eba62",
          "status": "OK",
          "code": 200,
          "responseTime": 207,
          "responseSize": 309
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "8b6fe832-9e39-471f-9970-ba749915732b",
        "cursor": {
          "ref": "48095829-a42f-4cb2-90ca-45b39855a66d",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "954c4d6e-d5fc-486e-8352-20fc203d9672"
        },
        "item": {
          "id": "8b6fe832-9e39-471f-9970-ba749915732b",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "10bbfef8-6cfe-45c2-872b-5bbc627014fb",
          "status": "OK",
          "code": 200,
          "responseTime": 253,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "2bd8e295-8515-437b-816c-d76326a840f4",
        "cursor": {
          "ref": "f7e8080b-ca92-4b49-9cdb-431df56b58dc",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "59936593-1749-49f4-a13c-78a097a6982e"
        },
        "item": {
          "id": "2bd8e295-8515-437b-816c-d76326a840f4",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "f88cbcdb-e1b3-41c1-896e-a4e453264319",
          "status": "OK",
          "code": 200,
          "responseTime": 235,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "b10680ee-a515-4c21-a898-9b6e854cdc3a",
        "cursor": {
          "ref": "9579c012-abb4-4e66-8496-ca2b6819b14f",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "4a4f3acc-f2d0-4911-91f7-e3309dfdd5ed"
        },
        "item": {
          "id": "b10680ee-a515-4c21-a898-9b6e854cdc3a",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "e009f43c-296c-45a9-87d6-dc0b51929898",
          "status": "OK",
          "code": 200,
          "responseTime": 213,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "4d22c18c-bcde-4205-b8b0-38e0d53037e4",
        "cursor": {
          "ref": "6d20a1d7-b0bb-41b5-bfe4-d5a00c3ea49f",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "26225f85-66c9-40e7-a926-01290342e2e3"
        },
        "item": {
          "id": "4d22c18c-bcde-4205-b8b0-38e0d53037e4",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "6fc4a942-bd35-48a5-a39b-bda66e18fcb4",
          "status": "OK",
          "code": 200,
          "responseTime": 209,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "2c58e51e-4650-4200-9450-f7eef7babf6a",
        "cursor": {
          "ref": "bba6b037-9431-4e62-834e-cfc9379200cc",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "8c99ec31-4055-4140-9715-d3ba1325a582"
        },
        "item": {
          "id": "2c58e51e-4650-4200-9450-f7eef7babf6a",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "3416aaca-47d0-4c0d-af4e-ed4d08847ac9",
          "status": "OK",
          "code": 200,
          "responseTime": 194,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "e2cfd1de-7e8b-459d-aeb8-98e5a6763f6c",
        "cursor": {
          "ref": "146203c8-e5fb-4c0d-983f-1387ba2ca23d",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "3edb79a4-857c-4eb7-97eb-e59d9f37a01e"
        },
        "item": {
          "id": "e2cfd1de-7e8b-459d-aeb8-98e5a6763f6c",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "d89946bf-4656-4c58-8d28-baa6f96a1cf8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 202,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "0c583c4e-12be-4a37-b7db-c64b23d0fb76",
        "cursor": {
          "ref": "f2c03bcc-fe72-4b48-bff9-a5ccabe750d7",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "8037dde2-fb7c-4ffb-86a4-7741472e9679"
        },
        "item": {
          "id": "0c583c4e-12be-4a37-b7db-c64b23d0fb76",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "2e446208-0376-48c8-9c1d-aa1edb5b00ab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 209,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "b04d795b-1242-42ab-b9a1-aa6dd5154fd4",
        "cursor": {
          "ref": "7e01bb6d-58ca-4683-8baf-9cec8b81b311",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "0fc05d0a-f49a-4442-be47-b11721546cf1"
        },
        "item": {
          "id": "b04d795b-1242-42ab-b9a1-aa6dd5154fd4",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "ee7edfa8-5a70-4092-a183-618ba4160599",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 185,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "0e8b5a11-0228-45c1-bb69-f09ba2ea80e7",
        "cursor": {
          "ref": "0c8c5130-a07a-4f2e-8f4f-fe92f9e444e1",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "1ee7e904-29c8-4390-9997-851c90181c8c"
        },
        "item": {
          "id": "0e8b5a11-0228-45c1-bb69-f09ba2ea80e7",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "10a678b5-1a99-42c4-a198-128f496a0c85",
          "status": "OK",
          "code": 200,
          "responseTime": 196,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "0f3bbd02-1154-4ba4-a2e0-cf23896dccee",
        "cursor": {
          "ref": "784cdf93-b196-4323-9436-ba855ed827a6",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "b2a0d4cb-5e97-4179-a71a-569735b90605"
        },
        "item": {
          "id": "0f3bbd02-1154-4ba4-a2e0-cf23896dccee",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "7b252cba-9667-43ad-939d-25ce049c13f0",
          "status": "OK",
          "code": 200,
          "responseTime": 196,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "a832f6d3-b01d-4167-837c-51f6f5b5ae95",
        "cursor": {
          "ref": "03e8fa85-c246-4157-b819-c449f7f53456",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "81bae0a4-5e5c-422d-be5d-1433900e295c"
        },
        "item": {
          "id": "a832f6d3-b01d-4167-837c-51f6f5b5ae95",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "51ebb740-6a9e-4591-a6c5-a09e2221317b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 226,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "8bf0dc0a-043c-45f8-98fe-b5232684a17d",
        "cursor": {
          "ref": "fa786a4c-9447-49af-87b1-f0fc78d15082",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "9e1e4c7d-c580-4a31-9793-a6343dc740cb"
        },
        "item": {
          "id": "8bf0dc0a-043c-45f8-98fe-b5232684a17d",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "5953f75a-ed1c-472e-b3e6-73a8b465a1d6",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 38,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 403",
              "stack": "AssertionError: expected response to have status code 401 but got 403\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "753cef47-7579-4c07-9fea-4bafb44af163",
        "cursor": {
          "ref": "a0520f9b-9395-40b7-a22e-b65fc5813a85",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "a93ef36b-d485-440b-a653-21add26fdaf1"
        },
        "item": {
          "id": "753cef47-7579-4c07-9fea-4bafb44af163",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "62d6c366-3f86-4623-a1ab-d5b440f72553",
          "status": "OK",
          "code": 200,
          "responseTime": 241,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "aef1c086-27f2-4499-ac54-000f85f063f4",
        "cursor": {
          "ref": "4b34163c-edf5-4812-94a6-5b12ed08c9b6",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "3f43e408-51b8-4a77-aa12-5ed248b565e1"
        },
        "item": {
          "id": "aef1c086-27f2-4499-ac54-000f85f063f4",
          "name": "credentials_verify"
        },
        "response": {
          "id": "b1f7706e-3dbc-42da-a8b6-003258e4fda4",
          "status": "OK",
          "code": 200,
          "responseTime": 242,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "b9705d71-8e5c-45cc-921b-2c2d54e53cfa",
        "cursor": {
          "ref": "716a40fa-5f2b-490b-b70d-7d55d0237a49",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "c349e30e-7933-4f74-a357-355655a75f9d"
        },
        "item": {
          "id": "b9705d71-8e5c-45cc-921b-2c2d54e53cfa",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "fc12c2a1-7fa5-4783-bfff-f8f8de5c5802",
          "status": "OK",
          "code": 200,
          "responseTime": 247,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "966f9364-0b7a-4f53-b6eb-3b223730c07c",
        "cursor": {
          "ref": "daecac03-ec42-46e9-86d2-fd1fd02db549",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "9541e529-4a0f-4abf-afe3-ae9446035cda"
        },
        "item": {
          "id": "966f9364-0b7a-4f53-b6eb-3b223730c07c",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "5a2d2684-3cfc-4aa3-a014-de889645cb40",
          "status": "OK",
          "code": 200,
          "responseTime": 259,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "74d2aad2-f2bf-4839-9cfa-0b4f133da15d",
        "cursor": {
          "ref": "52fa8403-1d8b-40cd-83e9-37d2f4d697bf",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "6b308add-558e-4312-84c0-16c56653a2b7"
        },
        "item": {
          "id": "74d2aad2-f2bf-4839-9cfa-0b4f133da15d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "592b1ade-1187-40bc-81c2-47f2573bae62",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "74d2aad2-f2bf-4839-9cfa-0b4f133da15d",
        "cursor": {
          "ref": "52fa8403-1d8b-40cd-83e9-37d2f4d697bf",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "6b308add-558e-4312-84c0-16c56653a2b7"
        },
        "item": {
          "id": "74d2aad2-f2bf-4839-9cfa-0b4f133da15d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "592b1ade-1187-40bc-81c2-47f2573bae62",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "74d2aad2-f2bf-4839-9cfa-0b4f133da15d",
        "cursor": {
          "ref": "52fa8403-1d8b-40cd-83e9-37d2f4d697bf",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "6b308add-558e-4312-84c0-16c56653a2b7"
        },
        "item": {
          "id": "74d2aad2-f2bf-4839-9cfa-0b4f133da15d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "592b1ade-1187-40bc-81c2-47f2573bae62",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "dcda5409-4ac3-4a69-bc61-abbf116732b7",
        "cursor": {
          "ref": "5c48218f-9f5b-4b1d-9d66-08ae1983e41f",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "ae0665de-07d9-4228-9bc9-2feb7dbbf5e0"
        },
        "item": {
          "id": "dcda5409-4ac3-4a69-bc61-abbf116732b7",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "d6d51714-452d-4c19-a68e-889c197bc936",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 186,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "ca651031-e28c-4012-a209-114c81b20ae4",
        "cursor": {
          "ref": "cd3f2518-ea9c-40f6-9cc1-9f3dbf7c82a2",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "cf3ae9ee-948c-4c82-ab49-978ba6129701"
        },
        "item": {
          "id": "ca651031-e28c-4012-a209-114c81b20ae4",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "07f7abff-3d3b-4634-90d2-1bfb71fd727d",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "ca651031-e28c-4012-a209-114c81b20ae4",
        "cursor": {
          "ref": "cd3f2518-ea9c-40f6-9cc1-9f3dbf7c82a2",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "cf3ae9ee-948c-4c82-ab49-978ba6129701"
        },
        "item": {
          "id": "ca651031-e28c-4012-a209-114c81b20ae4",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "07f7abff-3d3b-4634-90d2-1bfb71fd727d",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "e2494520-a3b5-4a60-a748-18da630f840a",
        "cursor": {
          "ref": "4a28b4b7-722e-4eed-8966-c92c094c8590",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "6dd05f3a-80f8-49a8-a817-055855798b1a"
        },
        "item": {
          "id": "e2494520-a3b5-4a60-a748-18da630f840a",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "7b6aa11b-d91e-48b8-89b6-f9e602f2468f",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "3cf052ed-cd44-4942-b566-ad83b7f4dcb2",
        "cursor": {
          "ref": "68c55df8-f5f6-4396-995d-6e6b364a9471",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "3a763eaf-733b-4c6c-bf55-6868585d8224"
        },
        "item": {
          "id": "3cf052ed-cd44-4942-b566-ad83b7f4dcb2",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "099f6753-beb8-4eae-9804-125694146743",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "3cf052ed-cd44-4942-b566-ad83b7f4dcb2",
        "cursor": {
          "ref": "68c55df8-f5f6-4396-995d-6e6b364a9471",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "3a763eaf-733b-4c6c-bf55-6868585d8224"
        },
        "item": {
          "id": "3cf052ed-cd44-4942-b566-ad83b7f4dcb2",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "099f6753-beb8-4eae-9804-125694146743",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "5e88b7ff-a8d6-4d83-a4a2-dd0ad917165b",
        "cursor": {
          "ref": "faa70b05-f6d4-4864-9620-ecc345826d07",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "db1cb6c5-7609-4590-83b1-7086dd64e93a"
        },
        "item": {
          "id": "5e88b7ff-a8d6-4d83-a4a2-dd0ad917165b",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "a6eacdf9-8c3f-44ea-91ff-fef31e3469c8",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}