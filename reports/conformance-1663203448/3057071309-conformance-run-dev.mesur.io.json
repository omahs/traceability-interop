{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "67443767-4e8d-4221-9731-648ee0c479d0",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "db3f2649-27f5-4028-a016-e9c12ee81690",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c828bbff-b944-4288-b2f0-ad83590c3680",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e3ac06e5-8785-487c-bc0e-6483004c8ea2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7f579622-8011-4fe1-bf05-1944b3d56673"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "3108d138-ef4a-43e4-b500-df36c6f8b965",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "9cd86031-00fe-490f-a184-d7abbd17873c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4bcdb6f0-e2b4-42c8-a4ee-4c1efe09f6db",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c4fa9696-256c-43ea-b3be-ba85cfacf6cb",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4539de9f-0db6-4fb2-b77d-35b4f4113f4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "255b1d46-2658-4771-9e4d-4ed7e9f147fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dde85ee1-13c7-42c8-86e9-d818f18821bb",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fa939df-6590-4363-b7a5-4c16dc757da1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "535b7b06-ee51-4a8f-b029-17e638983e13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4e7a20c-cc19-47ea-a11c-a0eb9fc31f4b",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ff11cb2-f7d6-488a-a191-44344d1f60c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fa1cd30e-244f-43f3-adfb-a4341430f4ad"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ec77dbe5-152d-4502-85f9-9d668e76c1a8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "859d7591-555e-4122-8c2e-1e75b0dca6b3",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0728061-0ae7-4e0c-ba7b-898bab09640f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "608a2866-63e1-440d-bae0-2b55df936229"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c3ff940-8c75-4992-bb07-c197f6281c7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1105e0c6-9149-4df9-ba82-e009cde02c57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bb85a24-d7c2-4eba-8f77-3de14eccacf3",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9d06bc7-26c1-49f4-9d3e-7646544f7c96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "53e9523f-2ce1-4f81-aba7-14394111c684"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c58b32b-7c4e-4e57-9832-57a5dcd800cf",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "897fb01e-2397-47bc-aa80-e602cc9b5287"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "eeab176b-657e-4a0d-9260-f94bbf938188",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2d7e2ccb-914f-4d3e-a42f-ef4d2a6f5c6b",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0af2c7c0-0f3c-4143-9ded-7846bb400e32",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "7475d6cc-f373-4838-a398-95ec8f8342e5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8d1118d1-e4bf-4f91-9237-3c1f2dd8bbb1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "eb346a41-5764-4c32-8cd3-83bb47d761d7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ae2f9f62-4600-456b-9dbe-94ea5df63a1c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "54c2c124-30cd-4b57-afdf-ee1d7154ac2c"
            }
          }
        ]
      },
      {
        "id": "1765318e-1a3b-4cb7-b385-2ea62f626e01",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "9dd1d4bd-d2a1-4008-b6a6-ec90f41e5591",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3394edf9-eefb-41b9-a00e-fc325d4f685a",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "59720dd1-ac71-48e2-b8a4-883a8ccaa58a",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5d02e1f-9a60-4e9a-b699-96be68e09710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da43b0c1-b092-4d19-af1b-6e40e2bdc390"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b259104-e168-4702-91a8-2b85e3d55bc3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23186266-b357-4b5f-b118-852245069d1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35637f55-0c02-4e91-8f5f-26393e3053c9",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e60909ea-5de2-4026-87e3-f5bd429bf710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fea0c167-27c2-45e5-a314-e5b638d256d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03ad035d-1f8c-4a8a-9913-7e2518e1cb3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "088ae640-0e63-439f-bdfd-f81dea4984d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0289ddd2-6cf5-42a9-9916-3b3c6c09b405",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82445835-0d84-4efa-a4ec-a0cd5c0db783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e88b30b7-e2e2-4690-8b49-b2c7a56cf2a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2c7383b-ad2d-496d-9cb1-42a7662d6f2e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4bdfe5a-a4e1-4898-9494-dcefb86639fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecf8ae84-b078-46d4-b017-715165788eb6",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39a8cf65-7605-4e0e-9d44-0aca4b7b5694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eac18edb-745d-41c5-b9b2-4be46fbd5236"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3f89e04-b818-4dbd-9cfa-661761bdac20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40598a8e-f33f-4889-a8d3-15589d2cf11d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1905f876-c7be-401d-a6dc-7ebe89aa6432",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1038e97c-f909-4efa-b32b-baa2791de274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "591c0d9d-c996-4bdf-b10f-2c0d937a1ddf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae34accb-0ed1-457c-b764-5aa5ccad6ab5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eecdabb1-ef64-42ec-a3fa-5a821a1bb4c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f89d4a3-9d77-4441-a716-b284db11d887",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e68f53f-7387-4117-b0bb-823983c97560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4bf238d-8492-44ba-b800-94f919b97443"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80699517-7b91-4c72-b1fa-939843ec4fd3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f97f45b0-514a-4eda-9af9-395cdd3cd4cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec01d511-7d6d-42a0-963b-89ce1dfba925",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59ef2750-f886-4d23-a1d7-c15a2450462f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7c1e237-4fea-41ac-aa92-e73a7803ebf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7561e737-928f-4f4a-8e8b-6c2dbecd19d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "433d51e9-4ec5-4a6d-8a51-88747eec9d2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01846f7d-2be7-4050-849b-b0159338fa44",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "750b65fd-345b-4892-b336-d168feed2b8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa6d0e26-1d99-449d-aa9b-77c586bdcf31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c55fd55-2a0e-433a-b536-29586e7c7c78",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c77119b-6ef9-4ba8-a718-219b0e100eee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8863bdde-2b28-4f98-a89c-348d6d49d089",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8aa02ce-2c46-4bce-80fe-b51b85be746e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82b5c586-e69f-4965-8ae3-97f428157812"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6da1d6fe-68df-455f-8bd7-857f8665481a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd192b2f-d17b-49b1-98fa-8a2b9774e0dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b58171da-790d-4f0d-87b5-b702c3668167",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e1ed400-62fb-4813-a9b7-8380978d0dab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52ed8192-7302-41e2-9966-b10b14ba62de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "631d3908-c99c-419a-9997-383be8c929d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14116860-5e09-4139-92e4-dbb68b727789"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d43528f7-98f2-41a6-baa1-3b92fd91a74a",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "291c1cba-40ae-4c1d-8601-5a470820a151",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1241531-b015-44ca-978b-fc6da811c4b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92327dd9-5ce0-4796-b47d-1b207e4c04c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "49656879-f6d6-48df-9744-e45726143594"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cf2cbbb-e443-4754-9dc8-1f00a0bad549",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75c7f1b9-28f5-4386-93a8-254269642e2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71f56bc7-9371-4e6c-bd24-f384d66c6f22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf1267c3-30fb-4b30-b2a1-f69dfba080b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "8cb89110-8b8a-454a-8593-e8e4971a725d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b12c0307-6a9b-4c53-bfe3-6fc6d7fcd72d",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98de3710-4965-4572-b647-9c7c54d819ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebd49ca1-cda0-433b-a4f3-8fcce64d4992"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0e837ca-78f5-487a-b21d-55f8870ce663",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b3567e5-ad2b-46f3-96a0-bf2857d7a73a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adc9ba89-d504-4f5c-b0cb-371834ad433f",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f7b74ba-0c6b-46cb-a332-9bb203160c58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e131c851-ceeb-41be-a07b-fc78d5e673b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6f67446-2211-4ea3-b4e9-ffd1b0b9fbe9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c3da5a8-678a-49c3-b561-47307baef59f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40e02b3e-ce19-4175-869b-4da4e6e28989",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10e4915f-c94d-4116-b080-fccd23e5e6be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bc94bf7-9079-4b7a-a283-8678bb582402"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd4bae7a-198c-4386-8952-817f61de7476",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "4e3646c5-e8de-4d7f-b22f-4fa504d52d89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b203dec7-695d-4404-bd1a-558f0ad42f4a",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e780fb2-d1a4-4851-80d8-533982bfc897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66d55764-3a09-4bbc-9b81-2402d9d495a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1161ff9e-2390-4e5a-b392-14b50d7f2863",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "5a9af5e8-8125-400f-94d3-60a73524f3f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aa7101d-3fef-4188-a9ff-a5be73beda73",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a90c9a0d-9af6-4347-ac1f-ab9a3113e3e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34c21a71-47ff-4477-8481-4dbc1178f8d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7057fe95-2644-417b-8fde-d2a4bc2aa0e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b190516-1080-4ebf-834c-c2804d24d89e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2087993a-d471-42d6-ad8e-9d0616d3433a",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9572c6c-17eb-464c-ae04-fc7dc5c5ed3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f57483b-16ce-4619-bb55-66a21e993b70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15942b58-65a1-427f-878b-1f0716efafe6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dece3a25-a55e-4333-a736-29543bf54d4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fab74d6-71b4-424e-92bc-77f44dc4d96c",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "855f2b72-dbee-4052-86e4-0ffd591b1dd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6cd3303-4038-4f87-8248-4aee70ac6b62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cf3916e-c330-4b94-a590-4a4d32519624",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9ea239f-d30d-41b9-ac99-aea0461a196c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6491ef38-5ae7-4423-a22b-4c31436f1b4d",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "325c88f1-03c8-4bb6-9bec-9ae80c2a4fcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c31d904-a425-4c55-8446-145b94507c66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77905236-33d7-4e5e-b254-1880c8f99869",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99694085-21ff-45ec-8abc-fe98bf4bcc51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9db4a618-9b9c-4d93-b78d-2e9c8233f9a8",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8c8bb8c-5638-4628-93a8-10251ba73e11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5a3b20a-7948-482f-bcbe-9785f9ad7abf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e99222f7-c699-46df-bce2-482acb1e89e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be an object",
                            "rawBody.credential.credentialSubject = \"did:example:1234\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf72689e-8f4e-439f-9f01-be3269ef8af6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1088879a-fa3f-4817-9337-88e3971f3f95",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85d01f4b-6d59-4e9d-b98e-37e5caed0d5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a498d5a-3b4d-42d3-8cf3-a29b3a2ca95c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02d87641-2b47-4b21-ab5f-8b6a2d3f1676",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"did:example:1234\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9446bfcd-04e9-4385-be92-c89124e5c593"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b783cba-dba8-43be-92d0-e3a214a5cc56",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ef19322-5d97-4e60-b935-80f5dedff2fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "858bc4aa-dc46-460d-a3de-ed36cb15e4a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "169339a5-fc6c-4626-8b1e-9bb75952e21a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4915d88a-7f6b-4e26-bb1a-1382cd68a843"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a5d4a58-3ae0-4309-adfb-d2aaacb8f8a2",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ea1ef6e-dbe1-406e-bf8c-ff89978adc70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3041885d-14cb-42a9-92dd-223a89b7c5cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a44010b5-211d-4a5a-a4bc-349e6cd5628a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0742e7e9-0626-4a33-b66c-4e278edfecef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8f2e487-23fc-4a4d-8d89-a92b83952c25",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50bbf1f5-d6e9-4168-bc7c-06cf40725a22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e9a07c5-8633-452e-939e-bafd357f2484"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48451c97-96de-4b96-967c-65a0a1549c28",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a821f2a4-f3e0-4a8a-b26d-79686d061950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5979419-da49-49c6-9040-3d484c2d3016",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d836d4b-6127-41fd-91b7-33777704104b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd305ba1-5051-408c-a699-bf9b2654d91b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b4108e7-000a-482d-8e54-6a9217fc87a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09c58f2d-37f6-4ddc-ba5a-8ab583029ec3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "130e17e5-7bd8-41e5-9a70-a05dfc84c0d4",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01b0dfb4-ecfe-4322-af3b-d2224406a58c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13edf186-e35b-4985-85a7-a0166abd3443"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "060bb6bd-807d-48ed-95f1-2cc6237404b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22cf76d2-7e8d-43cb-860f-27a2bc30547b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d751657a-6358-4092-8775-38e02c944cc2",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e535184b-a524-43ed-b87a-4726f9154fbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b345ceef-5bb7-4e35-92a5-908bc3991c66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c78ed7b-45b7-461f-8cb3-43b0a6af55dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06161081-6d7b-4b6d-b1d3-e86742e31ea3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e67339d4-2a79-44c0-a17b-91b372a9605e",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23d6bb87-b8f3-4761-a583-170c12cee500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1194f11-2569-4527-af6d-179265bd2df3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2299eb7-0c4f-4246-a823-93295a5aadda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b2f9597-e648-4b57-a19d-c0362691d77e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe0ebd74-36eb-4f82-84e7-096df4726341",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3c9b2e4-6eab-44c8-880e-c097e6247005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "565698d0-c0c6-4eb2-a051-65ccb5da5031"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f0830b0-14c6-486d-8205-3deb5228fbdb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07acd5f6-18a0-4f92-8479-dd6dd9e3ed38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99a57157-31ed-4fdc-88dd-99f0fd0f96ed",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1f031f9-0ffa-4f0e-b6be-1dd3303d0647",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "c3438ce1-3af2-45a9-87dd-1394c3c48331"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78079847-8df2-4980-9a82-041dd7cd3008",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af4bb561-ceef-4a23-b995-e1fc14d08ba7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "360a26f9-cc62-48bd-a806-003c879c256e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a87f66db-a87b-4ba6-9989-88cc4926da53",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "585debdb-885b-4c97-954b-b680008b868d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "78202ef3-38a1-42ea-aba7-0b927c94e758"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dce9663-e73f-4ae8-b3d0-363683b8e8d2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "c1112cb5-c4a5-4e72-ac1e-47d4ab254f4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "563a6d5a-9648-408c-8550-2c5c8a2c6c52",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6f8334a-be6c-4957-8213-b8d71b59bb29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b64cbf41-1418-4f04-807c-0f5f02ed2805"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfbc512f-60d6-4ea9-98e2-f1c285e2a65d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "18c2589f-89c9-427f-ada6-e96e8711eb25"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "670cf19f-f6e9-4b9d-8337-4da6b1a85eba",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "04cd9e64-398b-419f-8e41-c195b2ab19cc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "00299030-836b-4a61-bfcb-5a5661d38e89",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3c402eba-427b-48cd-bbc2-48d1dba95ff2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6be2ca81-f263-4f1d-ada7-09c1226f4137",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1be0326a-03e0-435c-9d34-f2b241923860"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3e135574-f95d-44be-b9a8-6b112b43691a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "13342fc9-abd5-4001-92d1-589f66d1fa20"
                }
              }
            ]
          },
          {
            "id": "9d3af803-761a-4115-bd97-c2f5392e0d63",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a2e559cb-356f-46f3-b198-edd2aeef60f5",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2bec65a6-2290-4d0e-a73c-a44c8dadba01",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "523e3a95-678b-41b8-b24e-1d5f5d9df68e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fb119b1e-7b4a-45e7-a045-c56f69b64d88",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "02030744-0381-42ec-bbeb-c82c0e0769de"
                    }
                  }
                ]
              },
              {
                "id": "90f5da46-ce7d-48cd-8ec7-5c0bbf52c31d",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c753099c-aefd-4a55-bf59-a70dff7384b3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c817bd97-2f43-4e28-ad44-38a20124e3c2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "94406ce7-f355-4343-9595-3b688aaa945f",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "1c9f9435-b71c-461d-9a27-a007018bea98"
                    }
                  }
                ]
              },
              {
                "id": "81f66a8e-26e6-4efb-a99e-cb11c26b4b08",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "62638055-f994-4dc6-88fa-5140fc8fe487",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a703ab03-6e0f-4f65-90ba-244a656945fe"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ac8671d8-8879-400d-984c-da259f05802e",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "e52063e9-2a40-43f2-9342-1742b367c7e3"
                    }
                  }
                ]
              },
              {
                "id": "942a53f9-6bc6-42b0-8d48-3ecfe6299700",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5414a5bd-cf88-49f7-8ece-c106a5ac53fe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1b94e34d-0bef-4b51-b003-d6dac0d654e5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "69ed5a94-ab30-4eae-820b-f18d6d87a318",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "df41fd03-f025-4ac2-93e2-f119a979724a"
                    }
                  }
                ]
              },
              {
                "id": "7e7098e4-a861-4068-b0ba-c2135a84a479",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1997f188-0e00-4fab-9628-24ae0aaf24f5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "085a0061-6a5c-496a-9b41-c79e7223b967"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b8520e18-7b99-4e19-b3df-57bbeea2de0a",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "78842b96-ee95-46f5-bc21-cc82fa6eaf67"
                    }
                  }
                ]
              },
              {
                "id": "2c2de19b-8855-4f57-b146-efac0e40bc95",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "af4594e8-624d-48d3-8ba4-27d41de48787",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ef3aaa07-7595-439c-bb67-e39bcfc9cf07"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "58035d74-fcc3-4c70-9744-62eaf308e9e4",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "2bdf8c3f-f48e-45e8-8e83-f5f28f20d9be"
                    }
                  }
                ]
              },
              {
                "id": "54a13be7-b941-46f6-afa3-a23b6902462e",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b1b22c01-cdb2-4c41-b6fe-0e6af65c7a07",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "682b3ba4-1b7a-4672-97d1-6f195f2058ba"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d931f414-8dbb-4cfb-8012-57c26a4ece3a",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "bab90db2-5f35-43fc-8160-e661f60a9c77"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "955aa1ad-74be-4e52-90d7-56d9faae4822",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "690b8eec-5c6e-4bb2-9f92-35c3ef26ec5d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "52eb20b2-d153-4f73-9695-6c3a70e0fcb2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "02c6a86a-62a0-4617-9b41-8bd90f72d3ef"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a7826199-70b4-4231-9310-cc9209e56fc8",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "14a31cd7-e548-4e7d-98e2-58c74b60eb55"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d408ee02-5877-4393-b0e0-278b2cfc0136",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cfd3e943-bb66-4525-bdb6-be99f45a56b2"
            }
          }
        ]
      },
      {
        "id": "d242a4c0-3bb7-4550-8ad6-6c04c1b19fca",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "abbb4fe2-4a7c-4dfd-9a55-ca4401d4f067",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dcbf8ca8-d676-4269-aba4-79d6c854ec76",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "31ef57ca-4c61-4b0d-b28c-da3be9d8afaa",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d714ac7-6fac-4d5b-a64f-89be7b0c875c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf6e71b0-085e-4a7b-8f6a-c3231a46ab5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34f1af9d-177a-4fa7-a431-5e115a554b18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0e77c9b7-5f75-4730-b79b-798b092a28f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73c234af-f0ce-4801-9e39-2a932a526b9f",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d4f09d2-5d63-4e1d-a667-6e493bbe20a0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "33ea74b4-df90-447b-8d59-ae93f4770ec9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d83dd5b-3513-4813-b975-7c872acc1db3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6ee635e4-f95a-414e-91ec-fb815c010bcb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eb47236d-9b9d-4ecb-bf3e-cbad71d0cedb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9169e4b1-57d4-4422-ad05-9cd4bb793fa2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2eeac0a2-6a04-416d-8765-be6169ba08a7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7ab8fc87-b846-4c20-bcd5-9907e12bb30b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7aa25b08-68d8-451c-abea-67444a5a9773",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "53bcfe9c-c94b-4ef3-b49a-50df6dfb0d60"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3ee8270d-13b3-4f90-b527-066cc222898a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c4a3a01d-0daa-41f9-8fa4-db5788e66a5a"
            }
          }
        ]
      },
      {
        "id": "8582e762-2ed5-4ec3-993b-da02671eca1b",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "45b2316e-6ca8-4dd9-af51-2b499c927bb8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "95b6c7d5-df3e-43b2-a073-a434863775af",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9d256cc6-e9c7-4389-b465-108d7dc032be",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8e967dd-b535-4dfd-a977-e2ef06bb2ae8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a52e6c8f-2a61-43bc-a152-e1eeec821c58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a03e38e4-242e-4aab-82b9-933367d92e18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5990e6a9-31dd-4df2-aac6-6bdb77c2df3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b4ee315-7e98-4a39-8095-b00ff08f337b",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4361893a-c911-458a-97d7-e897fb5c0a27",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a0c48a0-2810-4b4c-aed6-a3cc32572168"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf8d9656-8ee7-4433-a3d4-35949928b7e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "30827f2f-2c9f-4510-8aed-3f731e894eac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b98d3006-6e79-4a8d-90a7-f14800f417e1",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9e25e05-7b0d-4d62-8312-7d9061a39683",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9aa96538-dcb8-4d04-8f9e-eddaaab5f885"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "564babda-8ea2-4979-ac7f-89c258d0c25a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2933adab-4d31-4356-a38a-51507a4ff1ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "930ec244-3881-4bd5-b57f-356d492cd181",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ae1dd05-b0c0-4e96-9409-3fe594009e35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6963292f-69c4-48bb-90bf-457c9d3d9d76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5344980b-b9e4-4ec7-8f9d-55997daca9ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "42522b95-49ad-4189-818a-1b4ec4a167ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e98e95b-1ad6-4382-a8b7-14dd684c8e08",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bd4db32-779f-47ab-a747-4de5b692d84d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "753b9347-c9e5-48cb-856d-0c495c9fc805"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "006fa5b3-7a21-4cc4-b130-0eb3156e7e68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3bf847fe-dcab-4574-a23b-ed47a92e3999"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d66df27b-86d2-47af-b943-304afdcf6197",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c573cbc8-a8d3-47e0-bf70-ed185a0ec0df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee3d5ecb-99df-4a20-9c76-2a4dcc56bcc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8477b7a-4033-4ae0-b0ff-e0d27203a581",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f116dd49-33d3-492c-a76b-288db77ed606"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9b568728-2916-45d2-ace6-97c7db5a17b0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fa5bb6b2-ea33-4dec-aa0c-ea82aa333340",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9274b5e9-d0f8-4ff1-9e75-6586b7d6d2d0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "9599413c-7086-4b26-8655-48bb041e9fcc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4b4a91c-86da-4c11-94b1-527adb378342",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9588d9a9-53e5-4821-8549-9d22976f72c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a649b44-d776-41c5-85ed-011179f09d6c",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ade9e2d-e9b3-4a93-b5c3-183a0ddf87b7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "b168e441-1069-418a-9f93-08b7f70bc677"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d76f7aaf-7152-484b-a4f8-d1829251c556",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4e91b299-6ef4-4413-883a-c09e93c4a4b1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6fdd5ac8-7750-45a5-bb5e-c9a78cf89b53",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7892fa2a-08f0-47cf-a24e-9d6235b7a19b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a91c5248-efe2-43c0-b3ed-65cf9376129e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0142411c-587a-422f-b83f-fc00fba0d19e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6e569420-0cfb-4d7c-aa9e-ea6e4c7d2790",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"dummyVC\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": \"did:example:123\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "47981d9e-6e2c-4f5a-b7bc-e42290f55921"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c09f5d2a-4c3f-4fbf-a742-cc468274810e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "91b5ffd7-b04f-4d3a-ad64-dc9d4132295d"
            }
          }
        ]
      },
      {
        "id": "39a9b6ac-0b9d-4c43-b90b-1f0405e3f7d9",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "b0136596-f55b-4163-9929-152c4aea3acf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "02576e57-ae8e-4f5e-95d4-9b4ff02a7a20",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fca91c27-1da6-4473-8e8e-608eb6ff3fdb",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6b2a212-2820-4410-8786-ec97466628b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c16fde6c-a1d6-44d4-a8af-7bf179b7be61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8c85f70-c6ee-4dec-89f6-aac125b84f91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "64c3b53a-9b21-4559-a787-ce0e33f56d84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f808b75a-7b29-4563-82b6-987cafe4fa1a",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9bc4e3d-0bda-4847-99cc-5b946afba14f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "0b38da51-05af-45e3-810e-15eba9bc794c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aab784e-5dd9-4ad6-8bf7-6c6d225cb731",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a69248d0-3551-436f-8b6c-8dccf2b66695"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2529c223-e307-4c84-85cf-8144cdedddb1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ed096c10-2ba0-415c-a06f-ddcdbcdac53b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8b09d98a-e9e4-4ef3-801e-2ab9b1114dc9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7ad2a516-af7a-4590-b4e5-40a1682a8c76"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f6f531be-3d12-4dc4-8d0c-60dc8ecc567f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "cfec9636-3b51-4e85-b92d-5a311a3a7b42"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "312deca2-934c-4580-9e33-fca540868653",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ecab2c50-d154-4176-a65c-3b08a612a6e5"
            }
          }
        ]
      },
      {
        "id": "e5faf251-547e-4b2e-b3a0-3520e5cb39b5",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "a1545ad0-031e-420e-8d13-2952cba9bc19",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7334065c-8f2d-4139-ba58-f5e1cba90e5a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6cae82ce-28ac-4682-a191-194bda3f3ef1",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70adaa7f-957c-4687-adbe-8e4ba900d91f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1262fe2-efd2-4f7c-b2c2-8b82b8f5dc39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d82f0bbd-dcb9-4cdf-b12f-d4528d9e86c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f864718e-0803-4738-ae35-0931f11ed2a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "321358d3-cd89-495c-8fca-0175337ff665",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4853aea6-19a8-4e24-9809-464fe2e353f9",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "0e270f26-4b3d-4b7f-bed1-e706f08b148f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9fd375c-4bc0-439a-b488-2fb27c9fc4d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "340f2243-8707-4a39-8b49-7d679c9db8da"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "77c0e1fc-ba03-4b73-989c-f1df4a0e9960",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "68625869-2e52-49cb-a375-f141c36a8a90"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1346c4ab-efcc-4df0-9018-1714ce60d0e7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c1964523-868b-423f-8c68-8b4821876ac2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "33e2d48d-da3c-4f22-b32c-4df3dddb960f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "e14f8cc3-a2a1-4611-84c8-7f9e5d3969d7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "80fd7df1-e16b-492a-b9e4-00313cadd74a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3d963759-7185-4e52-b9d5-9f023b047e99"
            }
          }
        ]
      },
      {
        "id": "14ee94a9-a595-41d1-a5db-518ce90eb8e1",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "81b67317-2cc5-4f4b-9ddf-43f0cc722147",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4d6a4c0d-8809-437f-8024-3891be63f831",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "47abf4d0-f923-4bd7-8008-a455b1d15108",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5584422b-728b-4891-86d2-ee3d14c94f9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f234ec90-d18b-4e83-a6e0-931a1a03f029"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cb436bb-10be-494f-8a85-047208583933",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "13572489-7367-4474-882b-7da593d8a730"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40de0ebe-cf54-42a3-8026-3dd6ebbcb4de",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fdc5119-0ebc-4f24-826d-64912588a979",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "debb3539-5f97-4e40-ba7b-3fdfba3271b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a329d1b-3ec7-4724-b8ae-ed4d6238c6d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ee8c32f7-78d2-4447-8afb-d04f6d090b93"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "767add6e-ece7-4dca-a63e-297b44ff0278",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a0721ba4-7fa7-42f0-8f5f-4191fb142ae3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3afc85bb-5581-42bd-9441-961dd21703cb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c026110b-936f-4ab7-ac6e-2f134b601133"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5d70c9f4-8df7-40e7-af07-e98be59ae035",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "8d06c994-a4d0-4ee6-a4c4-a605c818ae50"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "16925dc0-f971-4105-9b80-c37237e5428e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cae66f51-2d06-40e6-93e4-924f1173c1e5"
            }
          }
        ]
      },
      {
        "id": "0e8c272c-1851-4aa9-a332-33650a75f343",
        "name": "Presentations - Notify",
        "item": [],
        "event": []
      },
      {
        "id": "99886893-07e2-4883-95bc-8234ade609b2",
        "name": "Presentations - Submit",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 63,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 475,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 63,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 111,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 63,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 131,
        "pending": 0,
        "failed": 9
      },
      "testScripts": {
        "total": 240,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 235,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 83.8468468468468,
      "responseMin": 31,
      "responseMax": 1018,
      "responseSd": 142.55425382236206,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1663203307500,
      "completed": 1663203319834
    },
    "executions": [
      {
        "id": "c828bbff-b944-4288-b2f0-ad83590c3680",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 63,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "1a6545a8-72b7-4137-88f5-71fd401f465e",
          "httpRequestId": "bbee1127-c27a-4df1-b43b-68209ca09d33"
        },
        "item": {
          "id": "c828bbff-b944-4288-b2f0-ad83590c3680",
          "name": "did_json"
        },
        "response": {
          "id": "f62a9080-0154-4c84-867d-90e77b7c58fd",
          "status": "OK",
          "code": 200,
          "responseTime": 332,
          "responseSize": 1002
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.service[0].type should be array",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.service[0].type should be array\n   at Object.eval sandbox-script.js:2:1)"
            }
          }
        ]
      },
      {
        "id": "c4fa9696-256c-43ea-b3be-ba85cfacf6cb",
        "cursor": {
          "ref": "ccf5fbc3-e549-4d74-b8e8-b19edd63d455",
          "length": 63,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d397bb5c-4e03-4b72-acb8-28e84384bc05"
        },
        "item": {
          "id": "c4fa9696-256c-43ea-b3be-ba85cfacf6cb",
          "name": "did:invalid"
        },
        "response": {
          "id": "9ed392ad-b71e-48ed-a60b-39921e494b25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4fa9696-256c-43ea-b3be-ba85cfacf6cb",
        "cursor": {
          "ref": "ccf5fbc3-e549-4d74-b8e8-b19edd63d455",
          "length": 63,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d397bb5c-4e03-4b72-acb8-28e84384bc05"
        },
        "item": {
          "id": "c4fa9696-256c-43ea-b3be-ba85cfacf6cb",
          "name": "did:invalid"
        },
        "response": {
          "id": "9ed392ad-b71e-48ed-a60b-39921e494b25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dde85ee1-13c7-42c8-86e9-d818f18821bb",
        "cursor": {
          "ref": "791a90d8-b000-4042-8acc-32c995d3d99b",
          "length": 63,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "fb7f20e0-ce04-4649-bda0-874a5c181a5e"
        },
        "item": {
          "id": "dde85ee1-13c7-42c8-86e9-d818f18821bb",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "2bedf7d4-b277-4ae7-8a44-1e72992dc91d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 97,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4e7a20c-cc19-47ea-a11c-a0eb9fc31f4b",
        "cursor": {
          "ref": "3dfb3b3f-824b-4669-b55f-80d76e9d21dc",
          "length": 63,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "31436786-b9ea-48f9-804e-e032406e6468"
        },
        "item": {
          "id": "c4e7a20c-cc19-47ea-a11c-a0eb9fc31f4b",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "ad824975-7f9e-4863-ac86-2d361d4cca61",
          "status": "Not Found",
          "code": 404,
          "responseTime": 32,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "859d7591-555e-4122-8c2e-1e75b0dca6b3",
        "cursor": {
          "ref": "bb68b035-1951-4a0b-a6d8-a9fb1dc2c585",
          "length": 63,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "4e7a64cf-01b7-437a-b1b7-ade7981c408b"
        },
        "item": {
          "id": "859d7591-555e-4122-8c2e-1e75b0dca6b3",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "41607608-a95e-4c6a-819e-c6bda283b718",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bb85a24-d7c2-4eba-8f77-3de14eccacf3",
        "cursor": {
          "ref": "cb70c24c-c8a9-42b7-b87b-8597cefdfeff",
          "length": 63,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "46f8889b-d11e-470f-a12e-eabdf8046663"
        },
        "item": {
          "id": "9bb85a24-d7c2-4eba-8f77-3de14eccacf3",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "0e4ab0e2-780c-4f65-b7ee-b8959fed0bfc",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 35,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bb85a24-d7c2-4eba-8f77-3de14eccacf3",
        "cursor": {
          "ref": "cb70c24c-c8a9-42b7-b87b-8597cefdfeff",
          "length": 63,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "46f8889b-d11e-470f-a12e-eabdf8046663"
        },
        "item": {
          "id": "9bb85a24-d7c2-4eba-8f77-3de14eccacf3",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "0e4ab0e2-780c-4f65-b7ee-b8959fed0bfc",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 35,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d7e2ccb-914f-4d3e-a42f-ef4d2a6f5c6b",
        "cursor": {
          "ref": "42aea326-d7e7-4a2b-9d23-9083305c911d",
          "length": 63,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "5850fd4a-5716-4edc-b71d-ba8549411168"
        },
        "item": {
          "id": "2d7e2ccb-914f-4d3e-a42f-ef4d2a6f5c6b",
          "name": "identifiers"
        },
        "response": {
          "id": "1e7ffeeb-0006-4a9e-8d58-c17fac249607",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 1018
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59720dd1-ac71-48e2-b8a4-883a8ccaa58a",
        "cursor": {
          "ref": "14c475e4-4ffd-409d-8b99-c0239db059f4",
          "length": 63,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "44ce48ef-905c-418f-8577-1f2e86ab8675"
        },
        "item": {
          "id": "59720dd1-ac71-48e2-b8a4-883a8ccaa58a",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "664814c0-1130-4cf7-8e84-4eb44d23caaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59720dd1-ac71-48e2-b8a4-883a8ccaa58a",
        "cursor": {
          "ref": "14c475e4-4ffd-409d-8b99-c0239db059f4",
          "length": 63,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "44ce48ef-905c-418f-8577-1f2e86ab8675"
        },
        "item": {
          "id": "59720dd1-ac71-48e2-b8a4-883a8ccaa58a",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "664814c0-1130-4cf7-8e84-4eb44d23caaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59720dd1-ac71-48e2-b8a4-883a8ccaa58a",
        "cursor": {
          "ref": "14c475e4-4ffd-409d-8b99-c0239db059f4",
          "length": 63,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "44ce48ef-905c-418f-8577-1f2e86ab8675"
        },
        "item": {
          "id": "59720dd1-ac71-48e2-b8a4-883a8ccaa58a",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "664814c0-1130-4cf7-8e84-4eb44d23caaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35637f55-0c02-4e91-8f5f-26393e3053c9",
        "cursor": {
          "ref": "b0e2dc6b-ac3d-42a3-8423-95f2c207b9f5",
          "length": 63,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "0b9e05b0-619f-448b-965d-5cab3ccff81d"
        },
        "item": {
          "id": "35637f55-0c02-4e91-8f5f-26393e3053c9",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "2a762494-aa35-4964-8055-915fdfff22fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35637f55-0c02-4e91-8f5f-26393e3053c9",
        "cursor": {
          "ref": "b0e2dc6b-ac3d-42a3-8423-95f2c207b9f5",
          "length": 63,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "0b9e05b0-619f-448b-965d-5cab3ccff81d"
        },
        "item": {
          "id": "35637f55-0c02-4e91-8f5f-26393e3053c9",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "2a762494-aa35-4964-8055-915fdfff22fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0289ddd2-6cf5-42a9-9916-3b3c6c09b405",
        "cursor": {
          "ref": "fffb76d7-57dd-474c-ac17-ff74f0e23fdc",
          "length": 63,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "fd8fc3fc-358a-43e8-b859-f74a7ee01576"
        },
        "item": {
          "id": "0289ddd2-6cf5-42a9-9916-3b3c6c09b405",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "3fff9a2b-9bcc-4007-a4e5-21266632484d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0289ddd2-6cf5-42a9-9916-3b3c6c09b405",
        "cursor": {
          "ref": "fffb76d7-57dd-474c-ac17-ff74f0e23fdc",
          "length": 63,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "fd8fc3fc-358a-43e8-b859-f74a7ee01576"
        },
        "item": {
          "id": "0289ddd2-6cf5-42a9-9916-3b3c6c09b405",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "3fff9a2b-9bcc-4007-a4e5-21266632484d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecf8ae84-b078-46d4-b017-715165788eb6",
        "cursor": {
          "ref": "00292622-3e99-4e36-8684-25af07ddc243",
          "length": 63,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "6a4fc027-3c7f-43f8-8e58-531d02c37a82"
        },
        "item": {
          "id": "ecf8ae84-b078-46d4-b017-715165788eb6",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "caa4832f-b4ae-4ceb-9a27-96ea9b0de70e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecf8ae84-b078-46d4-b017-715165788eb6",
        "cursor": {
          "ref": "00292622-3e99-4e36-8684-25af07ddc243",
          "length": 63,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "6a4fc027-3c7f-43f8-8e58-531d02c37a82"
        },
        "item": {
          "id": "ecf8ae84-b078-46d4-b017-715165788eb6",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "caa4832f-b4ae-4ceb-9a27-96ea9b0de70e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1905f876-c7be-401d-a6dc-7ebe89aa6432",
        "cursor": {
          "ref": "80eed7d2-f4bd-4c0c-89b3-12995f262f42",
          "length": 63,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "25152b1d-5f09-4d51-9799-97bf96c26abd"
        },
        "item": {
          "id": "1905f876-c7be-401d-a6dc-7ebe89aa6432",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "29d86d0c-2277-48ab-9066-2d0a0376b52b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1905f876-c7be-401d-a6dc-7ebe89aa6432",
        "cursor": {
          "ref": "80eed7d2-f4bd-4c0c-89b3-12995f262f42",
          "length": 63,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "25152b1d-5f09-4d51-9799-97bf96c26abd"
        },
        "item": {
          "id": "1905f876-c7be-401d-a6dc-7ebe89aa6432",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "29d86d0c-2277-48ab-9066-2d0a0376b52b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f89d4a3-9d77-4441-a716-b284db11d887",
        "cursor": {
          "ref": "78b0df10-d69f-44b3-977c-d152edcb23c3",
          "length": 63,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "471b1140-30ab-41ad-ada7-e594e9051290"
        },
        "item": {
          "id": "5f89d4a3-9d77-4441-a716-b284db11d887",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "cf410b98-def8-4ce8-9cd8-78b824c7cd39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f89d4a3-9d77-4441-a716-b284db11d887",
        "cursor": {
          "ref": "78b0df10-d69f-44b3-977c-d152edcb23c3",
          "length": 63,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "471b1140-30ab-41ad-ada7-e594e9051290"
        },
        "item": {
          "id": "5f89d4a3-9d77-4441-a716-b284db11d887",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "cf410b98-def8-4ce8-9cd8-78b824c7cd39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec01d511-7d6d-42a0-963b-89ce1dfba925",
        "cursor": {
          "ref": "d83b2709-5f8d-4dbd-9ec6-7e4a89c056b8",
          "length": 63,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "0188b02b-7af8-408d-96ce-c9e42c3a3e7c"
        },
        "item": {
          "id": "ec01d511-7d6d-42a0-963b-89ce1dfba925",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "00a3873c-654c-4e9f-bbc5-2a42ea1f8187",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec01d511-7d6d-42a0-963b-89ce1dfba925",
        "cursor": {
          "ref": "d83b2709-5f8d-4dbd-9ec6-7e4a89c056b8",
          "length": 63,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "0188b02b-7af8-408d-96ce-c9e42c3a3e7c"
        },
        "item": {
          "id": "ec01d511-7d6d-42a0-963b-89ce1dfba925",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "00a3873c-654c-4e9f-bbc5-2a42ea1f8187",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01846f7d-2be7-4050-849b-b0159338fa44",
        "cursor": {
          "ref": "b2d003f5-f070-4086-9fd7-b12ede51740d",
          "length": 63,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "629162f8-2a40-43dc-8637-6a7c133575bc"
        },
        "item": {
          "id": "01846f7d-2be7-4050-849b-b0159338fa44",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "a4af5cf1-2e73-4656-a472-37157fdb7a53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01846f7d-2be7-4050-849b-b0159338fa44",
        "cursor": {
          "ref": "b2d003f5-f070-4086-9fd7-b12ede51740d",
          "length": 63,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "629162f8-2a40-43dc-8637-6a7c133575bc"
        },
        "item": {
          "id": "01846f7d-2be7-4050-849b-b0159338fa44",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "a4af5cf1-2e73-4656-a472-37157fdb7a53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8863bdde-2b28-4f98-a89c-348d6d49d089",
        "cursor": {
          "ref": "c4179182-4b68-4e56-b554-aa118ec6f82a",
          "length": 63,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "10858b8b-ca89-4767-a12b-6ec0aaa5cd8d"
        },
        "item": {
          "id": "8863bdde-2b28-4f98-a89c-348d6d49d089",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "aba7a571-a77d-4e70-92e9-d2439cb2034b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8863bdde-2b28-4f98-a89c-348d6d49d089",
        "cursor": {
          "ref": "c4179182-4b68-4e56-b554-aa118ec6f82a",
          "length": 63,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "10858b8b-ca89-4767-a12b-6ec0aaa5cd8d"
        },
        "item": {
          "id": "8863bdde-2b28-4f98-a89c-348d6d49d089",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "aba7a571-a77d-4e70-92e9-d2439cb2034b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b58171da-790d-4f0d-87b5-b702c3668167",
        "cursor": {
          "ref": "28c1cd1c-64f0-4b05-ab0d-2eb14cc4958a",
          "length": 63,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "cc0bf242-a604-436d-b1a9-2257ec582e4b"
        },
        "item": {
          "id": "b58171da-790d-4f0d-87b5-b702c3668167",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "1981830f-66c0-4fce-8979-370c114254fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b58171da-790d-4f0d-87b5-b702c3668167",
        "cursor": {
          "ref": "28c1cd1c-64f0-4b05-ab0d-2eb14cc4958a",
          "length": 63,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "cc0bf242-a604-436d-b1a9-2257ec582e4b"
        },
        "item": {
          "id": "b58171da-790d-4f0d-87b5-b702c3668167",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "1981830f-66c0-4fce-8979-370c114254fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d43528f7-98f2-41a6-baa1-3b92fd91a74a",
        "cursor": {
          "ref": "296202c8-8a78-4c25-9dfd-2b9e0881bc47",
          "length": 63,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "11690a4a-fb3c-455c-b131-7829edba36cc"
        },
        "item": {
          "id": "d43528f7-98f2-41a6-baa1-3b92fd91a74a",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "d153b19c-2109-42c4-99e3-98d8f96c9216",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d43528f7-98f2-41a6-baa1-3b92fd91a74a",
        "cursor": {
          "ref": "296202c8-8a78-4c25-9dfd-2b9e0881bc47",
          "length": 63,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "11690a4a-fb3c-455c-b131-7829edba36cc"
        },
        "item": {
          "id": "d43528f7-98f2-41a6-baa1-3b92fd91a74a",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "d153b19c-2109-42c4-99e3-98d8f96c9216",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cf2cbbb-e443-4754-9dc8-1f00a0bad549",
        "cursor": {
          "ref": "45d0e1a3-430a-4cd8-9da7-825c660b72a0",
          "length": 63,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "b34ae8e4-b988-45db-8062-e4426f5ff4e9"
        },
        "item": {
          "id": "4cf2cbbb-e443-4754-9dc8-1f00a0bad549",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "0d60088a-2cda-4577-bcc6-7d9ff0848397",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1018,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cf2cbbb-e443-4754-9dc8-1f00a0bad549",
        "cursor": {
          "ref": "45d0e1a3-430a-4cd8-9da7-825c660b72a0",
          "length": 63,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "b34ae8e4-b988-45db-8062-e4426f5ff4e9"
        },
        "item": {
          "id": "4cf2cbbb-e443-4754-9dc8-1f00a0bad549",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "0d60088a-2cda-4577-bcc6-7d9ff0848397",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1018,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b12c0307-6a9b-4c53-bfe3-6fc6d7fcd72d",
        "cursor": {
          "ref": "46e1ea46-438f-487d-a24c-0380493e8dda",
          "length": 63,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "85609870-2ce2-48b2-8e6c-d702526884b5"
        },
        "item": {
          "id": "b12c0307-6a9b-4c53-bfe3-6fc6d7fcd72d",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "a4eb7181-1f67-47a0-9766-fa026125d024",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b12c0307-6a9b-4c53-bfe3-6fc6d7fcd72d",
        "cursor": {
          "ref": "46e1ea46-438f-487d-a24c-0380493e8dda",
          "length": 63,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "85609870-2ce2-48b2-8e6c-d702526884b5"
        },
        "item": {
          "id": "b12c0307-6a9b-4c53-bfe3-6fc6d7fcd72d",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "a4eb7181-1f67-47a0-9766-fa026125d024",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adc9ba89-d504-4f5c-b0cb-371834ad433f",
        "cursor": {
          "ref": "72308d9a-05ed-473b-8a4d-2c433a2d06dd",
          "length": 63,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "0b2050d2-e25f-4db5-9489-5768e24cbea0"
        },
        "item": {
          "id": "adc9ba89-d504-4f5c-b0cb-371834ad433f",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "6bc21c74-448f-45fe-954d-dd1f17889536",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adc9ba89-d504-4f5c-b0cb-371834ad433f",
        "cursor": {
          "ref": "72308d9a-05ed-473b-8a4d-2c433a2d06dd",
          "length": 63,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "0b2050d2-e25f-4db5-9489-5768e24cbea0"
        },
        "item": {
          "id": "adc9ba89-d504-4f5c-b0cb-371834ad433f",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "6bc21c74-448f-45fe-954d-dd1f17889536",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40e02b3e-ce19-4175-869b-4da4e6e28989",
        "cursor": {
          "ref": "abcccb55-77b0-44a6-b4d0-c086ab111d4e",
          "length": 63,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "021ff056-c71f-4f38-87d5-26ae279de216"
        },
        "item": {
          "id": "40e02b3e-ce19-4175-869b-4da4e6e28989",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "174ef9c2-ec3f-4a7a-abe1-29b31f8e151c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40e02b3e-ce19-4175-869b-4da4e6e28989",
        "cursor": {
          "ref": "abcccb55-77b0-44a6-b4d0-c086ab111d4e",
          "length": 63,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "021ff056-c71f-4f38-87d5-26ae279de216"
        },
        "item": {
          "id": "40e02b3e-ce19-4175-869b-4da4e6e28989",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "174ef9c2-ec3f-4a7a-abe1-29b31f8e151c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b203dec7-695d-4404-bd1a-558f0ad42f4a",
        "cursor": {
          "ref": "09696a4e-eecd-4e75-856e-3848bc888431",
          "length": 63,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "70fcb8d5-f0dd-4603-a28a-8799ac2769e4"
        },
        "item": {
          "id": "b203dec7-695d-4404-bd1a-558f0ad42f4a",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "d7e2bf32-efd0-4ecc-89b4-38c8a2c937fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 168,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b203dec7-695d-4404-bd1a-558f0ad42f4a",
        "cursor": {
          "ref": "09696a4e-eecd-4e75-856e-3848bc888431",
          "length": 63,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "70fcb8d5-f0dd-4603-a28a-8799ac2769e4"
        },
        "item": {
          "id": "b203dec7-695d-4404-bd1a-558f0ad42f4a",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "d7e2bf32-efd0-4ecc-89b4-38c8a2c937fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 168,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aa7101d-3fef-4188-a9ff-a5be73beda73",
        "cursor": {
          "ref": "242e3048-ffd4-41d1-92cb-91d5e808c689",
          "length": 63,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "d3d627b4-9718-4844-9381-9a27acc50f47"
        },
        "item": {
          "id": "5aa7101d-3fef-4188-a9ff-a5be73beda73",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "3373a371-9c50-4b06-8781-241aa8e67e94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aa7101d-3fef-4188-a9ff-a5be73beda73",
        "cursor": {
          "ref": "242e3048-ffd4-41d1-92cb-91d5e808c689",
          "length": 63,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "d3d627b4-9718-4844-9381-9a27acc50f47"
        },
        "item": {
          "id": "5aa7101d-3fef-4188-a9ff-a5be73beda73",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "3373a371-9c50-4b06-8781-241aa8e67e94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2087993a-d471-42d6-ad8e-9d0616d3433a",
        "cursor": {
          "ref": "5c69e394-9867-4ca2-979d-d1716830d644",
          "length": 63,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "e568bfa7-641f-476c-a90e-41d5fa76fbdd"
        },
        "item": {
          "id": "2087993a-d471-42d6-ad8e-9d0616d3433a",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "01228691-b4a8-4b26-9d30-8b1b07217243",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2087993a-d471-42d6-ad8e-9d0616d3433a",
        "cursor": {
          "ref": "5c69e394-9867-4ca2-979d-d1716830d644",
          "length": 63,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "e568bfa7-641f-476c-a90e-41d5fa76fbdd"
        },
        "item": {
          "id": "2087993a-d471-42d6-ad8e-9d0616d3433a",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "01228691-b4a8-4b26-9d30-8b1b07217243",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fab74d6-71b4-424e-92bc-77f44dc4d96c",
        "cursor": {
          "ref": "954fc6e6-1b22-4545-a47d-0c4f6508c392",
          "length": 63,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f3d5d19c-149e-42a2-a6b7-8d8acecccaa4"
        },
        "item": {
          "id": "9fab74d6-71b4-424e-92bc-77f44dc4d96c",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "461b5c40-512b-4b14-8514-3d976d50dbf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fab74d6-71b4-424e-92bc-77f44dc4d96c",
        "cursor": {
          "ref": "954fc6e6-1b22-4545-a47d-0c4f6508c392",
          "length": 63,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f3d5d19c-149e-42a2-a6b7-8d8acecccaa4"
        },
        "item": {
          "id": "9fab74d6-71b4-424e-92bc-77f44dc4d96c",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "461b5c40-512b-4b14-8514-3d976d50dbf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6491ef38-5ae7-4423-a22b-4c31436f1b4d",
        "cursor": {
          "ref": "14453fa9-4081-405c-b392-59e219b84557",
          "length": 63,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "87621945-4f01-475a-b73d-67dcdd12b179"
        },
        "item": {
          "id": "6491ef38-5ae7-4423-a22b-4c31436f1b4d",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "0d75ee03-9bb1-4368-a005-6d6803101287",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6491ef38-5ae7-4423-a22b-4c31436f1b4d",
        "cursor": {
          "ref": "14453fa9-4081-405c-b392-59e219b84557",
          "length": 63,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "87621945-4f01-475a-b73d-67dcdd12b179"
        },
        "item": {
          "id": "6491ef38-5ae7-4423-a22b-4c31436f1b4d",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "0d75ee03-9bb1-4368-a005-6d6803101287",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9db4a618-9b9c-4d93-b78d-2e9c8233f9a8",
        "cursor": {
          "ref": "55340ad8-b7c1-4e87-8b32-55537e0ba6b6",
          "length": 63,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "2e6ce68e-3277-4a81-97fe-a112e2d1b9c1"
        },
        "item": {
          "id": "9db4a618-9b9c-4d93-b78d-2e9c8233f9a8",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "52a45425-75c0-44ae-bd91-8df308883c2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9db4a618-9b9c-4d93-b78d-2e9c8233f9a8",
        "cursor": {
          "ref": "55340ad8-b7c1-4e87-8b32-55537e0ba6b6",
          "length": 63,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "2e6ce68e-3277-4a81-97fe-a112e2d1b9c1"
        },
        "item": {
          "id": "9db4a618-9b9c-4d93-b78d-2e9c8233f9a8",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "52a45425-75c0-44ae-bd91-8df308883c2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1088879a-fa3f-4817-9337-88e3971f3f95",
        "cursor": {
          "ref": "b9287e6b-e7f6-4df9-ae45-a14b5bab3a8c",
          "length": 63,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "6af6226e-a683-4bdf-9f81-1b8d1dd0ff59"
        },
        "item": {
          "id": "1088879a-fa3f-4817-9337-88e3971f3f95",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "9819eda6-7e40-4f1f-ad41-bffd07c3100c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1088879a-fa3f-4817-9337-88e3971f3f95",
        "cursor": {
          "ref": "b9287e6b-e7f6-4df9-ae45-a14b5bab3a8c",
          "length": 63,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "6af6226e-a683-4bdf-9f81-1b8d1dd0ff59"
        },
        "item": {
          "id": "1088879a-fa3f-4817-9337-88e3971f3f95",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "9819eda6-7e40-4f1f-ad41-bffd07c3100c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b783cba-dba8-43be-92d0-e3a214a5cc56",
        "cursor": {
          "ref": "4741f43a-e689-4199-98e7-c210a11c28a3",
          "length": 63,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "38738959-76b3-4df6-8383-23e0d756fd29"
        },
        "item": {
          "id": "9b783cba-dba8-43be-92d0-e3a214a5cc56",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "622331f4-e8d8-4ef7-ab9b-409458c16d5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b783cba-dba8-43be-92d0-e3a214a5cc56",
        "cursor": {
          "ref": "4741f43a-e689-4199-98e7-c210a11c28a3",
          "length": 63,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "38738959-76b3-4df6-8383-23e0d756fd29"
        },
        "item": {
          "id": "9b783cba-dba8-43be-92d0-e3a214a5cc56",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "622331f4-e8d8-4ef7-ab9b-409458c16d5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a5d4a58-3ae0-4309-adfb-d2aaacb8f8a2",
        "cursor": {
          "ref": "dac105b5-58df-4e4f-8c56-a55cb687851c",
          "length": 63,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "566446e5-e97f-4b59-90e1-a48b0fd87caf"
        },
        "item": {
          "id": "6a5d4a58-3ae0-4309-adfb-d2aaacb8f8a2",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "c8b22705-c14c-4ab9-9f4a-49114129396e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a5d4a58-3ae0-4309-adfb-d2aaacb8f8a2",
        "cursor": {
          "ref": "dac105b5-58df-4e4f-8c56-a55cb687851c",
          "length": 63,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "566446e5-e97f-4b59-90e1-a48b0fd87caf"
        },
        "item": {
          "id": "6a5d4a58-3ae0-4309-adfb-d2aaacb8f8a2",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "c8b22705-c14c-4ab9-9f4a-49114129396e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8f2e487-23fc-4a4d-8d89-a92b83952c25",
        "cursor": {
          "ref": "f171303a-492d-4be8-84c0-743c0f6c9239",
          "length": 63,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "97a6ff98-36b0-4267-89cc-09ebcce77f1a"
        },
        "item": {
          "id": "f8f2e487-23fc-4a4d-8d89-a92b83952c25",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "1db79846-3f11-4e2e-9b28-94ceb1e5cf83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8f2e487-23fc-4a4d-8d89-a92b83952c25",
        "cursor": {
          "ref": "f171303a-492d-4be8-84c0-743c0f6c9239",
          "length": 63,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "97a6ff98-36b0-4267-89cc-09ebcce77f1a"
        },
        "item": {
          "id": "f8f2e487-23fc-4a4d-8d89-a92b83952c25",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "1db79846-3f11-4e2e-9b28-94ceb1e5cf83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5979419-da49-49c6-9040-3d484c2d3016",
        "cursor": {
          "ref": "4fb5d018-f10f-4819-bfd0-54678eadf81d",
          "length": 63,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "4506304c-2a28-4f51-b228-ae3e1d205c82"
        },
        "item": {
          "id": "b5979419-da49-49c6-9040-3d484c2d3016",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "2077e63c-6597-48ec-b560-f4b53f1c3e12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5979419-da49-49c6-9040-3d484c2d3016",
        "cursor": {
          "ref": "4fb5d018-f10f-4819-bfd0-54678eadf81d",
          "length": 63,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "4506304c-2a28-4f51-b228-ae3e1d205c82"
        },
        "item": {
          "id": "b5979419-da49-49c6-9040-3d484c2d3016",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "2077e63c-6597-48ec-b560-f4b53f1c3e12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "130e17e5-7bd8-41e5-9a70-a05dfc84c0d4",
        "cursor": {
          "ref": "855cd582-b1d9-47ef-9011-7af067a5f012",
          "length": 63,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "94684e3b-cb48-4aa4-9bb3-5dd35ba19a21"
        },
        "item": {
          "id": "130e17e5-7bd8-41e5-9a70-a05dfc84c0d4",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "0609ccba-05a2-4bb5-8309-66d739dc1972",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 245,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "130e17e5-7bd8-41e5-9a70-a05dfc84c0d4",
        "cursor": {
          "ref": "855cd582-b1d9-47ef-9011-7af067a5f012",
          "length": 63,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "94684e3b-cb48-4aa4-9bb3-5dd35ba19a21"
        },
        "item": {
          "id": "130e17e5-7bd8-41e5-9a70-a05dfc84c0d4",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "0609ccba-05a2-4bb5-8309-66d739dc1972",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 245,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d751657a-6358-4092-8775-38e02c944cc2",
        "cursor": {
          "ref": "7c6cf55c-89bf-49d0-b138-5bc629c64449",
          "length": 63,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "4da6c5c5-8552-4f23-bb44-c0f659593d15"
        },
        "item": {
          "id": "d751657a-6358-4092-8775-38e02c944cc2",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "72885d9d-7ca4-444c-8604-3805a6ea98c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d751657a-6358-4092-8775-38e02c944cc2",
        "cursor": {
          "ref": "7c6cf55c-89bf-49d0-b138-5bc629c64449",
          "length": 63,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "4da6c5c5-8552-4f23-bb44-c0f659593d15"
        },
        "item": {
          "id": "d751657a-6358-4092-8775-38e02c944cc2",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "72885d9d-7ca4-444c-8604-3805a6ea98c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e67339d4-2a79-44c0-a17b-91b372a9605e",
        "cursor": {
          "ref": "5b8d7af4-c41f-46df-8688-f1a7c073286b",
          "length": 63,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "9720a980-e8b2-487b-9154-36dc0092d02a"
        },
        "item": {
          "id": "e67339d4-2a79-44c0-a17b-91b372a9605e",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "bff83128-1f1e-4af6-ba71-39d69e1fea6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e67339d4-2a79-44c0-a17b-91b372a9605e",
        "cursor": {
          "ref": "5b8d7af4-c41f-46df-8688-f1a7c073286b",
          "length": 63,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "9720a980-e8b2-487b-9154-36dc0092d02a"
        },
        "item": {
          "id": "e67339d4-2a79-44c0-a17b-91b372a9605e",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "bff83128-1f1e-4af6-ba71-39d69e1fea6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe0ebd74-36eb-4f82-84e7-096df4726341",
        "cursor": {
          "ref": "644ed505-8325-4479-8fe3-045937918c84",
          "length": 63,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "b5164622-3890-40a0-aa4f-0b255a8c81c5"
        },
        "item": {
          "id": "fe0ebd74-36eb-4f82-84e7-096df4726341",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "26e766c1-962d-4bb6-854c-70de995b5637",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe0ebd74-36eb-4f82-84e7-096df4726341",
        "cursor": {
          "ref": "644ed505-8325-4479-8fe3-045937918c84",
          "length": 63,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "b5164622-3890-40a0-aa4f-0b255a8c81c5"
        },
        "item": {
          "id": "fe0ebd74-36eb-4f82-84e7-096df4726341",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "26e766c1-962d-4bb6-854c-70de995b5637",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99a57157-31ed-4fdc-88dd-99f0fd0f96ed",
        "cursor": {
          "ref": "c3ab6dcb-57d4-43c9-852d-4923b13db27c",
          "length": 63,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "ea3245ca-26a2-4800-8a0a-49b706801157"
        },
        "item": {
          "id": "99a57157-31ed-4fdc-88dd-99f0fd0f96ed",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "e1007113-a5f5-4306-99b6-f262b1088d99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99a57157-31ed-4fdc-88dd-99f0fd0f96ed",
        "cursor": {
          "ref": "c3ab6dcb-57d4-43c9-852d-4923b13db27c",
          "length": 63,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "ea3245ca-26a2-4800-8a0a-49b706801157"
        },
        "item": {
          "id": "99a57157-31ed-4fdc-88dd-99f0fd0f96ed",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "e1007113-a5f5-4306-99b6-f262b1088d99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a87f66db-a87b-4ba6-9989-88cc4926da53",
        "cursor": {
          "ref": "8f10279a-a1b5-453a-ae0f-11cf08f3a6c2",
          "length": 63,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "34262857-c9eb-40c3-b68c-2b19c887f717"
        },
        "item": {
          "id": "a87f66db-a87b-4ba6-9989-88cc4926da53",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "8bb276e0-cc34-4461-a93c-f21fd6b9a3ce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a87f66db-a87b-4ba6-9989-88cc4926da53",
        "cursor": {
          "ref": "8f10279a-a1b5-453a-ae0f-11cf08f3a6c2",
          "length": 63,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "34262857-c9eb-40c3-b68c-2b19c887f717"
        },
        "item": {
          "id": "a87f66db-a87b-4ba6-9989-88cc4926da53",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "8bb276e0-cc34-4461-a93c-f21fd6b9a3ce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "563a6d5a-9648-408c-8550-2c5c8a2c6c52",
        "cursor": {
          "ref": "e05ee68e-e784-4b46-9fbb-153cdaac8bc6",
          "length": 63,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "00e0bf0b-dd7f-4212-8e64-1de1c7a5c9cd"
        },
        "item": {
          "id": "563a6d5a-9648-408c-8550-2c5c8a2c6c52",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "185561e8-93cb-4f8f-a1bf-78d45a58db7d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "563a6d5a-9648-408c-8550-2c5c8a2c6c52",
        "cursor": {
          "ref": "e05ee68e-e784-4b46-9fbb-153cdaac8bc6",
          "length": 63,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "00e0bf0b-dd7f-4212-8e64-1de1c7a5c9cd"
        },
        "item": {
          "id": "563a6d5a-9648-408c-8550-2c5c8a2c6c52",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "185561e8-93cb-4f8f-a1bf-78d45a58db7d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2e559cb-356f-46f3-b198-edd2aeef60f5",
        "cursor": {
          "ref": "688f01ed-4c12-4286-ab38-e636157087fe",
          "length": 63,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "617e11d9-0a57-4dfd-b8cc-428e2b7327af"
        },
        "item": {
          "id": "a2e559cb-356f-46f3-b198-edd2aeef60f5",
          "name": "credentials_issue"
        },
        "response": {
          "id": "d4341d6c-ffff-4fe4-a348-2dee6093c5b4",
          "status": "Created",
          "code": 201,
          "responseTime": 857,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2e559cb-356f-46f3-b198-edd2aeef60f5",
        "cursor": {
          "ref": "688f01ed-4c12-4286-ab38-e636157087fe",
          "length": 63,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "617e11d9-0a57-4dfd-b8cc-428e2b7327af"
        },
        "item": {
          "id": "a2e559cb-356f-46f3-b198-edd2aeef60f5",
          "name": "credentials_issue"
        },
        "response": {
          "id": "d4341d6c-ffff-4fe4-a348-2dee6093c5b4",
          "status": "Created",
          "code": 201,
          "responseTime": 857,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "90f5da46-ce7d-48cd-8ec7-5c0bbf52c31d",
        "cursor": {
          "ref": "fcd92049-5f56-46a0-80f1-4d231f9d2ea0",
          "length": 63,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "ba0f5f2f-9de0-4c26-aea7-4690a6eefdf1"
        },
        "item": {
          "id": "90f5da46-ce7d-48cd-8ec7-5c0bbf52c31d",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "004478d3-16e6-42f3-b388-71c38f2bc27b",
          "status": "Created",
          "code": 201,
          "responseTime": 351,
          "responseSize": 607
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90f5da46-ce7d-48cd-8ec7-5c0bbf52c31d",
        "cursor": {
          "ref": "fcd92049-5f56-46a0-80f1-4d231f9d2ea0",
          "length": 63,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "ba0f5f2f-9de0-4c26-aea7-4690a6eefdf1"
        },
        "item": {
          "id": "90f5da46-ce7d-48cd-8ec7-5c0bbf52c31d",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "004478d3-16e6-42f3-b388-71c38f2bc27b",
          "status": "Created",
          "code": 201,
          "responseTime": 351,
          "responseSize": 607
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81f66a8e-26e6-4efb-a99e-cb11c26b4b08",
        "cursor": {
          "ref": "ba1f4af9-81e5-4edf-bd72-7d61eca8a6c7",
          "length": 63,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "f24958e0-52a3-4b7d-8698-6acce45659ef"
        },
        "item": {
          "id": "81f66a8e-26e6-4efb-a99e-cb11c26b4b08",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "5891a839-c047-4d25-a1a1-2f334bb8afbb",
          "status": "Created",
          "code": 201,
          "responseTime": 337,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "81f66a8e-26e6-4efb-a99e-cb11c26b4b08",
        "cursor": {
          "ref": "ba1f4af9-81e5-4edf-bd72-7d61eca8a6c7",
          "length": 63,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "f24958e0-52a3-4b7d-8698-6acce45659ef"
        },
        "item": {
          "id": "81f66a8e-26e6-4efb-a99e-cb11c26b4b08",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "5891a839-c047-4d25-a1a1-2f334bb8afbb",
          "status": "Created",
          "code": 201,
          "responseTime": 337,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "942a53f9-6bc6-42b0-8d48-3ecfe6299700",
        "cursor": {
          "ref": "4a6bcfd7-42dd-4373-b16c-35ef766a375a",
          "length": 63,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "9ffa1fdf-e77f-4a7d-b481-d0fc2449ee2f"
        },
        "item": {
          "id": "942a53f9-6bc6-42b0-8d48-3ecfe6299700",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "71ae6bbf-68bf-427b-8ebc-50475fff2429",
          "status": "Created",
          "code": 201,
          "responseTime": 312,
          "responseSize": 576
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "942a53f9-6bc6-42b0-8d48-3ecfe6299700",
        "cursor": {
          "ref": "4a6bcfd7-42dd-4373-b16c-35ef766a375a",
          "length": 63,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "9ffa1fdf-e77f-4a7d-b481-d0fc2449ee2f"
        },
        "item": {
          "id": "942a53f9-6bc6-42b0-8d48-3ecfe6299700",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "71ae6bbf-68bf-427b-8ebc-50475fff2429",
          "status": "Created",
          "code": 201,
          "responseTime": 312,
          "responseSize": 576
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e7098e4-a861-4068-b0ba-c2135a84a479",
        "cursor": {
          "ref": "4568d5ae-6002-470c-9832-db71291d9de2",
          "length": 63,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "3201e367-960e-4155-bde7-339a4e032484"
        },
        "item": {
          "id": "7e7098e4-a861-4068-b0ba-c2135a84a479",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "a69b147e-2ef9-43d6-8020-26dce333f297",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "7e7098e4-a861-4068-b0ba-c2135a84a479",
        "cursor": {
          "ref": "4568d5ae-6002-470c-9832-db71291d9de2",
          "length": 63,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "3201e367-960e-4155-bde7-339a4e032484"
        },
        "item": {
          "id": "7e7098e4-a861-4068-b0ba-c2135a84a479",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "a69b147e-2ef9-43d6-8020-26dce333f297",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "2c2de19b-8855-4f57-b146-efac0e40bc95",
        "cursor": {
          "ref": "a7c7c275-5e9f-431a-9d60-9ad032854b8b",
          "length": 63,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "482ac1e3-8c9d-40e7-ab83-2f68340c5a1f"
        },
        "item": {
          "id": "2c2de19b-8855-4f57-b146-efac0e40bc95",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "87a83775-d606-47b3-93d5-fa2e062bad73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "2c2de19b-8855-4f57-b146-efac0e40bc95",
        "cursor": {
          "ref": "a7c7c275-5e9f-431a-9d60-9ad032854b8b",
          "length": 63,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "482ac1e3-8c9d-40e7-ab83-2f68340c5a1f"
        },
        "item": {
          "id": "2c2de19b-8855-4f57-b146-efac0e40bc95",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "87a83775-d606-47b3-93d5-fa2e062bad73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "54a13be7-b941-46f6-afa3-a23b6902462e",
        "cursor": {
          "ref": "a5bb6a94-dfaa-49c8-b616-9b98514085ba",
          "length": 63,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "88f74f8e-39d3-48b3-8642-2b478eb82a82"
        },
        "item": {
          "id": "54a13be7-b941-46f6-afa3-a23b6902462e",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "6bcb3e1c-e74d-4418-92d1-fb96788c6932",
          "status": "Created",
          "code": 201,
          "responseTime": 345,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54a13be7-b941-46f6-afa3-a23b6902462e",
        "cursor": {
          "ref": "a5bb6a94-dfaa-49c8-b616-9b98514085ba",
          "length": 63,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "88f74f8e-39d3-48b3-8642-2b478eb82a82"
        },
        "item": {
          "id": "54a13be7-b941-46f6-afa3-a23b6902462e",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "6bcb3e1c-e74d-4418-92d1-fb96788c6932",
          "status": "Created",
          "code": 201,
          "responseTime": 345,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31ef57ca-4c61-4b0d-b28c-da3be9d8afaa",
        "cursor": {
          "ref": "2dda453b-efca-48bc-b1e6-2b8dbaca177f",
          "length": 63,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "a5a78c55-a2b9-4486-b90e-4fea634c77da"
        },
        "item": {
          "id": "31ef57ca-4c61-4b0d-b28c-da3be9d8afaa",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "756a9fb3-c70a-444f-9bcf-1907f6349b84",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31ef57ca-4c61-4b0d-b28c-da3be9d8afaa",
        "cursor": {
          "ref": "2dda453b-efca-48bc-b1e6-2b8dbaca177f",
          "length": 63,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "a5a78c55-a2b9-4486-b90e-4fea634c77da"
        },
        "item": {
          "id": "31ef57ca-4c61-4b0d-b28c-da3be9d8afaa",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "756a9fb3-c70a-444f-9bcf-1907f6349b84",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73c234af-f0ce-4801-9e39-2a932a526b9f",
        "cursor": {
          "ref": "f3e7b8d5-5053-4946-943e-a8445189680e",
          "length": 63,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "4aad5f97-29af-48f2-ba1a-1853b32b1032"
        },
        "item": {
          "id": "73c234af-f0ce-4801-9e39-2a932a526b9f",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "26296456-2557-42db-b0da-c51ca64bcf51",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d256cc6-e9c7-4389-b465-108d7dc032be",
        "cursor": {
          "ref": "df576db1-0f2a-42ed-abe8-2775e2ce366d",
          "length": 63,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "2cd000ed-7346-4ed0-8b91-7b2f18f14325"
        },
        "item": {
          "id": "9d256cc6-e9c7-4389-b465-108d7dc032be",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "2b6a34d7-be33-46ba-b7e5-16b02d94e4cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 269,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d256cc6-e9c7-4389-b465-108d7dc032be",
        "cursor": {
          "ref": "df576db1-0f2a-42ed-abe8-2775e2ce366d",
          "length": 63,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "2cd000ed-7346-4ed0-8b91-7b2f18f14325"
        },
        "item": {
          "id": "9d256cc6-e9c7-4389-b465-108d7dc032be",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "2b6a34d7-be33-46ba-b7e5-16b02d94e4cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 269,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b4ee315-7e98-4a39-8095-b00ff08f337b",
        "cursor": {
          "ref": "a339c2c4-09b2-4cc2-8903-736fc190b420",
          "length": 63,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "6b95be98-db6c-458a-b9ea-9620c412468a"
        },
        "item": {
          "id": "8b4ee315-7e98-4a39-8095-b00ff08f337b",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "d9c2a6f7-0ed8-4c64-8dc7-247872622aa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b98d3006-6e79-4a8d-90a7-f14800f417e1",
        "cursor": {
          "ref": "e79e437b-777a-416e-a1cf-95a1c8db609d",
          "length": 63,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "abcf10e5-aad2-4910-a58d-f29b7b60c6c3"
        },
        "item": {
          "id": "b98d3006-6e79-4a8d-90a7-f14800f417e1",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "fc4ef6ea-bb3b-4157-81b8-cfa00c3cecd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 165,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "930ec244-3881-4bd5-b57f-356d492cd181",
        "cursor": {
          "ref": "532ad42a-5d90-4964-9cda-cbea079fdca4",
          "length": 63,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "fb9f9d6d-e459-43c4-a74d-6c4c9b88743c"
        },
        "item": {
          "id": "930ec244-3881-4bd5-b57f-356d492cd181",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "d666cc44-096c-4240-818a-09d01a1b7575",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e98e95b-1ad6-4382-a8b7-14dd684c8e08",
        "cursor": {
          "ref": "c0f02b6d-b5b5-4f0e-ac2b-088c2f205860",
          "length": 63,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "8f6d28be-8968-4988-bfc8-84f76d2be038"
        },
        "item": {
          "id": "3e98e95b-1ad6-4382-a8b7-14dd684c8e08",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "55182cf4-668d-4783-a7ba-3529e48df617",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d66df27b-86d2-47af-b943-304afdcf6197",
        "cursor": {
          "ref": "ddfdbe68-e1c4-4694-b5e0-07ceaaeb9cce",
          "length": 63,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "1dac6251-b03d-4f1c-a7fc-c891875fb5c6"
        },
        "item": {
          "id": "d66df27b-86d2-47af-b943-304afdcf6197",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "aaa06d21-bdd8-458e-9134-55fb511abd35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa5bb6b2-ea33-4dec-aa0c-ea82aa333340",
        "cursor": {
          "ref": "c1d7f3c4-0672-47e5-90f9-a3843b8979f5",
          "length": 63,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "43649800-69cf-4301-9781-a3997fd16900"
        },
        "item": {
          "id": "fa5bb6b2-ea33-4dec-aa0c-ea82aa333340",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "20c6fb43-e9f0-44aa-955d-bc2e10e9f933",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a649b44-d776-41c5-85ed-011179f09d6c",
        "cursor": {
          "ref": "29d7b7a7-7a66-4161-a09e-2655ceed0db0",
          "length": 63,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "2e1d8e18-d1d9-4973-a658-8573d967e532"
        },
        "item": {
          "id": "1a649b44-d776-41c5-85ed-011179f09d6c",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "8e900990-8b9f-4d36-b445-c5b8e49ae9b1",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fca91c27-1da6-4473-8e8e-608eb6ff3fdb",
        "cursor": {
          "ref": "d0f5175a-95e4-4eb5-b7b5-8cc9fcf7886a",
          "length": 63,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "3b69a169-42ca-4d61-88a3-62b12c825173"
        },
        "item": {
          "id": "fca91c27-1da6-4473-8e8e-608eb6ff3fdb",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "0248e858-93c1-439d-aa61-246d3a38bd11",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fca91c27-1da6-4473-8e8e-608eb6ff3fdb",
        "cursor": {
          "ref": "d0f5175a-95e4-4eb5-b7b5-8cc9fcf7886a",
          "length": 63,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "3b69a169-42ca-4d61-88a3-62b12c825173"
        },
        "item": {
          "id": "fca91c27-1da6-4473-8e8e-608eb6ff3fdb",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "0248e858-93c1-439d-aa61-246d3a38bd11",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f808b75a-7b29-4563-82b6-987cafe4fa1a",
        "cursor": {
          "ref": "ee3aa5fd-7bcf-4830-8bfb-ca286285052a",
          "length": 63,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "53d73aa7-e21b-4e53-9daf-1324de98573c"
        },
        "item": {
          "id": "f808b75a-7b29-4563-82b6-987cafe4fa1a",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "0a330a8b-493f-41c0-ac55-129bc01b782f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cae82ce-28ac-4682-a191-194bda3f3ef1",
        "cursor": {
          "ref": "e5cf28a1-a48b-4e85-8195-70eded204cb5",
          "length": 63,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "e33b28ff-696f-46b3-8368-8662189e165d"
        },
        "item": {
          "id": "6cae82ce-28ac-4682-a191-194bda3f3ef1",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "fc96c27f-d265-41e7-9743-129f7629818c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "6cae82ce-28ac-4682-a191-194bda3f3ef1",
        "cursor": {
          "ref": "e5cf28a1-a48b-4e85-8195-70eded204cb5",
          "length": 63,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "e33b28ff-696f-46b3-8368-8662189e165d"
        },
        "item": {
          "id": "6cae82ce-28ac-4682-a191-194bda3f3ef1",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "fc96c27f-d265-41e7-9743-129f7629818c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "321358d3-cd89-495c-8fca-0175337ff665",
        "cursor": {
          "ref": "db56ce24-60a6-4e8c-8867-ba6a7592e6ab",
          "length": 63,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "5f5cc371-10e2-4a66-b206-4bb0c95f6b37"
        },
        "item": {
          "id": "321358d3-cd89-495c-8fca-0175337ff665",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "633b2d41-90b2-435a-a585-ae6ef8a52fdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "47abf4d0-f923-4bd7-8008-a455b1d15108",
        "cursor": {
          "ref": "c9c59a00-6497-4b57-a797-1e36ef15cf18",
          "length": 63,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "ead8099a-9930-4223-88e2-ba1d4ba70fd4"
        },
        "item": {
          "id": "47abf4d0-f923-4bd7-8008-a455b1d15108",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "def72f6a-67d8-42ea-9b69-7d2f88fa4441",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47abf4d0-f923-4bd7-8008-a455b1d15108",
        "cursor": {
          "ref": "c9c59a00-6497-4b57-a797-1e36ef15cf18",
          "length": 63,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "ead8099a-9930-4223-88e2-ba1d4ba70fd4"
        },
        "item": {
          "id": "47abf4d0-f923-4bd7-8008-a455b1d15108",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "def72f6a-67d8-42ea-9b69-7d2f88fa4441",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40de0ebe-cf54-42a3-8026-3dd6ebbcb4de",
        "cursor": {
          "ref": "b2cd901c-92fb-4a29-b81a-9caa846a7cc7",
          "length": 63,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "78c49d16-2dba-4301-9a7d-b66f96cae7a9"
        },
        "item": {
          "id": "40de0ebe-cf54-42a3-8026-3dd6ebbcb4de",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "57441a0d-4641-42bc-a2f0-8bea5f74b458",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 31,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}