{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "95d543f6-7d11-4aad-949b-1d02f7b70720",
        "name": "Clear Cache",
        "item": [
          {
            "id": "ab4b01b3-baee-4bc8-bca5-021f2993ea5d",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "877e2ae3-ad91-4c3c-bf07-8e034f87bcb3",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "51029560-c812-4839-9d7f-21e4fcd9f84b"
                }
              }
            ]
          },
          {
            "id": "c26c7248-4f83-4ecf-a1f8-066e894dad8d",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "83efd468-cfd9-4d74-bcc6-1a50f8951a4b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "1f40522e-4edd-4aaa-b36f-ffe6d177f073"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "6d61667f-84fd-437a-be89-942acd95c58f",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "bbf5d6e8-132c-4597-9e13-5df67b6c5995",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b4295de1-8f9c-4af6-aeb1-7871378e485b",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2c2457f1-1cf3-4964-888a-d70a7c5ee1d5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0f2e7db9-8211-4713-af21-51d4cef3770e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3b9c7713-2590-4c1e-98b9-a22fcc54a493",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8f9fcbd5-012c-4db6-b487-99211623aa24"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7f329e0d-62f3-461f-9280-19b284ebbc6b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "827ebbe0-f201-46ca-b492-42159543d45b"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "503810a7-da04-4aee-916f-8973fe2141ef",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "c0c38311-55cd-4763-9537-270e1c497d72"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b7e13862-15e9-4d39-b3f4-51cd76051178",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fd85698e-cada-4a57-b6f4-b63070a38e6d"
            }
          }
        ]
      },
      {
        "id": "4f382be4-ffe6-4945-aea9-c91ead303180",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "b0cc3f11-a22e-46bc-bd25-764345b5d00b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "33403d45-d04d-4358-92b5-30afeef417d0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2aef5d12-3374-46fa-b2ee-7c804864e755",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea1c9117-a83b-4628-8072-1c29cca6693a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4c20a2d3-31d3-48d1-971a-ef889e1c637d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6200a25-a956-4fc0-94ac-66ce1227481c",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18312fee-6515-4a59-9e14-fb13146d227b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e43abc4f-a533-48dc-b3a6-4cf44d67a43f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62f48150-07a7-40bd-a592-f991269e47ea",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e5bb4a7-246c-435c-90ff-8c9f846da549",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2bf982a2-6b82-4fbb-9d26-8dcc38945466"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "42811b26-c216-4f23-a91f-bd7450a87ec7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "038592de-20c9-42ee-a634-f7070ffc1fd8",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ab636ef-729f-438f-bc51-414d85158339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fa6ba269-48e8-49f2-8a5d-c3b3be4fdf35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb32a1d9-213a-4b26-a88b-4c7c30204ae7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e54b555-05f2-4f42-b4e4-e6fd70bf1567"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2204a10-4c22-4bd5-b32b-9f116dc0a512",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db5f7101-7d86-4088-aab3-390e3bbb1642",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ab2f8cba-ad0e-4a0d-bf05-250a9eb0a5bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ab47ad1-4216-4a41-a38a-e6ff6dfda665",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "25907970-6ef3-4240-b45d-f26665c07364"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "fdb39c06-d9f5-4022-a18c-20c06bbbbb85",
            "name": "Positive Testing",
            "item": [
              {
                "id": "cb83d2b6-4d8c-4bef-8035-aab1c48342cc",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "31a7587a-f2f0-457f-8e91-53e9e3786fd1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "e73595e5-5c71-4c82-9a84-8797c73cbf6f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d84e4398-2d1c-4acf-92ed-55d20d721bb7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "1dbc5db9-a354-47d9-9c31-e86a05ab744e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2e157074-57af-4257-8dff-9f6f99ef629f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "92d0ad6b-ca93-41b2-adf1-004ce433561b"
            }
          }
        ]
      },
      {
        "id": "889020ce-8388-4fbd-b000-c94e7699f341",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "5d5d9a66-71c0-450e-a6a5-496735d13ebe",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b2435a6c-4271-4093-923b-1591d619f7f6",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "eb62ba95-eb93-441f-ae70-8d4611117974",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75270536-4798-465c-a06c-a221aec64e0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9756f1b-b489-4f40-ae5b-85e57253cbf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79b4d145-f9c8-4c67-b555-a34c6c252bb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b29f0401-54cf-466c-91a2-e8e8935bc166"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6c30fdb-0817-4cbe-9599-ad0e82865584",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da08501e-6e48-4ed6-abc4-e424ed403866",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69c14f74-51a6-42af-abc9-60afb263a7e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f2df540-57a8-41fd-991c-14715482125d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "909510c4-30cc-4026-9317-88a6fac117f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a10118c-dca7-4080-83f0-9e2f8052e262",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae52e44c-f2a1-4e30-aba4-c2938bd746e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08a1562e-8e6c-4b71-b135-c6c03b2dc441"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dca9a9e-50e5-434c-9227-92681fa0b89a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0bf575cd-c664-46f8-b7b1-9d5c4f279d16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65cfe75a-7377-471e-9f58-d95de9da2a68",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a66eeef8-b876-4830-b4c3-4a5974b269f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf8d05ed-6c74-499e-add7-b86a0fa4f588"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f74a760-2bf4-4ed4-9bb7-5b65da8c211a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "92bfd0e1-4fae-483b-8369-e8fafb7f7b6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a014a503-2054-42f3-9915-1dab3a37a24d",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e8781fd-9ef9-46ec-b16a-e0a7746be8bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1026ae6a-8db0-4624-8670-b4bc8f252262"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3247f313-0a81-4e10-ab6a-07c00cdaf2f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9ad68cf0-e525-482c-937b-9a6c35a0320e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc9f8d1a-ad37-40e7-8a67-e32822e820c5",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b173be0a-d574-462c-9b0a-d607d70547cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edccd079-dd6d-4be9-b04e-52b916fa0eec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5368a42c-1bcb-431a-98f6-e09c55d214e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a04b65d5-a177-4150-a731-b7a8ae5bdce5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09e55fdf-f7ff-4a69-8d1e-7c8b2dacfaf8",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1564889-da13-4b61-b3fa-93b7faa65316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e037bf3-c121-4c27-932e-08eeee7dd9f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02975336-37c3-4ef0-a952-4abcb8e98642",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4b9dfca9-4a97-4180-bb44-9fec3c952fa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4397c50-6521-4801-acb1-0cc28cb6a759",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba6aaf17-d6ef-4f1e-8cd0-1be40df55cf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffd16aa7-d781-4f84-a244-1000dfb9e3b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e06ad18c-8f6b-478d-8497-5d2a937a2705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c3c472ec-3db5-496e-9c2d-30f9b7458f85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a94cf6ba-0d97-4dfc-a11e-4ac71b7332c8",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1ecb720-25f9-4cc4-b4d9-815c946c7f47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75c09933-c00e-4654-b18f-11be8295e955"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17c7e54d-28bb-444b-a126-45c0ab521373",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7292214e-4fe4-4072-9e20-182ca2d9a382"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a1bb5f9-3e98-42d4-813e-e233c8295e35",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60c25d47-92a4-439f-90c8-67f1e0841142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f77ac34-c81d-44ef-ae09-ec75a9e11726"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b723fac-53e0-4d98-ab8a-4851aea7e60a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "15b51468-eb87-4b1d-818e-f6c3921f1f09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38ba05ad-7ee7-4a9b-9b30-825d189d0ba1",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8f4a4a6-2a3c-4e01-831d-f9812dd3b12a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7388896f-11dc-45df-8360-5052c2fd6021"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99768c21-70a8-4d87-983c-e7669cbfbf10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cc7661e5-fcdb-4b77-a062-e8981499c833"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc0d9e34-95ed-4321-b444-3b0260a5cb2a",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b0fb893-5ba5-48dc-ae7f-c3c74261cdc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06115f26-ad0a-404b-b8c7-e96071ca6a9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b852c361-3306-4bff-90e6-f371073150d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "077b88bd-a433-4897-978d-3afaf600a2a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c034fc9-c6f2-4ba1-8643-277473adb2f7",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e120c93-9ba0-4d69-bf5c-502da0533842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b18e511-11bf-4de8-9d79-facdc8c672e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32120c2c-ed78-450e-95a6-55ee477ecd58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d3ff2085-d6dc-4245-808a-51ecaa14e047"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e2ef829-9dbd-404e-8c35-365de0a06524",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa26bc11-b08b-44ae-b89e-e544eed65af6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62652d7f-e566-4b53-a4b8-41ec768fa4ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9540f62c-5b55-4b61-9898-8850e022403d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "db744acb-1876-4dcd-805c-079b4d2cb96f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29e51782-750d-4914-b3b7-66dd8b8c714c",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69ada63b-1b5f-44d7-be74-b7c345bf5deb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afcd976e-7c8e-49d3-a980-d17dfd8c5d96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b311232d-9759-4ca3-a77f-0b2757a821d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "849479c9-682a-42d0-ac6f-01cbe1e5a45d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3479fffa-ddb0-4153-88b7-e85375194d95",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ca01715-1faf-44f3-a915-1de7fe6d9b0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d566c6bd-5318-46ae-aee8-629ba182e277"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "927cc00c-6d78-4f74-b489-c3416031ca27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8261f0f8-5db5-47ea-aef4-464d8726f544"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20ba04da-0445-49c5-a6f3-4f1d54861802",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2502952f-0cb4-40ec-9dd0-859250c3cbdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69aa8279-1b00-4535-9815-f859b20f9b97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbc672c4-62e7-470b-8aa0-bf1667681b5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6ec699e1-130f-48bf-a967-6916463247e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8124b04c-1217-4207-9cfb-eae743946ec9",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "163ca661-4a53-45ac-a47b-d8e06ae9870e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c61a81f4-22e2-4a99-a581-92bce53e7bc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4501d1cb-cf13-465d-9d1e-67de61589c15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "50223245-3b3b-46a5-994d-4a0d4cea29f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85b857fe-d33f-4b4d-be08-e9b2919184ad",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8009da61-3fc4-4bc8-aa8b-1b9523190421",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6664ed5-ee8e-49aa-8031-597254e982f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "182c9552-fa03-463b-bb9d-d5aa96439723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0d1f7b62-5c7f-447e-84d4-a5ce120e7e32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36edd8d8-9f81-4096-8ef6-f5358a3974ba",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aabc250-ec08-45bb-8232-ada32af8e62a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08392ee6-718d-4182-b44f-8028554588d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b330cf29-ecc8-48ca-b5a7-3ac7d6c63b1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "796ce5c0-d126-4985-b51a-ba49748e89b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99b51f5b-b1ea-4851-a7d6-4a8b1880ffcf",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35218a7b-a45a-4049-8fe2-51e740b14f0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06e4d5bf-52b8-463f-9fa2-4fb8f7566be8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61574bd7-5441-4225-b7b9-4468ad4ecf14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "233e9eef-1bb7-4e7f-a7a9-c50f9c171309"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc658661-dece-4384-b876-51a07bffbbeb",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5be0ac10-af93-4003-b37e-8d6c2f8c3968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "538c509b-963e-4cd5-bd32-df3cca0f4fd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "068cc751-542e-444c-a896-bf8cb0f1e808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "52addd45-2fd8-445b-a912-a626272e9a06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac0ad484-9242-4335-a889-aac9f7c418db",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67f3ee15-84c7-4ee9-88e2-cccece54d21c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e05f2ccd-329f-4e09-b868-cf6f0068a14a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c51471ae-ba88-4400-9f7b-43d8105ebe74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7a52353-782e-486e-8572-f459234fdbde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32ed6be3-53cb-4829-8b17-e744cbd349b9",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1841bc8-53d6-48bb-a61a-fcfb45a99479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ce4b5ee-d942-415b-abfc-7905ac228d65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c18c2aa-9646-4876-8e37-b7301f079c33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "679b86f8-62f8-425f-83cb-7bbad677a10c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e53bfd54-9303-4f43-86a5-591554508c00",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "110487e7-0bcf-4979-be5e-ebb8fba753c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08c64848-e763-4c01-82fe-932681b86670"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39d9a2a4-dec5-4daf-a768-8642840aaece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1908302a-ab23-48ef-bb98-073326aba274"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4001b7cd-1776-4606-9199-bba2ad24c7ea",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f39a4e2a-bd7b-4899-89f3-4c4f89c26bcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b75c019-6824-4d40-837d-dd07fe344908"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc7b5b82-e3a1-418f-8268-23d75a136aee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "1cf55aaf-835b-47cc-a404-deba9ea4e7d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfa0967f-8697-4f05-af01-a9bdd80e3fdf",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1544e27-37e9-4105-9e47-09f895afe20f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b77b3571-e583-4142-852b-c4b1f8fb2e21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87d8a9e6-bdc7-4da9-b4da-5c8a11c5e604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "87590a94-0301-445c-82da-daf88c0bb93c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bb0a1d7-d15a-48df-8ab2-24ce8c2ecf63",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4171086-8669-4f78-ab89-1b51bd3d9667",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1663373-ca41-4066-9275-ec5f3c4f0ba0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a8e1894-4857-4f7c-8d09-be7f15471c36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "04773037-69e9-40cc-8baf-eb989ed73cef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e63b56bf-2100-427a-a222-4ab9db83ef31",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a18461f-1b0d-42ec-94b9-4d6f83bb9a1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a539a444-52e7-4adb-9d7c-4b9f6556e7c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6ebdf1e-c320-4799-964a-2a7047bf5297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f8cd1c6-ae0f-47f3-ae59-9d9e69096822"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e51a2fc-23eb-4631-848c-59777c454db7",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a121c6cf-54f7-40b9-8284-95b903396adf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e7d831b-6732-4857-bdbc-c02220f981c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02402e3d-9735-4915-a0d2-510454d68449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "25c91b28-23c4-4b99-adcd-8b544449d611"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d8e8abb-eaf4-4213-955e-9b3df3abb6cf",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bf05ce8-65cc-473d-9568-a39b5e0eb0db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91ff8140-fa8a-49ab-bff3-fc84ffd7dbde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22c2a4dd-1345-4f72-9f61-ec9bf13f00da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "004731a2-3a8b-409b-8522-01f2574258af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e2437a4-c549-4851-a496-484ecd92fd41",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6e74b82-9d50-44ee-9c58-3fa6e052b4b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1688122-5bb6-46e9-bfbc-c080c4ea952b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4102a36-cad2-4ef7-9035-f580aba886ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7446cc8-b544-41ba-89a7-941d9e59802a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3aa77eb-0ea9-47d6-b111-944961597e2c",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b808c15e-a041-438d-b99c-7f8b8885d7e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "059f418c-b1ad-4d3b-8767-219622c66dce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba9be5bb-46d1-4e13-9600-24b1e358676e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed82b7ab-66ff-4599-a7dd-ec1217001753"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fb0e02f-fe64-48c2-83c0-99069cc6d44d",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f25c3b3-866f-4e98-b21c-b5c5cc7e9752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2bf7e57-ba27-47b2-ba20-ec8b7b03733a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bec2791-006e-4e7c-baaf-c672f8ac86d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ada76ba-89eb-4db9-a7d8-7c6f59f58d0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6534961-6137-4026-9d97-bad06318db8b",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95807bea-8caa-45e1-81b6-76a57c1bbe21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdb5ba0e-7ea2-43a2-87f5-bdf1655d744d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beee38f0-aaaa-4752-a088-b11ffc98faca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ee4c050-3557-463c-bc63-27fa60b0f5a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1bab627-498a-44df-b532-c7e88ac01707",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4951a1d7-edae-4dc3-b362-1cbdb9df402b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55782896-5290-4e9f-8a87-b00c0c815405"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cac8b02-ff8e-44af-a39b-b0c85e70ec44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "961dc845-6354-42ce-afd7-307d4b6af375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb658f70-16ae-4842-9ef9-cdc0105be56c",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "861df8a3-cd09-49db-b931-2a2c2f6d9f17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e50e12a-b7f8-4850-932b-c7cb244d0926"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "640e46c2-6eaf-4d19-ae24-2e0a0a2698a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "8bdf47f1-9a04-41d5-9965-ee310fbf1e56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd6b859e-11e3-447e-9979-40a015745bba",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "188a42bc-0550-4e8f-b9b4-1f24162c160a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a3bb7709-fc20-4f09-be0c-70f87140db11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cefeb774-e1bd-4996-b58e-bda2cc836b1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "62cc4eb8-5592-4488-b7ee-aab39a2de353"
                        }
                      }
                    ]
                  },
                  {
                    "id": "202b7019-d3ab-44f5-9b78-698a9a54e4a1",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89aa67ff-8e9a-414f-b591-11b6dc459a34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4092bbff-40ce-4c33-952e-b82cfb711398"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ee26709-6a16-4c29-9fa1-957442637fc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "91fea82b-c694-49ea-8250-a08a0b487394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9cffc69-987f-405d-b3fb-4e463dc347f9",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05fd8420-0d6e-4e35-91da-83d7c2babc33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b41061ec-d88c-480c-8c64-8c5ce565bfb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "487a2913-192f-483b-b9fd-5aa77b682ac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8d52d4c2-f061-4d96-9945-54c3052a3b7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55a8e4c4-b90b-477b-ae8f-1fd9b6c056db",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3df5685-7585-40b0-b367-c3f6f7451221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e0ca89f-9621-4f7e-825a-56a569e95efa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3234680c-42d7-4a55-a636-75d3e263d5e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3bf7b50d-dcc3-47eb-9911-f65ab5d299c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77b9b2d8-2e50-4d38-9a1c-fd720f9406e3",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dad1be27-c1c8-45c4-bbab-71e1f9c253c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9de1ee0-718a-4f77-b249-5813683daf3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4349ce38-9cbe-4d56-b77b-11c35ccc356f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "596d0270-72bd-46ae-a520-1c46b4b41f87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5155df04-7e76-4e6a-be42-987d3f69b714",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24d4fbfe-92b0-4b64-9934-7d06e61f1511",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4e33837-ef48-4a90-a2f7-790390f4dfb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa4f1398-5c8c-4d18-ab13-ebd515db9ddc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5a832ed7-1f01-4b66-8dcf-9a31919d52c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47706c71-ba32-4251-857e-65bcaa8a5df3",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "334537f4-9a19-4806-a6a8-70d66946b0fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa7ee015-9a30-4950-9ae6-2509ab1da14d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93be87b2-3aed-4ebb-8c32-1342a9c53424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "c803c951-c834-4e27-bcdd-9fb5644f2d09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d591d16d-7abc-475b-af3b-9d1dd701e925",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "892561e9-2945-48e7-8267-f61023bf71f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca0c6c8f-803e-4b62-ae9d-3c31fb8671ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1692d5de-dbc5-4550-99e4-15457ed264bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b4403432-82c1-4e32-9059-fb39cdd5c6e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e410fd64-99a9-4a53-b66e-a3c8d3907a34",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0014262d-827f-4781-b229-421c12dc4cb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60509d21-7343-4171-9803-466ab9a5aef5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35aa8dce-9225-49eb-be30-d7782b31fb83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "86ffe8f9-0a35-4141-8b06-d4742f3ed6ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df92afe8-db49-4d30-9c6c-f797c01533a5",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b5dfe71-b40d-48b8-a378-5b027a6a31c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28e7f6d0-90bf-44a5-87c4-327c0ab1112a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fe47a6f-2f4b-4ade-862d-86650315953c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2daafa11-9fc9-40b5-8ba9-447b64b6089d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f625f923-77d7-4c56-8fb3-445435646d5b",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "425285ab-4312-4424-ab54-8e72b461c200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa124083-799f-44dd-880d-5d9eddc73882"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b7a8a91-9abe-4fea-8d22-5759211c6e61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "69adfc1b-3a68-4ee8-937e-cdb0ecc3bdca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1ce1249-76a6-494c-bdfd-22ec64f57fc3",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "543d47d2-9a56-4d59-b57a-a88fc0d050f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7313839-f580-42ed-b6fa-8378c1cfaf1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "965018b4-9586-45d8-989b-39be1771700b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ea303ca-a33c-40f6-9fec-ab5e74ff3706"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb85957d-aacd-4d43-bf28-927129b48541",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe020f04-f24e-4bfe-8bd5-6129080c5888",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3b6281a-a2ad-4b06-ad56-21b8b5946841"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7b4730e-9697-424d-a4bd-2c1e2ee0e47c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "69003d07-1a07-44a6-a574-f5793ea48f4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7595016b-955f-486a-a82c-3096f482e8fd",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b36b9116-023f-4484-a4cb-ebe57304c819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d1440d5-8e3f-48f9-a821-0bf03b55b381"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1959d8fe-5e02-48dc-9604-70a10922886c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7387e637-c018-455c-b717-20093e5b8da9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15c82e8a-59ed-4fbe-8b6f-839847855623",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5234e210-5d98-48fa-afd4-87bbd819e7a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87cc4592-9967-4520-9b36-0cd842252b8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23993e56-b833-412b-b971-aec973361815",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "30defa16-411e-4600-b427-1d52ccbe3e6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f203d67-eaa4-4f4f-b411-522e71ea6b3a",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a27110c-6c7f-424c-93f0-1cdc08bd2822",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64c489e3-b139-44a9-9675-a2286cd6836b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23ec383e-d832-4987-800f-7603c8f75c6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "b69616ba-77e7-40a6-9e92-0b7fa8fd590b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dca4e7ad-451a-487b-bfd2-7802357cd537",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a42542d2-5395-47a8-8995-947c1ab0499a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e6a7602-4bd1-4c4e-b096-c0e0c61213b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaaa3019-ffbf-46b9-9264-2cb40765e2be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c5a85f4-125a-474c-a999-605a8a4bbca5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fa9a377-3654-4058-9f57-8a3dbff9f83a",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fa5d223-b15d-42d2-b83c-afed7d156a53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea4dcb87-a99a-40df-af1c-15153ef14778"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4925481-1aa9-487f-a581-6dab4ec654d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec7f1432-578e-4cca-a382-af8a64406af0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db8bc09c-35e5-4d57-a8e3-3e20510b32dc",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33fa5857-e61a-4f53-a11a-3e0249f32bf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae72df0e-7a2c-49c6-8a53-c644ae63156a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8844750-0f97-4408-b37f-8ebfd68df99f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5870973f-1e73-4ec9-9fe2-2738acbfea1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aef03882-a10b-4c7a-800b-2ef2b3dcaf56",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe581e2e-d10a-4e72-9682-bb8bab919f48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bc7ac06-e115-4e17-96af-72928fb1ebfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec62e644-2dd3-402a-848c-177d5a5a1daf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "42ed0c0b-d5fc-4564-910d-2d1c36ffd6a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7454bf5-b4c6-4dd5-91b4-de1f1d10a07c",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5cf768b-941b-437d-ab1d-5ae14c06ed1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96e95e10-66da-4ffe-b291-b2cfad8e5cfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08772eb3-a658-4082-914d-be4ddc71a0ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "36fcb63b-6c1e-4ccb-bae2-edb0cd778458"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4b154b5-a9cc-4871-9420-1eeb334129fc",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de56e74d-d355-4393-a017-f91ac7919e5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42729660-5f3c-40b0-bb77-7febdaf8ef8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11ac6909-d554-4e31-9254-8fdb3b6f6a7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4fc96b24-8446-4b71-a717-5623fc29ebf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "174b3992-4ef9-4e7a-9318-d39438019f82",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5925e8f2-3492-44bf-b27f-d8c559571696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09894059-08ad-49f9-af48-58f49e35c93b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e153db03-b5d1-44fc-a8da-567187c76059",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0ce352ed-d7e9-4c6f-b8a9-2cfc10d1fd74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b698c35-160b-4b9a-8233-f52fa0527b40",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c76e385-dce7-418a-ad15-e9dc50522d3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dae8f69f-27ce-4fec-8454-997f7ebf34e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20c037ba-a785-46cb-a172-11817c949c3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f9159807-a46c-423e-802d-ac519d14d3cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d5e8dc7-4893-4818-9d59-4cefcdf29abb",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2d5f7b1-4e5f-4e52-a1f5-8f6937a720e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5eece254-cbc3-4d85-a5c9-eb9c4c25f1ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75ec8fba-baef-42c2-ab12-e7508eea139a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e4d61f6f-6a42-4489-a556-e10d0d0ac4b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdb7b9ef-82e0-4d64-84a1-3e8adf3c7ea9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "becdd06e-cd98-48d2-bdeb-d92f19127deb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0e73aea-8e91-4cd5-948d-e18a53ce74e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfa1c499-b833-48ed-b886-3e6c91569520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "4027025f-7854-4b3d-9bba-0bbf31057048"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79a6cd59-171f-42ea-99d0-9c7191627f09",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3b1892b-e4be-4a43-86fa-618710779749",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae349957-ad36-49a5-ab06-f0b70b027e73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09592335-b4f7-4cbd-a2a5-39b70087b80c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b5de63f-bee0-4297-bed0-77db45917fe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f80d6708-69b5-4f6b-90ad-22e47a7e4a81",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0139c8e-b231-4302-b2fd-245a01bd5b0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b92a2e6d-cf59-424e-b598-d253fc4dcdea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df2467e7-b432-4ef7-b7fd-be1d42ec59b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a250c67-a553-4584-a2f3-7ac5efaf9c8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22f16f61-5eb1-459c-b4e5-63574b71d1ab",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cd99dc2-c0fe-42ff-81e5-eb6dfb0a15d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e17cbf5-0227-4a32-b43e-e4b6e4f20e62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "081d637c-92cc-4931-89af-aee97a9b2af9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "85dde25a-5517-4cf6-ad05-4b8535da3981"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4389ad3f-1cbb-4060-b8f6-30d77df1cd3e",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5167ea8a-5a87-49f1-9bee-00c8bfc439d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fc10469-983f-4525-8e98-d05ad876a434"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1061b69c-97bd-411f-aa01-73fee06b3732",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "928cd312-db08-4be6-ab26-fe9b373980ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aed4aeab-90a6-4280-b432-970e0765eff6",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ec1bc88-d174-4433-a01c-4352e4092d81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e15e50f-e3aa-40ea-ac8c-4cf6b8eb56e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "772c74da-2e90-4174-8afd-18743c0440d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "02561e04-f3f1-4137-968c-4826d60d1e55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c28d0b0-82fa-4566-9744-4dcd721e7e6e",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b0b02ac-9df4-446d-8d10-83b1f05005be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82f150bf-4710-46ff-b943-d765f76b5d37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd5b8b8f-829c-41fd-8e85-dd397724e3f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fd390c2e-e355-4dc8-875f-ea6299b57c2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0d8ef38-6d73-4417-9461-0d4e8ddd20ee",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "910b425c-8cc0-4252-ba15-13ecdfa3d6d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2086f9f-c299-4138-bd59-d610b61ba6b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa276d38-90ef-4da1-af4e-c1571bcf4d2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c2b15ba-40b1-42b0-8edd-c1ad2408e76a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c5327f7-4fb1-4bbe-9e34-2ef94edbccc6",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6cf625a-02ae-41e2-84b3-d16603e89e12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc856f11-da21-4f24-81ac-64498851dd2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3745c87-538c-4a97-ba9e-2101b54fd5ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f702fc9-2256-4d4b-b3bc-a2141bc5dc9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "599e97fc-34f7-48ee-9c96-01bea7f93a26",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f09cb01-1ecb-4d9e-a0f7-fe20f91d1f5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbe64787-3d0b-41c5-8e63-0c3448b69bc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57343c07-e616-4949-9dae-7d97328729e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "291e59ad-f922-4fbe-91bb-4696bb14aa50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "743197dd-3a7b-41f4-b660-a05c6a415fdc",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdcba274-26b6-400a-8cfc-8fd04ad2672e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "375c1da0-3138-453c-be42-c48db3aedfeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a10c55e8-1f60-4a5a-8d26-bde3a3ca617b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b306dba5-f320-4cf3-9697-f51c2cfd94ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11822062-898a-4909-9079-c441bfa43508",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "488eaf96-02aa-4678-81c7-ac37b83ccfce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de422af8-daeb-4b25-93b9-74510735707f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5663166-2d15-4af0-9491-16a107c7e353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b41c73c9-9e2b-4188-bf52-6fa875450c28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aaf4a58-67ca-48ef-80ed-5095e7c22ae7",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "444a394f-1214-414f-ae65-9c99692eb498",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3118488-f77b-4bee-a415-9cfd8dcc2601"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c120f986-04e9-4959-9762-f193a3db1ef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e027394a-d3aa-4ea6-9ecc-8b022941df0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebee000c-364b-4ec0-bd86-245b665fcc28",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a959ea08-84b4-45e8-a118-c2609f4a938c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ca6c7e8-3d0c-4976-9c13-303e6953b40b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b336218-6cd7-4039-a02b-ec354f8c9303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "17c5a897-145c-49a3-a05b-4a427b9a7fe4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c7c65e6-c9f0-4cdf-b1ab-601b105b4332",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c753e733-ce44-4d5f-b076-34e66e2096b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a398a83f-224d-46cb-8218-580c75934a70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7a37ab6-877a-4a71-95f1-eda6412d4447",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a59e824e-b9ed-417e-a29e-949c9be25491"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c22b062-3ee8-445d-af68-a2680332fd45",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff4b30b2-0767-400e-98bb-5b86ea190fa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f3d4443-83b8-42e0-82f8-d84a2e894875"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aec0f845-5710-4491-9088-c72432113f9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "57f5571e-306f-4e45-89cd-9a2c4a5aace6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f3ea20b-3407-4bad-9f28-b1037f5c732a",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "783668af-3f8c-42eb-a6b2-8f8180f23ac4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e61d0aa5-e3e8-4240-882a-dd08a609640e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25ad56a2-0372-42d2-9e2c-d446dec93784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9a606c9-e57a-41f6-a099-01e55e987d86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f034ba6-d1ff-4074-828c-fe1e082980db",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8379c2da-abfe-4251-a739-abad77ee586b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50560d52-487e-4c21-a998-1be27d4e1d66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00643194-38fe-401b-a56f-70eb7baeff39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb6b7fa3-35bc-406e-9e2f-ae3d87eafd7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63352680-7649-4343-b37e-860ad9c270b4",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2cb3b89-b1b8-4df3-8eab-088a7cee9d39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3342d99-990f-40ce-b2be-1c819aa3baac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5386cc76-b39a-4713-a126-6ba5072ffde7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b9a9a79b-dcd4-4285-9f40-eaf72cdebdba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "768addec-d6f7-4c8e-9632-f098521e1824",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d353847-9051-430e-ba20-ade3cff15d58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce50bc76-9505-43db-aae4-a1d6a3e79799"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3898733c-7772-4d69-ae9f-72f21126a951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "32f100ef-779e-4e82-ab4a-a422cff10739"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa737311-f41b-4fed-98fa-a027252a3b93",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "914bfac4-e2f3-40bd-96ce-989f90f7cb46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "196ba581-7067-4468-870c-9959174f41c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd2beb65-c6f3-4e26-9987-270ad83ea9b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9173777-9be8-4936-8bbc-a29e22d314ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee6461d2-b9b8-4883-b0fb-63c7844236e4",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2af48341-d14c-4803-a9b1-0d9097adbea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "170f81b9-c33c-4a4c-92f6-cfe132c0fbe7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be787724-4fc2-4027-9533-42ef428eea2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "46eda0e7-65fd-4e83-8108-49b4cc0fbcab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7847374-3dce-475d-95fe-aa2acde7d72c",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d53685e6-fcd5-4736-8632-fc8be6693c7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89fa2543-6999-4f39-ab77-3ff78beb63e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38356dda-ef3e-45fa-9293-5030e9ffe8d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f94699a1-e52d-4702-932b-209383de286a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cce78088-f7eb-4d11-83b8-8539c7ab2e22",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffd70cbb-8653-4ab7-ae94-ef92ff42f041",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0970be4-8277-4d01-838b-685800000fd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be21061a-adb8-4acb-be20-575cfd386e5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "11837ee8-778a-4dae-b308-b5dc4556c584"
                        }
                      }
                    ]
                  },
                  {
                    "id": "695d7551-7bdf-49e6-82ff-0538f7471a59",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eb7b6c6-fce0-4ccb-9753-b6ab89ec8586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79761de2-2d42-469b-9276-a533ec286982"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fdbf79a-18ec-48ef-8bb7-0dfbb0f23c11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bb283a00-1f07-499f-a330-30f61df08601"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51752db9-dee8-4611-96b1-dab178589282",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e32ebe16-dc9a-463f-a69e-b8ad8105de2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78dd0ebf-9ef0-44f2-a3fc-2bb6633a43e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce91bed4-9103-40dc-ad1a-b537dca356df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c0d50ea6-b2c0-4664-826f-ccd8574b521b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3512e42f-6135-4f2d-ab17-eda2e4da108a",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78412775-ceeb-4655-afba-a2391197b752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85df146b-f2cb-4914-bfac-ee3f27498ac3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f9ca57e-4822-4bd7-a00d-6d2c9b872785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "003a18cd-7c45-467a-b336-bf14fe0f2365"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7b0ecba-f112-44c4-8fb1-3068712c905a",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4498c7db-06e7-46ae-b303-61f138a593c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfadc36e-9640-4683-a682-019d10362442"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63ac3666-3468-4d1f-9242-448d05c10a60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "138cf3bb-e52b-419e-b5dd-45104694c3ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c677829-5820-46f7-98d2-5cde6a7eb4f7",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0332a8a-5ae9-4f2e-a38f-17a30c975f57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4733819-d823-4b4c-a7f1-a3583672eb4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eeb7f52-593a-4ae9-8edd-de51056aa646",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "21230eed-6fcd-450c-a2e7-12a7fa08643f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ff2735f-6c68-465a-a757-b768af55753e",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e78eace-559e-4b10-ad26-54590120cdff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d833d3e-fdb2-4b53-a594-077ab07a5bb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3505355-ccf8-4692-8b69-63a4cfea816e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e51d5e9d-c788-4e17-b13d-8d39291d19cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73877974-87e4-4d23-8b72-8815af39ef61",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7276a635-9c84-4150-a21e-4c1b23ca72ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2241a9f-71e3-4387-85a4-39232750699b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efda7013-ec42-4591-9616-c11eb221cccd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d8633487-8f69-46d0-88ae-a1ed720154ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1dcb367-3fcf-492d-bce1-f8a25e0d6e02",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31f1a6a7-d3cb-45a1-ba4e-d6a5a81706e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "6e61e90b-d236-4cc4-b080-0f6f50db8beb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a273f86d-8f31-4265-b598-27f74a3735c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "da062843-d176-40d4-9b54-e47c298db599"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e920a191-af1b-4327-94f5-85ebe44e62d3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8b8f0723-71a6-4d7a-9482-d0205ac0e049",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cda08c3-f460-49ae-b3b8-2fdc25117419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c4022b8d-b5a8-4565-80ec-08318abdf361"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bc3c801-da99-41ec-bc72-c71851ff57ee",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "2fa60e25-2ac0-409c-a7df-4306dd77e029"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e638c4b3-93f0-407e-8cd6-137e987364e9",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ab57d28-de92-40f4-ae9d-4994a04d20b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "857b0cfb-ba14-4a7c-b313-a6bd3f32cab3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65ea7913-1eed-41a1-9cc4-75dd733bbeef",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "03014127-4749-40d8-8817-35c8d255abba"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6e33ddfe-9a6d-4948-ab42-b9ff3f85a5eb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6a6e2cc1-ca24-4728-b342-8394467a487d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1ada6a4c-f062-46ed-9508-35a480038192",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eafb1146-0a6e-4c52-b274-0fb64e378e1d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "473a32ee-a4ba-41e5-81b0-5585c5c61fb6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e9daec40-9bc2-4ac6-a2ad-0e8693dfa0e5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f785462a-d891-4a51-b867-cf883805525c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e684465d-283d-435b-8816-2cd23d859712"
                }
              }
            ]
          },
          {
            "id": "123a824f-c2ef-40f4-969c-bd79d93931e1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "04f413ca-94a0-4c13-bf5e-2f461a04e74a",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3429e64b-8c7b-4dab-87b0-a9fe87e537ff",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4014a5d6-c8b7-4a22-ba8c-2211b4bce351"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "41bb2b9a-f675-49aa-add4-5868c984cc1a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4fa7610c-9236-4300-939c-b3224f1a50a6"
                    }
                  }
                ]
              },
              {
                "id": "3d4cd849-e623-42ab-8583-d8433fa75dca",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7b581068-67b6-41e3-be41-765b86a7fbe2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "47dc5a8a-8f35-49b0-aff3-93d7ae6a05b8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "afae1685-c137-479f-a8e8-cb4a88f8edb8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cf5907a1-bedc-42f1-9e0b-b88afc7967a8"
                    }
                  }
                ]
              },
              {
                "id": "773fe0f2-f127-4132-892e-ffaf1c7d456b",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d45b50dc-d85d-478b-8ce0-770145ae2874",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6c2d2432-4f0f-40c1-8269-8011e9f697f4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7ecb69f2-3529-4ac7-a59e-3320e60e243a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "a348efd0-65d7-4420-83fe-bfcc675f026a"
                    }
                  }
                ]
              },
              {
                "id": "591d4da7-bde0-4b2f-9503-94cec8505497",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "938c9e9c-6478-4f08-9f83-0857077ef480",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bd23a560-86da-42ae-a62c-38ec77d1092a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cc2a789c-e434-42c2-8633-568a67199c31",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "3792ef07-a3f4-405b-8fc4-925b2bebd3b0"
                    }
                  }
                ]
              },
              {
                "id": "00d6e7e2-2f67-4d7e-a34f-45c19944f81e",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "92638445-eb4b-4a6c-b6a6-1e725ca2e1fd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "89c944d1-ab84-4341-a149-c790a87d659d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1df8fd24-7024-4c55-8aae-dc24d24f1cfe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "14bb1666-d8fa-44b7-8c34-9a1da66c3e55"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "21146d4e-5b7e-4984-ac5f-33f3c4e0dc02",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ab3959ad-dfa2-4540-ae29-b4986d088351"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "fa92784b-5399-47ef-a696-186dfd467ec7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "22a1876b-9621-42dc-b88d-45087c6ef8e9"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "27fce08f-13c3-46d5-93eb-6fcf438807c0",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "ac4a5c10-75cb-41a3-8ebe-d59dd16776a1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "974db295-6f43-48b0-ba3f-1b89053ae667",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4fe1cb80-a952-465e-8b06-7e121a6d1b02"
            }
          }
        ]
      },
      {
        "id": "86ed5d31-4d53-4378-a21e-d7e1ebec5282",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "c8f336ad-ac08-49cb-a0ff-92a0d7b5387c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e3d25eb5-f1e1-4308-9d86-191cb42c434d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0b4aff0d-2fa1-4759-ac81-ae69e5dee2cd",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52f122eb-1db5-4afd-a5a9-970a3288a4c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d3db050-277a-4bef-b869-31f490563095"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d94aeaeb-5402-408a-a542-29b5ba01d2f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1005b1c-9e04-4112-a56e-b4630ca65aaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c315a2c6-703e-417a-a21c-ffd17ef743b8",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c9c83bd-d3f7-4d1a-a0db-ea7160da0a75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcd2a064-bfbb-4c56-bc1b-60e52c2903a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71e5c756-28c9-413b-8379-aa31101ba7d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7171f796-93d2-41ed-906b-27e5e4e20553"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b868f930-0b65-4978-9b47-af50560c1158",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48f77d82-bbb9-448c-ad62-ad531b4a00ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68c7285e-b15c-469d-811b-0f82a6447318"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6f10215-17c3-41a8-97bf-510882929660",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a9bf172-240c-4a21-9668-5f67d9df89d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd773c23-6efd-4ea7-a715-1e55eab52c76",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69e83d5b-e5d2-4eed-b5f8-40f51fcb4ca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b769153-b617-4e8e-b027-85df9557b70b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5daa622e-7f7f-485b-82ab-da73d7d667b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b806915-f4b0-4fa8-910a-7dd4ffd16228"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4748dcc-90c4-4602-ae5e-7848bc7424ef",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "420a7466-4cc5-40ea-8164-2c89f24ec66c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "238fcff9-1b0a-489a-b59f-79c5df5bb181"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75b5e6b6-e892-4c8b-b832-23e9f151c9ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3f5a196-606a-459b-8b20-9afa705b8fa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf5e3054-ffd1-45c2-a943-3e28493ad7a2",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2fe1c55-a3f4-4025-9219-a1184f431e54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ade99a2-351a-4144-8d46-cbc2222273b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fb1dc0e-587e-4765-9eeb-5463453ed619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e9a402b5-704f-4702-bd74-4c91e1440311"
                        }
                      }
                    ]
                  },
                  {
                    "id": "262fd4cc-af9e-4497-96c4-8a52eb574dc8",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0d53ef2-8c3d-4b9a-8c25-b764ddc1d7ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a4f3616-a459-47d1-a00f-cabb80ae3b33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9f74adb-2a01-492d-8cc2-6e660490df09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "77f88543-e757-4f76-8b99-dd40089e5f6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd4e2bf2-0d5e-4568-b321-e7fdc6d825e0",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b37533ae-9413-4f42-a9bd-4c12c9c9f518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60a7a94b-36f0-4b3b-bb1f-8f7e83f55fcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "070456bf-01ec-45fa-a2bd-b468afc10590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e7c5235-edcb-49de-8f15-59db2dde4d14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "350b293e-df37-4193-815c-c5f0ab8703dd",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "631962a5-2619-4ac7-86c3-c4283694b21e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2643180-4aa1-4c55-86ca-e69c996f53a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9de3b9f6-5dcd-4b45-ac25-2d592f9c696f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "01f90714-df19-4630-8b3e-60523aedc578"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a58d16b0-a7af-46d3-a2b8-69f1ea1f0223",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "599723e0-2dc3-4207-85ec-4aace0efb0a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd8f1a8d-c32b-42ee-aed1-7a6e3e710fa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcce13ba-43d7-43a0-9172-7224074f2db8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a341f4b5-03f3-452b-b3a8-85ca177554bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cceeec3b-03ed-4fc3-a9a8-9cb98037b913",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3844e964-b9bf-4e6c-954d-698dd572a74e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb65221b-7292-4292-a512-33f6587a3703"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1229ca5-57c6-41e4-98af-b4593d06455f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "013f7293-2b65-407d-806e-c0d59bfd3318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a24203f-1b8e-4e6f-aa28-5faedd5b383a",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98c2c7f8-be91-450c-8f93-4643c0520663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b9a7fb2-b81a-4999-8d1c-74e511f71dc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cd718ab-0abb-41f0-8919-5e106006479b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c430fa0b-5ed0-4a45-9beb-54b5444f4a3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89d84d74-76cd-4a0f-b2f7-b90985c86144",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d67b097f-2755-4612-9d1c-9cdaca22d4bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3c0d505-318f-43b2-8206-3617dd8ceb54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54f8e9ac-3e83-4af0-9655-ef7e1c369abb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b450a81a-b870-4b39-af9d-213774381a3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "164714ea-1d3a-40ee-9d84-3bd8fdb2ae14",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6addf3ea-646f-481e-92f1-f9df8c91b7bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e694f63e-c778-4162-a915-9b0b2d272747"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9fa6b50-de6f-4d41-865a-33109a0e61f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2bf048c-4fca-4ca0-acc3-33efd997812a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "858659b0-56f0-456d-be4d-0cd801ff7337",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08dfe581-0907-43cf-8d1c-af1ae3942340",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "385e7851-f8df-4f3b-b4f9-6bc978e388dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44cb8230-5b70-42b7-bfb5-132b0ff64fe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "83007171-dd5f-45d3-a5a8-3ffa0261bba1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "834447d4-1d74-4e52-9d49-39ca436f6f35",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "575a5b9f-7f95-41f4-abb1-63712b37b4b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e8334bb-0956-4899-ad62-c76b562fd065"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b83645c-4a3a-40fe-ac06-61131a854991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d1f6c6f-ed43-4646-a1c9-092391a32c97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c52adce3-32b9-4fc5-a158-71c85decdb42",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d5bebbb-a2da-4c78-a60e-699f72ea641d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89fd295c-d720-4cf1-872e-3058be856670"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55efa677-881f-48ed-983f-e0274275139a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "561dd9f3-306a-46d9-9e5d-95200684a4f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f73758c0-02a2-45e4-867b-b3515fb78a5b",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1809c11-9b32-48f8-a631-646b5cec97ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56124394-659d-4e27-90ae-9b3895740121"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3504a855-5d55-4858-8e38-9a686ab713ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5fec6ebe-cfd6-45e0-8491-7ed19f030bef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4d9c8f6-7322-4a6a-b353-0399a230919a",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05a05c41-e3a8-4a17-8f4d-8215f3211f39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2d39d28-6107-4da2-acf8-3c9131f14878"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b86a03ca-4df2-48ef-a2fe-0636ef472b5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cdd3f660-fafd-40a5-b986-88b4e4297946"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ad49100-7073-4e7b-a24e-af8e83546bf1",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ed07926-d4f0-4b27-860d-7a4774ca6b90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37221ce5-b39e-4f7d-abfe-c582c1fe9259"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b562f7a-ba47-46b0-b281-e6151ef1379c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a440a8b-2cfd-4322-bc7d-acdec6580d84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "111a6dcb-632f-4d8c-bb01-a9951d21823e",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0369de9d-b022-4f1d-85ba-f9de25e12fca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9d76c66-1f80-46ed-a753-7a44ed30ae41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b354bd0e-958d-442c-ba54-5b0080e61303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f7e1e58-2862-451c-a210-4ec22fcf7b8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef168778-3d1d-4bc6-865c-5a2d6d3a31e0",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "560718b4-1638-4c2e-ac6c-43fc6d6cf17b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77625af2-0aec-438f-b316-e9e3a02d3f57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d575f2c0-14fb-4668-8373-1a9fa7fe92fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b44835fc-3074-4593-9f53-656885269e78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4d6634f-36b6-49e7-a788-2ed04e65e352",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b65f2c34-b562-45d5-aaf1-041a47e513de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "449e5e27-9d1b-49e1-b6ca-895bf6c10dee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50640606-c216-4769-bc96-2444a391fbe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ee03ba4-6b20-4a70-a001-225ddc90acf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21e73617-4a06-418d-b4e0-072d032cb7e7",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ad519f8-bf15-401f-b2a1-f4b64096277a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f09927c-a455-4453-8984-d4175bd102fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44dd2876-ac9f-45ae-9cd7-4bff9a9eb09e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "560d24fc-6250-4d99-adea-52707e58989f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6adf5bae-361e-409e-bf2f-9245aedecf74",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8c1a1c4-afd0-4412-ae0c-bc1e3f18b088",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "521d2b8b-528e-4995-8a61-70d0c6ca1fb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7ece3d1-0f24-48a9-80a2-1b97a4700a36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d2f3533-3e24-4565-9e41-5108caa2da54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28979dc4-364f-4dbf-ae95-dbbc37b95e71",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a1ba96e-794c-436d-84c3-d580e109b488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "963daa27-5ee2-4e3a-8c72-5d8cc5f4eb94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f275cdb-c41b-4e43-8397-d7ac0d77b26a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef2c016b-d960-4103-b341-cef418311c7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86b5e2c5-f6cf-485b-9b9a-3ad6c18c7a56",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c3e882a-db6c-4c7a-a816-758dc937087f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0ab9267-3bf2-4bf6-8270-d67ad99646af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca58dadd-5e4a-42e6-bb07-4a7c451530e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb54b36a-99f8-42ad-b682-13c0a5130dda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c475d33a-7eaf-4515-ae24-7a6db5cef45e",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76cbe57a-432b-4529-9543-3e7d190b5707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "375a93fc-b5b3-4883-b22b-c8c3bf2bb6ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9f58269-9825-4fa7-ba48-efb12d9ef27b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9fb8d089-6ff8-4d0c-9887-f4a46f7b18d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "848cfce0-5d6a-41e0-898d-067447e6755c",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1ee5017-4bf7-4e28-b6fe-340c44dadd88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "deb49cf4-b9bd-4b91-819c-2ea372efc50e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4fe7ba6-540f-4607-98cf-4796d58ee854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2041a0f5-608f-489c-b53a-32a5e3f1ec03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "040b8e2c-a686-4675-8e85-aa11f086afd2",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bec322ab-6d44-48e3-bca5-d92572559d6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5e4a3b1-7ece-4f7c-a209-5cf8aa592db5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "669460b6-72dd-4726-a1bd-8a02e604386a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0271b3a-e074-4321-ad82-9a4cfc551df2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e113bd26-249f-4ee8-b954-c0b779dc83ca",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e5fdbef-44f9-4e0c-8393-617a53c623c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da891763-4857-4fcf-8dc3-556c1d7c3477"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52282ab0-203f-44ec-b17d-733a5dde901d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2908ff53-b3a1-4ec6-9c95-d75230a8b104"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a96dbe79-4984-4599-8cfb-9b3a4e65fe75",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaa8b2b5-6ed5-4ed6-9428-96abf643474e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db1f565c-7f70-471e-8c4d-527865bb828c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ead6750d-1568-492d-bb2e-d0583bad27ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6bfd025-b7b6-431a-a8c6-cb81c2f471e7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "847c4045-b6f1-43ed-a330-494c1d6189ef",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "66fc0c91-c6f6-4cd1-b402-e0bf0319e9a3",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "873c538a-ef47-4c49-a912-eb0a37156586",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "712489bc-640a-4740-a16e-adcbc5df3d0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0334767-e089-4f26-ac21-5430953fe32b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "be85cdd8-7351-42a5-8a36-f04732ccf3cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cb7a437-1110-4f1e-af98-50b8d59b1ad9",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "208e352e-54d8-4562-bf56-1e858775a29c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "e91ee5c3-fc37-4cd4-ab4c-7f8468ad35c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "539d6c87-e7f0-44cb-952a-5a9b8f7b24f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d86b6f97-f0e2-4337-999d-64426070b159"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3cfffe1d-5c8b-4149-aaf4-0942a74712d5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "75af4ed0-491f-404e-81c1-5d14480d852a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "85580326-9ab1-4994-bb43-067ae3a56292",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5be0d8d9-bb07-4f77-84df-8d1aeba405fc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f12606dc-16bd-4a95-9b09-26e1e04ffbc9",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4ee55987-6105-4b35-9f89-b92010015a87"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "59015d9d-b960-4668-9a6b-7fc69e1e7a8d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "785ff97f-d113-4bd5-9196-4d523dc4ce34"
            }
          }
        ]
      },
      {
        "id": "d2fce8f0-ad38-415b-a134-328e196b6b07",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "e8208d74-131d-4b85-be54-931a4dd5c6cb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "019638ed-a8b5-4166-a2e2-4726c7885ce1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "51448bed-a6d1-4df2-b807-a990633e51fc",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fae42cdd-7283-4975-90b2-34a5dfab15b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77e57010-03b8-4b84-901a-9ac87d52aea7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "489dea97-be5c-4594-9441-2aa6389fc026",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cacc289-0dab-43ce-8012-6a83ca38f832",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bd01f0b-d603-42ba-a2da-240a3dfab2c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bad9df9-3643-4abe-a1dc-84aa35d8cbd5",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f60bb09-5f65-4a5a-ba82-a1add15fc90f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f094c732-f4b1-408a-85cf-59848600695a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30511816-e445-4cb4-a603-b4471e435203",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd1f5484-2b51-4f56-bdd5-30178321cb5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3db7a93e-02b0-457d-a086-721c450366f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dd656e4-9770-499c-a21e-4473be3800e6",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35e7db8c-9251-40f3-a322-a7489b289088",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbfa207f-dce7-4f9a-823b-9a652bfec764"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7214798a-b7e0-40ad-9200-ef11ce25ad52",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03b17b70-3dcf-465b-ad9b-97a26ffdf623",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32a4216c-0dde-4f9b-8ed3-dd4413e5000b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "251a1857-7913-4516-b4c2-24cea28b289a",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "325017ef-eae9-430a-b887-bd5809b0234b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc834ac1-8170-477c-8a71-7f9a57ebc9a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be8e97f5-07c4-47fc-a212-ad59158d2a96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cea53c3-f986-4043-93d8-ac9b1afeb520"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fb1b6db-4d95-459b-83cd-eb81d8f6799c",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f7e88b8-c1e3-459b-b402-a17ebde02935",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d5266a6-76e8-4f16-861f-381315d40280"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca7a40a4-7e68-4ca6-9c69-0bb038120e17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32b758c4-453f-4065-aa33-dc036e2585f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c430a9b8-8d8e-42ed-9972-d18f158310e9",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d18b7e5-af48-421a-9ae9-f497aca4deff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e13b95b-76cd-487e-9402-e6117865ba54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0140b39-5c31-4f82-ab6b-9e7e5bee0b5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d898b31-7058-4ef8-9fec-85c39540c7a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54edae65-b2e0-4f33-98c3-57a5fbfdb0db",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9574526c-f341-41ae-a153-5f2da2391300",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b69dac94-290c-426e-a595-174b1fc3fbab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "077b8b07-9b65-4cdb-81c0-eecca47fa0fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bd96ce4-f426-4876-a879-3bc8504adbb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d7a1538-e12a-4e43-b0e2-9ae37080afdb",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5be320dc-9e15-4309-be46-40c6b55e8728",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1c4dd9e-ef6b-4354-8c09-806645814a94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f893054-2516-4880-b05e-1ac360a93aed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3691c84-5a72-4b9e-bfa2-5c79a54d9fcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bfb9a79-c912-4da4-beeb-eb9d7e896d11",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96b352ad-d901-401b-81e7-8753c2a3f987",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40018ebc-99f0-449a-b3e7-34f31b984769"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82f46010-3500-4d13-b8ed-d77c24317880",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b3b8108-3b9d-4201-a5f4-d60cd40d2cd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77417622-e411-47b1-93c0-b9fe82da4e83",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1acca878-6aca-4f4b-8c5f-0f23ec7d72dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "208696cb-5753-43b6-99f1-5f79610e209a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7127e33-23ba-400a-baa3-f7ae38271fed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03f8271f-5930-4a40-8786-25886cbdca54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b215ebf-a0e4-41b5-89fe-2e85f84f4343",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89a2010a-db24-480d-9363-3a3bd8b60e9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1aef0af9-9862-475b-8d47-f513cb6cb80d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24c74a2c-bc24-44ea-9ff2-aa8a30107eb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31467bf6-b328-47d8-97a6-7281405e87a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30123710-68da-4283-a30f-a0f29eb2db81",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03f5949a-3cfa-46ee-b10f-6ee7548e990d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf717f47-a58a-4ae3-8db3-2b75922eda48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "817579f0-afd8-425a-b42b-7c61cf87581d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8947944-c3d8-40b8-9817-7e0ab34d3d63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbb75eea-8b57-48f8-b343-651d13fe586c",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57cc7cac-18fa-4af7-8a6c-d49a8c76f58d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3efeada5-cf08-4bb8-9a81-02c329122ad6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d66b986b-658b-4d6c-b5b0-66b7cdbb0f4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b093386-e891-41ee-9569-d707ba9c43f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9327eedc-13ac-4f7d-9d10-f1604ebd60e1",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cecfbd6-575b-402f-ae7b-292deb109913",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5f6cad5-ec95-4525-aba8-d8b4be079069"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67f90530-3e86-4426-8171-669addd325d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67cb0657-bf9d-4cef-8957-01ff02b03b5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d7b25ea-08bf-42ed-8b02-7c0ae14d5469",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b1c5960-8284-4f71-b296-ee4de740466e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f3fa392-3e29-491f-91c5-8122a71b87b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "464481d6-d0ee-4fbe-aaf2-dcf0f8647e1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dab19d65-d967-45f0-9f9c-5cb14a05ff08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8e5443d-0170-4d5e-be91-298c779c03ab",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12eae627-3835-47c3-a918-e8c152ae0279",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "738b5c22-89eb-4184-bea9-782f123f4dcc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24708aeb-509c-4933-9201-1dc2ff2ed955",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f89004a-1644-4323-b25d-3bdf53d9d89f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d12baf65-fca2-46b4-8a80-a08f3626d332",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21ba6681-563c-4eb6-b238-826be2b58432",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dd346ed-42b0-4259-825e-c00b42d209f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76609469-b648-495e-958f-460e66ac288b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a122f1c-1bb0-43e9-b430-d0d80c746099"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c83c6d7-d2e6-40eb-b8ed-b6ea3678fa99",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b78dc1ae-f359-46fe-9bf1-9abfab87214b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f288e311-0968-4d32-a6c3-235ee428f3d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00a58f3e-f29e-4dce-b1d6-7d55680e55ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82058929-7a4c-427b-b1a0-500ba4dd67f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "955ee782-779b-4273-965e-2a1aeab3e71b",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6568d4b3-04ad-40e3-8275-115549d6ddeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "154fe851-6ea3-4cf5-a999-4952895ff183"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b890c7b8-d407-4b6e-8438-538e1d8945f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "890cd28f-4cea-46cf-af9c-afe42064fae7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a1d0d2b-2375-4068-ab98-cb5c494194b0",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce7d5424-5512-4861-8f67-eb729efaf561",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b0c6be5-4b53-4241-8e12-1372a0fcef78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbd2c2ae-2c37-4949-81b2-0af65197f2c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2093dff4-0617-43e5-9826-f954f95a7e89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "602d5fac-0c5a-4468-b2f4-086fcd382400",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf3fcb6c-9f34-4841-9024-9458137434fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c2099c2-0dca-4bb1-9a01-e56e1b5c2464"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5980cbf-477c-495c-9241-0e5ee8432530",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ced42f8-e2b1-47c4-86c2-8f31dd746a0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54687041-4d80-4262-a730-3c2f5e601525",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5c35fbf-aeea-4842-a76a-9859d2da8993",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3fa3c60e-8856-4e61-b5be-c5b565ac0fc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac8c97a4-265b-43e7-a898-68742510b5c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fb26fb2-260e-4b14-8765-3dae27737d8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5e46ecb-0384-491f-82e1-c69462e50847",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63ca7467-bf3b-4c55-9c44-67dac09bd533",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ff6b355-414d-4a4b-a7b0-60fc1105c49c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4f72183-1046-49ea-a40f-79b6033c2b37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a10522c-c784-4341-bbd9-ec455bb39aff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a7960a6-d185-43e8-9ea3-4203e2e630e7",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3803068f-753f-485f-8103-a002eba61c60",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b90e8d2-be07-4c88-9ca3-5a716fbe1bc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f92a732d-3d0f-440e-a9f3-0def887d0f19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f2a86b0-36af-4cb9-97a7-6f2a92222f36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "031f9ad5-b4e9-4670-a491-7dab540c11b2",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8f5759d-6706-4149-af73-94afbe28b1ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef5ff171-aa2f-4125-b5db-7c3ea49803ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "020d91ac-0d72-41ed-8bcf-1ae5302b6d7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20ee621e-e37c-43af-9da2-a32de0011767"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5947ab34-800f-46ea-a108-c5bfd5bd19b6",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12851d62-50d5-4c9a-b452-84e4b359f4d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "472267a6-dd0c-44af-8af9-8d4b1ea899d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5e7d3de-c8d7-4cd0-9e12-d133f7d7aa45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9ba879d-cac5-4409-adea-a610a3de2c11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3695799e-4536-4d2f-841e-640e653c13ca",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4469c99-ef2c-457e-8ff1-729f601cb272",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74e9630b-b1e6-4846-8095-6b0446fdb48f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b4cd86a-34a4-4e6a-809f-bb119c17eda7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4c48c2e-dd8e-4ef4-864d-1cea68fc7514"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ce08e5d-5140-4660-b229-bbd0898694ae",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91186b37-cb88-4fbb-ab5d-8bb420aa57a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6dbf0996-6035-4a19-8b0b-e7c0ddfd4430"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27c6593f-13d4-4081-bb12-ffdfc5ca068d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8062599-f229-45df-8b0b-fe7795741c92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01be6f08-2095-443f-bfb0-8be18bcc84f2",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48fdbd6a-d823-4886-82b7-a0e3cffc0646",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c3b91e1-9e4d-4f7f-abf2-3c2db12da366"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea810964-8297-4ad5-b7d9-b02657420c21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfeac96c-7470-4b9e-9e62-edb6390c3e80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "555f6111-8481-4ebc-88ff-e14661abbe2d",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d1a8599-357b-4725-ad96-9a9f1fe697bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "159e3330-096d-41e2-8fc4-d700dbf8a900"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59001912-48bd-4c00-8624-fdb6a3ef72fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f0a4741-bc1e-4755-96a7-fc2bebd6de92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64d40b4e-d362-4d12-9607-7fe7a32077a0",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "661454da-a5c8-47f9-bd64-ddb1e5b2704d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1abdf5c-4d74-4a04-99cf-4f32a48c1f04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8f9592c-9253-4ce8-8460-c91398b9167f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afb59bdc-6722-4b10-995c-c71e1caef83f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "434ad8ff-69bd-451e-a169-8caa18ad7752",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "301be631-83af-4a6f-8d14-65dd837edd55",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a7fd597-4e86-42a4-b061-38208ba39662"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29edff7e-2ead-4a17-836e-99281cdd3211",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e109f329-0404-4d29-9754-8e7fc13220c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6882c56a-3e9b-41b0-ae40-f65081733b90",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25af9c16-65a1-4a2a-af40-58c577f099d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fee8b1b4-63d2-4f7d-8c14-8a900fae2083"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb11bb2c-2226-4100-a709-79477d9dfb40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eece9c62-4a05-49d9-901e-4fc2911e8b9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7d43eeb-262f-4990-a18a-0b6e11b54b8c",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "067f9fa0-7cea-4d8a-a668-e9973e60bb11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d52f1580-c799-47f9-ae9f-b3c19cdc64ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee8be7dc-108d-43d2-904c-e663297235f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd08de83-c1f9-41ba-ba3f-af53e12b4a6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86fd9b59-25ab-4cfa-bbf4-09a43dbf04cf",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "360f355d-b090-4e23-b642-028fcfa4e35a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd0420a7-83cf-45a9-b300-83cc61c05b42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "835d5e3b-250e-4e00-ac7c-4b35d0a73c11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4f4c64c-8e54-48e1-b604-69d6b83c5bc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6ddbc9f-3f99-4114-bf98-71dbc8d2c6b0",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b8a30c1-6212-40b8-9ddb-fbb83802b064",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c308853-b7e3-4176-8709-dee93be09223"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c21b940-e13c-4086-9588-5ac6211ac134",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49608b14-761b-40f0-a437-daa64798900b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3551383-a34a-49af-8b56-0aa6abf9ad52",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "220e0514-fa76-4f2a-bafe-412ca4429acb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c698a693-0996-4aa8-bf10-74f1295a71d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2b99524-c514-43c2-9468-028d2a74b1c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "569bdf79-86d0-4f04-9067-1eca25897112"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f761d5e-5eb2-402d-a1d8-c9a3403b74a4",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a63720d4-6c80-41d3-9ecb-c4a2941a83f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15572f55-24fa-41e9-b9f2-3c677206d0ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c39290f-190b-4417-90a2-657af0dff195",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36f5dc3b-d492-4f63-8c0e-630b8d253408"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b74b3fe-77bd-4a3a-85f9-38a613b8630f",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50a42b15-cb61-4baa-ada8-fa097043bd75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1460135b-fe87-4f6e-8334-9e55822cbaf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e916fc1e-03bc-4472-a5eb-6add1727889e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8447546-cdc0-4977-a0ef-945aac75d21f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d644c79-2b3a-4fc2-acbc-f3ab35d79c7f",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5109351e-d5c0-4739-8c68-c2bb9e30f918",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d616235b-818e-4694-a399-db814f07bd11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cbc880f-83d8-4d03-b1f6-7c622dad6221",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ceceea54-84c8-499d-991a-09661b4fc7e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da113c0c-776d-4e3b-bb67-7331c4421bf2",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4272caf2-700d-4422-9df2-7e6ffeebc3be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2457a1a-c166-4395-ab58-6dd7e5ef1ce6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0005ab27-a134-4422-8f48-b6e2681a193d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d18e453-22f6-4f9b-9ac5-6480f7c69790"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1372c8d6-ef4c-4be3-bd5f-29f9dd665f87",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5385c8b-b7e8-4cbd-a7f9-692571acd836",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cc71c32-443e-4fbc-9574-34fb327cfc2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8df4b9ba-240c-47ee-a062-99c1dff3d6cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4129c56d-e7ec-4ff0-ada9-1012c76cad13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cad4012b-94d8-4b33-ba70-43379c1debba",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0d31f9d-7e36-45be-bfa6-a55fbe481d55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a46d593-4004-48a2-97b1-50a961520a63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f2d0e76-5dd4-4e5c-8a48-c702bb3bced3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a70529c7-1c86-4d07-8dda-16adf0ab8642"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d051974e-a97c-4e2a-96e6-912252259021",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a915e10-3a41-4d2b-8db9-07493972138e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da98e933-f4a9-461c-9e76-03b987bcc62b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8d6ab64-f541-4b2f-b64d-8f3e828ef054",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4c31182-196a-4428-ba89-80ca2579136c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e11bd6ab-b1f7-4c69-b1eb-31466d57d53a",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3adcc908-6c55-4a43-ba03-692adf631a47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5df159cc-dd27-498b-8823-faaf8cd4cc32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f20c97c-5daa-48b9-9771-96c96ab97d94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd3748ce-3a21-47c7-be82-8852e01397d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ef9a850-294c-46dc-8eda-ed05e1cbba86",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00eaba2e-8172-406c-bf03-8a34c6bbe266",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f0f7c9c-ecac-4273-b6c3-de182ac1cfa8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90e92ac4-3646-47bc-be7b-83e1648c9bb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f68c918-9eba-45d0-a384-9682d3bc6b65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34eef998-cebc-4e01-9211-47a70bc36047",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "769084b4-d400-497a-82db-47830ad3b037",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c4513de-8473-4d5b-9522-106c9b1fbc08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "869fcecc-73c7-4f94-a364-6221220709db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e69ba67-2c05-443e-9179-5ca27eea6305"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a50c5191-f8be-44b6-981f-12afc84ed0e8",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfc9e6d9-1aa4-4c2a-8879-d61cf7baa3b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31c3719e-f0bc-44ad-a7a5-f0ce396b3cd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "357f4207-4cc8-48cb-b0b8-5f0ebc6d4e27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6622c18-4e59-4e9d-8f81-22b8d944f269"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74c8529b-bb36-4def-a703-bca1ebd73633",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d708a4d-5842-4454-9c48-7396c304b9d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf1178e4-28d8-4ca6-87af-01171cd39809"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cce0f85-ce5e-4708-a680-f365136d54aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf65acb6-5995-4d30-ae07-6f97d6decd7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf7d0e6c-53f8-47ec-84f2-efbbae1c9740",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "546571d5-b442-434a-bd93-3e83a9e7d7f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6873f33-0de9-45eb-9ac1-80eb1d6f33a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83bd3376-d34f-42fc-b308-8ab7fad633d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97078e39-214a-4a2d-a469-7ed5b0be6706"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d89aa39a-a768-4e93-afe5-b952f5c5b9ff",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aadabb8d-bb5a-410e-b506-40651dea6d4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86f5742e-953c-404b-9cab-c8f762f3d77f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1132fc6-d591-4611-9dd5-3c6f1ec8017f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5c7972a-dbbb-4e10-a5f3-6ceff483a30b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0fb8044-e75f-4f3e-9244-f01dd0dae577",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af64f61f-2b4b-4fb6-8538-88d52f1a203b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "091d9d70-12c6-4ef4-a7a2-283c2b08a70f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fafabfe-6c69-4861-a5e3-8a933fc5b318",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bfcb1aa-1c5b-498a-9635-f5ea38ae2945"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d49075d5-da3a-45ef-84ea-e82f3f41104f",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63de9be9-4bbd-497e-95c0-669626770d86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48fae674-a6c8-4ebc-b0ad-078b4f3a3aa6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82d1cab5-0239-43a8-b047-01a6e4ac93cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b406f57b-001e-4292-9618-1176052cfa25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40bbde21-ad59-40b3-88e4-d3880e939d8d",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81e543b9-6c12-4d08-93d8-2ee465499fed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a173563-54c8-43a1-8468-3f370dfbb122"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f71cdcc-ca62-42e6-9e97-176f75ea44cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83c2f755-8c0a-44b1-a003-079bd105354b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef3ae79b-c786-4302-8a7e-b2be30d254d6",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "663690a7-1a5c-4526-8f66-1633a4f649d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9882ee8-2990-4fe5-877f-eb6ce2e20444"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edd1a42e-a3c3-428a-a3cd-dd6131a18d36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3ab01c5-a94c-4828-918c-862e98c59a76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b27bec3-6941-4665-a66e-ac61b0776be1",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5981b0f0-68b1-42cc-870b-87425bacfee9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "424b32a3-1c93-4ebb-888a-bc44c4ace6e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "583a741f-a883-4a85-8ae1-4570eb4a75ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e78b7f34-e7b4-483c-94ad-d1dec289a094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59eefe93-556e-4f49-9d1e-6fe26f79003b",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16a0e6d0-d656-4d6c-a383-2b5a60915efb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40950103-fe52-4643-b9d9-3aa6371a6477"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf5550f0-62af-453c-bf40-2a14ba2b1fba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b44d2db-a664-4d58-b8ec-20678bdd2528"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2581563-adf7-4fd6-87fc-a5062cf9c413",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fe0a093-47e5-49f6-9c6f-2f9d71d3e522",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7eab8bb-3374-44de-9add-0f807ca70f8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef4c4b7e-b7ef-4e90-8673-bbda0474718c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14612a0d-3974-46cb-a854-f6c3914eb73b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1f9969e-0f7a-4e05-a634-027843c5a196",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df4b6cbf-9e31-4bd7-ab6e-2a1e26609df2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dedc9d34-2419-4a42-9280-07337ad25b8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7102ce86-ea63-4222-8e1d-f3f9c2cba678",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cd66057-5b38-438b-a80d-c8edf887f661"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d878b373-b7fa-46be-8f0d-6459692baab5",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "390579a1-beff-4825-adb5-c86cf9abaad1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1aed5e5c-ad9e-4d19-a0c6-21bf4cb048e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edbc5b53-1a51-4880-96c4-4c916e66a55b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4a2aa16-cd7f-49c6-8eca-e9a0406ef730"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a2894c8-dcee-4983-afe0-3920a944e82e",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3e06ecb-73d0-4d22-a568-29d629994122",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf17196f-9b16-44cd-a7e0-923b3a0f7967"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b04a7e2-e4f0-479f-8099-78b5f0f00a5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fab2734f-ae50-400d-bd53-28c0bd32adef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76f5016d-a9e5-4988-acb6-1f2466cade9b",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92cb9a0e-9bdc-4075-a433-d42e0e8c9059",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e39da18-1a39-41ba-a614-49def4b8091b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19c04eee-778d-43ea-b396-455a91381a49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa580f06-9d5e-45ae-94ba-b371afcc4ce8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "057a4487-41ad-434a-aa9f-dea0aff6c6cc",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "906689b3-6a67-4242-a665-e85ebbad74b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c922d58-ff9d-4ff0-8ef7-f06a12d01e9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd7c9e66-95b4-41d8-aa5d-ef3db9b8261a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a46c9154-01fa-49f9-acbc-6d3885a128af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef027d32-a007-4ec1-8adb-6c85619088bd",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0866b8aa-5bb6-4be6-9d75-d3ba16de3c53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fdcd35fc-81f7-46c2-8558-5ada9de7c667"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "183dc863-aad3-4389-ac94-783ddb28c9f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "472de069-438f-4d7c-ac33-4ceee5861b3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2553a4ad-bc58-45ac-ac2d-d51203c7c60f",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4e8852a-13b4-413a-abc9-98d81c0aa0b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fda40a2d-5af1-4f94-abbe-8e465c8a2ef0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd179463-550e-4655-8891-606668b42959",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8896ae3-e670-45d3-a40e-964fa4fb2118"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcba51f4-006e-47fc-8200-63b95fe6a562",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aea2edb0-01a4-4c85-8f1f-cd6833be8678",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5dcb0a26-10c6-4b90-9e6e-5aa805a705c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c3e6638-7cd3-457f-bb56-6ca7d194b5ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60957612-6dff-4193-af93-b664604c27ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fc255f7-6ef5-4954-86c3-3c6772be638f",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "440be186-3554-42e6-808b-e357d50fb116",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "927dc244-d4ce-4f5a-ac8b-fd922f83c411"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8ccb95c-7781-47ed-895c-daeff50507da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d7f5921-f70b-4e02-a29f-60c9523eee1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e537a741-489f-40c2-aea1-01ff92bf30f6",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89db783a-f234-4fa2-8671-489e573606ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aaf4bc69-41f2-4dd5-8570-fd2643cf9c1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8ccd904-c111-4929-b737-920da48d0e99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e71687b1-7718-4d5c-9c03-2a159058c0e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0a67bf3-2299-4852-9e85-78f8bb372fd8",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cec1df34-4294-4381-abf1-6ee630262cea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9250a596-337a-45a1-827a-a0abb561c051"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25201284-fc9e-4d8c-a67b-9839c140fa79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76fae3d0-4cad-4106-afa5-ac962c27f230"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87124fa4-c681-422c-9b92-bf6696b69371",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "044eec29-bae5-4fcf-9928-5fdce23ab9d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7cc87add-5487-44de-9499-e566ae22b2e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d32331e-5893-4e4d-b83d-0ed0c5410902",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73d65ae2-c1f8-4191-a1a5-7aaea84afad4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6ccb8de-8513-4c4f-88b9-0e702c1196a8",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b349a55-2cf7-4ddd-9b14-a251de1e5784",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bbe50456-26d9-48fc-8342-52a9fd9502de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf0c7021-7556-4c6d-90f0-4e38ee2377e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b33499f-df71-4638-bde8-17f30e7a3dd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "828a5242-831a-4c9d-a4d5-bffd59eba793",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d114257a-6e56-40e2-b71c-70b45a112bff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38de8a82-a699-4d7e-b49d-664d7479e767"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06ac864b-3ed7-4cb0-bab7-ddf2712e505f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2aac508-04e4-4963-b16e-374ee5c98d90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "747b2ec8-4450-4180-8486-735bd08e4bef",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22d606de-893d-4b8f-80b4-c0b73dda00e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec213ce4-8af0-4bc3-9bc6-8dc51b602212"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aa910b9-2fdd-4512-8560-dbe2259e09da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f94d34d-d975-42fc-8f1d-bde84bce7032"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a255df94-21d7-4916-8a15-7e31645917f3",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d46346f3-25ab-461d-a5b1-bab82861b3d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf2426d0-3fff-4c56-80df-b468504343c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7a4ccbc-41ac-4eda-8efd-45f2ede2a3cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc76e0d0-0e55-44a8-92b7-635fc3409061"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aa6628e-4939-433e-b040-cfdeb76a0d78",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f733124-d427-4d06-904c-3030c417332c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df2f9fa3-6e14-49e5-8ba4-de2408a6589b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9afba528-9ab3-43b0-a832-0bc7bea64426",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8da57d2e-7030-4054-aa9e-0f559f17c870"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1413e1a5-1134-41ee-8fa2-79fbb18f3037",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5de8c172-9222-4bba-966f-fc0a7ce51bdb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25cd7427-9bbc-4d60-be2f-706b59e51b1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b6438bf-d82a-41f8-88a7-f08b4b59b006",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a840b835-c3a8-4217-9166-1c664952e939"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9c199f5-13f9-4872-acc0-506284534401",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6913503-d5fe-4a8a-ada7-17bf3ed5394b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ca1fa01-02ca-4377-8b27-ea43a5855a05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "765856fc-db5c-41ad-807c-0c36d9cb4ddd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c79c7bf5-5c1f-416c-8dff-70a3f6aade2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "572899a7-e720-4f09-b5f7-06f4160a2742",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e38119bc-4d34-4c2e-8d98-1f3a9d088385",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "316f38c6-3553-4984-bc13-85997d05b4bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec976caa-2cad-446d-a7ae-d17d9981c2aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e17fcfa0-bba1-4dc0-b049-685f5d772db6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91ce13a0-1324-43f4-8b90-ffd882811970",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "780ddf69-9e09-48cd-9211-a88368b29983",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02103949-bc86-41b7-9428-3f42e7fe95a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70534bd4-4101-4885-b4db-e19586fbc953",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcfdfd81-03f1-4cb9-91c6-3c784608b315"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d95422dc-4bbe-472c-874f-b53756eb20e0",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6607e4bc-377b-4a0f-b75f-6ba113e2966d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ceb65872-f616-4647-9ad9-d53f1661d134"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8afc879b-3076-4884-96bc-0aca1f60316c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e4b9663-2ea7-4bbc-a688-880158be641a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8c3192c-d71b-4a04-aa77-ea4d205092c1",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f38abe34-b38e-4b03-bc91-ebaa2c802f78",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7d72fae-20b9-4a60-b1bd-043ea3e6bb6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98ffebdb-ac5d-4715-a9ae-1f4cb4483438",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3b180b8-10d9-4c55-bc66-2d3e30c4b610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f4b3a4c-f77c-4c5f-830a-a910cbb74e6b",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "088e0d15-0695-47a8-bb97-686fb64efdcd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2958ad1e-8bd8-4f6f-adfe-56bb026195ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76db1809-9966-4532-8daf-f11b689a99fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be6191ef-7e75-4312-8a0d-218ecd6cb74f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e4dbb1f-6393-42e6-95ff-01503e1e2a94",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da020db5-468d-43fb-8585-5813a36a8f7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a780cd0-2115-4b32-908d-f0f264e3b961"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71533ec5-6b87-4711-a84d-e1678aac99e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dd73ec0-0a39-48e0-aae5-2b8424613264"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8c52c07-a3d1-4cb8-99a6-d7383b8118f4",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fede3f22-f267-44bb-809d-6f32a79aa020",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7bbf8cc0-d3cc-43d4-b011-f020e3ae1b00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0edb25ad-4c2f-4fd9-b20e-fc52e70944d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40bea01b-b36c-4a9a-9a7e-b53240dbf11a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d3a8241-90d6-422f-a9d9-0e4ce577df05",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01c38605-09e0-4a36-9abd-ce69faf16f74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db25bbfa-8c1a-4f70-b2c9-f6c9a1e6449d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1320c4d8-0de2-40b4-9d84-107b14987e0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e46f76c-09a6-4362-9838-b80e374036dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd63ad42-caa3-4377-a9a7-c585d174bca1",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38d2d687-d557-4579-84ac-da3dab13d5c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eccab90e-e423-4974-b892-f94e0ed30b37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08998e17-b2e2-411d-ac19-815a3dfd8e0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0df667c5-7066-4ad9-ab62-5205eac47fea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75a3fbb0-c0b7-4b80-a85d-d45ca98289ff",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7874b7bc-c82e-4b4f-8687-f9027b63eac9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b609b0df-f802-43ab-97c2-73f78dc6c722"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c54ea73-cc7c-45f7-83d3-71c548395110",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec366157-3bb9-4293-bdb7-fa858f0de611"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb559218-2b50-45e8-9943-f9c62ea384f0",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81053c2b-0da8-4497-a550-92208a1630d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8132434d-84ae-442b-b3c9-48635326d35a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11b371ed-083c-4000-8c20-a8c07377ac8d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9c41431-2e18-403b-a414-0c4ea2be1e1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a51e0fdd-8679-4c6a-a0e1-02d0ed9cb542",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fc0b1e5-9b4a-4b6a-80e3-d0c8e7cc1dc7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "101a64ca-a9b4-4d9d-8b32-0c4fd2f34f2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e4afd3d-bc10-40d0-b269-98a685cf5f05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7a25aac-3a3d-428b-80f6-34fd5f23697c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca2b0ded-e966-449a-a5da-584336c86c9c",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5e15266-5a38-4335-b14f-264506bca5ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b402e20-099a-4cd1-a5f6-cb3d68c3f88d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a16a7423-2398-4315-bd63-aecc492c434a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "491f24a5-9427-421e-bdfe-f12e9d358fbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44977566-e869-48bb-bfda-64058c6ff785",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ad525fc-e529-4a39-b25c-03a7944ebeef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24891021-ac09-404f-a408-3a6cc77d290f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03a4e1b8-31a0-4a05-adae-bcd26d9b7c23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7880dabe-f5cf-41de-bcf3-b89fa769d27d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ce9b303-5670-4e20-bedd-a6453edb6666",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdeb589b-e38e-4226-b835-a38b41b039b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5d7c650-1e2e-4759-9288-6f551b5278c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35652c63-ff35-40ac-a3ec-707b0928572c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ad5c2a8-eb9e-4731-8162-33a9b72eda30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "014b4565-e19e-4fe2-b41b-780996789f17",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e86be799-99e6-49c5-9b59-84194966a3a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a56b244-33aa-46da-b12a-ea4a1257707c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61ef9ef6-4a41-4b76-ab6b-1cc11678880a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ec07a51-b58d-47e7-a83a-22bf10ef9a6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c42a9646-67f5-4d18-83f8-2d84496d1d47",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b45a2fb1-56a9-45fd-8ec4-c0b9803aedc6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "651c9e9c-0bbb-4828-b35c-11b024ec4f97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a247be1e-cc46-4791-bf52-c9ef4762e611",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b0c3ad1-f553-4c57-8ca8-a9065bf59518"
                        }
                      }
                    ]
                  },
                  {
                    "id": "747b67b5-7d42-43b9-bcc3-4d7a6d26ed8c",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f9dedbc-4b28-4fda-92aa-cacfe99aa3b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0da27b17-cbd1-4be0-9b82-1f7c05e7f6af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e72447c-5db2-4d5d-a25c-cacb25f1acbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dff8aab-4276-4ff9-80fd-e157b14563e4"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "36ee147c-fcad-4a43-a9f4-a25931b489d4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fe59744a-8253-4fe3-a28d-d0666a980ce3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cb6f32e3-5a97-4125-b322-a80d0dafc6c6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ee7183d7-6480-49d9-a9d0-7e8e901c21c1"
                    }
                  }
                ]
              },
              {
                "id": "7b4120cf-3c98-4a70-9374-98089c4ae596",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "18a66a22-f810-4f9e-b6e7-fc55a94780e0",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd7ac58d-d42f-4c1c-b92f-8b2d512a6c47",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "8c750cc8-1b55-429e-9720-7043d79ee937"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61cd6977-9a5e-4693-bdac-bfc99b39a1e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b291eacc-db70-4da7-8b20-a0fa3166fcda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8af2ebe7-6677-4ccb-92ce-23dac72bc284",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c95d2131-e562-4d13-a76a-83cf8f3986f3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "fab2cb14-4e3c-4302-a297-3dc13d3b8b25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaa6d6a8-74f9-425b-8dce-b32bda9008a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "941891da-20f2-442c-aed9-a587d1503964"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "db83de72-b70e-4f1f-889d-9c4cad70e086",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "004448b5-dc36-436d-99a2-aea9f8737f8f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "42efaac9-02a1-4fe9-8fea-f6cfe74230a6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "05b31b94-23e7-4e51-83ff-7d14a36a4e32"
                    }
                  }
                ]
              },
              {
                "id": "0c0190c0-71bf-45f8-b432-bda0e1dc77d2",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "b360f660-86b4-4eb5-adde-ddb518ca86ee",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f95101f-2620-4dc2-8ab1-31530e454ecd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "42b8a0f9-ef99-4645-b5f6-58dca33c7b95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f259509-f945-4aee-9b43-f285c720bc36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "846882ac-5834-42d8-86de-a6497bc85c6c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "29bc0d8d-cfc1-4a77-bd0a-6bfd433e30ad",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ad5b3dee-dd10-4e23-9f98-07a2842f17b4",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fac9fdf4-c0a2-4ada-ba0c-cd538ab6d3eb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "2269a4bd-5a52-4858-b705-d2e4b19204f5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5378b181-e935-4940-b48d-6a7e1a763cf7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d2f30c25-1242-44eb-bdce-8ad0771958c5"
                    }
                  }
                ]
              },
              {
                "id": "912e8816-c5b5-41d1-a2ad-a94894debdb9",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1dd00090-1b7b-4e07-97d8-4ef2dc8b8421",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d71c8814-c017-4bbe-8472-63ae6d8bc76b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7f27ac57-c4e6-4023-a74c-acb03bcb598c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "256fb1aa-d688-4ffe-a326-41b9de479efb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "57e621bf-45bf-4cad-b57d-73ed76ebf97e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "fed10f3a-a75f-4b27-aa20-9209c2bd1540"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ffdc1287-1b2c-42d5-85d2-9359da318145",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f6056664-32ba-4e14-964d-5d7777ecfd64"
            }
          }
        ]
      },
      {
        "id": "a15cf4c9-6c47-4b6a-995c-664ae654f955",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "4ad8697f-f1a4-4814-8395-b5779ad5381a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e08f2ae3-9921-4802-a6b0-da9104f401e3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4a36f572-d56f-4fac-a983-f1cade2fcf48",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36ba6574-6701-4b63-a19f-bd51cc06da08",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e95d857b-05c5-44f3-92e8-81d65774b309"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc99d008-ea89-47f8-9433-46c39e64d77e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a85baced-674a-4291-9dc6-4514e53bbcb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a01aad87-a66c-42b4-8a44-121eeb7a06c6",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f26b20d-2f8c-4bdc-830c-e19fbe2d0575",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ad753fa3-4d26-407d-8825-fb6cdca813bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "096cc1a4-0dc0-4632-9306-809c6efadedc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c9c393d0-ec96-4abf-8478-10d72130cc4a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cbc54dfa-9f30-4c59-b8ae-053e85e7ec2f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "af3f4767-daa6-44e9-a13a-41d8af8f98da"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "aa14116f-7158-45b4-b9bd-0d140543aa90",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1e482949-fffc-46d5-840d-4448e8c54dec"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ac08fe3c-2278-4ee6-8a0e-81c706193ab3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "74ab6b59-220b-4d9f-822a-e84f0d650b25"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "622e9c5f-51ce-4537-ae3f-cc10d9d972f9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "45edcc1a-dece-4ff4-b6c8-6a39192eaa10"
            }
          }
        ]
      },
      {
        "id": "89a8e067-69ee-4569-9d14-93b9ccf2b3b4",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "f5181756-a587-442e-8ee4-86fe861e3a1d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3f8890a7-4812-48d6-bbe7-599aa036cc9f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b6fcc547-d93c-4caa-9be2-961b4bfc7469",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ac3ecb0-641b-4ab0-8be7-0c4a67764f75",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "69fe8e60-204a-4ced-95ea-a9bffde2d44b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a129790a-4b0a-41c5-8d4e-f91444982b04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a5185458-915f-4bb6-ab7c-8999a5a1b9d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebe391ad-c0b8-4de0-823c-071e6c5de78c",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7140166e-b64c-4a84-adbb-212523898764",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "1a84c55b-bcac-4a0a-b99e-a6b32069d500"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b946acf-0113-4156-b40e-42eeda96f2fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "85780eb4-d828-4f78-8f87-a5ab74286928"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e14f4255-0761-4946-b5f8-866d2be037cb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3bb76dc2-47fe-4f70-9ce9-d8ceb4ccf651"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "46d46fc5-72ad-42d5-a3fb-1efc36f7f9b2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "885b99c5-361c-4cd7-a26b-e239e1d65c4d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f12a0168-321e-4a70-8f98-b84641ac9b03",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "7beb9f6d-ecfb-4bc6-8782-a1ff5d353e6d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "98cc859f-1562-445a-87eb-202060490063",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8052f9b5-d603-4a48-81df-773e03a6fcb0"
            }
          }
        ]
      },
      {
        "id": "76428bfe-1ff9-452c-bdad-d539998e1550",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "859ba817-aa2b-4183-a51a-d50e8973c279",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ae898d5f-eb4e-4430-addc-12470cb8ee94",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "32fc7f0f-0725-4ae5-a3d6-351658e3abd0",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbcee1d7-59a3-46fa-a207-b23e729afbea",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "74f12466-8148-43b3-b3a5-65e36129bf45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cc65133-d89a-4bbc-b832-6623e9f8b229",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3cc462d8-119a-42c9-85e2-9188797b9810"
                        }
                      }
                    ]
                  },
                  {
                    "id": "139d363f-5c12-4390-b45d-aeefbd821eb0",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d045da6-07d9-4fd4-9e02-8814e2929f73",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "bf709efb-ca35-4205-8582-cfe43db9e413"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6564d0b-1761-45cc-adae-8f14ea5d1407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c2a67014-8613-496f-a905-3d92412b4dbf"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "01b0eaa2-48d1-4a06-84d1-5cf8adff6413",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f969bdbc-fe3c-4ef4-8d5f-372ca3880b6b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2965d7a8-b200-4dc3-8eba-f2e18d7c11f5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0e27f155-7fa0-4259-b881-12914d95a2ba"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3d498e15-4aeb-4663-b5b5-1adbf6a816c4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "13c00194-4d7f-40d2-a175-6bc7224b318b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "44ff549e-f93e-41a5-86d3-f8ae282269eb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "edf24fdb-eb8b-4c1b-836b-37eda6a8a5b6"
            }
          }
        ]
      },
      {
        "id": "e54de066-4b93-47b2-8233-d55543014a52",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f5683585-4be5-4daa-95f1-31b9c1d7adc1",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1839d101-1551-4ea3-af21-8978cbc8af28",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "bea6fb0b-12ec-4000-9cff-49787fbd5602",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c1149d0d-a081-4b7c-aeda-b0c68d20ea36",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "51cadf42-43ec-4b48-aec4-d6f5835b33d0",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 101
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 111.09160305343514,
      "responseMin": 14,
      "responseMax": 875,
      "responseSd": 168.74835369880265,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1672533769638,
      "completed": 1672533809736
    },
    "executions": [
      {
        "id": "ab4b01b3-baee-4bc8-bca5-021f2993ea5d",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "c6a12f5c-446c-45b8-9b8f-898c5e2347c5",
          "httpRequestId": "3e5e9e4b-a883-4a5c-a77d-5f92394b01d3"
        },
        "item": {
          "id": "ab4b01b3-baee-4bc8-bca5-021f2993ea5d",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "689d1ed3-52da-45e2-b795-24eaf9afe274",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 0
        }
      },
      {
        "id": "c26c7248-4f83-4ecf-a1f8-066e894dad8d",
        "cursor": {
          "ref": "ffadaff1-e8f4-4a45-8433-2848576d4831",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "898e5cdb-7b1a-485d-8116-27ea14631ca8"
        },
        "item": {
          "id": "c26c7248-4f83-4ecf-a1f8-066e894dad8d",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "0a7d87ab-0793-4a94-b868-2da4db9b522c",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 0
        }
      },
      {
        "id": "b4295de1-8f9c-4af6-aeb1-7871378e485b",
        "cursor": {
          "ref": "89d368fb-5219-4533-bfc4-4f4d0916f5f1",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "685600d8-7a27-4ef8-98c0-da445a5d5c1f"
        },
        "item": {
          "id": "b4295de1-8f9c-4af6-aeb1-7871378e485b",
          "name": "did_json"
        },
        "response": {
          "id": "bb731987-5cc5-4392-82bd-7f69da5c73d9",
          "status": "OK",
          "code": 200,
          "responseTime": 137,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aef5d12-3374-46fa-b2ee-7c804864e755",
        "cursor": {
          "ref": "f66d4987-dcb4-4675-873a-0a62346d1e9f",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "68eedd93-f6b9-4bed-a812-3695c3dc0ef2"
        },
        "item": {
          "id": "2aef5d12-3374-46fa-b2ee-7c804864e755",
          "name": "did:invalid"
        },
        "response": {
          "id": "aefbc4ed-51ae-4dd3-b0fe-ec664c3553dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aef5d12-3374-46fa-b2ee-7c804864e755",
        "cursor": {
          "ref": "f66d4987-dcb4-4675-873a-0a62346d1e9f",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "68eedd93-f6b9-4bed-a812-3695c3dc0ef2"
        },
        "item": {
          "id": "2aef5d12-3374-46fa-b2ee-7c804864e755",
          "name": "did:invalid"
        },
        "response": {
          "id": "aefbc4ed-51ae-4dd3-b0fe-ec664c3553dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6200a25-a956-4fc0-94ac-66ce1227481c",
        "cursor": {
          "ref": "3476785e-04b9-45ba-ac1a-d99ac9f9de6c",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "18784416-e5f0-4d73-90b2-9a216fd350bd"
        },
        "item": {
          "id": "e6200a25-a956-4fc0-94ac-66ce1227481c",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "e59ac7a3-42f0-4106-b842-70b6c28fdfa2",
          "status": "Not Found",
          "code": 404,
          "responseTime": 70,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62f48150-07a7-40bd-a592-f991269e47ea",
        "cursor": {
          "ref": "f69bc2b9-c83c-4977-8e3e-5a832db8d18e",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "6989f4ab-f5c3-4820-b7e0-50e3ae5fd181"
        },
        "item": {
          "id": "62f48150-07a7-40bd-a592-f991269e47ea",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "2b6f6716-4a33-4ad1-8dd0-ddfe80bcc1e0",
          "status": "Not Found",
          "code": 404,
          "responseTime": 32,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "038592de-20c9-42ee-a634-f7070ffc1fd8",
        "cursor": {
          "ref": "c54e4ee1-6c35-4808-83dc-6b07cfb1ed11",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "34eb9c74-4a45-4dda-aceb-74097f3d393c"
        },
        "item": {
          "id": "038592de-20c9-42ee-a634-f7070ffc1fd8",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "3e66c668-fb84-4dce-9442-fc9b46ef7406",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2204a10-4c22-4bd5-b32b-9f116dc0a512",
        "cursor": {
          "ref": "3ac0a60e-2165-4dcb-bac0-bcc597e966ca",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "25325043-e9bf-4b0f-8111-b1f7dda53e35"
        },
        "item": {
          "id": "e2204a10-4c22-4bd5-b32b-9f116dc0a512",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "b80e3b3a-94f1-4d30-af95-20fb5c14a79b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2204a10-4c22-4bd5-b32b-9f116dc0a512",
        "cursor": {
          "ref": "3ac0a60e-2165-4dcb-bac0-bcc597e966ca",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "25325043-e9bf-4b0f-8111-b1f7dda53e35"
        },
        "item": {
          "id": "e2204a10-4c22-4bd5-b32b-9f116dc0a512",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "b80e3b3a-94f1-4d30-af95-20fb5c14a79b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb83d2b6-4d8c-4bef-8035-aab1c48342cc",
        "cursor": {
          "ref": "e84763e7-f5b8-4036-9eb5-e1955c121e5e",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "af0b1aef-29a4-41fc-a6b2-126890e2c6f4"
        },
        "item": {
          "id": "cb83d2b6-4d8c-4bef-8035-aab1c48342cc",
          "name": "identifiers"
        },
        "response": {
          "id": "e62fb751-0902-4424-a70e-309515ca19ec",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb62ba95-eb93-441f-ae70-8d4611117974",
        "cursor": {
          "ref": "8e93ac85-6c3f-44f1-921f-e0b6d816e99b",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "19409610-8dda-4480-9c09-ea3bb38d2e4a"
        },
        "item": {
          "id": "eb62ba95-eb93-441f-ae70-8d4611117974",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2cf9ec4e-0faa-4a0b-9804-6398036be0f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb62ba95-eb93-441f-ae70-8d4611117974",
        "cursor": {
          "ref": "8e93ac85-6c3f-44f1-921f-e0b6d816e99b",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "19409610-8dda-4480-9c09-ea3bb38d2e4a"
        },
        "item": {
          "id": "eb62ba95-eb93-441f-ae70-8d4611117974",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2cf9ec4e-0faa-4a0b-9804-6398036be0f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6c30fdb-0817-4cbe-9599-ad0e82865584",
        "cursor": {
          "ref": "47bdf841-82ba-468c-991b-ae7d8ed7720c",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "a1b38821-657e-482f-944a-60fe10dc3cd7"
        },
        "item": {
          "id": "e6c30fdb-0817-4cbe-9599-ad0e82865584",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "a5e3c6d5-30f1-4666-bb22-798cae0b66bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a10118c-dca7-4080-83f0-9e2f8052e262",
        "cursor": {
          "ref": "676be38e-72bf-4d61-994d-f302a59f12ec",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c707cc65-4868-4250-9c23-7b39b6cfad2e"
        },
        "item": {
          "id": "3a10118c-dca7-4080-83f0-9e2f8052e262",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "ee1ca38f-f283-442a-b0aa-00b0ee769eda",
          "status": "Created",
          "code": 201,
          "responseTime": 755,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "65cfe75a-7377-471e-9f58-d95de9da2a68",
        "cursor": {
          "ref": "050a5297-2a96-4396-ad39-e7e69a5d31f6",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "6540c893-78d3-46b8-bbb8-ce9976fe2a7d"
        },
        "item": {
          "id": "65cfe75a-7377-471e-9f58-d95de9da2a68",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "0ac5a9c9-a95a-4085-9f20-4ceb3f41458d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a014a503-2054-42f3-9915-1dab3a37a24d",
        "cursor": {
          "ref": "d8ba7d6c-729e-4740-b848-886daf7afdf0",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "562dfe10-4423-4f62-9eb7-fdd7c3f6c7ba"
        },
        "item": {
          "id": "a014a503-2054-42f3-9915-1dab3a37a24d",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "07a46250-ecc0-4e32-b597-9c6dddff88e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc9f8d1a-ad37-40e7-8a67-e32822e820c5",
        "cursor": {
          "ref": "d4313c03-4da2-4081-87c9-2a7a4faa7795",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "9107ac86-da53-4def-8c49-5d65f4198bac"
        },
        "item": {
          "id": "cc9f8d1a-ad37-40e7-8a67-e32822e820c5",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "40fed67a-2df6-4705-90f7-444e4dd16ea7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09e55fdf-f7ff-4a69-8d1e-7c8b2dacfaf8",
        "cursor": {
          "ref": "a347e6a5-e47d-4747-8754-ed5794ca81fc",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "51b078b8-07c8-495d-a493-8f4b7c95d847"
        },
        "item": {
          "id": "09e55fdf-f7ff-4a69-8d1e-7c8b2dacfaf8",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "958d4e7f-26c3-4735-a0d1-d1178412de19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4397c50-6521-4801-acb1-0cc28cb6a759",
        "cursor": {
          "ref": "74ae031e-65f9-4cde-ae71-5d227407aaed",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "f7141c9a-e91b-4450-9d8d-c97840245b91"
        },
        "item": {
          "id": "a4397c50-6521-4801-acb1-0cc28cb6a759",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "0ead7bdd-fb1e-404e-95cd-60fc954ef01f",
          "status": "Created",
          "code": 201,
          "responseTime": 516,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "a94cf6ba-0d97-4dfc-a11e-4ac71b7332c8",
        "cursor": {
          "ref": "ecd873ba-cce5-477c-8fb3-dd31ddb050a5",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "030b922a-ea2f-4e43-b8b8-ad99e7e7a92c"
        },
        "item": {
          "id": "a94cf6ba-0d97-4dfc-a11e-4ac71b7332c8",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "3a0c234f-a406-4f30-b48d-f6eb7ce1beeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a1bb5f9-3e98-42d4-813e-e233c8295e35",
        "cursor": {
          "ref": "5df3c1e9-a97a-4d0c-a7aa-72eac000140e",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "8dd0f999-514f-4172-85bf-2ad1c256e8e0"
        },
        "item": {
          "id": "7a1bb5f9-3e98-42d4-813e-e233c8295e35",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "323ca9af-aa87-4be4-afb3-4e4bef02d914",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38ba05ad-7ee7-4a9b-9b30-825d189d0ba1",
        "cursor": {
          "ref": "f092ff6e-ef24-4415-a33e-792a8668c4c9",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "f4e4dbb0-85ad-4a02-8a60-9b638c8e51d8"
        },
        "item": {
          "id": "38ba05ad-7ee7-4a9b-9b30-825d189d0ba1",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "dc34cd49-8f4d-44d4-898e-18e41e8053ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc0d9e34-95ed-4321-b444-3b0260a5cb2a",
        "cursor": {
          "ref": "9a1100fd-6c9f-430a-8229-dc7d68869e60",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "b69214b5-93a6-4ecd-9308-d1ce431294f5"
        },
        "item": {
          "id": "bc0d9e34-95ed-4321-b444-3b0260a5cb2a",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "1e4a830a-ed42-44c6-8b40-c17ab852adc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c034fc9-c6f2-4ba1-8643-277473adb2f7",
        "cursor": {
          "ref": "6009d3da-7036-4311-a609-c59a342a0b51",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "766a6fe4-2e1e-4e61-bfdb-156ae177dec0"
        },
        "item": {
          "id": "9c034fc9-c6f2-4ba1-8643-277473adb2f7",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "cae7ca27-e994-4283-8925-01129ce49c2e",
          "status": "Created",
          "code": 201,
          "responseTime": 508,
          "responseSize": 736
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "6e2ef829-9dbd-404e-8c35-365de0a06524",
        "cursor": {
          "ref": "54dd0a53-a010-4b59-8d94-c5b40b63961d",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "7f705465-494b-4611-95b7-654bf28c6ae3"
        },
        "item": {
          "id": "6e2ef829-9dbd-404e-8c35-365de0a06524",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "b7dbe602-3595-44d1-829b-af49a244b94a",
          "status": "Created",
          "code": 201,
          "responseTime": 875,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "29e51782-750d-4914-b3b7-66dd8b8c714c",
        "cursor": {
          "ref": "96138750-56ba-4914-8adf-d2b8db956bfb",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "daaf6d12-711b-40ff-b415-6db3c78551d0"
        },
        "item": {
          "id": "29e51782-750d-4914-b3b7-66dd8b8c714c",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "b5bf78f5-d180-4d5e-badb-d0a39d461b47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3479fffa-ddb0-4153-88b7-e85375194d95",
        "cursor": {
          "ref": "22899491-a537-4708-8a5f-8c8f40778aba",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "cc2d4dfe-55c8-4917-a7d1-ed986bbb6545"
        },
        "item": {
          "id": "3479fffa-ddb0-4153-88b7-e85375194d95",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "82f3edb8-eed4-4304-abbb-240d065289f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20ba04da-0445-49c5-a6f3-4f1d54861802",
        "cursor": {
          "ref": "7363d514-55c2-4475-bf4e-fb442da8d92c",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "ff0faa6b-c625-443d-88fd-14a35c6d90f4"
        },
        "item": {
          "id": "20ba04da-0445-49c5-a6f3-4f1d54861802",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "78c14faf-4fcf-41c8-bc9e-c7053fb895d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8124b04c-1217-4207-9cfb-eae743946ec9",
        "cursor": {
          "ref": "b449898e-6907-4be1-a641-d4ace2c70e72",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "c0c0772b-858a-4365-8c57-a20a55b3447c"
        },
        "item": {
          "id": "8124b04c-1217-4207-9cfb-eae743946ec9",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "69370111-7a73-4c76-8067-56587dca98e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85b857fe-d33f-4b4d-be08-e9b2919184ad",
        "cursor": {
          "ref": "3c36bfee-bb86-4376-a3ab-e7b84e17ffc1",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "3c4b9a1b-bf96-41bf-b4bc-1fb4944afc34"
        },
        "item": {
          "id": "85b857fe-d33f-4b4d-be08-e9b2919184ad",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "50ac6f1b-0b5f-40b9-a6c7-6a67b75cd009",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36edd8d8-9f81-4096-8ef6-f5358a3974ba",
        "cursor": {
          "ref": "9c0bdac8-d0ab-4c4c-b86a-3edaa0fefe2f",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "f3295ab4-a6dc-412c-b084-c5654cc495c3"
        },
        "item": {
          "id": "36edd8d8-9f81-4096-8ef6-f5358a3974ba",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "7a721c64-243a-4a8c-8d50-6d2a79dabe8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99b51f5b-b1ea-4851-a7d6-4a8b1880ffcf",
        "cursor": {
          "ref": "f14f9a16-2a9c-4cb4-86df-b2778d40bf65",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "6f0b2432-62c9-48b4-af56-8d68a5ba8274"
        },
        "item": {
          "id": "99b51f5b-b1ea-4851-a7d6-4a8b1880ffcf",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "892234d0-016f-4d9f-be78-d3161d427db3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc658661-dece-4384-b876-51a07bffbbeb",
        "cursor": {
          "ref": "1a789076-8bd2-4352-a1af-a6d88bf59068",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "bec9e2b1-8ed1-437b-8782-34eb7052e148"
        },
        "item": {
          "id": "bc658661-dece-4384-b876-51a07bffbbeb",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "8ea9e080-c25f-46bd-b930-4d61837dcfd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac0ad484-9242-4335-a889-aac9f7c418db",
        "cursor": {
          "ref": "43ab0cb6-09c3-4b4e-a65d-bde2bbe26f98",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "e230e031-5a74-4e1c-9bcd-32f4a85ccad7"
        },
        "item": {
          "id": "ac0ad484-9242-4335-a889-aac9f7c418db",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "cf6fe84a-a95c-4fc4-9602-a70c523e2804",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32ed6be3-53cb-4829-8b17-e744cbd349b9",
        "cursor": {
          "ref": "0da035f4-f689-4ab5-96ed-ce20da28c811",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "cdd4e5cb-a040-4ffd-ac8f-10cc955746f5"
        },
        "item": {
          "id": "32ed6be3-53cb-4829-8b17-e744cbd349b9",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "65e70076-1e43-4af5-afe1-ae8166aba9ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e53bfd54-9303-4f43-86a5-591554508c00",
        "cursor": {
          "ref": "0f707dc0-5b33-410b-8f63-3dffc7fa6e9f",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "dd59fad8-b0a5-406c-a1d3-bced3627a4f5"
        },
        "item": {
          "id": "e53bfd54-9303-4f43-86a5-591554508c00",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "af4e2a57-4f1d-4e6d-b426-d2f1f9926617",
          "status": "Created",
          "code": 201,
          "responseTime": 687,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "4001b7cd-1776-4606-9199-bba2ad24c7ea",
        "cursor": {
          "ref": "e7303aed-cfd0-43e0-b83d-4cafab1e774b",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "53f83ee2-69bf-4176-afa0-9072410c4e70"
        },
        "item": {
          "id": "4001b7cd-1776-4606-9199-bba2ad24c7ea",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "bc742e28-0525-41ca-80a1-9dac1f5c588c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfa0967f-8697-4f05-af01-a9bdd80e3fdf",
        "cursor": {
          "ref": "fc2a7807-ff24-4770-943f-bb5e72fe86d6",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "db0c5a78-f766-4982-9273-87f9ab6275dc"
        },
        "item": {
          "id": "dfa0967f-8697-4f05-af01-a9bdd80e3fdf",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "67de53b0-c2f8-4c49-bbf0-05e91f482ebc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bb0a1d7-d15a-48df-8ab2-24ce8c2ecf63",
        "cursor": {
          "ref": "15caa5d4-ed05-4dfe-8d1d-75f8fd844189",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "6c185798-c005-40ab-9f0b-a9c39b273221"
        },
        "item": {
          "id": "5bb0a1d7-d15a-48df-8ab2-24ce8c2ecf63",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "8518027d-eff6-4b79-bb74-5d6d753a7a9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e63b56bf-2100-427a-a222-4ab9db83ef31",
        "cursor": {
          "ref": "8e703bbf-d8a1-4467-a7ed-a54aae198859",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "dffd942d-ede8-48dc-ac21-8de87e440949"
        },
        "item": {
          "id": "e63b56bf-2100-427a-a222-4ab9db83ef31",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "14286716-3edb-47a7-a4bf-1585f465ed15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e51a2fc-23eb-4631-848c-59777c454db7",
        "cursor": {
          "ref": "16cf16ab-bfa3-4f1b-b037-7dd29db325f9",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "1d25bc19-1661-4cae-bbf4-0578bf1c8c64"
        },
        "item": {
          "id": "3e51a2fc-23eb-4631-848c-59777c454db7",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "28f35b93-da61-4983-a70f-14e86cfadf77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d8e8abb-eaf4-4213-955e-9b3df3abb6cf",
        "cursor": {
          "ref": "e5f8b11a-ac9f-486e-920b-c838bcdf584a",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "c5a9a7e0-e5fb-43f3-bf06-d73318627020"
        },
        "item": {
          "id": "0d8e8abb-eaf4-4213-955e-9b3df3abb6cf",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "c3e54b3d-f18f-4045-b2dc-daf4b3024616",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e2437a4-c549-4851-a496-484ecd92fd41",
        "cursor": {
          "ref": "78ebf819-bb5b-488e-8187-e8ba49a98f79",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "a4b2ccd2-aa53-4def-a672-a1ccd7deb4ac"
        },
        "item": {
          "id": "6e2437a4-c549-4851-a496-484ecd92fd41",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "415c6093-4e70-4c06-9e85-7eaf3385a09e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3aa77eb-0ea9-47d6-b111-944961597e2c",
        "cursor": {
          "ref": "3ea79893-494e-4e67-afce-9cc0857a79c7",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "38d4b8a3-32a5-4f60-ae2f-95d98448a4b7"
        },
        "item": {
          "id": "e3aa77eb-0ea9-47d6-b111-944961597e2c",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "46822157-db69-4118-8cd9-25e6cf6b0cc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fb0e02f-fe64-48c2-83c0-99069cc6d44d",
        "cursor": {
          "ref": "5c359c83-06a6-4591-a58f-32fda2512243",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "b8060293-7dfc-4036-88f5-261d7836cfe4"
        },
        "item": {
          "id": "9fb0e02f-fe64-48c2-83c0-99069cc6d44d",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "3a97d152-8e82-4bdc-b291-7a0841fb2ab6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6534961-6137-4026-9d97-bad06318db8b",
        "cursor": {
          "ref": "78394ec3-df05-4552-8831-765622b9a270",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "5870e194-600e-41e4-a3ce-045da5100a8b"
        },
        "item": {
          "id": "c6534961-6137-4026-9d97-bad06318db8b",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "4996b783-a3dc-429c-aef7-4c3d23d45d3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1bab627-498a-44df-b532-c7e88ac01707",
        "cursor": {
          "ref": "2a7f5e35-3da9-48df-9e91-4c513daedc83",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "df51e1a3-a056-4296-a984-047e6d0e0520"
        },
        "item": {
          "id": "b1bab627-498a-44df-b532-c7e88ac01707",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "91fa2be2-06e6-498f-a689-5232a334cc6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb658f70-16ae-4842-9ef9-cdc0105be56c",
        "cursor": {
          "ref": "2867ccfe-9288-49f3-945a-6e676ac58ac8",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "80303a6a-2026-480e-b59d-a823a1bdc80d"
        },
        "item": {
          "id": "fb658f70-16ae-4842-9ef9-cdc0105be56c",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "c3d00d99-195a-48ef-b451-787db6a5a57b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd6b859e-11e3-447e-9979-40a015745bba",
        "cursor": {
          "ref": "a77a9856-2ff7-4355-ae48-8aaf235101d7",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "277d5ce1-104f-4bc0-9e6e-c299fe18afc7"
        },
        "item": {
          "id": "fd6b859e-11e3-447e-9979-40a015745bba",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "9f2b90a5-11e9-433c-a6c6-e8b897196614",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 342,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "202b7019-d3ab-44f5-9b78-698a9a54e4a1",
        "cursor": {
          "ref": "ee850a65-3bc7-4553-aa23-1451eb9b5bec",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "590ba4cf-1944-41fe-aaff-9c36fe238ee7"
        },
        "item": {
          "id": "202b7019-d3ab-44f5-9b78-698a9a54e4a1",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "179f5126-cb16-46a4-bf98-597a079c5fa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9cffc69-987f-405d-b3fb-4e463dc347f9",
        "cursor": {
          "ref": "e22e7f3d-cb3d-4f31-acef-e88adef8056f",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "f146197f-e661-4445-a82e-dbff95847e99"
        },
        "item": {
          "id": "b9cffc69-987f-405d-b3fb-4e463dc347f9",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "b481046c-1dba-442b-96e2-0b41f680a013",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55a8e4c4-b90b-477b-ae8f-1fd9b6c056db",
        "cursor": {
          "ref": "a8606499-f997-44e6-93ea-c85d7f7cb09d",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "de3b6cb3-fbe5-4be0-ba5f-769de73e15b6"
        },
        "item": {
          "id": "55a8e4c4-b90b-477b-ae8f-1fd9b6c056db",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "dfda0993-2813-491f-b1cd-bb310595c07d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77b9b2d8-2e50-4d38-9a1c-fd720f9406e3",
        "cursor": {
          "ref": "d12d58bd-73da-4dd6-867d-e4403f54e453",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "f3259fe5-9de7-4070-9d67-9e9073484106"
        },
        "item": {
          "id": "77b9b2d8-2e50-4d38-9a1c-fd720f9406e3",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "2bf6aa24-6843-44bd-ab0f-13c6b209a7df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5155df04-7e76-4e6a-be42-987d3f69b714",
        "cursor": {
          "ref": "45206fdb-1ac7-458b-8796-1f16be2bcd72",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "b5d570ed-c9b6-4f0d-b9a3-68e0be104b81"
        },
        "item": {
          "id": "5155df04-7e76-4e6a-be42-987d3f69b714",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "167b7a5d-8731-4e08-b640-0eb8d133a9ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47706c71-ba32-4251-857e-65bcaa8a5df3",
        "cursor": {
          "ref": "94c50cef-f5a5-4a67-9541-56b7a27e4841",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "a6216698-a711-49b7-ae68-ceec3171e62a"
        },
        "item": {
          "id": "47706c71-ba32-4251-857e-65bcaa8a5df3",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "2f88ac89-3c12-47e9-8d51-7044b498e900",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d591d16d-7abc-475b-af3b-9d1dd701e925",
        "cursor": {
          "ref": "b1477dbe-7b85-45de-893e-a3b6a367d7b6",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "e75e1233-220f-4b21-9c5c-36645bbe31c4"
        },
        "item": {
          "id": "d591d16d-7abc-475b-af3b-9d1dd701e925",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "1c789e3f-76ac-4279-85a8-ddd792b346f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 377,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "e410fd64-99a9-4a53-b66e-a3c8d3907a34",
        "cursor": {
          "ref": "933b6c96-fedb-40e8-9a4c-44889d4a33a7",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "a37740c8-9ba9-403d-8be7-fb497a3491a0"
        },
        "item": {
          "id": "e410fd64-99a9-4a53-b66e-a3c8d3907a34",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "f2f946a0-3e2f-431e-9588-ce0ccd9baae2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df92afe8-db49-4d30-9c6c-f797c01533a5",
        "cursor": {
          "ref": "00e9fffd-bf82-4585-a005-5caa380d0345",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "e96bed13-9667-4e69-87a9-84954d56937a"
        },
        "item": {
          "id": "df92afe8-db49-4d30-9c6c-f797c01533a5",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "9d914987-6386-41d6-a1b4-09eb74d7b915",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f625f923-77d7-4c56-8fb3-445435646d5b",
        "cursor": {
          "ref": "05d9242b-a9c4-488d-afd5-07f54d167358",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "e444b52c-940b-4bdc-9e1a-a83e7011cf7a"
        },
        "item": {
          "id": "f625f923-77d7-4c56-8fb3-445435646d5b",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "457792df-5973-490b-b0d9-519eb460a1ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1ce1249-76a6-494c-bdfd-22ec64f57fc3",
        "cursor": {
          "ref": "c71a170f-e771-452e-8b3b-544f7462e558",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "5c5f99ec-3d48-4604-a873-52961b1357df"
        },
        "item": {
          "id": "e1ce1249-76a6-494c-bdfd-22ec64f57fc3",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "eb7ed1b2-1935-4185-bafc-319a28a6ac07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb85957d-aacd-4d43-bf28-927129b48541",
        "cursor": {
          "ref": "152ae4a4-5e87-4d2e-a739-2ffa44f70791",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "3807357d-1e7a-45f9-8d6f-ae9cad51a7fa"
        },
        "item": {
          "id": "cb85957d-aacd-4d43-bf28-927129b48541",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "024b5ee9-dfcf-4c93-81da-db07558fc24a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7595016b-955f-486a-a82c-3096f482e8fd",
        "cursor": {
          "ref": "ffe863d6-39ae-4cd5-b42f-8a3539d033b9",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "63e6aedd-4537-4e9b-bf6a-e4e43069960e"
        },
        "item": {
          "id": "7595016b-955f-486a-a82c-3096f482e8fd",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "03689a4a-0bca-42fd-8057-d72865fa5ac8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15c82e8a-59ed-4fbe-8b6f-839847855623",
        "cursor": {
          "ref": "a4ac25f9-1827-48d1-a226-7e3bec10c2cd",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "8e8635fc-65d5-4c6c-89d3-d3abf4f4e9e8"
        },
        "item": {
          "id": "15c82e8a-59ed-4fbe-8b6f-839847855623",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "01ec4746-ffad-4722-ac83-b1eb5ae3f85c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f203d67-eaa4-4f4f-b411-522e71ea6b3a",
        "cursor": {
          "ref": "26981566-17e3-4a17-a142-bcd1d3522530",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "1f4d80b8-59d2-4cf8-8068-5472bbb4f202"
        },
        "item": {
          "id": "1f203d67-eaa4-4f4f-b411-522e71ea6b3a",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "b3a66b41-2082-4131-a1f6-30e326c9dcc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dca4e7ad-451a-487b-bfd2-7802357cd537",
        "cursor": {
          "ref": "465454ef-6084-410c-acde-2735ef63f723",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "59f986cd-6981-4f39-853a-04ce5aa9d67a"
        },
        "item": {
          "id": "dca4e7ad-451a-487b-bfd2-7802357cd537",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "34074882-b8d5-43ab-8d8f-ff1f6797ee0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fa9a377-3654-4058-9f57-8a3dbff9f83a",
        "cursor": {
          "ref": "faf95bef-4ee4-446c-b14d-eadd895e626d",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "6afc5f3f-30bc-4a64-88a9-24eed8ed3df2"
        },
        "item": {
          "id": "4fa9a377-3654-4058-9f57-8a3dbff9f83a",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "21af33ff-b658-4547-8175-63af0b995816",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db8bc09c-35e5-4d57-a8e3-3e20510b32dc",
        "cursor": {
          "ref": "ce6ce1ea-6b34-462b-9a4b-5fd4b145483f",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "6ff4142b-53e4-437b-a6e9-2726e08a6d1a"
        },
        "item": {
          "id": "db8bc09c-35e5-4d57-a8e3-3e20510b32dc",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "a7f56297-e44d-4b8f-bee7-ecefd728846d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aef03882-a10b-4c7a-800b-2ef2b3dcaf56",
        "cursor": {
          "ref": "ff6fa1a7-bc27-4d54-b317-be14033ca34e",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "dd8d1bcc-c5e4-4ba0-a97d-548e697d8908"
        },
        "item": {
          "id": "aef03882-a10b-4c7a-800b-2ef2b3dcaf56",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "92dfc39b-cb65-4621-8e2c-898dc104b792",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7454bf5-b4c6-4dd5-91b4-de1f1d10a07c",
        "cursor": {
          "ref": "ffe67b81-9e83-45d8-9633-05459647decb",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "5b901d2b-ed74-4e23-80eb-6022d4159848"
        },
        "item": {
          "id": "e7454bf5-b4c6-4dd5-91b4-de1f1d10a07c",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "401625d1-4712-472e-a74a-6e074101405d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4b154b5-a9cc-4871-9420-1eeb334129fc",
        "cursor": {
          "ref": "2685429b-eaf6-49ee-a10d-ec324b9d3df3",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "7395e688-68db-4081-8e7d-75ef4a923762"
        },
        "item": {
          "id": "e4b154b5-a9cc-4871-9420-1eeb334129fc",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "ee2398a7-07fa-471d-bf9d-4308fd496202",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "174b3992-4ef9-4e7a-9318-d39438019f82",
        "cursor": {
          "ref": "f7673f24-685f-410e-a5c8-2ca08e03a1c8",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "caf8d42f-e29e-4c06-bbf5-6bd939184920"
        },
        "item": {
          "id": "174b3992-4ef9-4e7a-9318-d39438019f82",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "3d20a90c-0863-4702-a8fe-904b11c0952d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b698c35-160b-4b9a-8233-f52fa0527b40",
        "cursor": {
          "ref": "569bcd04-6220-47a3-ad3b-5d5cd4cc4ea3",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "7e1e75d1-13c0-4ff9-9f37-3d7925409974"
        },
        "item": {
          "id": "2b698c35-160b-4b9a-8233-f52fa0527b40",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "97bb6b42-6559-4754-8d1f-4d00d6b3d758",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d5e8dc7-4893-4818-9d59-4cefcdf29abb",
        "cursor": {
          "ref": "b7615da5-a8a1-4b8b-8c52-dcd9e976ff6c",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "a7bebef9-20a2-4dc9-a859-51f581717e85"
        },
        "item": {
          "id": "0d5e8dc7-4893-4818-9d59-4cefcdf29abb",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "df338208-4cc8-4cca-9b34-d28b2f71b498",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 189,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdb7b9ef-82e0-4d64-84a1-3e8adf3c7ea9",
        "cursor": {
          "ref": "64677577-b790-418a-8039-b1a4d9d6e3e4",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "794bc2ae-d68b-4ecc-afbe-d715f153bd91"
        },
        "item": {
          "id": "bdb7b9ef-82e0-4d64-84a1-3e8adf3c7ea9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "c3727c43-814b-4640-abff-14ff68327027",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79a6cd59-171f-42ea-99d0-9c7191627f09",
        "cursor": {
          "ref": "b4b87475-6f7d-494a-9c66-4f8995cefca2",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "b9e0f2f8-c323-4783-bd20-a20dd29a1035"
        },
        "item": {
          "id": "79a6cd59-171f-42ea-99d0-9c7191627f09",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "bf14e6c4-ae86-4047-a7c2-538bddc54529",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f80d6708-69b5-4f6b-90ad-22e47a7e4a81",
        "cursor": {
          "ref": "030f3161-00ce-4a0b-bb09-289d8f6b74dd",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "63ca498e-5ac0-47f2-8022-74458b46e887"
        },
        "item": {
          "id": "f80d6708-69b5-4f6b-90ad-22e47a7e4a81",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "67596e61-a72c-4430-b989-d0b83113d96c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22f16f61-5eb1-459c-b4e5-63574b71d1ab",
        "cursor": {
          "ref": "e9f2396a-b7bf-4a62-96c2-7bef5c47be30",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "0a14feaf-ddc2-4ce7-9765-311d96982ae0"
        },
        "item": {
          "id": "22f16f61-5eb1-459c-b4e5-63574b71d1ab",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "6009cc98-6657-4505-9513-102d84146f50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4389ad3f-1cbb-4060-b8f6-30d77df1cd3e",
        "cursor": {
          "ref": "327099dc-7cca-48c9-b70d-cb449fec7084",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "21bba383-5cac-4512-a9cc-a8513880b40b"
        },
        "item": {
          "id": "4389ad3f-1cbb-4060-b8f6-30d77df1cd3e",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "d50a7e5d-a073-4183-a3c3-cfd881c22521",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aed4aeab-90a6-4280-b432-970e0765eff6",
        "cursor": {
          "ref": "fd0225af-25df-4a3e-bbfc-5b22df4e3f72",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "1ea08453-c4d2-42d1-8529-66164db5107b"
        },
        "item": {
          "id": "aed4aeab-90a6-4280-b432-970e0765eff6",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "1fc3f01e-0e2e-45ba-bac2-fe0820ac3d02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c28d0b0-82fa-4566-9744-4dcd721e7e6e",
        "cursor": {
          "ref": "f448cd64-6e74-429b-b2ee-cbb248f949e6",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "f7d56dcb-da60-4261-840e-b0fa5be1ca71"
        },
        "item": {
          "id": "8c28d0b0-82fa-4566-9744-4dcd721e7e6e",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "6e145dbe-3059-43a8-83b6-aef94aa4f4c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0d8ef38-6d73-4417-9461-0d4e8ddd20ee",
        "cursor": {
          "ref": "051e9dd6-ca21-4190-b28e-1b76a046bdf5",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "f52d220b-17dc-4197-b379-9a52e38f7edf"
        },
        "item": {
          "id": "f0d8ef38-6d73-4417-9461-0d4e8ddd20ee",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "22408958-52fd-46fc-b016-5a8bd724e452",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c5327f7-4fb1-4bbe-9e34-2ef94edbccc6",
        "cursor": {
          "ref": "16dc5ff6-9a6f-499b-9034-3cb94f6ccb68",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "0c942d2b-f505-4c7b-ab7b-a1af0f1313c6"
        },
        "item": {
          "id": "3c5327f7-4fb1-4bbe-9e34-2ef94edbccc6",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "704b70ad-8036-4b39-a66a-2f75d71632a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "599e97fc-34f7-48ee-9c96-01bea7f93a26",
        "cursor": {
          "ref": "e2270849-5312-4bb2-b514-fd71b5cac713",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "c2c2e176-8b37-429e-a9db-7c01cfc87469"
        },
        "item": {
          "id": "599e97fc-34f7-48ee-9c96-01bea7f93a26",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "af7e72dc-883c-422f-aec9-fb55050fb939",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "743197dd-3a7b-41f4-b660-a05c6a415fdc",
        "cursor": {
          "ref": "47724d6a-7817-480e-a018-59cdbf0bfad2",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "fc57f3fd-3d06-493d-a9ab-3e2c886fbcd1"
        },
        "item": {
          "id": "743197dd-3a7b-41f4-b660-a05c6a415fdc",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "f45593c7-0467-417f-a681-ad7b7a44b58d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11822062-898a-4909-9079-c441bfa43508",
        "cursor": {
          "ref": "d66ff398-e0e1-43ed-acd3-16646172dd73",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "0e910808-369f-432d-84c5-21f1a39eedce"
        },
        "item": {
          "id": "11822062-898a-4909-9079-c441bfa43508",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "4854294b-913a-4993-9577-39a03e22ba0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4aaf4a58-67ca-48ef-80ed-5095e7c22ae7",
        "cursor": {
          "ref": "da9337fb-3044-4abf-b451-abc4ce5b4c0a",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "efa6c04e-f925-4047-b498-1fb3558871d9"
        },
        "item": {
          "id": "4aaf4a58-67ca-48ef-80ed-5095e7c22ae7",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "157858b7-a44f-4ef9-8860-713bb4f26faa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebee000c-364b-4ec0-bd86-245b665fcc28",
        "cursor": {
          "ref": "1e4062b9-1ca5-4f8a-9879-a31524cf8acd",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "1d277df0-e181-4437-9ea7-0b79d81c4b74"
        },
        "item": {
          "id": "ebee000c-364b-4ec0-bd86-245b665fcc28",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "80deb2ae-b7ac-4d28-bec3-e122fc0313ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 379,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c7c65e6-c9f0-4cdf-b1ab-601b105b4332",
        "cursor": {
          "ref": "1d5ea655-1b0f-4a47-a1bb-1e4811035876",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "6313967b-0a1f-4f4d-a0e4-e9d42277de12"
        },
        "item": {
          "id": "8c7c65e6-c9f0-4cdf-b1ab-601b105b4332",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "294c96c5-582f-4e9f-97cd-514a01393eaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c22b062-3ee8-445d-af68-a2680332fd45",
        "cursor": {
          "ref": "a52f47ec-cab0-40f5-a874-82984ef4c3f1",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "c64a3512-43dc-4b05-a3c5-dae33c674fff"
        },
        "item": {
          "id": "6c22b062-3ee8-445d-af68-a2680332fd45",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "6b6edc13-3803-4a9c-bb47-c8dca30c4d19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f3ea20b-3407-4bad-9f28-b1037f5c732a",
        "cursor": {
          "ref": "7014b92f-1c1c-4885-bd1e-34e8c3b7b19e",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "5d458589-0a88-4aa1-993a-0414ccc1bdd1"
        },
        "item": {
          "id": "7f3ea20b-3407-4bad-9f28-b1037f5c732a",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "1847ba8f-208a-4bfe-ad84-4101d7a836fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f034ba6-d1ff-4074-828c-fe1e082980db",
        "cursor": {
          "ref": "2dfe41ef-cceb-4ce2-8c81-a5b8ac736a00",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "795021ee-a3b3-47fb-8e68-c7cdde94e5fd"
        },
        "item": {
          "id": "2f034ba6-d1ff-4074-828c-fe1e082980db",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "614ee671-72b8-458f-83a0-cb5cc8e34212",
          "status": "Created",
          "code": 201,
          "responseTime": 702,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "63352680-7649-4343-b37e-860ad9c270b4",
        "cursor": {
          "ref": "83df3519-f131-4646-8add-476fc2c81580",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "bb616230-d2c7-45d6-bbbf-44d0b3f56773"
        },
        "item": {
          "id": "63352680-7649-4343-b37e-860ad9c270b4",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "aad4cb89-2880-42ba-a893-04a40be98781",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "768addec-d6f7-4c8e-9632-f098521e1824",
        "cursor": {
          "ref": "9868a070-4011-4f19-8c87-8982d12c225f",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "cc0064a1-54ea-4207-bda3-dcd5e0b73f40"
        },
        "item": {
          "id": "768addec-d6f7-4c8e-9632-f098521e1824",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "972354e7-26ba-4eb1-b933-6487acf3453a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa737311-f41b-4fed-98fa-a027252a3b93",
        "cursor": {
          "ref": "7c53b4c7-ffd9-49d3-8935-eebb868a5093",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "52564553-7e6a-4901-8980-028fa0805735"
        },
        "item": {
          "id": "fa737311-f41b-4fed-98fa-a027252a3b93",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "adcef599-52dd-4288-9296-d660f2116e14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee6461d2-b9b8-4883-b0fb-63c7844236e4",
        "cursor": {
          "ref": "1326af2a-fc08-4c11-8266-7d47233f2f0a",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "1fb82112-813f-40ab-8800-300410b9897a"
        },
        "item": {
          "id": "ee6461d2-b9b8-4883-b0fb-63c7844236e4",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "ac96ba45-ba67-45ce-a14e-29b2c12eef8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7847374-3dce-475d-95fe-aa2acde7d72c",
        "cursor": {
          "ref": "ad0a4a04-4f97-49f2-9229-4ff8fae90227",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "f198c2fe-b8e9-4c9a-836a-a5e092305eb9"
        },
        "item": {
          "id": "a7847374-3dce-475d-95fe-aa2acde7d72c",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "bf92f9ef-2a49-4ea6-971e-6592049d4498",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cce78088-f7eb-4d11-83b8-8539c7ab2e22",
        "cursor": {
          "ref": "7455e696-fbd7-4a5a-b643-03231b1380e6",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "389212cf-02da-4b23-b696-b10a9701d403"
        },
        "item": {
          "id": "cce78088-f7eb-4d11-83b8-8539c7ab2e22",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "292cdb3d-74b7-45d1-a28f-a2917e10d3f4",
          "status": "Created",
          "code": 201,
          "responseTime": 668,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "695d7551-7bdf-49e6-82ff-0538f7471a59",
        "cursor": {
          "ref": "ca543bd5-ee2f-4362-b446-7c97084f3eef",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "fd44a27d-12a0-4ba0-9ef0-1951680304e3"
        },
        "item": {
          "id": "695d7551-7bdf-49e6-82ff-0538f7471a59",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "e1a39425-2244-420f-834d-6ce65ebee52c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51752db9-dee8-4611-96b1-dab178589282",
        "cursor": {
          "ref": "bea11a40-ae7b-4cd7-870a-f37516afb56c",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "45222c24-2e91-48ea-99f2-b18a6cdc9d72"
        },
        "item": {
          "id": "51752db9-dee8-4611-96b1-dab178589282",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "174d53db-6c87-4d00-aab4-4a41b5abaa2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3512e42f-6135-4f2d-ab17-eda2e4da108a",
        "cursor": {
          "ref": "61590634-751f-4860-a766-20f363beb675",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "257f9b1c-aafc-404b-8fdd-86b999026b1d"
        },
        "item": {
          "id": "3512e42f-6135-4f2d-ab17-eda2e4da108a",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "ad43485c-19cd-45b2-ae4f-649bbde7c59f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7b0ecba-f112-44c4-8fb1-3068712c905a",
        "cursor": {
          "ref": "702873cc-d5e9-4a9f-b9d9-9799f4dd8473",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "72cb456c-2943-4426-a2a3-00acfbba7d13"
        },
        "item": {
          "id": "c7b0ecba-f112-44c4-8fb1-3068712c905a",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "d90070e6-2367-4fff-a00d-6ba3616b7439",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c677829-5820-46f7-98d2-5cde6a7eb4f7",
        "cursor": {
          "ref": "15d03908-f319-447b-a0b7-6276a448b592",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "68a6cfcb-2139-42ff-af84-8d2386d8c5d3"
        },
        "item": {
          "id": "7c677829-5820-46f7-98d2-5cde6a7eb4f7",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "d13caccb-f583-4ae6-a148-e2d9592e2150",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ff2735f-6c68-465a-a757-b768af55753e",
        "cursor": {
          "ref": "28a181a1-43f6-404b-92e8-9aa713eb2652",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "e9613566-7577-4b62-afac-7cfbe200b5a7"
        },
        "item": {
          "id": "3ff2735f-6c68-465a-a757-b768af55753e",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "1ccfe767-bdea-4126-a200-1ca4a06a77c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73877974-87e4-4d23-8b72-8815af39ef61",
        "cursor": {
          "ref": "6ea63335-523a-495c-87c2-f44262eb7e74",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "92a6329f-90cd-4887-8e99-8da89effac4d"
        },
        "item": {
          "id": "73877974-87e4-4d23-8b72-8815af39ef61",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "5131a952-f97b-40a3-80f1-947cce0fe4c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1dcb367-3fcf-492d-bce1-f8a25e0d6e02",
        "cursor": {
          "ref": "fca981b8-ed6c-4194-bf74-b3c3595d9f9d",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "5f66e1ef-45d4-4d0f-9c3d-c07b41c790b1"
        },
        "item": {
          "id": "c1dcb367-3fcf-492d-bce1-f8a25e0d6e02",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "3f201966-0b5e-4cc0-ae37-a72e4075c5e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 131,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b8f0723-71a6-4d7a-9482-d0205ac0e049",
        "cursor": {
          "ref": "694c7fe1-4995-4236-b71c-34bb12714286",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "40330d3e-5c74-4cc7-9321-7ccc4b4c1f88"
        },
        "item": {
          "id": "8b8f0723-71a6-4d7a-9482-d0205ac0e049",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "657f7b58-93be-42d7-a2a6-7ee9c7f6f11d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "e638c4b3-93f0-407e-8cd6-137e987364e9",
        "cursor": {
          "ref": "4443e25d-6420-4bc0-828a-bbab69e24a86",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "e08c93ab-f4de-4857-8f7e-f7be61b47e78"
        },
        "item": {
          "id": "e638c4b3-93f0-407e-8cd6-137e987364e9",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "0b885e0c-72be-455f-a8aa-ee284d5d5a17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "04f413ca-94a0-4c13-bf5e-2f461a04e74a",
        "cursor": {
          "ref": "7a54c8b1-9811-4f0c-bcb0-f671b6829be6",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "6d41db0c-7ca0-4705-92fa-c7690042a6bb"
        },
        "item": {
          "id": "04f413ca-94a0-4c13-bf5e-2f461a04e74a",
          "name": "credentials_issue"
        },
        "response": {
          "id": "53bea954-2dcd-4497-bb4d-7f24d6ebd38e",
          "status": "Created",
          "code": 201,
          "responseTime": 675,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d4cd849-e623-42ab-8583-d8433fa75dca",
        "cursor": {
          "ref": "98cde3f6-c304-483f-ac51-e0c6fc8e5951",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "c446f0b7-6812-4c00-9c66-6363ccb2ea07"
        },
        "item": {
          "id": "3d4cd849-e623-42ab-8583-d8433fa75dca",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "3219b29f-3dd8-4c36-873d-2e9276c2feaf",
          "status": "Created",
          "code": 201,
          "responseTime": 666,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "773fe0f2-f127-4132-892e-ffaf1c7d456b",
        "cursor": {
          "ref": "a7a6cc7e-0340-49a5-be76-aa7de369898d",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "38835d3b-1cf1-4508-a60e-d0b516ede747"
        },
        "item": {
          "id": "773fe0f2-f127-4132-892e-ffaf1c7d456b",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "64e29a0a-023e-405b-8210-0f5f79e2eb38",
          "status": "Created",
          "code": 201,
          "responseTime": 675,
          "responseSize": 747
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "591d4da7-bde0-4b2f-9503-94cec8505497",
        "cursor": {
          "ref": "8f7f97bb-5400-44bf-856a-27ee74f17c61",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "b07eac05-9238-47e6-abd9-f2af4b151d9d"
        },
        "item": {
          "id": "591d4da7-bde0-4b2f-9503-94cec8505497",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "9e982318-b09f-4938-9ad5-2a2b24d02590",
          "status": "Created",
          "code": 201,
          "responseTime": 655,
          "responseSize": 715
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "00d6e7e2-2f67-4d7e-a34f-45c19944f81e",
        "cursor": {
          "ref": "a431d333-418f-4b31-87e3-2ae4436ec0e7",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "32b4f9ed-aeac-4702-b5a4-11c8d013c9a8"
        },
        "item": {
          "id": "00d6e7e2-2f67-4d7e-a34f-45c19944f81e",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "39b90f99-a2bd-4826-acaf-0ae426f5a65e",
          "status": "Created",
          "code": 201,
          "responseTime": 682,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b4aff0d-2fa1-4759-ac81-ae69e5dee2cd",
        "cursor": {
          "ref": "ec4dce77-654f-4200-9b49-e100b47785c5",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "d84a3c6f-6e9c-42b4-85c9-c5469c69c92c"
        },
        "item": {
          "id": "0b4aff0d-2fa1-4759-ac81-ae69e5dee2cd",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f79cf1d5-8a92-4e30-b158-015350ddb29c",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "0b4aff0d-2fa1-4759-ac81-ae69e5dee2cd",
        "cursor": {
          "ref": "ec4dce77-654f-4200-9b49-e100b47785c5",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "d84a3c6f-6e9c-42b4-85c9-c5469c69c92c"
        },
        "item": {
          "id": "0b4aff0d-2fa1-4759-ac81-ae69e5dee2cd",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f79cf1d5-8a92-4e30-b158-015350ddb29c",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "c315a2c6-703e-417a-a21c-ffd17ef743b8",
        "cursor": {
          "ref": "b8429cd0-03a6-44ed-85e1-b7a298c56054",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "239bcb49-e163-4498-bfed-568395ea63e1"
        },
        "item": {
          "id": "c315a2c6-703e-417a-a21c-ffd17ef743b8",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "b6f9bcc5-585c-459c-9619-b866eb37b565",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "b868f930-0b65-4978-9b47-af50560c1158",
        "cursor": {
          "ref": "d5f9da53-db99-422d-894c-60ad0af2bdf9",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "ab6466a0-84f2-479d-b1b7-7cd0b3789810"
        },
        "item": {
          "id": "b868f930-0b65-4978-9b47-af50560c1158",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "f536ac23-2466-4ba9-9d6a-f10b0aac4929",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "bd773c23-6efd-4ea7-a715-1e55eab52c76",
        "cursor": {
          "ref": "7bcd94c8-8340-4153-b233-41827dc4fa5e",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "ea99eec6-334c-4cb4-bdb2-c5efad920bbc"
        },
        "item": {
          "id": "bd773c23-6efd-4ea7-a715-1e55eab52c76",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "8408904b-1676-48be-821c-03503fe02d57",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "a4748dcc-90c4-4602-ae5e-7848bc7424ef",
        "cursor": {
          "ref": "cac82d12-4337-497d-9a40-fc0b536de038",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "58f94a3d-cae8-4bfc-a076-b83e5381fb9b"
        },
        "item": {
          "id": "a4748dcc-90c4-4602-ae5e-7848bc7424ef",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "1c13bf90-d3c8-4fb0-8e30-8f162d70e86c",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "bf5e3054-ffd1-45c2-a943-3e28493ad7a2",
        "cursor": {
          "ref": "cb7452ab-e136-41d4-b5e5-a377fd6c334c",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "010f14bb-999e-4bd2-b730-37ef0c62adb4"
        },
        "item": {
          "id": "bf5e3054-ffd1-45c2-a943-3e28493ad7a2",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "ae34e2e8-da2a-41de-bc20-af2209338619",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "262fd4cc-af9e-4497-96c4-8a52eb574dc8",
        "cursor": {
          "ref": "485c3b6b-5bbb-4c05-8ec7-4bedc03fd778",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "94afb7e8-7abc-4918-9214-b23b293bc73a"
        },
        "item": {
          "id": "262fd4cc-af9e-4497-96c4-8a52eb574dc8",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "f706978b-4236-428a-830f-9e4b556f1553",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "bd4e2bf2-0d5e-4568-b321-e7fdc6d825e0",
        "cursor": {
          "ref": "2b9296db-21f1-49cb-99d4-3849579b9f98",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "dfadb735-c316-45e4-b890-125ea78dbbd3"
        },
        "item": {
          "id": "bd4e2bf2-0d5e-4568-b321-e7fdc6d825e0",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "17f56662-2937-4c79-894d-5d9218883fd6",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "350b293e-df37-4193-815c-c5f0ab8703dd",
        "cursor": {
          "ref": "7273b4d8-47f8-4c8f-98c1-364d03d4ecea",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "9e64762b-6ec4-43f7-8036-95d09b10c8e3"
        },
        "item": {
          "id": "350b293e-df37-4193-815c-c5f0ab8703dd",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "cf61319b-ddb2-4f05-a510-1f785f595003",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "a58d16b0-a7af-46d3-a2b8-69f1ea1f0223",
        "cursor": {
          "ref": "f5d0b2fc-a9ff-4815-859c-187089b7859f",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "78523325-a445-4c5a-99d1-5ccb3e5230ff"
        },
        "item": {
          "id": "a58d16b0-a7af-46d3-a2b8-69f1ea1f0223",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "5fe9012f-83e1-4568-97c7-8fb147811fb2",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "cceeec3b-03ed-4fc3-a9a8-9cb98037b913",
        "cursor": {
          "ref": "68747f6b-92cf-4795-8c8c-4c4509af12ed",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "5da9f9f7-2d65-4d30-8324-8ed08dc59dc4"
        },
        "item": {
          "id": "cceeec3b-03ed-4fc3-a9a8-9cb98037b913",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "03ecc775-0ade-4858-ab3f-2a231589466c",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "2a24203f-1b8e-4e6f-aa28-5faedd5b383a",
        "cursor": {
          "ref": "32cb2955-550d-465a-b745-7d171f9a05bf",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "b607839d-6679-4d30-8e6c-0c7107ddac0d"
        },
        "item": {
          "id": "2a24203f-1b8e-4e6f-aa28-5faedd5b383a",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "bed3f919-8c8a-4967-a340-c3e1b8e16749",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "89d84d74-76cd-4a0f-b2f7-b90985c86144",
        "cursor": {
          "ref": "537e4c5d-60da-47f4-bfc8-83fa8f745380",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "b08f657a-6468-4f7e-8c43-82f73a050863"
        },
        "item": {
          "id": "89d84d74-76cd-4a0f-b2f7-b90985c86144",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "e3d64d11-f0ad-4278-8f33-381f5f20cf28",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "164714ea-1d3a-40ee-9d84-3bd8fdb2ae14",
        "cursor": {
          "ref": "436f9875-3920-463c-8a3e-dd35f01647c3",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "e6f202da-3ad9-4bd5-bc7a-ee60ebda4294"
        },
        "item": {
          "id": "164714ea-1d3a-40ee-9d84-3bd8fdb2ae14",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "5e69e231-4ac5-4449-8eda-f6c708ba88c4",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "858659b0-56f0-456d-be4d-0cd801ff7337",
        "cursor": {
          "ref": "5ba743ad-3b9b-49c2-b3aa-81e9bbb88092",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "643e86db-6b11-4382-9d32-ffb52a26b256"
        },
        "item": {
          "id": "858659b0-56f0-456d-be4d-0cd801ff7337",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "69231b54-5077-4023-9e2a-ca4f3d7bf47d",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "834447d4-1d74-4e52-9d49-39ca436f6f35",
        "cursor": {
          "ref": "cafdb73b-0bcc-4193-a087-5a51d89e2b7d",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "c32aeb6b-91ad-476f-a435-cb4d5df61974"
        },
        "item": {
          "id": "834447d4-1d74-4e52-9d49-39ca436f6f35",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "5e97ac42-00d5-48a2-8de7-ddd7a5688d32",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "c52adce3-32b9-4fc5-a158-71c85decdb42",
        "cursor": {
          "ref": "ad397f22-bda1-40d1-9b05-25d26281538c",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "1d9ed11d-4071-4ffb-85ab-4809d765dd2d"
        },
        "item": {
          "id": "c52adce3-32b9-4fc5-a158-71c85decdb42",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "b6f70623-5d13-4478-bba8-8bb463375709",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "f73758c0-02a2-45e4-867b-b3515fb78a5b",
        "cursor": {
          "ref": "16f93a34-f93a-4087-8f5c-76bf4b40af53",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "ce955a2a-0245-49de-a01e-3d384bb75901"
        },
        "item": {
          "id": "f73758c0-02a2-45e4-867b-b3515fb78a5b",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "3cc86725-2d14-4a5d-aec2-f494fddafe68",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "d4d9c8f6-7322-4a6a-b353-0399a230919a",
        "cursor": {
          "ref": "7c71d96a-4c52-4c54-96c2-3cf0800fd16e",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "2ac3c4d2-4f71-4be2-9339-9186eeb22b2f"
        },
        "item": {
          "id": "d4d9c8f6-7322-4a6a-b353-0399a230919a",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "83c00533-9852-4c95-a3ba-71747f7bfd69",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "9ad49100-7073-4e7b-a24e-af8e83546bf1",
        "cursor": {
          "ref": "9263570a-8fe7-418a-a7a2-dbe385dd3576",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "e52055ec-75b8-4948-8317-ac3ef48fa4e1"
        },
        "item": {
          "id": "9ad49100-7073-4e7b-a24e-af8e83546bf1",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "4e8d7584-1a21-4ba0-bb7a-97445ac13eb3",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "111a6dcb-632f-4d8c-bb01-a9951d21823e",
        "cursor": {
          "ref": "42858832-4d37-4005-a4b4-8fe837d4ea76",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "6d7f0c27-82ae-4fa9-8ec0-2bb66d705a3c"
        },
        "item": {
          "id": "111a6dcb-632f-4d8c-bb01-a9951d21823e",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "eebbf8bf-5265-47cc-9130-e67e0021a26a",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "ef168778-3d1d-4bc6-865c-5a2d6d3a31e0",
        "cursor": {
          "ref": "6f74f6c4-c76f-4909-8e71-790a18bcbb5c",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "0f1aadeb-30cf-4ecc-ae7c-d9e2091efdac"
        },
        "item": {
          "id": "ef168778-3d1d-4bc6-865c-5a2d6d3a31e0",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "ee277725-cb02-4150-b9b7-b598e17e8dbb",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "c4d6634f-36b6-49e7-a788-2ed04e65e352",
        "cursor": {
          "ref": "47df0702-bcdf-4e7c-a1a2-edc0f9a98f63",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "cd334f71-61a9-4270-a2af-0eb31dce31cd"
        },
        "item": {
          "id": "c4d6634f-36b6-49e7-a788-2ed04e65e352",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "f3765927-bf54-42f0-94ef-ed561a35c3ca",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "21e73617-4a06-418d-b4e0-072d032cb7e7",
        "cursor": {
          "ref": "71639697-6390-4257-a953-167411ca4dd7",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "b1fd1c28-11bb-484c-b411-493845dd7085"
        },
        "item": {
          "id": "21e73617-4a06-418d-b4e0-072d032cb7e7",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "ae475d96-068b-427f-913c-b26889fdb4b0",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "6adf5bae-361e-409e-bf2f-9245aedecf74",
        "cursor": {
          "ref": "6757f867-5b46-45e6-82d6-0b51b55d852f",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "191614b5-4925-42c3-a61b-c205f080b058"
        },
        "item": {
          "id": "6adf5bae-361e-409e-bf2f-9245aedecf74",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c5a38951-6904-4ae0-a3b2-bba0c48621d5",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "28979dc4-364f-4dbf-ae95-dbbc37b95e71",
        "cursor": {
          "ref": "bdfb7bc6-b91b-42b9-9752-5201322e8930",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "5e4b4749-ed7d-4b58-9845-f9e953572367"
        },
        "item": {
          "id": "28979dc4-364f-4dbf-ae95-dbbc37b95e71",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "433baa3a-d552-4980-8b6f-e073eb4ba4fb",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "86b5e2c5-f6cf-485b-9b9a-3ad6c18c7a56",
        "cursor": {
          "ref": "8fa829ca-a3d2-4db4-af7c-9816042bd5a4",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "68872cc2-9dee-464b-b9c9-d9c53d27d256"
        },
        "item": {
          "id": "86b5e2c5-f6cf-485b-9b9a-3ad6c18c7a56",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "94db6fd1-f301-4cd7-b9af-565d072af2d4",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "c475d33a-7eaf-4515-ae24-7a6db5cef45e",
        "cursor": {
          "ref": "e290b2ad-9319-4a8a-8556-89b9c42ec877",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "15b793b0-5a0d-4ef6-9c43-ded4cc7ee100"
        },
        "item": {
          "id": "c475d33a-7eaf-4515-ae24-7a6db5cef45e",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "e392cc5c-57e6-45ca-804f-955cb1b347ce",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "848cfce0-5d6a-41e0-898d-067447e6755c",
        "cursor": {
          "ref": "86b3cc74-1113-431c-8321-11535ce9aaab",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "d366a238-361c-4657-badf-f31c8b034b18"
        },
        "item": {
          "id": "848cfce0-5d6a-41e0-898d-067447e6755c",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "9f9cd694-bcae-4c0a-a374-126fd1f77fbb",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "040b8e2c-a686-4675-8e85-aa11f086afd2",
        "cursor": {
          "ref": "5d634430-ee85-4148-9ba4-bec42b040ecd",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "18f2ca84-f3b2-4395-b14f-2738fb6631e3"
        },
        "item": {
          "id": "040b8e2c-a686-4675-8e85-aa11f086afd2",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "afc18b65-9964-4a34-b897-ea93b843b3bf",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "e113bd26-249f-4ee8-b954-c0b779dc83ca",
        "cursor": {
          "ref": "6727a05f-8243-4dc2-b1b3-027f36c09ae3",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "091b2b95-8dc8-4c93-bfba-1f9f8af64ec8"
        },
        "item": {
          "id": "e113bd26-249f-4ee8-b954-c0b779dc83ca",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "c2a6ee9c-b4ea-4981-aea1-d420106b821c",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "a96dbe79-4984-4599-8cfb-9b3a4e65fe75",
        "cursor": {
          "ref": "dbe36dd0-694b-44b9-9ceb-d98eda14f15f",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "3262299c-cbbf-4a43-9773-d47f673b0dda"
        },
        "item": {
          "id": "a96dbe79-4984-4599-8cfb-9b3a4e65fe75",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "288d9958-a654-49df-80e6-2b3231722d9a",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "66fc0c91-c6f6-4cd1-b402-e0bf0319e9a3",
        "cursor": {
          "ref": "d92ae519-0587-42d8-9fbc-e56a05a6ea6a",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "858e1cd5-3a76-42ff-ac02-902ff5074eb4"
        },
        "item": {
          "id": "66fc0c91-c6f6-4cd1-b402-e0bf0319e9a3",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "fcf078b6-cf49-4289-b958-8f2b6e7eb3ba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cb7a437-1110-4f1e-af98-50b8d59b1ad9",
        "cursor": {
          "ref": "91b282af-b03a-4d4e-85b5-771780497985",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "95fa4261-0f43-421a-88b8-f3d05cd32d52"
        },
        "item": {
          "id": "9cb7a437-1110-4f1e-af98-50b8d59b1ad9",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "49923dae-9057-474f-b487-46fa1b352700",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 30,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51448bed-a6d1-4df2-b807-a990633e51fc",
        "cursor": {
          "ref": "2ba992c7-2402-470a-b22c-eb72b363cbca",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "cc27e383-1956-4011-bf3e-8141702ab4b8"
        },
        "item": {
          "id": "51448bed-a6d1-4df2-b807-a990633e51fc",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ffd6e039-ec7e-4ee5-8ed9-52aa422097b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51448bed-a6d1-4df2-b807-a990633e51fc",
        "cursor": {
          "ref": "2ba992c7-2402-470a-b22c-eb72b363cbca",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "cc27e383-1956-4011-bf3e-8141702ab4b8"
        },
        "item": {
          "id": "51448bed-a6d1-4df2-b807-a990633e51fc",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ffd6e039-ec7e-4ee5-8ed9-52aa422097b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "489dea97-be5c-4594-9441-2aa6389fc026",
        "cursor": {
          "ref": "f9328a3d-f85b-4f77-8d68-98d32fdfc5cb",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "5b6553c3-6d99-44bb-a7a2-e6c4f3bbd6b0"
        },
        "item": {
          "id": "489dea97-be5c-4594-9441-2aa6389fc026",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "d00b131f-d161-4c2a-934b-d009b9d804c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bad9df9-3643-4abe-a1dc-84aa35d8cbd5",
        "cursor": {
          "ref": "be2fc051-4c59-4c67-ba0b-38036e993498",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "abab66a1-ca3d-44e4-871c-6daa29cb2cd1"
        },
        "item": {
          "id": "7bad9df9-3643-4abe-a1dc-84aa35d8cbd5",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "0c807b76-1109-47d5-9d3e-5f30d012f34c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30511816-e445-4cb4-a603-b4471e435203",
        "cursor": {
          "ref": "79825861-4608-47fe-8009-95c47eaf0bb7",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "8ccfba6c-b22c-42f8-8c8e-dd9709645988"
        },
        "item": {
          "id": "30511816-e445-4cb4-a603-b4471e435203",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "6fe54f4e-a592-495e-943f-0eb84d92f1f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dd656e4-9770-499c-a21e-4473be3800e6",
        "cursor": {
          "ref": "5d95d54b-794b-42f9-8dde-447c26fcae29",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "f345aff1-2115-44a9-8070-b4c1f1f5e41a"
        },
        "item": {
          "id": "8dd656e4-9770-499c-a21e-4473be3800e6",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "6fb49824-aabb-4d4b-a04f-6f38837f6d60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7214798a-b7e0-40ad-9200-ef11ce25ad52",
        "cursor": {
          "ref": "d721f9a1-b0e3-4cad-80a2-fa613d326aeb",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "9eb61c6b-68ce-4dfe-82e4-0985658702f2"
        },
        "item": {
          "id": "7214798a-b7e0-40ad-9200-ef11ce25ad52",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "95c947e1-52d0-4f26-9a6d-8bb67d17a237",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "251a1857-7913-4516-b4c2-24cea28b289a",
        "cursor": {
          "ref": "48829d3f-70a6-4c96-9553-9705b53b777d",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "228f8392-9f2e-45f5-8ed5-efeffbfe4f69"
        },
        "item": {
          "id": "251a1857-7913-4516-b4c2-24cea28b289a",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "333fbc88-05b8-41fd-98d1-7a748c72f01a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 149,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fb1b6db-4d95-459b-83cd-eb81d8f6799c",
        "cursor": {
          "ref": "aecde3ee-29a5-4c40-8b32-633317e951a0",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "0efcd6e7-feab-453a-b8c5-33795bfeca41"
        },
        "item": {
          "id": "2fb1b6db-4d95-459b-83cd-eb81d8f6799c",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "10347ec0-769e-4731-88a5-b82a651edd24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c430a9b8-8d8e-42ed-9972-d18f158310e9",
        "cursor": {
          "ref": "0ffc25d6-dd90-46b6-8887-c5de477a45f5",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "6621a7a9-c6ff-4e7f-a416-d823cf2331ca"
        },
        "item": {
          "id": "c430a9b8-8d8e-42ed-9972-d18f158310e9",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "1cc16d02-549d-4ff0-abbf-cd49e239c4de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54edae65-b2e0-4f33-98c3-57a5fbfdb0db",
        "cursor": {
          "ref": "041171f2-874e-40be-9094-843cd9b54caf",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "f7a33312-3b45-4107-92ba-e4b695a39d0f"
        },
        "item": {
          "id": "54edae65-b2e0-4f33-98c3-57a5fbfdb0db",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "5ab596b3-5962-4e96-b60c-918ffce122a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d7a1538-e12a-4e43-b0e2-9ae37080afdb",
        "cursor": {
          "ref": "44ca140e-104d-4093-96d4-9eab1409c894",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "c5647348-0441-49f6-8859-9d8b9d8ab657"
        },
        "item": {
          "id": "8d7a1538-e12a-4e43-b0e2-9ae37080afdb",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "498d369f-2d5b-4100-a1e5-7d560117bc75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bfb9a79-c912-4da4-beeb-eb9d7e896d11",
        "cursor": {
          "ref": "f56a9044-8365-43ae-b076-e7f6bc394123",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "544718bc-b979-4f9f-8cbc-b87cad7e8f0c"
        },
        "item": {
          "id": "0bfb9a79-c912-4da4-beeb-eb9d7e896d11",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "e61bfda4-7fb8-44d4-827d-2ac2441d44fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77417622-e411-47b1-93c0-b9fe82da4e83",
        "cursor": {
          "ref": "6baf153e-379a-4f47-8b0e-1d7dbdf279d8",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "222631d1-bead-420c-b938-af1022e1e704"
        },
        "item": {
          "id": "77417622-e411-47b1-93c0-b9fe82da4e83",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "5d5686be-b3ae-4e96-b705-99cda0648d22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b215ebf-a0e4-41b5-89fe-2e85f84f4343",
        "cursor": {
          "ref": "9e52b29c-e7be-4f53-8ada-bd94b78daf1d",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "8c9da714-4ae4-4c2d-a92f-0dcf40041cc1"
        },
        "item": {
          "id": "2b215ebf-a0e4-41b5-89fe-2e85f84f4343",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "4a214911-bb5a-4cc7-8ed8-77131b503ea2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30123710-68da-4283-a30f-a0f29eb2db81",
        "cursor": {
          "ref": "7c6a383c-46a7-489e-a033-d84c8296f647",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "a04eb3d4-8a44-4df3-869b-7337448a1447"
        },
        "item": {
          "id": "30123710-68da-4283-a30f-a0f29eb2db81",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "274b50d2-32f3-499b-87d7-c86e0c152658",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbb75eea-8b57-48f8-b343-651d13fe586c",
        "cursor": {
          "ref": "165e5c98-79b6-491f-bec9-4add1d909e1a",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "21296e66-9ca9-4edc-b35c-196884dcd96a"
        },
        "item": {
          "id": "dbb75eea-8b57-48f8-b343-651d13fe586c",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "20d6b14b-a9fa-4141-92b9-314750183829",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9327eedc-13ac-4f7d-9d10-f1604ebd60e1",
        "cursor": {
          "ref": "23872d07-8c20-46a0-ace7-f0790eea5fb0",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "785d41a8-6e87-4106-81aa-51448c955101"
        },
        "item": {
          "id": "9327eedc-13ac-4f7d-9d10-f1604ebd60e1",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "2afe74ae-f308-459f-9d38-56aa2b65793e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d7b25ea-08bf-42ed-8b02-7c0ae14d5469",
        "cursor": {
          "ref": "09969920-ad08-40c3-9b14-8c61ab10c98f",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "2028b6eb-59ac-41dc-b0d4-2b6056d79310"
        },
        "item": {
          "id": "0d7b25ea-08bf-42ed-8b02-7c0ae14d5469",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "b2ae5b47-3df9-4e94-93c2-1e6642dd929a",
          "status": "OK",
          "code": 200,
          "responseTime": 627,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "f8e5443d-0170-4d5e-be91-298c779c03ab",
        "cursor": {
          "ref": "4ec358b4-d4c7-46a0-9c56-d4bf648480aa",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "abd94ae8-6c23-4ccb-8391-fddc00234b1c"
        },
        "item": {
          "id": "f8e5443d-0170-4d5e-be91-298c779c03ab",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "23726e3a-c900-41d9-92a1-1fae89a622e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 290,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d12baf65-fca2-46b4-8a80-a08f3626d332",
        "cursor": {
          "ref": "636912d6-c052-4557-b129-f9d26ce72f75",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "a3063da0-2883-4390-8bb8-968ba0bcb92f"
        },
        "item": {
          "id": "d12baf65-fca2-46b4-8a80-a08f3626d332",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "00a62f38-de42-4a6c-8107-6fff4e8f2686",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 298,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c83c6d7-d2e6-40eb-b8ed-b6ea3678fa99",
        "cursor": {
          "ref": "a69016e5-a3f8-4446-9503-e83c69b18bb2",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "8f52626a-2a0b-4d13-aa7b-56f384622a00"
        },
        "item": {
          "id": "2c83c6d7-d2e6-40eb-b8ed-b6ea3678fa99",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "126349eb-0bb8-46ca-8501-af54923ff80b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 297,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "955ee782-779b-4273-965e-2a1aeab3e71b",
        "cursor": {
          "ref": "8fcf9d09-1578-4f08-891e-2790e1fb36ef",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "b3d5088e-36a6-486b-9be6-9340a49dcfea"
        },
        "item": {
          "id": "955ee782-779b-4273-965e-2a1aeab3e71b",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "55aba95b-5596-4937-b45b-04ddf18b0ad5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 300,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a1d0d2b-2375-4068-ab98-cb5c494194b0",
        "cursor": {
          "ref": "ee8aa3da-0ffd-4146-8adc-b83655d5c483",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "f8a41791-db88-46f7-8ba1-5f54b6e7cf22"
        },
        "item": {
          "id": "6a1d0d2b-2375-4068-ab98-cb5c494194b0",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "1a8cd5d7-ac4f-42d4-b5ef-997d8fb4b78b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 311,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "602d5fac-0c5a-4468-b2f4-086fcd382400",
        "cursor": {
          "ref": "e82fb728-f0de-45e7-a872-2e0ab289a0ce",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "c765810a-711f-4278-8511-fbd588c1ef2c"
        },
        "item": {
          "id": "602d5fac-0c5a-4468-b2f4-086fcd382400",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "74a6bded-232a-47b0-9935-cc02910f2ddc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 298,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54687041-4d80-4262-a730-3c2f5e601525",
        "cursor": {
          "ref": "011a5ed3-59ff-4bc0-a260-960e88b9df3e",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "036c480e-71ad-4cb8-8976-a5cf9012e31a"
        },
        "item": {
          "id": "54687041-4d80-4262-a730-3c2f5e601525",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "c1bef6a2-6a10-41c4-ba43-61cb7911ede0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5e46ecb-0384-491f-82e1-c69462e50847",
        "cursor": {
          "ref": "954d3eeb-1bfd-4e14-8ce8-88b23419298f",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "100207d0-4339-4d1a-9324-32045173a777"
        },
        "item": {
          "id": "d5e46ecb-0384-491f-82e1-c69462e50847",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "bce96f95-c930-429c-8e5e-9c306c0b2fb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a7960a6-d185-43e8-9ea3-4203e2e630e7",
        "cursor": {
          "ref": "1193ccc2-d76e-42b7-b514-7f75ff05bdf2",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "37d89f97-08c9-4157-b3f9-256526f5b0f1"
        },
        "item": {
          "id": "7a7960a6-d185-43e8-9ea3-4203e2e630e7",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "dc7dc028-0d48-4649-b838-0c2e9cbb0d81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 249,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "031f9ad5-b4e9-4670-a491-7dab540c11b2",
        "cursor": {
          "ref": "7a426c55-0b16-4ff6-a3a4-19438be2d2a7",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "dba764af-1e2b-409d-a3a8-a844fac13cbc"
        },
        "item": {
          "id": "031f9ad5-b4e9-4670-a491-7dab540c11b2",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "f170af03-afcf-4df3-9001-f003b756538c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5947ab34-800f-46ea-a108-c5bfd5bd19b6",
        "cursor": {
          "ref": "89535c23-a2df-4411-a02e-b69967994ab2",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "6e23d25c-6fb5-43b3-8126-90b82bf8af37"
        },
        "item": {
          "id": "5947ab34-800f-46ea-a108-c5bfd5bd19b6",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "8ba255d2-eba7-4220-bc33-9f680b7e33df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3695799e-4536-4d2f-841e-640e653c13ca",
        "cursor": {
          "ref": "6f0a657b-fcb8-4015-ab51-a49e88a4e5d5",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "d6e632fc-192f-404b-8ea7-ef9f05fa3748"
        },
        "item": {
          "id": "3695799e-4536-4d2f-841e-640e653c13ca",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "9d2d6896-5052-4bcd-afc6-1ea0e918b6fb",
          "status": "OK",
          "code": 200,
          "responseTime": 256,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "1ce08e5d-5140-4660-b229-bbd0898694ae",
        "cursor": {
          "ref": "f757c5ec-48f8-4a73-80b9-199c0b54220e",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "385699c3-ecd7-42e4-9344-517c5ebf9844"
        },
        "item": {
          "id": "1ce08e5d-5140-4660-b229-bbd0898694ae",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "d46aaa98-9508-4693-b6c7-dcf9aaea79a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01be6f08-2095-443f-bfb0-8be18bcc84f2",
        "cursor": {
          "ref": "b42edf5b-21cb-4a00-b46e-c848e24b2490",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "ae91df56-501a-418b-bd7f-75f2f7ca1a44"
        },
        "item": {
          "id": "01be6f08-2095-443f-bfb0-8be18bcc84f2",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "ac026ac7-a16d-43e2-9836-4b8477d483c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "555f6111-8481-4ebc-88ff-e14661abbe2d",
        "cursor": {
          "ref": "52f7b4ae-538a-488c-a844-48096df9f9d7",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "49d0fcd2-c092-49a8-8adf-2f9128e685f5"
        },
        "item": {
          "id": "555f6111-8481-4ebc-88ff-e14661abbe2d",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "d7b2ff12-9b5a-4e57-9378-61a49244e8e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64d40b4e-d362-4d12-9607-7fe7a32077a0",
        "cursor": {
          "ref": "61f38916-db80-48f0-b0ac-4353e38a0285",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "9614e3fe-6319-40b3-83dc-7e249058a4ce"
        },
        "item": {
          "id": "64d40b4e-d362-4d12-9607-7fe7a32077a0",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "44f91358-89d2-4b63-9620-87b56be73598",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 249,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "434ad8ff-69bd-451e-a169-8caa18ad7752",
        "cursor": {
          "ref": "fefb3c77-fc23-4262-9f7a-5ad30736b5cd",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "07a1a043-aa86-45cd-aaad-e8acb666837e"
        },
        "item": {
          "id": "434ad8ff-69bd-451e-a169-8caa18ad7752",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "da7ae7ce-176c-4e02-a8e6-f85ada4adcee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6882c56a-3e9b-41b0-ae40-f65081733b90",
        "cursor": {
          "ref": "f9bb9a86-3ff0-41f7-a0cf-7bd4df35e95f",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "a66000a3-80fe-4110-8803-795e4da069f3"
        },
        "item": {
          "id": "6882c56a-3e9b-41b0-ae40-f65081733b90",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "c2114138-a828-49cc-b5c2-7030acb8cced",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 299,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7d43eeb-262f-4990-a18a-0b6e11b54b8c",
        "cursor": {
          "ref": "be242faf-261c-48f8-a43a-b10d72516bfc",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "2b6a5f00-7c53-465e-a290-09ec29f6b8ef"
        },
        "item": {
          "id": "b7d43eeb-262f-4990-a18a-0b6e11b54b8c",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "5e83ecfe-05ce-4427-a854-00761f334f11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 300,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86fd9b59-25ab-4cfa-bbf4-09a43dbf04cf",
        "cursor": {
          "ref": "72489d9b-5cde-4c98-b438-c6d2c6cd63ff",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "67000dc2-f7cc-4329-9fe3-8112bdc65f48"
        },
        "item": {
          "id": "86fd9b59-25ab-4cfa-bbf4-09a43dbf04cf",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "d7403ada-8dc0-4ff4-b88e-d3e8173891ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 295,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6ddbc9f-3f99-4114-bf98-71dbc8d2c6b0",
        "cursor": {
          "ref": "eae1e1f9-f5e1-4c13-9dfc-1416aa71015c",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "7374752e-511d-44fb-8c9b-876f385ea63e"
        },
        "item": {
          "id": "a6ddbc9f-3f99-4114-bf98-71dbc8d2c6b0",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "078e403f-9b92-4238-8b56-a9781722f03e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 302,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3551383-a34a-49af-8b56-0aa6abf9ad52",
        "cursor": {
          "ref": "9884f903-ca84-43ef-85cf-754af2b27cea",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "63fc4837-1114-4714-ac99-d34b1d672b29"
        },
        "item": {
          "id": "d3551383-a34a-49af-8b56-0aa6abf9ad52",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "d5c3c541-2989-4728-84a2-50df9d189701",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 476,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f761d5e-5eb2-402d-a1d8-c9a3403b74a4",
        "cursor": {
          "ref": "bba8e366-313d-4bf8-9fcd-85fa98e4688b",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "dff5a756-4426-4d3e-9905-9860b05b4a52"
        },
        "item": {
          "id": "1f761d5e-5eb2-402d-a1d8-c9a3403b74a4",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "99d40d6b-c0f9-435f-9667-3acfc32f46ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 301,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b74b3fe-77bd-4a3a-85f9-38a613b8630f",
        "cursor": {
          "ref": "5d614032-4d71-4de2-b295-2e242d6a27aa",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "905678b2-e6f0-4a4c-846b-5be67c7d36f1"
        },
        "item": {
          "id": "0b74b3fe-77bd-4a3a-85f9-38a613b8630f",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "b49220f6-781f-4102-b638-a07c6dee97ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 293,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d644c79-2b3a-4fc2-acbc-f3ab35d79c7f",
        "cursor": {
          "ref": "9c48b915-4b1e-4c61-8cb0-75cf5af50dcb",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "644c67d5-7aa2-4fb3-be2e-9f3c325b877d"
        },
        "item": {
          "id": "6d644c79-2b3a-4fc2-acbc-f3ab35d79c7f",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "3f05bc5d-6825-4705-ac60-b39dcd1df139",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 303,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da113c0c-776d-4e3b-bb67-7331c4421bf2",
        "cursor": {
          "ref": "d4da1b44-0923-42cf-897d-4ecbd43adca9",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "fda5b009-9773-4d39-b5e0-cb9d6ccd1fff"
        },
        "item": {
          "id": "da113c0c-776d-4e3b-bb67-7331c4421bf2",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "e2210b20-4df9-4670-a9a9-de0264377f2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 306,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1372c8d6-ef4c-4be3-bd5f-29f9dd665f87",
        "cursor": {
          "ref": "f5b9bfa8-d56e-4dbf-8c94-2d74fdfc7aad",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "1dca081f-2029-4815-ba78-69d48f168cac"
        },
        "item": {
          "id": "1372c8d6-ef4c-4be3-bd5f-29f9dd665f87",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "4e7b836d-aeb4-4e43-acd5-c9a00a58c40c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 305,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cad4012b-94d8-4b33-ba70-43379c1debba",
        "cursor": {
          "ref": "2431768e-44c9-49b3-8c82-e58949b093e5",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "863ee3b4-4a2a-4876-8113-9ad74af59b51"
        },
        "item": {
          "id": "cad4012b-94d8-4b33-ba70-43379c1debba",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "8ef4e5cb-adbc-4085-bb61-0059fed3b298",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 296,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d051974e-a97c-4e2a-96e6-912252259021",
        "cursor": {
          "ref": "c20eeb64-74c1-49a7-836d-ad508ebd7826",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "bfa42e80-97a8-49c9-a14d-6f611db593d4"
        },
        "item": {
          "id": "d051974e-a97c-4e2a-96e6-912252259021",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "9c7a2cda-05b4-4355-b4ff-dc6baa8f6719",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 295,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e11bd6ab-b1f7-4c69-b1eb-31466d57d53a",
        "cursor": {
          "ref": "a48bea1e-1098-47ec-a769-24a36d1c45bb",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "70cee00d-2d91-40b1-b2d6-88004f3f185f"
        },
        "item": {
          "id": "e11bd6ab-b1f7-4c69-b1eb-31466d57d53a",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "9ad33aed-d764-4a89-9370-f4bdb6e2eecf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 306,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ef9a850-294c-46dc-8eda-ed05e1cbba86",
        "cursor": {
          "ref": "3ea6db41-6204-429e-83e6-cf11f9d27453",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "a705f433-ca33-4dbc-a1e0-aab737e89f9c"
        },
        "item": {
          "id": "9ef9a850-294c-46dc-8eda-ed05e1cbba86",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "c5ab408d-6c08-4f5d-afb9-d6a4378996ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 286,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34eef998-cebc-4e01-9211-47a70bc36047",
        "cursor": {
          "ref": "7f09d0c6-b41d-430e-975f-5382c7b45d78",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "f9cbe467-5020-425f-be42-9010865baf99"
        },
        "item": {
          "id": "34eef998-cebc-4e01-9211-47a70bc36047",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "8cd99b5b-9679-4e0a-9ec3-68d08863632b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 303,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a50c5191-f8be-44b6-981f-12afc84ed0e8",
        "cursor": {
          "ref": "65653bc9-6a1f-4d3f-9a27-3fd3633d1d2a",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "992b69fc-0240-4eca-8a19-f43a30502f03"
        },
        "item": {
          "id": "a50c5191-f8be-44b6-981f-12afc84ed0e8",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "86816904-1da6-466e-9242-428c0ea4de8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 293,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74c8529b-bb36-4def-a703-bca1ebd73633",
        "cursor": {
          "ref": "05aaf2f2-a6b9-49d1-b2ef-9c7cc354ec4e",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "9fbe1297-240f-46bd-b662-42b219b0ca34"
        },
        "item": {
          "id": "74c8529b-bb36-4def-a703-bca1ebd73633",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "e4bdbc58-e14c-4d76-a679-886e365dd860",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 299,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf7d0e6c-53f8-47ec-84f2-efbbae1c9740",
        "cursor": {
          "ref": "b20c19b2-75d2-4128-b6d4-a0ea5f766915",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "625f45cc-ca3d-44aa-bdc2-e936b80484ec"
        },
        "item": {
          "id": "bf7d0e6c-53f8-47ec-84f2-efbbae1c9740",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "53ac96fc-36c3-472f-afc3-32bb9cb25fd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 293,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d89aa39a-a768-4e93-afe5-b952f5c5b9ff",
        "cursor": {
          "ref": "de5b2044-2d9a-4157-b31a-d2654cbb9396",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "05105b8d-a087-4d38-8276-e837795fd1e6"
        },
        "item": {
          "id": "d89aa39a-a768-4e93-afe5-b952f5c5b9ff",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "5bc8065b-afdc-4246-ac59-ac225ff8bf17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 293,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0fb8044-e75f-4f3e-9244-f01dd0dae577",
        "cursor": {
          "ref": "401659dc-476a-4d29-b882-c02096b2a2d5",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "66cf6849-c077-4cc3-bf47-4dfccdd36267"
        },
        "item": {
          "id": "a0fb8044-e75f-4f3e-9244-f01dd0dae577",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "7c502717-bafa-4172-9145-8228df65bfd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d49075d5-da3a-45ef-84ea-e82f3f41104f",
        "cursor": {
          "ref": "eaebdd4f-48ee-4701-b730-20ce698fa8f4",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "a486d79e-bfd4-45fc-bbc0-c1c6269842e7"
        },
        "item": {
          "id": "d49075d5-da3a-45ef-84ea-e82f3f41104f",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "06ea5c45-3a33-4e2e-a181-4b3525e7ac55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40bbde21-ad59-40b3-88e4-d3880e939d8d",
        "cursor": {
          "ref": "af6810ce-efd9-4e5e-9563-104569380111",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "f4e5f714-fbfa-412b-9a24-9fe8eeef3f27"
        },
        "item": {
          "id": "40bbde21-ad59-40b3-88e4-d3880e939d8d",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "8d787583-c8b7-42b6-96cd-e68e786d662b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef3ae79b-c786-4302-8a7e-b2be30d254d6",
        "cursor": {
          "ref": "96256c62-06ba-469e-b0ef-d0a93c0704f6",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "9ae99d65-1395-4278-b574-813cc265e75f"
        },
        "item": {
          "id": "ef3ae79b-c786-4302-8a7e-b2be30d254d6",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "e9174f4c-42f2-4c01-93f9-40ab82ce2d1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 290,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b27bec3-6941-4665-a66e-ac61b0776be1",
        "cursor": {
          "ref": "40a461a0-bf72-43d7-9c15-df5ffe48456d",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "0030abe5-327f-4f52-92d7-bb88dd05d63b"
        },
        "item": {
          "id": "9b27bec3-6941-4665-a66e-ac61b0776be1",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "4ca5d498-e7be-4540-901a-564386821932",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 132,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59eefe93-556e-4f49-9d1e-6fe26f79003b",
        "cursor": {
          "ref": "f6ff4427-8fe9-4f34-8dca-b74a8fc2f2e1",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "19654c10-72fe-415d-af1c-4cbf6853ac8b"
        },
        "item": {
          "id": "59eefe93-556e-4f49-9d1e-6fe26f79003b",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "8430099e-77fa-4ada-b42c-7874a92ce565",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2581563-adf7-4fd6-87fc-a5062cf9c413",
        "cursor": {
          "ref": "bf6fa9d0-7df1-49a8-aa58-96357344fa25",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "97432ebd-b64f-4f4f-9a46-5b8b22ec2274"
        },
        "item": {
          "id": "d2581563-adf7-4fd6-87fc-a5062cf9c413",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "128668a7-eadd-4d15-a8d7-ea6f79d0c2dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1f9969e-0f7a-4e05-a634-027843c5a196",
        "cursor": {
          "ref": "2b1bdede-7c23-43f6-89e3-9ed8585c9600",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "8f74a002-d6f6-4580-8951-fd8a82db8f83"
        },
        "item": {
          "id": "d1f9969e-0f7a-4e05-a634-027843c5a196",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "0ae49efa-a643-42dc-82cb-ed13ea63e1e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d878b373-b7fa-46be-8f0d-6459692baab5",
        "cursor": {
          "ref": "937f5186-7698-4eb8-b135-40d41f222255",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "b7534f99-c255-4834-af99-a7120f96ccaf"
        },
        "item": {
          "id": "d878b373-b7fa-46be-8f0d-6459692baab5",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "21a6dff6-c0f6-4886-bb1d-e1bd831fa8fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 289,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a2894c8-dcee-4983-afe0-3920a944e82e",
        "cursor": {
          "ref": "8384df6f-b27a-4890-94e0-92d24b7541a3",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "2d652e51-8cd0-4e3e-ba7d-ef758e04c981"
        },
        "item": {
          "id": "7a2894c8-dcee-4983-afe0-3920a944e82e",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "27d9ce71-c14b-4cdf-b591-0f5548f7bba3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76f5016d-a9e5-4988-acb6-1f2466cade9b",
        "cursor": {
          "ref": "925be5de-b1e2-4484-913e-cf6c41dea3af",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "92065ad4-4b97-4ebb-8504-eeba8fa6bcd1"
        },
        "item": {
          "id": "76f5016d-a9e5-4988-acb6-1f2466cade9b",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "abed4d8d-ea1d-4b24-95d8-40984eb7ee76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "057a4487-41ad-434a-aa9f-dea0aff6c6cc",
        "cursor": {
          "ref": "c1d9951b-7a7a-4643-a862-d9cee4d42be5",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "6cbdc326-4b07-4cd9-a544-4155beeea5b1"
        },
        "item": {
          "id": "057a4487-41ad-434a-aa9f-dea0aff6c6cc",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "4a63d9e1-01e7-4358-a282-34640c3d450e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef027d32-a007-4ec1-8adb-6c85619088bd",
        "cursor": {
          "ref": "a75386d1-1c92-46c6-8a88-a094f4dd7e18",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "76e88e55-8544-42d1-85da-0969e5111ab3"
        },
        "item": {
          "id": "ef027d32-a007-4ec1-8adb-6c85619088bd",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "ad2076f0-317d-439e-8eac-ab52350a9c67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2553a4ad-bc58-45ac-ac2d-d51203c7c60f",
        "cursor": {
          "ref": "674f8b97-bac9-4732-9f52-cd3a13e22438",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "e2d9b0d4-f8df-446d-b5ba-d5039fde77b0"
        },
        "item": {
          "id": "2553a4ad-bc58-45ac-ac2d-d51203c7c60f",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "6dce4455-bdee-490c-82c2-f0f5a3edaa69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcba51f4-006e-47fc-8200-63b95fe6a562",
        "cursor": {
          "ref": "565a2b40-a8d1-4072-8deb-bc4d00324a7d",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "f34f1cb0-a98c-4c01-8922-db2ca5ce2a92"
        },
        "item": {
          "id": "bcba51f4-006e-47fc-8200-63b95fe6a562",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "a2c24d57-a17a-44e0-8ed7-fa23a4823c12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fc255f7-6ef5-4954-86c3-3c6772be638f",
        "cursor": {
          "ref": "e2d5dea6-b1e5-4a23-91c8-0e0d0212e0b8",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "c27aceb7-e922-4094-a9b7-2701be4dcd7d"
        },
        "item": {
          "id": "7fc255f7-6ef5-4954-86c3-3c6772be638f",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "fc18edfd-f5cb-46d3-88c0-8baf0ea74d22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e537a741-489f-40c2-aea1-01ff92bf30f6",
        "cursor": {
          "ref": "14645315-5fff-48e0-961c-00937e88ae69",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "d22b1b7e-3b51-4a62-b07a-daed3e41d937"
        },
        "item": {
          "id": "e537a741-489f-40c2-aea1-01ff92bf30f6",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "242d2b0b-2603-4210-8bff-5d334ad50154",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0a67bf3-2299-4852-9e85-78f8bb372fd8",
        "cursor": {
          "ref": "7fd8066f-6a1d-48a9-bebe-939b3643b107",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "655cc721-3da6-4f87-b3b7-77fe2d957559"
        },
        "item": {
          "id": "a0a67bf3-2299-4852-9e85-78f8bb372fd8",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "5a064089-7b14-4c04-b5af-05b68e723e1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87124fa4-c681-422c-9b92-bf6696b69371",
        "cursor": {
          "ref": "d115ee0b-6ca1-450c-9c90-1f60804e5608",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "b31a947c-eb9c-4bd2-8565-781791c2e4b6"
        },
        "item": {
          "id": "87124fa4-c681-422c-9b92-bf6696b69371",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "744151c2-6117-41e9-a91c-21b36a1411ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6ccb8de-8513-4c4f-88b9-0e702c1196a8",
        "cursor": {
          "ref": "b1bed522-8a9c-4018-9d7c-ac41938d8a4e",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "a35110cc-4d67-4084-8890-8a41e62e5e06"
        },
        "item": {
          "id": "c6ccb8de-8513-4c4f-88b9-0e702c1196a8",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "67a75ad3-0237-4741-aac3-529554bb8f8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "828a5242-831a-4c9d-a4d5-bffd59eba793",
        "cursor": {
          "ref": "d773fa7f-97ae-466c-8f41-84bb5eb9afcb",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "759f6d19-4c07-48d7-915e-01028f2f0b13"
        },
        "item": {
          "id": "828a5242-831a-4c9d-a4d5-bffd59eba793",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "ca91e295-5e99-4835-9a03-15bf90e541ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "747b2ec8-4450-4180-8486-735bd08e4bef",
        "cursor": {
          "ref": "dc9fe04f-2d7d-4fcd-b7cb-b2f9e5a15e7e",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "2e45e130-aef0-4c0f-ab9f-4c78e47cbf8a"
        },
        "item": {
          "id": "747b2ec8-4450-4180-8486-735bd08e4bef",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "c9513670-63f7-465a-9f1d-87c42616c192",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a255df94-21d7-4916-8a15-7e31645917f3",
        "cursor": {
          "ref": "4c6b4df1-94a0-429d-97bc-4387517cd48e",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "08ae5b84-aa0d-462e-95be-b919de611b62"
        },
        "item": {
          "id": "a255df94-21d7-4916-8a15-7e31645917f3",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "5a569a4d-8582-4b04-a340-69fc8932ff37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4aa6628e-4939-433e-b040-cfdeb76a0d78",
        "cursor": {
          "ref": "13275f22-5a4f-4836-937d-e6cc0f1c2957",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "72fe5d8a-2188-411f-b9c1-f41abef3d03b"
        },
        "item": {
          "id": "4aa6628e-4939-433e-b040-cfdeb76a0d78",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "a32c3d65-d333-4b2d-969a-ce11074ce022",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1413e1a5-1134-41ee-8fa2-79fbb18f3037",
        "cursor": {
          "ref": "0cd6acfb-e485-488c-ad15-f4fc7fc865dd",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "31b384b9-8dd1-4c4d-9e6f-b67e66f2a5f6"
        },
        "item": {
          "id": "1413e1a5-1134-41ee-8fa2-79fbb18f3037",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "8d718964-0cf6-4b11-9a97-4c75bec7d448",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9c199f5-13f9-4872-acc0-506284534401",
        "cursor": {
          "ref": "cf19f48f-2c80-4732-8be5-32c2db1d7c36",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "e7e5f697-6c30-4b62-889a-6c56afaae576"
        },
        "item": {
          "id": "e9c199f5-13f9-4872-acc0-506284534401",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "3aa6518c-e452-4aef-b106-4a7470665d9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "572899a7-e720-4f09-b5f7-06f4160a2742",
        "cursor": {
          "ref": "db8b4dd1-c619-4c37-8daa-85d9e44cd723",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "72832297-03ab-4dbf-a4e1-7e06a632179d"
        },
        "item": {
          "id": "572899a7-e720-4f09-b5f7-06f4160a2742",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "7ded1369-2ca8-4d7e-9fd9-fc9a00aae618",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91ce13a0-1324-43f4-8b90-ffd882811970",
        "cursor": {
          "ref": "000ed90a-5a26-4a20-8d18-86b187c6c280",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "1dcd0dc3-6953-44e4-9ca6-9968b9592e45"
        },
        "item": {
          "id": "91ce13a0-1324-43f4-8b90-ffd882811970",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "06d79b1b-9eca-483e-ac64-3112b16b292b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d95422dc-4bbe-472c-874f-b53756eb20e0",
        "cursor": {
          "ref": "1965a2af-29a8-49a3-94fc-a1cec67c58e4",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "14938b2f-8e03-437a-a797-01b9bb457d64"
        },
        "item": {
          "id": "d95422dc-4bbe-472c-874f-b53756eb20e0",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "3e7d28a1-3168-49a0-86a3-f85ad5700d7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8c3192c-d71b-4a04-aa77-ea4d205092c1",
        "cursor": {
          "ref": "c6d15cd6-a531-48a1-8fd0-886ab5191376",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "1af454ed-c5e3-4368-8365-b583c1afa9b2"
        },
        "item": {
          "id": "f8c3192c-d71b-4a04-aa77-ea4d205092c1",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "921692f1-a390-4b9f-8b66-3ee207379c16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f4b3a4c-f77c-4c5f-830a-a910cbb74e6b",
        "cursor": {
          "ref": "def56ebe-d295-4523-99ba-5ae0f0463dee",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "eefd304c-5ae4-4de8-b8c5-3e8c8ccde1f0"
        },
        "item": {
          "id": "4f4b3a4c-f77c-4c5f-830a-a910cbb74e6b",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "8cd4211b-5c0d-4dd8-a43a-4a595dc4487b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e4dbb1f-6393-42e6-95ff-01503e1e2a94",
        "cursor": {
          "ref": "cfaae571-1778-4382-81cf-530b9e861e72",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "c9ab7f63-c168-4b22-85da-8800b53406b9"
        },
        "item": {
          "id": "0e4dbb1f-6393-42e6-95ff-01503e1e2a94",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "9f4f6c39-02e1-4f75-85cb-442ce6eba819",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8c52c07-a3d1-4cb8-99a6-d7383b8118f4",
        "cursor": {
          "ref": "d2f2c8fe-bcef-4fe6-8023-7e1c6dd89939",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "e27417b5-d649-4d39-ac22-11f88e2bedf8"
        },
        "item": {
          "id": "e8c52c07-a3d1-4cb8-99a6-d7383b8118f4",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "558bbc80-6b39-4c3c-af7a-4c09ea91faa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d3a8241-90d6-422f-a9d9-0e4ce577df05",
        "cursor": {
          "ref": "26a0d69b-14e4-42c3-8df6-933d37dddd32",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "92dceda7-dbf0-4076-87be-ae3f4dc7e84f"
        },
        "item": {
          "id": "5d3a8241-90d6-422f-a9d9-0e4ce577df05",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "384bab77-41fd-4670-8caf-525f6014514f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd63ad42-caa3-4377-a9a7-c585d174bca1",
        "cursor": {
          "ref": "7e895ad9-42ab-4d8e-98ee-664f0395d9e0",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "6975add8-003a-495e-a17f-0f9a3ed76595"
        },
        "item": {
          "id": "fd63ad42-caa3-4377-a9a7-c585d174bca1",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "6ee76cd0-ae38-4032-929b-f692913efd06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75a3fbb0-c0b7-4b80-a85d-d45ca98289ff",
        "cursor": {
          "ref": "610afd2b-f74c-407d-85ee-30d25a8ec7e9",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "870f8038-7c64-46c1-ae7a-aa4592b5aa95"
        },
        "item": {
          "id": "75a3fbb0-c0b7-4b80-a85d-d45ca98289ff",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "3175ce46-287c-4830-82cc-eac41837e97f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb559218-2b50-45e8-9943-f9c62ea384f0",
        "cursor": {
          "ref": "5e30a17e-c268-49fe-8d2e-597e97cf31c7",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "1bf1ee08-e3f8-4988-b647-dbac32220bd9"
        },
        "item": {
          "id": "cb559218-2b50-45e8-9943-f9c62ea384f0",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "1d44898d-1ccb-40c5-b016-0aebc5a08cd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a51e0fdd-8679-4c6a-a0e1-02d0ed9cb542",
        "cursor": {
          "ref": "e89f6c44-fdb8-49e7-925c-110b51d0934d",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "d76fffce-9519-4b3b-8fe5-130b5932c508"
        },
        "item": {
          "id": "a51e0fdd-8679-4c6a-a0e1-02d0ed9cb542",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "5d254876-30d5-4caf-880d-b374974ca648",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca2b0ded-e966-449a-a5da-584336c86c9c",
        "cursor": {
          "ref": "09ca31a5-4d77-4ec9-a044-3bd46f93a871",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "4b597f05-a039-48e0-b679-9ce488daaf50"
        },
        "item": {
          "id": "ca2b0ded-e966-449a-a5da-584336c86c9c",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "4abbd9a5-2e8b-4569-9789-e4d0a1713c0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44977566-e869-48bb-bfda-64058c6ff785",
        "cursor": {
          "ref": "99f1de73-951c-4fc8-9d07-6711cb137079",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "b609bd26-0523-4ed2-a75f-c2a38b8022b0"
        },
        "item": {
          "id": "44977566-e869-48bb-bfda-64058c6ff785",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "d4d04eda-ed48-4d0d-a7a6-cff1912fffe5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ce9b303-5670-4e20-bedd-a6453edb6666",
        "cursor": {
          "ref": "cd6af443-0c56-4f5f-9aef-af3f0e4656e6",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "17f16f13-3bdb-4ec4-9c10-0f00de5236f5"
        },
        "item": {
          "id": "0ce9b303-5670-4e20-bedd-a6453edb6666",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "84cfdaaa-bd0f-41b4-8c0a-b706456ca949",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "014b4565-e19e-4fe2-b41b-780996789f17",
        "cursor": {
          "ref": "e1f63cd7-bf8d-42d6-8497-2792a1cbc752",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "df104ac9-e0fc-4154-b665-1a2fb9a4e628"
        },
        "item": {
          "id": "014b4565-e19e-4fe2-b41b-780996789f17",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "4da72b57-c7d0-4304-b9ca-f9de1a676146",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c42a9646-67f5-4d18-83f8-2d84496d1d47",
        "cursor": {
          "ref": "208a696e-0b13-43ae-95e7-3059f573cd62",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "0bd47c18-b50f-41fe-8237-666809868c1c"
        },
        "item": {
          "id": "c42a9646-67f5-4d18-83f8-2d84496d1d47",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "535c4d61-85c6-4a7a-9ccb-e8bd2bd270f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "747b67b5-7d42-43b9-bcc3-4d7a6d26ed8c",
        "cursor": {
          "ref": "1e9b5612-a502-4b76-8ca2-9577f9264a06",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "7c5ff44e-81f1-4982-bf02-e2d0d425b873"
        },
        "item": {
          "id": "747b67b5-7d42-43b9-bcc3-4d7a6d26ed8c",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "6748dd34-f185-4454-b7c7-e5ee970f8d94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18a66a22-f810-4f9e-b6e7-fc55a94780e0",
        "cursor": {
          "ref": "65ef9be8-da52-4170-83ee-e2176d8698b1",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "4df17e4f-79af-44da-bfed-c856a21f730b"
        },
        "item": {
          "id": "18a66a22-f810-4f9e-b6e7-fc55a94780e0",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "bed00cb1-b2e3-49fd-b441-18b788eebd05",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 30,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8af2ebe7-6677-4ccb-92ce-23dac72bc284",
        "cursor": {
          "ref": "36d0a256-5d38-4a93-a6c0-96052566af2b",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "496fc7f5-27c2-4a44-8820-769fd2dc3554"
        },
        "item": {
          "id": "8af2ebe7-6677-4ccb-92ce-23dac72bc284",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "2425066c-d6d0-4723-8415-4d3152eb7237",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 34,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b360f660-86b4-4eb5-adde-ddb518ca86ee",
        "cursor": {
          "ref": "7d0539ef-f1a6-4d3d-a41e-56216fc76aba",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "4c9e9687-23d4-40b9-8f4a-3f3a5cc33c54"
        },
        "item": {
          "id": "b360f660-86b4-4eb5-adde-ddb518ca86ee",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "dd7baf66-8f5d-4862-9ba0-9771c32ef8a4",
          "status": "OK",
          "code": 200,
          "responseTime": 292,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad5b3dee-dd10-4e23-9f98-07a2842f17b4",
        "cursor": {
          "ref": "de558b41-fb00-44a6-ad4c-4939eb24f6ca",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "cff8ee18-42be-47a7-a361-a1a18f02bc91"
        },
        "item": {
          "id": "ad5b3dee-dd10-4e23-9f98-07a2842f17b4",
          "name": "credentials_verify"
        },
        "response": {
          "id": "d3541e49-60fc-46a6-bdb4-d98c6f721e18",
          "status": "OK",
          "code": 200,
          "responseTime": 658,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "912e8816-c5b5-41d1-a2ad-a94894debdb9",
        "cursor": {
          "ref": "89aab3cf-f10b-47f3-aa6f-09906b0ce072",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "9ff2d52e-fbd6-4f08-97e2-96fd35853db5"
        },
        "item": {
          "id": "912e8816-c5b5-41d1-a2ad-a94894debdb9",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "b73ded0c-43c5-4071-b49e-bf9fe5a0d34a",
          "status": "OK",
          "code": 200,
          "responseTime": 633,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a36f572-d56f-4fac-a983-f1cade2fcf48",
        "cursor": {
          "ref": "0d53f6f6-ebd5-43c9-b679-9d417be6a3e8",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "d20c6fc6-8dc5-4b5e-8771-59876f248895"
        },
        "item": {
          "id": "4a36f572-d56f-4fac-a983-f1cade2fcf48",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "eec2da3b-e0a7-44d0-b3bc-f52c2aa6ec26",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a36f572-d56f-4fac-a983-f1cade2fcf48",
        "cursor": {
          "ref": "0d53f6f6-ebd5-43c9-b679-9d417be6a3e8",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "d20c6fc6-8dc5-4b5e-8771-59876f248895"
        },
        "item": {
          "id": "4a36f572-d56f-4fac-a983-f1cade2fcf48",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "eec2da3b-e0a7-44d0-b3bc-f52c2aa6ec26",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a36f572-d56f-4fac-a983-f1cade2fcf48",
        "cursor": {
          "ref": "0d53f6f6-ebd5-43c9-b679-9d417be6a3e8",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "d20c6fc6-8dc5-4b5e-8771-59876f248895"
        },
        "item": {
          "id": "4a36f572-d56f-4fac-a983-f1cade2fcf48",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "eec2da3b-e0a7-44d0-b3bc-f52c2aa6ec26",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a01aad87-a66c-42b4-8a44-121eeb7a06c6",
        "cursor": {
          "ref": "c06e45dc-3336-4f94-9f7a-bcbbe07c43dc",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "65f28ac9-17a5-4b98-a83b-a4e05460504d"
        },
        "item": {
          "id": "a01aad87-a66c-42b4-8a44-121eeb7a06c6",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "a4dd2b74-bf9b-471c-8fb7-c9f075226cc7",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 30,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6fcc547-d93c-4caa-9be2-961b4bfc7469",
        "cursor": {
          "ref": "35eab381-e7ef-4561-8d0a-3718d912aac0",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "b10cbbae-ccc3-46d4-9b08-3293af306d5c"
        },
        "item": {
          "id": "b6fcc547-d93c-4caa-9be2-961b4bfc7469",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "6231e2f7-62fc-49d7-b94a-87764acc77d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "b6fcc547-d93c-4caa-9be2-961b4bfc7469",
        "cursor": {
          "ref": "35eab381-e7ef-4561-8d0a-3718d912aac0",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "b10cbbae-ccc3-46d4-9b08-3293af306d5c"
        },
        "item": {
          "id": "b6fcc547-d93c-4caa-9be2-961b4bfc7469",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "6231e2f7-62fc-49d7-b94a-87764acc77d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "ebe391ad-c0b8-4de0-823c-071e6c5de78c",
        "cursor": {
          "ref": "aecbc5a4-b24e-4512-8a83-17646bc37d09",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "8eeef5c4-c82e-4ca4-938c-790ea85c2e0e"
        },
        "item": {
          "id": "ebe391ad-c0b8-4de0-823c-071e6c5de78c",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "288d8b85-db92-4d33-962b-fb038ae85d50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "32fc7f0f-0725-4ae5-a3d6-351658e3abd0",
        "cursor": {
          "ref": "117c8bb3-f3e0-4b57-825b-5125765e7a5d",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "a67ebb1d-be15-4f8b-bd88-fe728d7b1459"
        },
        "item": {
          "id": "32fc7f0f-0725-4ae5-a3d6-351658e3abd0",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "a24e4186-4935-4aa8-8a16-de29941c2b5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "32fc7f0f-0725-4ae5-a3d6-351658e3abd0",
        "cursor": {
          "ref": "117c8bb3-f3e0-4b57-825b-5125765e7a5d",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "a67ebb1d-be15-4f8b-bd88-fe728d7b1459"
        },
        "item": {
          "id": "32fc7f0f-0725-4ae5-a3d6-351658e3abd0",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "a24e4186-4935-4aa8-8a16-de29941c2b5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "139d363f-5c12-4390-b45d-aeefbd821eb0",
        "cursor": {
          "ref": "e3ec58a5-abab-47a9-a237-27229731997c",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "0edf3c34-6eb9-49df-8ab0-c082d7ec60d4"
        },
        "item": {
          "id": "139d363f-5c12-4390-b45d-aeefbd821eb0",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "c485d30a-84aa-4780-99cf-6513fb0cd435",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}