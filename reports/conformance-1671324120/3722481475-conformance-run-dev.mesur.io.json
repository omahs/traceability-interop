{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "e7067caf-96d3-4aa9-9588-10baa695c564",
        "name": "Clear Cache",
        "item": [
          {
            "id": "50c46be2-bb1f-4acd-9389-d80036aa229f",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9e912a09-95cd-434c-816a-69f4757b9231",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "bfe7b5f2-f699-484e-aad4-fe5b944d7740"
                }
              }
            ]
          },
          {
            "id": "f4d4407f-5957-4fe1-9271-85fcd246563b",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3f222468-8a3b-415d-a668-ebbf0edd5360",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ebf085cd-08df-4f68-b44a-47f78ef13a0f"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "0a6b6e8a-cddb-4725-9fed-34d67756bbd9",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "b3f67eec-d2f2-49a1-a411-43ffd4a1095d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "97f9553a-65cf-43d3-a0c1-d34a268095bb",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "894a0e24-d283-4e5e-b08b-a3ef6ed08c82",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7c71d6c2-ee48-4a06-bff8-c5efd2f04c33"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "45b9ef83-2fa6-402b-a447-0fcd69cae129",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "933d1487-9acc-4248-8f5c-497fe9988c4c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ea1ca37c-683e-4f68-97a9-86e272f003bf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0e75bc43-c217-4564-8fea-100f4c3ff47e"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a22c7324-1486-4f46-a79c-9a59a71cb700",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "af1f4450-2053-4810-9688-d1f2ef81614c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "95196aca-60b6-4a1f-acd5-c61db40c407c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "27a1e838-4ad0-4127-96d8-d3845385b2be"
            }
          }
        ]
      },
      {
        "id": "77fad95d-d35b-43cb-97d3-57dd16dc50bb",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "aee2cb2e-5b48-4188-b620-dc01ae747f1b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "782394d7-235d-41ce-8ec2-1ee790a17d98",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1b0f104a-1564-4749-95a7-b845ee2aff9b",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ece8d7f7-aa71-4d7a-bf10-957eeb5f2721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "49d53ee7-7da7-4ab3-8f71-e2bc5498bb8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "296e16fd-38b1-42c2-bd07-0dc01fe69be1",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0020ca0f-9a59-4391-a62c-0fc7c10540af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5da66d43-8b26-4bc1-8215-c71fb4599a41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "445c0b4f-19a5-45e5-b438-ec5da631a324",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec33dc50-fc19-4b7b-b9bd-1d11295e8dc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "89c54e16-87bf-4301-8e2a-e72bdb54393d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8c923582-6205-4430-97e6-632e36761b61",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "11bf1337-5e2e-4c1a-aed5-0e8da9e44811",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ed29924-e5d9-4d74-af42-53885a9989ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f6c8211a-c131-446b-99d7-6c26eedc4ab3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c29cddc4-dc75-4f29-a0b3-3828a00e0ba6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96fc66bd-2830-4a6f-a856-4ac63d5c6f2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b0da1ab-6df5-4c21-8c18-9e95712198d2",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd4a8dce-af5e-4410-946c-a4cb89247f50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "12d30725-45f6-4aba-8cec-fcb4fbf8115a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9771c464-fb76-415a-8250-06e908857ec4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "714e53f2-22c0-4e80-b5f2-20371636f802"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "50aa0581-b3d0-4ced-af95-48b15d7e5f7b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a5197d0b-80a7-42e0-b2ed-2af7279d5f69",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8ee4070a-62c0-4519-8061-85039b312399",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "f5daea95-3f3a-4f27-8be8-ec364928916c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5dcbab23-d69d-4b12-a085-7251fa5221c1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "55f9cba7-d40c-4074-910c-2bebf7bc6257"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "62b338c4-6b71-4d08-b115-f8f2196222f6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c4969d7a-5bee-4a2e-9627-dd215a66edc8"
            }
          }
        ]
      },
      {
        "id": "4cf97df6-a2dc-43f5-9b1a-f3134c00f64d",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "8aae2166-696a-49a5-9587-1b31eb4b78b6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "202240d1-b6dc-49cd-a6c4-dbddb58138f2",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "8c825d50-bd37-478f-9458-11c81bc8c859",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89375b16-a5b2-4345-9fc7-5ebc00f4fcd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07f34c85-93c7-40a8-bff0-16d8d69020bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69098f4e-1094-46cc-93cd-0229c9b4bae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "04a60d1a-e4aa-4e59-9894-09b594499c3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fa0adbf-1f49-45c8-be70-0b650646c48d",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "366db841-9ab5-4826-8740-9eaaa1efddfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67debfe7-8cfa-41fa-af63-5dfb25bd530b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c7d5a7b-f74c-4c95-823d-01f3c7a54ad8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5bf55302-38cf-414a-bed7-42a398095f69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d267a538-7a4f-4c84-b245-569bcae1714b",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0310672-702e-4b8b-b942-718ca8d5cf9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1439ef46-a9e2-433c-bef7-c946e18702d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fa87e4b-c3e2-48ff-aa9e-fb32158f0800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "505b4e4b-dbc6-4ea8-99df-23d701d38eb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c74d136-dfc4-4635-9dec-09611f18eba7",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bf3284b-091a-43d2-bd97-63198ef3c4ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67af7f32-f920-4fe8-965f-4340ff1a7e8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31ea97d2-ca6c-42a9-8c29-331b8791c653",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4b19f02c-2be3-4703-bf60-03e7deb4b1f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01445a64-ee3a-4641-b648-9440becade28",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1199cc1-d488-4cb5-a3dc-4fb7c9323261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3941d21e-9ab9-4a92-a0e1-025dadeb531d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d75367a1-81f3-4083-bd71-a066d62dc142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "423952ec-824a-4cca-88fa-3cafb9ddaf71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d09b4863-e7b2-4e5a-aaa0-51d37626e191",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "862dc8ef-9020-4a28-8fb5-6725fd588c57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "334ee628-3947-465a-abb5-972b22828ce5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0a1d2d5-fed0-434e-8dfe-8db3c2be5ce1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cf0f740b-60b2-499c-84aa-d757a2165ccf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b6bcbad-ab82-407d-bbd1-19b5404bfc8e",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e79fabb1-981e-4f94-91d7-33cea30a3ffd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70d302fd-c373-42d3-950a-c8be3db96673"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e442076-d47f-4714-85d3-64e32d9d9781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b56a8649-828a-40f4-8d24-d5dce8f9b81d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04f32850-1010-4b64-9d8d-046488f91401",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0e40f27-db64-4ac5-aa92-c5e88a775e5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b3d2aee-9e33-40c7-995b-30eb6f42c8c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54d972f7-8334-41c0-967b-56de82df55e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "930c5c31-7239-4900-8500-7e1ca9c4a6c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "051715be-1d0f-405d-9ada-6abc7bced5c4",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c689075-5d0d-43c3-9c28-bf3febc35e37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36aad1b4-089a-4ae2-bfeb-73db70866663"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "852b7bb9-098f-45cd-ab5b-86f2b9150f85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5f817a69-fe12-45ea-94d7-bca6efb9fad5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09376e47-3e35-4d68-acae-28cee054bbf0",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aadee87c-d0dc-45a8-9bf1-ca59203e302c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32fed0e5-b86c-4994-a47c-9f8c51b29ed8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a825018-b55e-4cd1-82f4-105b48a00547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7f7d7360-9ad2-4a3a-8b36-788ab0a10bba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9add5dc0-4b32-41ba-bdbc-7dc6fadb820b",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4530c3a9-2ca1-4ce8-94b1-aa494840c125",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e30991a-4689-4961-9b1c-13f73c4d4cb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fb21024-d0fd-4e77-beec-cf53f152661e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1b28d52b-fbea-43b3-9167-5468e051b13b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd34d3f4-5916-4bf6-b963-8feb8e8f9bcd",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbe5a89c-859d-4a2a-be0e-3a81b06bb8a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c390bcda-6115-4b82-a1cb-696a84366355"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "799d10b4-e18b-41aa-b486-7c2683e1ffbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3ccf51c8-cfbd-4642-b137-ecdbcebb2cbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30258682-30ea-40af-8ba0-e0f54ea08787",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f25ea59c-d4de-4787-bd24-c60a96355ddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "303eeaa1-570c-4d11-a4e4-eb2515507c55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19d4622d-ec13-46ec-b130-6c53da83e8e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8d09b147-14bb-4a51-8057-74724da7d80c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f93d7b9-cc8b-418a-b5f5-90a31d5752e1",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c18d908-d912-4b74-a8ac-a8718358b5f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff36fe0f-a9de-430a-b827-e7a6c7c89732"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec9a1300-f765-49c3-a76c-0e05c80ed815",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b925a3f-9948-44b8-b466-83a866fd8d9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eafedf76-dce2-487b-a934-47886d561c20",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cea0d31-1fab-40e0-ae16-3fbdaa8cc5a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16c63c8b-2f2c-49be-ba8e-ca3ce441813b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db609b07-de93-45ae-970f-f932658a1968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ad732488-d519-498d-aff9-575b5c005296"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0790acc7-51d8-4f23-92ff-f27cfd7473f1",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6835472-ed88-4195-81a6-1733989e6be6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "063815fa-9016-4893-a878-acae56534b64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c35a903d-3752-4a0f-96e8-64429e5c3825",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d7443950-f7cf-4f30-9bbb-d8ff639aea47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fa4ae85-32bc-4b06-a76e-8a15191e681d",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c14c963-2620-4bae-93f9-0021c14be05c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53b367f8-eba6-4a46-ade8-e91b7a0d63ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c71dabb-1f41-4c8e-b24d-d4ba858308cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b73548a7-d4e6-477f-938d-f1183852d6e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1a9e31a-b8e5-47b2-965f-90fe61a610c9",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62e635f4-8517-4276-a9a2-7a15252c6bf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef27ee82-35c3-4fbe-ae64-178e77e29315"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bb9614a-5748-4542-a578-2a0887a3c498",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "212193a6-3b78-46b7-aa87-b6f4bd352f1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdba5911-2c71-4a9b-8fd7-6b6de48e34b4",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c4630e8-32ad-4aad-9cc6-86c75f9d02e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76c9804a-57b1-47ec-abff-09f882f7e2e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5281dc01-8a3c-4f5f-babb-c471f9e4a6da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9c21c57c-9347-40a3-be0d-dd35908616c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e9a3702-180b-4eee-bf6a-8fb664477e9e",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e8d5624-1413-4065-ba66-57fabe09549b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d56bc97-5e3f-4c5e-91f9-7d2a7a3edc10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52847ed1-09ac-489b-afe6-75f95a1cdf9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "865a6a0d-c1b0-463e-a257-e2613e957787"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bda90552-cd32-464a-a241-efc2311df8a9",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8330fe00-b4af-4926-91b2-0fe5d3390b84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ff50f90-43f9-409f-9291-bbc780f32fde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d9bf4f9-f8a1-4f80-8fb1-93d1009aacfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc88f2e4-433a-4b3c-8a58-d4ea5c335fee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf90bff1-1835-4638-8114-2df8a5eea816",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "590c6e05-01d2-4417-be3a-f5779276d253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "940d3377-0549-4552-ab50-70e1377c01a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a11a23ba-fece-417e-873a-4be91caada39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4fc2389-a54d-42b5-86c9-c5293e2f55ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10e60386-36f1-4291-9476-7b4760bf2e4c",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b15a609-f92a-4328-befb-282baef0c4fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f48d4537-65b9-45e5-b62a-c5653cefd701"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41e1a42b-a284-4a3e-a0ef-e1e0197e751a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "572661d7-21bd-44f0-a4c4-c4dc9f3b8e02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "532cec8f-df2f-49b6-aefd-7337a218636b",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7730b6bd-19f1-42f3-9380-2ae9154b97ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f955dcf2-81bf-4efe-84de-e7d722a70130"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0808d639-191c-46fb-bdfb-b60a86cf590b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "85f7b63e-34f2-4303-885c-ab3e9376ebba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "415d8c65-8be6-49b0-82ca-aae58433a24b",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f4c2bf5-bb39-4420-b432-4fbf68d70778",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fe858bb-5aed-40e5-992f-4565ef1ca9ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbfb4c54-341c-4ef6-b2e8-21cbe1b1a985",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f125fcad-26af-45b0-93b3-56de55bc660f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2c451ea-3956-43b7-8b90-87c08119e54f",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f48aea83-7f6a-4e74-b1e7-a3a496e21980",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5aee693-3d4a-4c29-87c8-500134d3b5cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb6f2319-a8a3-4384-b50f-ff3ac4f32978",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "477e1984-bbc7-42c9-900f-4eb38d967fb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea95b628-4f08-49d6-bd26-213fdd953644",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f440022-2240-4798-b041-0df9ea441d4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b828b1d-de06-4f14-82ef-3c1c3ccdfea3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5848d90a-3ca1-4d1c-b725-0d50c77ff288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "47fc2e8c-3eca-4a4a-839e-af6f1004c8d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8720c70e-4145-4a00-b75a-9d22d5a31cbf",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42fe01a6-da08-4209-aec7-eceac4a7e9f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4e62a39-6227-43e2-935a-5366ba63f55e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cbbba4d-d744-4ddb-88a0-721200e806e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba925ddd-3ddd-42ab-957e-d03a0cf7eecb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "639e4dc4-6c7c-4da2-b099-a266bbf2fd56",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2c9a78e-0554-4ebe-a200-eb4b3271e445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4594d7ed-13e3-41a0-ac1b-dc28654298d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49115e2f-9f9f-417d-bb20-fdb2e025ed26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3b8b192-4ca0-49e5-a69b-c9036afb9429"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c27340a-fdc7-4d30-aea3-c1507453b0a5",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98a641d0-302d-4a13-8ffd-a9c9ad70bcaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91faf865-642d-45ac-ad14-d97d328926f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db1a7f21-768a-4343-a8c9-66d88e0b7b90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ec8408c-27cc-4b77-95e0-117adf9145bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3103a635-a407-42bd-9cea-4fae13ced257",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b1938e8-46e3-4166-b0b2-f0ea1e274a7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04e446aa-a538-41d6-8892-0930d1fe864f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb63294e-8070-4a00-b17f-d27b18086fe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "73405e0c-db84-4010-b744-31bf2fa198ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10362627-df06-4d6f-83b3-05efeb3385dc",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50e48c43-4de8-4bf6-9e3d-9ffb646cbd3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85d2e0b0-7c5c-485e-9548-e1d567ea17a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d5abf9e-b8ef-4824-95b7-6c3ddf2012d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ab4dee7-f749-4ec0-8603-1e64bdcc523d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7a5322c-b7b4-4203-bc1e-f4c1718a3b1b",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a174717-314d-4f8a-a878-6c5e7337a920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51b0a33a-3c9a-4ff0-87b3-020e8e1f2247"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdad4b42-75a1-4975-aeac-e57b6dfe4cb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f7837cd-60d0-4baf-a4ed-0b5155ba881c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c898e986-a71f-4a67-8cb2-4048c0e74092",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1127f02b-4165-4503-a74c-8d03889e6b36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5806a272-38da-4caf-8a13-77c6339b9ef1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73a46a16-f842-49fc-bdbc-0f9a9c497389",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "058aa0c6-423a-4c3b-a381-3d543b1a7370"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8664ac0-48e5-490e-b73a-8ac9d26050c0",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc1e171c-c1b7-43b1-a40c-382cca6e8303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16d23473-fd8f-4154-8589-fa964515adfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a29f50aa-4296-442d-9b18-d7d0de7beccc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ecccca4e-9552-4608-ab17-980315702df8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa378c1c-eb6e-4929-adf6-41bea44348e6",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e45eaba-ead6-4aa9-ad69-edfbd0e0cdc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ca42d97-0576-4429-ae38-f7cc9ddcd667"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cb67b32-92b5-4f51-b4ab-b0eba71a7377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "46df3579-3919-49bb-8c3d-2af4919a0343"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cf89f8d-614f-4b90-9d7d-c70606880ed3",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9a85d0d-1711-4ca3-8d6d-d9e7687c8578",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed867e76-a1e3-499c-a020-082a7850f180"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10e86eb9-7e94-408e-a5c6-589f05d030ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "74e6f57b-fe9b-482a-8c2d-e0a7ccedb67b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dc6996c-2b35-4790-9168-5eea818d9b02",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c3b8b21-701c-4e59-9017-4e9b7a568381",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b01b430d-4b10-46d6-85be-3f625b010b1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c77d090f-05bd-495e-9428-e7ada491c841",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "08f18abd-dc97-44d7-9755-29b896bef26f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e6260fc-5b91-4d95-8e0e-0e6d20615983",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20cba0e9-bfec-4093-bed4-9617be23faf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b71b633-7af3-4a63-9d86-97d45e53012b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4489c861-2e51-459c-9212-e7d4ce649217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0b207a02-6896-43ea-9b19-b63d2b33cc82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a3f727d-eb6c-4d08-86ad-ed698746dd33",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a20f009-742d-41d1-9ca4-711c1a9be0ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72e1abcf-245e-4698-a7f3-7248b93d6887"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3803e038-b2a4-49ed-9b5a-399f86039e39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7d4bfecf-aa1c-4142-bb1b-dbd892399fd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c8f0afa-b864-4123-8be8-b969252a4f1a",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9843e3a-bcd4-4465-9d18-a8f7ea6ced53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ee01398-92f0-4798-b679-1edfaddc4ae9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26ac24e9-4b1d-4a12-95d7-a1460763172c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3741a67e-21c3-4eaa-a4d2-492e7ead96c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12ce1fdc-671c-4722-8e74-66714718022d",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79118b29-d03b-48ca-92bf-8c8bdad130d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c11c4b47-4b68-4a44-b075-79cc8cfc4973"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bae03988-5cde-4d89-9245-0d44b5052c38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "66efffbe-c63c-49ba-8b0d-da4d6f37ebd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8efb7eed-494d-47a3-89a0-aeaa9acd378b",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b020b44-3919-46d9-b8d3-f099ef957fc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2601e1d1-432a-4afa-a7b7-64a8e55ae4f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0813201b-61e0-49fd-8c3e-3d0662ad324d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b76e07e2-4df9-457e-a671-bb55361664f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "928f0a49-7732-47b7-8589-efe25e65b6bb",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a113ec0-ea7b-4921-b582-aa085b8b82c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "953d2f3c-184c-4a7b-8d9f-c9771629fc8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea25fc50-2e6e-46ab-a1d3-10ed08d4afc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "bed13d87-9a80-4cbf-a4a6-db551c0e06e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ba46aee-42cd-4c29-95a8-14af15f0bf31",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afbb16e8-7280-41b3-b0f9-d41f1cf869dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29fc7856-51b8-4947-afcf-d8c5a0302464"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1af32246-ab38-48c7-be76-1d249cb6a798",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "a4b1c8e7-b0ff-47e1-8e49-bf5705484578"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f4d2ce2-baca-4188-8855-50ba4e6d5fee",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b65ea9aa-3807-4508-b749-79a875ec2d3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dd7c49c-1d8f-4334-b2ba-8aeb050ec0ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "793c8f74-e34a-4821-86ce-849ce350610a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "b143a4ff-e776-4c5f-b03d-c316fb477d20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aab6de00-3646-4d13-a678-b50004efc51f",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6993a626-e13f-4d02-a963-45633fcfb26c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d527b2f2-2ba1-4e91-8a4f-3d2bbdefe2f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42e3b9a5-1f56-4d40-824f-2ef253f65a3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1cbbce35-9dbe-45b8-a6f3-097bca2bf4b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22b8dece-f142-4c2d-8cac-d88894aafb5e",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b67a2d7e-35c1-48e0-877d-5071ed973c36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f247b0d2-046b-4c1a-81e7-f1798cacb272"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd0689a8-9aa7-410d-b739-097a85fc974d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "20481e49-8f8e-4c02-9e10-9f99b07a71b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3bf4d4b-149b-4935-a487-4d830a5f0298",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5727c9a-3034-4088-a272-3b1cb5d4d7be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5de75361-19d0-4f77-a42a-533b63a63694"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b76a9f17-3d6c-4e0a-835e-c5ce296c9743",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "25646c61-3158-4466-8f50-478d05ff08e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11898032-d50e-4bd1-980d-77c9db852b65",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b22d7b9-cfa0-45cc-8be8-b16c54219f98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c911ecfa-a751-4001-b513-ea37ba4f9286"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac41a668-9879-4df0-a3bc-fd0285a3b3f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0f73a03-7743-4fb5-a51c-9bf50fd5d26e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "439e001d-6d96-4bba-a957-180bcb89f0d1",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c8fc1af-03ce-4af1-b884-e980636a0845",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8add86b-0f75-4e5e-8340-f00fdf4ed639"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "758285c6-9626-414d-8a7c-89c5a8306f27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8ca8154f-aedd-4ef9-8bbf-d4e2958fdbcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c5bfeb4-96f8-46a3-b122-433289c91d85",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f72c647c-4fff-4449-831e-2ea7333df3fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97a787de-c80a-4580-8fa8-9b9215a75f3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad48cc37-8b9b-439d-ab48-2112416f0ad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5523cc29-f566-42b3-851f-068d3533c161"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75131ba7-349b-4a74-8b56-fdf9ee5da5ad",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c44e7d08-0c5b-43b7-8f89-00d9cdbeca25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6a2e79c-5f66-4b0a-9037-7145bba6f19e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ac6b03b-e63c-427d-80fb-ccc371a02c2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "039d238a-43ec-4bec-80da-0f53e28dd1ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0327f49a-71c2-411f-bcf0-7151b340efe3",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a5a7c3f-4c86-47aa-b78c-92135b50d401",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dcee4cf-d767-4e40-a752-d4e05f9b6161"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac78dc26-96d2-4d3b-96e4-4e3bc7e4ab03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff7919d7-61b1-468c-9fe5-84984da3fb9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89d40e03-96d6-43cb-ba89-0e437f37de53",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfdd1723-5255-45c1-a341-d87947eaef31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b546f6a-d031-46c0-aaf6-d254c415c193"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56b4a974-ad9f-4528-9415-7fb4d32b2657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b8eb2f9-e6a3-4aa3-9fa1-08c3daee530e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac4d3968-8fa1-4a00-b00b-d18a8f29cccc",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c43faf8e-891b-4fe8-8c75-b27fb5ae7c51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2420a51a-bcdd-4b12-93ea-bed280b74ad0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69552fc1-ac2e-4496-b28c-25169827a8c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "16a13ae2-ce37-4481-8886-575e07ec8f6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c466f194-ef93-443a-b13d-8d1e6f03b755",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8827c8b-0c27-4c4f-845e-d6fec431bb1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce261399-1a1e-4cbb-9813-bca45d981e76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4ef8734-1fd1-45f7-b377-8413c291c23d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d10e7d42-c028-4224-82a7-5d576663a3cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e314fd7a-22e4-4172-8d14-400ef7d4c7f2",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75557b6e-2b51-40fe-91e8-35c08bc725d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7d923eb-3e05-43a0-b8c1-22c0502677d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a22fe943-7e06-4729-b261-b0d9b7aa1d5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "d7be7fa9-49de-4a75-8a23-f6db348df80c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b790827-1872-412c-a0d3-6f426935f738",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4882c104-51ab-4107-ab77-6db0f1bc1790",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0a4464d-a3de-478f-901d-922da4d7b778"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4be5ed2-fbe4-4be2-a269-2665cd7ea290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c7fff3c-82b2-417b-9ce5-2267b0eb28d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41ce1b59-cb68-4b8b-90b2-0154131424a7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3154d106-8efb-424b-9400-62dd91d4f01c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "836e8828-f532-4367-91ce-a8f442fa3dd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43970ef1-dddf-4a05-a285-fafb838da82c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1fdaa1e0-c5ca-4d54-a7a5-30db8a89da65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92c6a5bc-bd48-43c2-8ef5-67f269525a4b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1ce732d-1343-4c14-8211-11b3d3591401",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad6e13d1-30c5-47c0-8a7a-486c53969701"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36ba5eaa-c4e0-4494-8db9-1e0efe01c19f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "95564868-2220-4029-8ec9-36662f530657"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6ffff51-b35c-4cac-8fc9-5194f7aabb77",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc5a4aa9-6695-444e-b4d2-1457cd25e328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d172013-126d-4c0b-8af9-c388d75dd1e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2428ce5c-fa19-46c8-b404-191f5214ff9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c6b21e5a-220a-45c5-9f6f-c1f57f81b804"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b04063f-36d1-4373-9df3-9a59dd067086",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24cfd5db-04a8-4fae-a134-89c891544b80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d13774bf-0fcc-461a-adab-c1e0d08898b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adb88bcb-5030-4bc6-b35d-94bb01ad7ea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d3d96950-8032-4ea1-83c3-29e12881f146"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86b6365f-e6b2-4b9a-a8c4-09480bd949a3",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bb2e42f-4802-4a3d-a850-ed8bdf509f40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "132e38b6-395d-4cd8-b5ac-f2357bad41fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8db456a-de17-4e15-8d96-b65729653e17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d72f123-94b9-4f03-b881-d1b1ede875a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c5d806f-2417-42de-a11a-b9413b6e100e",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6442c4d-a059-4e3b-8248-8d9770445ced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72417cac-5920-43e5-9bfe-dc54f9600649"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9c089d9-62de-4a0d-b82f-a3c5b70aa887",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b8322a6-6853-4734-94ee-26529ffd2075"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c470841c-82e3-44d2-8e33-904f81e83526",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f51e0b0-bfe8-4bbd-8f70-cb4f4eb39fce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a8eb9f5-30ad-4321-95df-c2aa76c7ab05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd803a64-6119-44cd-80df-763b31fdbc3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b583d09-8c27-421e-b8c1-cf08f88f3d2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9eb3650-4fc0-4381-9374-223e3c90c218",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2dcf961-0082-4ac5-9dcf-524e53e42adc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbaedb0d-ed9d-448a-a053-307c6b319cc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce388e41-cff4-47d6-996c-ac738f136f30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a922277c-bde9-4317-bfee-9f8bf26a62fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53422ffe-6475-4930-a5f1-2dc5b04591d0",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f9b6cde-aa5a-4bae-b0c7-8973ac49ab21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df280773-626f-4255-a44b-3be92e672aa1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4022bea-3d44-4f59-bae0-773d3883478e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "33b5fa64-486d-4a20-a470-0492251afd9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "221b3667-5d8d-4538-b836-2000b0671248",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a74c7833-f108-44c0-9aee-4c189dc0068e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88e7a8ea-5b1d-4d7a-94a2-8feeb621ad30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc1bd5dd-e295-4a72-9c01-ad0669470b36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "78347247-94fb-40da-9ea3-960e539e5b28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21caaee3-e63d-4f03-91a8-86dd7c2c1ea1",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "875d8eb1-953a-4a93-a3d9-365055170942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4430129d-992a-4920-82b5-39507f4c4934"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3538cd1-f763-4771-8963-df168031f824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "445379cb-406c-48b1-b50d-5bb455df8a7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ec00d77-5385-4d2f-a5e6-5570c72293b4",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdd02624-a19d-4512-b69e-5dfafef26622",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd954469-c02d-4cc7-ae6a-d18f392fac9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb09e265-216a-429d-9b32-7ed7c7ed8b8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "82c1fa01-f3f4-4416-b980-e739a020d97e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c0e4a7f-d96e-4d73-9f1f-cd5d00dbdae3",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0006e5ed-1be1-4f80-902b-6fa0ad60e9af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a145c716-653d-4132-a603-f4ea67be1f7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "657b5e8e-54cc-4eaf-90f4-35b05f1ce14b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f21d5d4-1261-469a-bf8c-db781c38696d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "636456c6-36ff-4853-8990-522641657f4f",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77f7315d-e9c8-42a8-9d16-e268bcdfd753",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0535857-c283-490f-8243-509108ec4753"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50c11101-4d9b-47f4-bf0e-da14541136f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "20ae2536-5f73-449e-8eea-a068b23ba2ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4c3ea3e-6d47-4cf2-a382-f6571005d874",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6fa2aa1-1321-4334-86a3-f14e04dfda69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24a9c7f7-878b-47ce-b7a4-5681e60b9885"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f73c67f-d633-4cc7-84e6-539ac6b51953",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "05acd389-7e9b-43fd-ac26-8de58a56b6aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69b78e3f-bbb9-4391-be6f-84facf10ef02",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6c0e50b-6a2b-49ae-b6ff-fa535812091b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2e196ce-d93c-455c-bb38-2faab9f49f1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feef58ac-4f5f-4665-b949-a095bc4354ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1e691c32-7c6a-4277-8974-01d2e4e5855b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "887f49ef-70e7-4cf4-b038-3015d85eec2b",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2e75526-6268-4eac-9494-218771d5bacb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1fd769d-485b-4348-9aad-7e99a00f104d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a27ff5d-9231-4168-bcc2-f2a007946b43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6f61987e-fbd4-4867-b8af-28b2b764b359"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1319ddc-82e1-4cc6-b872-a80f160a1a4c",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41939863-1b3b-4393-982b-0c023e4aef02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea5ba233-b5ed-4e33-b1a1-515fda31dc55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dc5ec32-6673-4d6e-841b-1d1cb9aa23b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5e1df6b-04f7-49a2-b1e1-8bc9d49c4dad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ac787cf-7307-46f8-a9e4-5e7dc8b5ba23",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea16672d-8412-4465-864a-cc74ff2e1894",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fa110ef-4d11-4ed7-97bd-1a8ce9dea8cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbd23c82-2d8c-489c-9c42-6568dfa8f081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "af815428-a034-43a0-a795-ccacf52f1986"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd32619f-38a2-4034-8325-986dedc4d229",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3e4541a-4d09-4adb-b845-4c35b7bdd08d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c311a04-9961-4099-937b-9788afc51017"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52c42844-5c9b-4c86-b7bd-283d3b3018f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "61494878-7e49-46cc-a64b-e8dedd8f0730"
                        }
                      }
                    ]
                  },
                  {
                    "id": "524fc5d9-7d5b-4974-845a-7f0da7f56077",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0accd648-fa86-4bc3-827c-6b44fd044001",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "587c8e23-c178-4053-9112-58af1419a079"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77ff2708-af37-4a46-bd2e-bd1c59250ba9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb272d85-7ba3-41d2-bba2-8b63c0e6fe26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1359b1ea-654e-4a4f-9aae-05481cd47166",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66233aa5-b340-429c-8940-5c56b5b409f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e77c29d3-9751-4b80-83fe-f127f53b63d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65c872f7-8f2d-4daf-b97b-cde04e6a8e42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8fe47369-7b7c-4f7f-a821-413691785867"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c506b79e-ee03-48fa-97ca-0b39b96d7358",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c93be091-e511-4eda-8c1a-8b0110b801fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "787c6f4f-46c4-421a-a71c-cd3df0c2900b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91212601-d14d-4234-ac14-a47384bcc053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e76b036d-4ee5-4e5e-80c0-aa97a9c36954"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f38c2c6-4fab-4c09-97a4-3625c8d58d4c",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa354af7-5ee0-450e-ad04-47087dc0e09e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d3f5d4a-ae7c-4e78-b185-984c599c0521"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aea5b804-7191-456f-a48d-8ac7828f0435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f34b58b-99a5-428e-969c-8ad2b610ef48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eba775af-70cd-452a-b8b4-360c6bc970b2",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23fce161-24f9-4776-9df1-f329d91bac61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ff72473-63d4-423b-bafe-14df34e89388"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc1a93a7-7863-452d-b0f4-343aeea866e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c497457b-492f-455c-83f3-183a077b3f35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db069105-811a-4712-bbfc-d0af8b39aecf",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "068e1979-458c-437b-a0e6-4bd5a05bf9ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db5a8cfe-09a5-412a-9e90-ce14f6fd4951"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a3f69e4-883b-447d-b76f-494ac709500e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a14d18a7-a8bf-4f05-b294-f54b4a064b7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bc352ae-0ff0-4c50-a6fe-2bc8eedaa1df",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e15325de-9bfa-41e9-bbb1-119f6d164105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cadda633-0149-43c9-93a6-96b13b396e32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8d96358-8660-457d-b9e5-7729958c04e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e7f4a48-68ea-48d1-bf60-100074744206"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c32fd0df-d2b6-4bb4-8307-4f48bf72d466",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f7d5ac6-6a5e-4265-bece-acdff0e94d7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35c07038-662d-48e2-a28f-18176b8daf0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "772892f2-efc8-4106-8e72-f659c3da5e2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "86f7689b-1fc6-4545-9c64-fb95e561e99a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9accf985-e081-4abb-80be-5fecb9abc7cb",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d021d4c5-74f1-4489-8c26-f3e332872b2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79ee1246-8d55-4811-a40c-05ae73420386"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8cdd38d-5ae9-469b-8a3c-636f2dc76710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1fd30825-4a1b-48c9-abc2-b1c36a67f5be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c9f44f9-502a-495c-ac22-c857d81fb883",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c61caf2e-b599-4747-9d7a-0352e28dfdd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "420e72fb-cd54-40f5-a0c6-b70fa63624a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b3b2779-26cd-4c8a-b2f6-b53da3359f17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "3159d266-1292-4bdc-8a01-ffed49470f0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0041521-3a50-4c51-9ae1-2ce352acca54",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "273fe43b-bc15-4791-a0a0-0d35611765dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a2271ba-dded-4b4c-b1b7-d322e4df79dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0d417cf-d87c-4012-af0d-7f9a5aedeed4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3b69b3c8-6ef6-48b0-8177-a72ae8a326da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b3b2db7-5728-40ad-bc7b-51d54d89e099",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02000421-2fb3-4832-8117-7bb40cdcfb68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4946485a-4071-4f7b-8ba2-1ab6839ed53a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2c68a8e-9fce-40bc-a695-ba4fb4b7e12f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "13d65677-ea5a-42a2-94b3-9f67ef50043d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6ea66b3-1330-4395-9128-224a2a8625c5",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8edddbe0-29e4-4386-9770-fc3abb61182b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d58143cd-0c33-4b0b-ab4d-c60e7e31e3bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f21a4cc0-5a03-43b5-96c3-44826038c54e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d8f6ec1a-df60-4e5c-a195-69fd36dd2c61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee516b8b-fb61-41af-a84d-06aac636b943",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "377017f3-b5c2-4dbb-8199-3ee28beb77bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ae8e93b-92b7-47a1-8eef-f3c77ce0d643"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35376c8a-3f42-4184-9d91-1424cc61aca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "e8dbac4e-523f-4898-93a9-01c3b9589da0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7927f9a-0c62-4ef7-98a0-3cd7c252504f",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "248d3c0a-21dd-4232-a893-d74934cf0182",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f06f0ec6-08b6-4e05-bee8-02d41a9aacb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82aa1c31-e4c2-42ad-b5ed-5357e10aa77f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "900cebb8-dd1e-4192-83d8-a465b9b9e7a1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ecb6da38-1239-459f-aab8-0f55d71491f5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "14ae1add-47d5-4f5b-8af9-a35e75f6913f",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f91ee98a-0984-402b-a55f-eb58ed9894ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c8fd58f4-2b51-4296-bd11-554cadd3da2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea98b25e-d0ea-447c-ab41-32da291aeb5e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "238e27e9-8d50-46ea-9028-35637d0a9429"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c96ec5af-ce78-4ad7-a9e9-0cb31cf9c399",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "defa2ebc-1572-4aba-b28f-df4a726327c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bdbe3264-22df-4982-a0c7-d238630dabae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c92d1f6c-558a-4b68-8dfc-c1234a7c302f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "e5e9ca3e-8751-425b-87ee-789471feee9a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8df0add6-0d05-42d0-843c-d34654a67129",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9cec98f5-1a4c-4138-b6af-ac00fd324539"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9bceb05b-be67-4ea8-9c09-7ad197a66905",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b1064b53-d38c-4977-a31b-78f8ff190e8b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c73d28f8-1a88-473f-9a87-2028266e2423",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a6911d0f-949b-406c-aa14-1f5345341271"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c06e5515-929e-4b55-9aef-97390f2954ad",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "65ab985b-7d01-4e6f-af64-4f11d782fda4"
                }
              }
            ]
          },
          {
            "id": "cecc1f65-951d-4e1c-8ff2-dbe4476f7a8c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "09a3a241-6118-4967-ade9-eab1f4d271fd",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6f693a53-7905-4ace-9c27-b4c078226f44",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a7013150-db92-4bd2-a4b6-cb3a40c3f53e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "df91c931-8429-405c-909f-6017ad1f67ba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b6ed167c-9db9-499a-8765-0f64892bbc5f"
                    }
                  }
                ]
              },
              {
                "id": "2f354448-007f-4eba-ba9c-6d3979c0d393",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "05a5060a-c58d-4303-8ebc-bceecba97f8e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ec9dea5b-3d46-46f1-97ec-0b0ed4d0423f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9468c4ae-6ae8-4abc-bb4e-fc90d15ad417",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "357b4127-5dd8-485e-849e-93b6e3067cef"
                    }
                  }
                ]
              },
              {
                "id": "63b743eb-d8ed-4dd0-bbde-ef9cd1361af5",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "59c7f920-5ac2-4c36-8d50-6e6641563534",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "08e3bb42-6e0c-4d8a-94e1-882fcc951546"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8e77f8b5-b016-4619-8ceb-72d3842c17a1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "6780808c-f106-4e64-8585-1c3638a6e3f5"
                    }
                  }
                ]
              },
              {
                "id": "a944845a-2095-4a48-a9bb-68e5289e11ef",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6821052f-2b27-43bb-806b-d879cd78950f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1df2de76-965e-42b1-9bb8-e8d7707dd829"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "581b5022-4b7d-43d0-882b-9c9aa0a4ec75",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "df8d721f-caba-471f-9bde-48a474293d91"
                    }
                  }
                ]
              },
              {
                "id": "77a0de3c-110d-46fa-a140-aadbbec94935",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "10bc6528-bdba-4a25-acb0-d96b760f5043",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0c6cd9a7-509a-4f51-b4ed-5541534f18a7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6607716b-5b8a-4a01-b756-0d42deca1459",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6b2af229-d878-4a7c-beac-e63223e10fb7"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7317202c-3c9f-480d-a285-22c93b06024a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "41fe5a7f-9a5d-474d-87ac-bca662ffac11"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "062099b6-fe92-4c52-89a1-4a984a0bc36b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6bc27e5d-a56d-4f89-8fa0-03b0647f290a"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "53b8a2ff-0519-4e26-8a74-2ddfe369a5c6",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "3bda9a48-0274-4d93-a32b-518825e40513"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e2b7a23b-87e8-4f67-9f7f-57a22ceb00ee",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "efe1b994-684d-48f3-ad95-3e5d2f403307"
            }
          }
        ]
      },
      {
        "id": "f83615ea-ef04-40d7-9d48-a0e9aac6e8ca",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "684387d7-c28a-4f4e-8301-e47d7e42f522",
            "name": "Negative Testing",
            "item": [
              {
                "id": "913ce333-6e13-4a0f-a5be-5b8e5def05b3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b1488137-1e56-4fc4-82b8-f2aec4d220e3",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbd3de3f-12dc-4578-a04b-7642ba15a6bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b66648a-3b9b-4dd5-b428-b2a4bbcac547"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36df4bfe-3a6c-4a37-ba2a-8ac7a133d90d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "e31424ce-f216-47cf-8629-081a05fb7530"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f21912f-abf2-4117-a115-8fb42cf60a64",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "404aa4e2-55db-4b8c-a069-a6487147f5d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4e558c4-2514-4681-a1e8-b64e067cf823"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "849121e4-1460-46e1-86d9-91dfa2efd8c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "08e099cf-b0a5-4abd-acc9-ffddd68134a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed605b7f-439e-47e3-bebd-83ef4678710c",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0965770b-1baa-4153-a441-f30ebdd54707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f589edd-bd0a-42ae-ab91-fb7af3b8ddc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63e44e7c-31ee-4614-855a-1d5189b990b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "914e054f-478f-4c89-8716-50ad36c3cb99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb1e355e-87bd-45f9-a981-1212aa506cf3",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "849fa1e5-5254-44a5-bfc1-6bd2485a2543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "831c8d08-27ed-439d-842c-29e1631e113d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f3bcf9b-af92-42e9-8ee4-30936c488cb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "44e45c0d-d6c5-4477-9e9d-32afc0059ecb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7516bdc-2989-4054-8ee8-486207786a19",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73e295f6-b362-41a1-a3c0-755eb7f40dd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ba98ce1-6cea-48ed-9915-05848b4e5aca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b307906a-1d1f-44df-a6d9-9edc6eb1adfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "56366eb3-ee80-462a-b705-14373bd0f05f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d8d9d34-f38a-4382-a65b-129679b54e07",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f3f1dc4-3664-4dbf-94b4-77fd6a936400",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f0c39f9-f53f-4275-a244-cfafa41a60d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0e88ee7-7c8c-4767-b965-66f4af2e8951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dc0f4043-2a5b-4517-8ae6-ca615ac507ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d679ae61-383e-4f26-9390-328a7d5b8236",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36f0de9a-b65f-4a8c-a4e3-057f2a4eaff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f501decc-5030-416b-bb2a-6a38fe108494"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34d34dcc-a8e7-44fb-9517-e8001348b629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "0aef2329-c736-4274-88aa-d747be675fbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "173dabc9-5d14-4ea1-9568-783a445ee221",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5c40c2c-a3f4-4df4-9c28-3846b2dad7ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38c15a99-61ba-4062-abd9-d23133478179"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e26e4a34-2fdf-4957-a5a3-6b8082c57d4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "992f6470-97bc-4e13-b9da-c7c1e1bbb977"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f392146-060e-4682-b85f-9866db5f1b07",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f77eb9a-1c1a-410c-9eff-55a5fc8c8a81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4ab3a7d-c8b5-4041-8881-a462cd0884e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab1b9356-db71-4b9b-bbf6-10ecdf198469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c104fd0-de9a-42af-9cdc-344f0d51537d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8397605e-c37d-420c-b2c8-7d32c323489c",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "014754a0-e6ba-4005-bda1-a4b96a21e272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35c37de5-9d4b-4b07-97b4-00ae9fb5ab2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ae01858-0870-4d9a-b526-f2888dfe9b77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a63ab237-745c-499f-994d-303eff041ece"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b726d6e-86cb-4c8c-93a8-370bf6a3440c",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6d135a0-50fc-44a5-8ea5-fb9436bd227a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8d510f6-153a-453f-aea1-2a1f59bf703b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75c4011e-5e07-44c6-918c-cacedc8e49e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "0f6bf758-9d80-4f4e-b8e5-be72d84bacbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b5f5fbd-2ebe-4602-994d-6320267a6f08",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b089e4d-8fd8-4b28-a0a9-8d791e777d10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a12b40b-c3b9-44b5-9aa9-7f1d1ed68ac9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32f67dd9-1cfc-4b5b-afdb-082cd3041ee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3b66ca6d-074e-444c-9021-77f168b41fa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f34f943-ba29-43bb-a6a0-5fc2dbc94804",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dab51562-4753-4d74-8c7a-6aa163a0453b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50e761d2-15c1-4731-8687-91495a112411"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b965e3dd-b854-476c-9473-64641b3de592",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a2da24f-daf6-478c-9f75-aa129864f412"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a01f1210-6128-48c5-8291-949c82ca06b6",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06362a61-26c8-46e6-a4a2-e4771491373b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad3041c8-9f5e-48c3-b796-b37e6010fd5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3016e58-3437-436a-a576-f748186729dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "624a7897-70d0-48a3-a0ee-ad40f4cac9b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3966ae4b-68ba-47f3-adb2-832c613a1277",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee55635e-7223-4920-a3c8-6c0eec90fb87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea003983-6eea-4dcb-b7fa-cbb3a7ca04b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e454bc3d-a4e1-4e5d-89a0-196c0a52f66f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d8282e1-0142-4443-b23d-5dce9eb16355"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23143071-df56-4cf5-b3d9-2a25644aab3d",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba92032e-2ab7-4940-8b97-8c9925b0821f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c6a540a-7430-4b7d-91a7-cc665f261403"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c5a36ec-5b73-41b5-8bb3-dcf14a5dfea8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "6374bdd4-7eb8-4403-b3a3-4d339f55f131"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25b34f3d-9f9e-42aa-ae39-172a9c877fa4",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90ba77b6-c337-4343-93f4-4b1127575c7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c82ecc4-df89-43d9-a4f6-770bac25c596"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e829ad01-cb4a-4cba-b24c-e3c9148b0646",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7d96fc5-3356-4eae-ac1e-b6a0a68ea14e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d86c378c-a7e7-4c1b-94eb-8684942d853b",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd353a69-e271-47bc-9926-e94aed2e5f47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ada79478-20e0-415f-bb14-cc12950aeba5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c0339aa-3e62-4fe8-ba23-b2c0d21b027b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4258db3-deb2-40da-9ae6-46ce59a26e64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d6253be-ee68-4163-aaa2-ce39dc3b3b48",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c07567e-4890-4bfc-acd1-07fc56c85bbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad68e9c2-f328-4c00-9888-aaf8a31734c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aa72fdb-ee32-459a-aeeb-e7d2b246c645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2960ce96-a2e0-4bde-9e74-3d94a42247ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bc975e9-bcd6-47f7-a937-b81da86f6246",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58f9ec23-0336-4d6a-9dd5-7a0b569bfec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14cc37e3-0035-498d-a819-be9cba10661f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1d5ffb6-4c3a-447c-bc9c-bcf167f989d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "38ddf3ad-dc89-4f30-8dff-44df63311035"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dfeb45d-d862-458e-9b73-7022c25c10f4",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cea56426-1a7e-4733-b6b0-95153c995d2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a46b3ea-3302-468e-9ea0-1bbf5764c37c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d240a05-adf2-44a0-9b0f-9ccb0ea3ce71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef14ab03-606d-4a6e-9f9f-185a16ce4d3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62b6805a-308f-408c-bd21-6af7c9cab358",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "347550a3-c9b0-420e-9c9e-38714a9efda5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aac32e01-edcc-4c37-a209-dc04e3feb159"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0981008f-e2df-4903-85e4-b0adbf269727",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c809a56f-330b-4f92-bfc7-1a5d0d086134"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cd9b1d7-d8e4-40ad-967b-2fae5d71190d",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bbe862e-a1a5-4893-8de6-25f77285f72b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2ef933f-efa2-4303-9655-d859265035f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a876028f-0c22-4a90-97b5-0ad390e89110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c436741-de06-48f4-8db7-34394cf57ad3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b901874-795c-4c3d-86d1-d69061de9411",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "244706a3-ae7f-4422-95df-233c842f4899",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9f43cf4-176a-4d91-ac4e-4cc0f5483470"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9609f89-070e-4c30-bd2b-6b47410b9ea6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "00a38d0b-0077-4961-842b-5972e15eb5d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0e3fa6c-b075-46fa-8ac0-3e7be4c02071",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1c5808b-2691-4618-8ebb-c3c89fbc7a06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fdf3c0d-4685-4d33-bc68-a850e395d691"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18868000-0411-4919-b5ef-588e9a4b021d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8d052cb-3c00-4f68-a68b-1bfce44add44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "840429cd-34b0-4791-8489-e7da0ab70f1c",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51157d7d-a153-43f0-bc5a-407adc22658c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f254e2f1-f58f-4522-a0e2-16d040766fb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1532dd6f-9d1c-4733-b495-ca69e9fc0a1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb15c083-75be-482a-b2f8-456f0abcc4d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f91b3b9-2cbd-455b-803b-b8d51fe27896",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e4d0d73-cdda-42ee-9152-e2ccafee0cbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb571bbc-b790-474b-88ad-36841df3f42e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "490d7656-39ad-452b-bf1d-f1f824e09fec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "48f88aee-bb4b-496c-a0ea-8e78035c7d0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e69598d3-705d-44cf-a3d9-7000be0305f3",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e3570da-0b81-4efd-b044-53d48b877411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfb1754b-dba5-4a61-9bc2-55c69fb98e6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ed71bf8-b3db-47f6-9029-d006f36e417f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a23cb57-478c-4672-bfbb-75a814706c2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5824bbe4-88ca-4499-a461-4943f1301530",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baf1675d-c15d-44da-b2d5-c2763cf67a77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80c4b031-a2b5-4164-890a-36feb6d2d252"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8b15b12-fd78-4f7a-9e2e-c86a8ea1fba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "25dd7780-191e-432b-9075-a21b22a7f6c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db5bbbf5-b254-4e81-91ae-b1172ad90bb1",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "512c14b0-20d2-4483-b7da-7d8577cd848e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0eb5bed1-43cd-4229-9210-7e81644529d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3af24a0e-7521-445f-a192-94bd90b3c047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "de855876-fa64-4c0c-9201-f2e072f9d04d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff23e5fd-6557-497c-b227-b512349924c2",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "421fcaee-1dcf-41f3-9a84-2ae7fa0f4df0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "640de855-5073-4c63-a0e3-e7c23e8038a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb5a2951-d96b-469b-8038-8181a07f2eab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "19c4b3f6-97cc-4744-a2fe-9c1c6010f050"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20faf20b-ec38-444b-ada5-bb601073f1b0",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8beb60ef-03df-4794-986b-a74a8405b1d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64ed34b8-de1a-44bf-b192-236874053ae1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cee5b0b2-0a29-4f2c-aba6-e583136ecb4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bcb778f0-af49-44b6-8d1e-2696b46ac269"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "781f1fb6-c95a-477d-89ea-67fefea51ab2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b8fc68c6-23b9-49f8-b3ba-8c5e1a850d33",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1857167-d52c-4a00-9994-a9ae323c7374",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1422d00c-b07d-49f1-9ce9-e46c20ed2df3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "197df1cf-e48a-4488-baff-e84a720f23ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "40a67826-b149-4972-8bac-b749cf2ac697"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1e7f608-6dff-437a-b374-2d38d019c186",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00208130-baaf-4516-ba89-1f518d395f18",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "d98291b1-bedc-406a-bc55-b671a6c1582e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bbd57f9-574e-483d-beec-96dded9f0331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6e522557-9468-4a5e-822a-6162f73f7ac4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b079ab8a-eaa3-40a3-bb6f-ba6520ecadda",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "182609c7-065d-4771-be3b-3f43551eb3ec"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "806347d0-6c8f-4c49-aa04-89195a8c071d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5897fdfa-9c4c-4070-b870-ea3bccccc8f1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b5dd7145-acd1-4d15-a8b4-5ba23bb142d8",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9d798eb9-9583-493c-840a-3a12623338f8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8c028612-ba0c-422e-bf5a-2322fe84849a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5418e0fd-64d0-4f6a-bc05-c7c1712c9cfd"
            }
          }
        ]
      },
      {
        "id": "61249e55-717b-43b9-913e-c8d96fc69b0a",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "70f09b25-1545-43fc-b939-88e90eed0839",
            "name": "Negative Testing",
            "item": [
              {
                "id": "25829188-c263-4c40-b554-c9f89ea3d4ed",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "612adad6-2606-4c57-925b-359a6524fe22",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68b99480-4f9d-404f-8165-8d5f24745f4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2ce697f-c2e9-45ca-8779-cdf709681a33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50211af7-d32d-402b-b957-6cfe23644864",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4856a9d8-2cfa-4b8b-ad60-a7cafa33db8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "102ae1d0-435c-437a-bcd8-6667e40bd238"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c3e0d69-2a51-4aae-bf42-a2cdbca8e0e5",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71a48f21-8fc1-4ba1-bc54-ae09e881c598",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fd0d765-7464-4203-9322-d5d0ae5ab824"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6736bda-fb4d-4971-9a42-7301eba48465",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d504afb0-3a25-4bb3-ba0a-0619a7b8b879",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da766799-eb85-4d3f-95ae-4e7648a43e5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1da8e666-b712-4639-bf1b-2c3770029f8e",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "621d57d1-36a2-4874-8ca7-5b2a401a3e08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77cb6aae-4c25-4c03-980d-85a84a0cf0ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18e5f23e-4743-4a78-bae7-218a4ff17dd9",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d368384-1e64-4ccb-a45e-e4711c67292d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f93b45e-a980-497c-81f2-75da33ea63eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ae3ff2c-b8e2-46b6-ac3c-c818ac711fde",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1cb771d-ee77-40e8-8793-1f00f816a514",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd816e94-f0f5-4445-8703-0b0656b7d166"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7f2271c-c981-4f45-b552-1ddf6ad7f96f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd3fcb19-a498-436d-9dd5-ec55096c357a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52457a11-2715-4bea-bf19-b9269983fcd0",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07cbcd97-ebc2-4761-aff1-e988ffd62e9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7b1ed67-4cfb-4a04-bd62-cded5989ff3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1ff2375-c360-4976-97b0-33cd179555e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ead1d80-7419-4861-af88-3afb58d85ddd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb7206db-b12c-4528-b994-a9b8a34e4497",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1948208-bf48-478c-9cb0-1a7f86cc7c9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93884a66-2b21-4b3a-9438-fb761bd1006a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d56e3305-54ef-4ce1-a1b9-4c8bc2f660e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a7b0145-9be0-4239-936f-ca3fd6d571c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cb67935-602e-4672-bfcb-17b4fc765d7f",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddbc33e4-c156-413b-8ef6-80abb10137b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aeeb841b-6777-4dda-920b-377bf4c67b18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03b3d294-9737-45be-9d51-05fa64eae732",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d02c4f68-ed7c-4b56-84bb-7e52ebc3e0da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab7cada0-6d2d-42ef-bc49-d2807bdd2d93",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeed8f00-df7f-4340-b6f0-82bb2dc90933",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccd0bb1c-2513-4123-85c8-30b24a1e552a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da48f751-7824-4575-8ee0-950b1ba82f74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41de983b-6739-4369-b8c0-63ab606b6b0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98d64c18-bed5-469b-81b3-c88dc4acd1d9",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69ab486d-fae3-4c34-8c24-e3f82bcebf61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c19b2363-a781-469e-8733-5f3c8490bd31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17587ae2-2a96-4d22-84c1-1dba561bd27a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46257fd0-698d-4c19-9b67-40c43393b9b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f08929f7-adfe-4b54-8560-1a3e890e4470",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "279115b7-1958-4b0f-97d9-e810560669b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ac94423-9286-452a-9c2c-85294cf1fb54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fb4582e-c7c2-447e-8f47-4d4a7be5752f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7daa5c24-2c59-40ac-822b-791fba2e6649"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a6b5e33-f246-4b32-969f-3e97bd655938",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eaca66a-9bbd-41ff-9eb8-eb14dea41405",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "856fad7f-21ac-4e3b-a1f5-9e5bee0ad3d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6614fde9-2a0b-41f3-9f63-049bd7762809",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4805c9e1-ac36-457f-8a57-3776e27bc934"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10b6565f-9925-49be-9719-167f37fc9b23",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5ed3bb7-f1ef-49ad-a1d7-e70a615462ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27aca089-46db-4b87-aa4d-f7843172c9dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "832ab22c-e610-469f-b4de-137a859c0af4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a365e56-8413-40b9-8108-327677fad370"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2576c8bf-3cb0-4638-a23e-22bdaf1862c8",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9130ab8-2c3b-4a4d-8290-4526142d1eaf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32b59947-d0c4-473b-9769-f3030ff73634"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11b7384d-7e0c-4b02-be38-85e47be2704a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc972a5e-e810-4c06-aa71-74cae6a9ffb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83507d23-9ec7-4a75-aa4a-740696436ec2",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d491014e-bd0b-491e-8073-4ea459972de0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4b774a5-92b9-4f4e-95bf-7c9694688ff1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e2f8eda-159b-4818-89aa-9e32a25fb55b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97896398-fa07-4de2-bfc3-bfb5bb85927d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59746377-c67f-4927-8d27-ed0a81c474ec",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c10f040a-549f-4b68-bdad-dbff9708b2b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e205e85-825d-458f-9d38-53dbe2e3f7d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "403833f7-1da3-4f4e-a6b2-8d1f286b225a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2117e599-bd7a-4dcd-9909-1783ab535ea3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "971966e2-55c1-4a3a-a06e-351294f8e479",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a01e379-ebba-475d-9426-dbe83ad2164f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b61f5bb-e8f8-450c-8d43-662bae2169de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c530c43-175a-4c1c-a102-6effec210d38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0f50612-af4b-4433-a0c6-bb5f84e91b66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eef8c48-0460-412a-a6e0-b5d23cc79bc0",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4849690c-2350-473e-b80d-4497e5b16bf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d32d0a6-c2ba-47bc-8c25-209032d7af2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eeb78a7-8198-4384-98fe-cc98a57ff08f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e626075-b0c2-4e9b-95c4-f5727daa225d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73f1c687-f96a-4a86-b45f-b57ee0c92e6a",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80721f80-c353-48ef-9ce3-3a7fd66d4762",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a2a9fca-f346-4ce2-90f7-554b308ea702"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "692192f6-eb95-4c3e-bb84-fab82a8bf930",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84ce712e-9ce2-4fd6-9aa3-ab6b6f335272"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3c1383d-9aa6-4499-a564-4703751595d4",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00b5b34b-5f88-4493-9aa7-9016f801d7ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4c827df-f0a7-481b-8a63-3b767837a705"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80d454aa-1751-4081-8046-bfd6c4b1aea6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3262be23-c985-4428-90b3-cd2456cc778f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b3b0044-0043-409a-8fff-e2e077fb03ae",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29fa908b-32ec-45c4-a649-8525a4318979",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2e859d1-55b1-453f-a6f9-875a901b1359"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "562b1fce-508e-49c8-a4e5-35dee48494d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3d44e6a-aaea-484d-80f0-caaf702ff1f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4815bb64-4672-4c10-8462-d7a426a9a3c5",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5210b3e-c9d5-47f0-98d0-1d30410c1776",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47e01193-fe12-469a-8ea0-526f53b4dafe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db8e85f3-ce66-4801-b23a-7f1c8c190a6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "869e9947-731e-442f-b57f-6d7841a0f2d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fe70186-a0f7-4b9e-9915-7cbe103e2637",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64094447-3fa6-45e8-94b3-fb2e7e484456",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9fa94851-ac6b-470a-9a17-ffc02c2520fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7fc8309-7038-4cee-9d1c-664d92a58246",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bc4450a-2746-41e2-9706-4f3654af38c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e3b2f90-4b83-4661-96b6-894405783f59",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fac64939-5e13-4dcc-8f0c-8dcc9262c0f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27f4536a-15db-4690-8e64-fba24760bfc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcba7fea-88e2-4f44-a290-ab3ca136f974",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7108f9e5-faab-4933-9e0c-76226c5369eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2babb5e-e770-4cac-a172-b727a176ec11",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce3e9cf3-71d4-4dde-a6fa-c4600c13b2de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7497c8bd-f895-4a10-8ed9-7c6332ec80a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c2c5013-33a4-43d6-a771-dc5cff4ac021",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb874b2b-3058-467d-a493-30adc3becf3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df2eb6ca-0e67-4c68-b271-a1157e8a19b9",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4274dd8-e012-4e9d-b3e4-299368d505c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21cfaf1b-1d2d-42f5-be49-334493f191c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acbe06d5-a65e-4f20-9832-716f69a272c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56517e43-bdf2-40bf-9fdb-e1da825403c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc5e7fb1-70e9-4706-a579-ec079bb8f2f0",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4a5005d-b9e0-48f6-b12b-ba87f883c5ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52ff6853-4478-4aa4-803e-91c38da453c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8cf0a21-2548-44e1-923d-f9eb1526cde6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19a63350-b21c-4729-b659-4bde8d6a56be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9562d9c1-583d-4e1f-a1c2-7f8aa83f9fbd",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f19b4da7-162f-4665-9864-d7712a7050a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afc1900c-e261-4e2e-9de5-35e7fc4ba04e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4820d7b8-8223-4a47-94eb-6455d962e53b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08db413d-4d49-4a4d-b499-5aa7830089bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76cd1991-cb35-456b-b0ef-c7e28616c0fe",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8217a4db-3de7-470a-b118-95c0716f267e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b395c2e-8f97-475b-a190-57f2893783a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1625aaa3-e127-4d66-acbe-c133eb184ad7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4d50c85-8eb2-4eff-a92d-b8558e40d064"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d088d2b3-e9de-4186-aa76-d6927d94ef8f",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b631326-5e49-4a29-a7d9-5a25b290a339",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd759619-4b99-4fb6-9cdb-be018933fbde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0cac96e-0712-45b8-9717-c5fd07026f68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "684b692a-ac9c-4d18-bf16-b08a397c3037"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66c6a400-84e6-44ea-a1d7-52569d4d7412",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0f04733-0ee4-4a18-8d4e-86927c594cdd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72972e3b-1ff5-403c-8b1c-c514f2c7dcc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc6fc17b-ce64-4e82-a1fb-6e4373d1fda8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a54f34a6-e24f-4d82-8f46-bec946d76633"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1d06cd2-69cb-404f-9531-e4132def063d",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcd9856b-3641-4e28-8512-d97ad8427a2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "118d2a72-634c-418a-809b-6c6c2ae58814"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85159282-7d36-46f9-b9c8-766a9e785c54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c34af312-91dd-4a19-90d8-b3946f880f21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a022fa2-339c-432a-a0c1-a468b8d40f60",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6ef5e98-a4b7-457f-84ce-0c9a457c4e6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07ac965d-fb1f-4664-ae87-83895ed9deae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7d7b2d8-2d4c-454a-8178-37f53655b310",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3038d34-3794-4213-bcb4-e81166a8da5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f967ae8-c80b-4f3c-b023-851c3ee94f88",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fc42604-76b3-4767-94d5-e2bf760e4453",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7e70698-bfe2-4cb3-b8ec-a14eadf03654"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc17c0bf-68e1-4ea5-8f9d-bd95c43ec053",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e24d10c9-15e5-4066-83a2-0a10135523cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3160bfed-1bc1-4425-ba88-01cc9f94e3f2",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "133f5197-7c20-49b6-bc67-cd879ac7ee3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff959e6a-bb06-41c8-ba7f-9806b56e62c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93a5dd0d-b684-4ae3-a274-d0ed77cdbe17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a702a10-dd14-45f8-b06c-0f109f5cf3d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "481e24a6-9de7-41cd-ba4d-06622e5cbd49",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fe64206-74a0-4705-9849-d2e21c93315d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f821cc43-9536-483b-9d2d-2ba89492e0e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49e5c434-220d-482d-9dfd-80c9f4e00e41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb38109f-aa90-46a4-9c51-631f97a8d3f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64ea8205-1ecd-4c4b-84b7-df777ebc82c3",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "224dc28d-cfe1-4cb4-987a-e6aea5d67e71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5611525-58d2-46c9-80f4-5f17b5a4309e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "add15a8e-060b-41a7-9ca0-55f428549a6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea136127-473b-4815-969a-abadb8b45f45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e11dea43-3d77-46fc-9323-c97d834ae420",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93119bbe-55d1-4396-a283-6710e27c8a4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "846575c9-93a8-4e8b-831a-eb663ff40869"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "836e8046-2200-47e0-86ba-899e19c8d19f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21502265-d3a9-4f7a-86f7-d4a59b0e99c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "335fee99-6143-462b-8eb8-2c91eefd45a4",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d877fd3b-76d6-467d-821c-b091348b23e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad5ec933-800d-40a2-a202-3c05eda91afe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a07d2ecf-6a14-4ef3-a12a-77038a1c3167",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03aed282-a4eb-4985-9cdc-b06aeb687ee2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27558f4b-fed9-4db8-a14a-eac9b22f71f3",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "001a6573-6185-4ae9-b329-acb250cf5a64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22409917-f7ce-46d0-8341-4e22cee2276a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f6c73c7-2f53-449f-a28a-74907e32a57c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bc78838-19de-4a90-8fcd-33ee35f4c9e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc38a370-2cbe-412b-bca9-8ab332b94b14",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "103e80fd-c313-4d3a-ac84-14b14642aaea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff87ae68-3123-4871-be59-5f6120b89b04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10619c6d-c5ab-4513-8f36-ba8ecee330d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9925ffa1-5ee5-4436-b1b7-aca7667a18b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87d776bf-63bb-4ad2-bcb2-48d2ba30020d",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7526bc6-3060-488f-b1fa-23a341ca097d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77fc9465-0313-49c3-b37e-e94ccac0173c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b90c7489-64fa-4410-8948-b60c876e0b95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cca3bf3-d6f0-470d-a854-509782f41277"
                        }
                      }
                    ]
                  },
                  {
                    "id": "072a1fdf-9222-4461-8e98-4b37b02b57ee",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ca9a5ff-cd37-402f-a289-495017d8df32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d22885c2-9057-47b0-9252-1a69939c9bf4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef673198-ef99-4707-9822-2fcb2067fbeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abbd3522-d262-47b2-9e9f-8b1ae5f09242"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc3719ff-3a5e-40a5-bce4-751fbd2974f6",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64fc6420-a315-4abc-a060-5eefc5db77e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40a8d63b-f714-4837-ba3a-d036025be3ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9418ba67-8946-4194-8870-b27e43a93149",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "485744e2-6e99-4638-a4c5-7d3b1a6851ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5346cf40-8f51-4a4f-9ed4-8f9bfbe5d21e",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bfcaf0b-3547-47a9-be3c-fc056590050e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ca4e6f3-dbbc-4b45-b389-7428f6ab82fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a4c2585-7e41-405a-8e6d-b91359be52d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fa93d8e-6ed1-491a-a815-2a8814e0e4a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95c6e8dc-5830-40ca-918a-ca3a9a306469",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a974f7d-327f-41c9-9555-ed442e88620d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc8cc2e8-fd66-47b5-8a9f-fe38fd406581"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c10d49ff-16d6-40ad-b94c-7bd45d27f0bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef7e4576-2bc1-445a-a5be-b81e3a346deb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8429ef3a-a493-4799-917f-b926354b6239",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a121800-6c62-4534-b923-8b4670f9910e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0bd0413-35e6-4ae8-a686-65ba2f0a99a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8dc8797-18a4-4141-87e7-58fe773bb6a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2916b57-0b37-433b-9d09-f67cb487eb48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f0a4729-80c5-429d-beba-596caa553580",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "720bc68c-99e3-47d6-8e74-3b777cbe64c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93ae08d6-b962-46af-9d95-90f748ed48fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d0d0483-f27a-4444-9afc-cb97667475e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d141f91-26b0-4275-82ac-e0f9ce277101"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c445b045-b997-44fa-b3b5-2ff389b739a0",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "043f5c0d-5c03-4093-b4c3-c722be421e10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a9ccc8c-1457-4eca-9bf3-a0eb77155077"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afd07469-a9cc-461e-bab3-60ea404339c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a402c186-4750-41b5-bbe9-4812770dbaa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "367e42fe-a842-46bb-9fcb-39bb59534cc0",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e0dc490-1bd7-48b3-86cc-0f1045dca059",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "baad1627-8242-47b4-9bc2-c376e6e2451b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb1be1fd-096e-4273-b465-569bec4422c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bae76253-46c4-433f-8d92-d6b67723ba99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "543b3701-2da2-4d5e-849e-d015f91b060b",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcd3a2ec-10ed-4405-8fdb-d76f33f3d433",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc4f4ff7-a577-4e9e-b4e0-60d85ebad047"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ea5e401-3944-4aca-aac2-db36433e3a95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63e00c4e-014d-445f-9ed6-2bbc2d138fe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b872a2a9-afb6-4801-a9a4-d246de8075b4",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3b4d9c5-5a15-403c-a931-eb4a9c6c8752",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57076f9e-8b08-4f04-a29e-e75340c4ae13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17afa797-2678-47e8-a901-a33a5bac2591",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85e1fea8-5757-497c-8535-63f720af7877"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e472ba41-4022-4a74-aa49-524f3a0f351b",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e06c51c7-3d6e-46be-901a-98907de2c529",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3c9fb54-5ecf-4000-b1c2-2620716a86aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a862f2e-050b-43fe-a2dd-be25b36829ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "557110c2-a484-41f2-920b-c5dd01235cc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b38875eb-0f63-475d-8f62-ba6739c4d5fb",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "712f8a97-576f-4c1f-8497-82616650ae82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "803489fb-dc1e-4ec9-bb36-18f5e47dda84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edd4bc65-7ff2-4f94-af28-78f6545ef1b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0510f37-3101-4e07-9d61-63d0b9359661"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34bec9a6-d989-43dc-a563-4a500c1fb860",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "600662ac-1ddb-43d1-b53d-e27aac8acfbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3458f7f-cb5b-40cc-b6f0-dc68b3e952b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "093158ed-4781-4ec0-ba19-78362f766764",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0143ce25-c4af-4642-8795-8d941400ad32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adc49dac-bf07-4a8a-a16a-43375defc5d4",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dc13b10-b866-43c9-b300-1aa664b1b701",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1c39853-dc20-4e39-aa36-9bb27373b80a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6376294e-38de-4021-aa71-960d5f015d62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a3c5f78-cb40-4ee6-9cd4-b629f0d7a0f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69c8ac5b-3ae0-441b-acc3-dd3f2d5b96d9",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d29899c-83d8-4da9-8241-8ea5513a1637",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88e8fca4-d958-447f-8451-c2d3f56544fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c1d8888-2686-4e20-8b3e-83b71a0a09c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10f93f88-397b-4788-b111-38e714daa35d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a66d26c9-ce3f-44b5-b3dc-4b8556c16026",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b80f05f-cb02-4725-9459-8df7bfac0cef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0221e853-00fd-4c47-b66b-9671c750330c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bc35786-dfe1-4b58-a7a7-57766464eb9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f9879fc-ef1f-4045-853b-2a8769168e6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae427d06-5518-4f5a-a67f-7d7a078b8d46",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eac98c4-9e5b-48fc-8362-c756dd5a1504",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7087830-be16-4ded-a682-c8e530c5cced"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f15fd92-ee0c-471e-b331-92e9a830e666",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97e7fbb1-5058-46c8-9560-6f07a5e81b6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db07b1ad-90b8-4c9c-824d-50e7b0ea7a62",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "525a00ed-f39e-43c1-a9b3-0a180d14e050",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e482f7d-23c4-4d09-9834-57c23fa887d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f525445-bfe8-4f0d-aa5c-ce008d72fb57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8407b4e-37d9-4f9c-9362-8081dceba657"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e64212c-0ca0-4ffe-86ec-aa4d49d3efd0",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3640be1-4803-47b1-a335-7c50b35e704e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33a705a1-ac3a-4e5a-a669-83c8620ba7a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01fefaea-f3c7-4539-9ca8-c961d035214b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "802c1c12-40b5-4628-8b57-b010c20a8c4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbe43051-712a-4f15-9692-3875a1d25b74",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d0b62dd-c753-4e1a-9808-1256d99380e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6197510f-4506-459f-bf59-30df9a088873"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0c1e085-5bad-4456-bf0b-5822e3d43bc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0ccb9d0-8a2a-4802-9d35-a45d7f297b66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69f63249-44bc-4979-8eed-db3909d9a778",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e262dcc-820f-449b-900f-1ff89eabdf47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e9fd82d-3a31-46e0-8257-741cdee76e46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1012d717-d99a-4017-b399-93541c847e7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c322463c-eb8e-4d27-935a-4f9a583710d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "656ece2d-ed16-4020-907d-318ad01b9bc2",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af915152-861c-45b4-8b11-b84ee122dd5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0d82447-9c39-41ce-b46a-8748d9221140"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef8351e7-07db-44c5-acb6-63da0253f24e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59f5772a-bf91-4403-ad40-b44b19357a3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f858113f-2fc2-4e46-9657-94df11931cb2",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eecb630f-8d6e-4408-96f0-248682adf03d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65e296d4-9172-4d5a-8a6e-98edd7ca0210"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc37ee1b-a83a-4074-b769-8960513e8493",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20ef6128-dfaa-48c5-b24e-d65ac80e7976"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14fe7f8b-774f-40a7-98d8-2d9063dc8f7c",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "118ffb26-ca5e-41b4-bca0-286237efaa9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "facd26e2-e7f7-4d47-8382-207439f18323"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9de754a-0148-483a-ab7c-b87fc9d5ffb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afc5d12c-551a-4e28-85a6-0ea7dc0e2f0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81deff13-a5f2-4ad4-bf3f-ad22fbeb35ba",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef74354d-c593-41ac-b394-4f4a1733d655",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3bb10c4b-5da1-471f-bedc-cd037041939f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19850e33-2c64-4022-81db-7d8dfd6a354d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53a4a0f9-6ab7-4fe0-96f5-816106da6ad6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4df345fe-0d7b-40a7-9daf-10961be8f802",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de7708b1-df29-4e46-93ab-d332b9ac83f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e135b00-e7a1-4559-9798-898b5b3f870b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dacd988-cf54-4294-a8e7-b4586e6a4a20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb2d8f2f-3a23-4015-8069-ac0a92dc4768"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56e4e56c-8744-4a1f-bd44-f129783dfe75",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7d0065b-0375-4068-967c-835c5ea0464e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab473002-bcdf-4ab9-aa61-694c5205a49c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f6e5789-1898-4093-b92a-f970b7b3892c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "988bfc26-f67b-4687-a3ad-5141718818db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "218a4145-3e98-4faf-8ae3-3b679ceb3f6d",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a01a599-5b20-490b-8638-62c7457445b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "411780a2-7cb5-4189-890d-47fdc7a82310"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "808c7c44-b862-4a67-a534-45dab2779925",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90dece83-a1aa-4864-a6aa-9a62b0f33189"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f70bd0e-006b-4042-9f99-60ae6192296d",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "089f039d-8a46-4783-bf9e-a862d84baf33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9504ae31-ff42-4bfc-97fa-4f7d14fd1c92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8070e32-b44f-4d75-b3ff-653db478283d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "947ee85e-1b31-4484-9050-93e4f952b728"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22c2c2e8-14e1-48cc-bfa1-f19b7a4b2298",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10ec1565-c5e7-481a-9535-e1128e27e48d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7fd1b30a-29c0-4620-92e3-e8ae11c7dbf6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dd859d6-61ea-40e8-b57b-d43736292792",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7eb15bc-b567-4a53-b532-7955e21b01f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e343a903-b4bb-4c8b-9139-d2872e6ea0e0",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afecba1c-aeef-4af6-b479-09660ebc4ce5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8bbe72fc-e111-4977-9b45-4f0a38d7add4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2270800f-2e60-4ff3-97ee-da06740e27e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a9d3b60-1c51-4b65-a131-d642b74c2831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0192332f-e559-4999-b10f-72daecf4c787",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a4bfc5b-edcc-41c3-bfb5-82af05344fb6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d37b45a7-77f4-4c2f-a4a3-29e9e52eaf49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6567f88-5ae2-4950-836a-8fc011ff5ff0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2d56936-22bf-4f15-9bc5-baefea2c677c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c0b01c1-5bde-442e-b2ee-20679d549641",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d123ec7-cb62-4f23-a996-f691bd2af241",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2452671e-b034-4002-a4d0-c803d505e106"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "709f6be2-e8b1-41ce-b5c9-f99ea367684f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9fd6bbe-e0d7-43a5-99df-e56a6068ed75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecc25f26-fafd-47c4-86a5-91a2b93a1db5",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45a73490-7982-4123-a7f4-32c63bb8128f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc47ffc8-87c1-400a-a370-179fe23fec50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a12ffc4f-8bbc-48b4-ab95-cdd2b1eee9ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "385ce20f-1d4a-42f6-8b75-a308cff9f9ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d131c5a-c42d-4922-be57-5e2d94ee1f0b",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "739f2ce6-e6c8-4511-9928-92e1c6a04a41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "636196a5-0dce-41d5-8cf7-29c2f14cc102"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17b2aa2e-1b38-4e01-bd9a-72a586260652",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "404ddd16-442c-4811-93ce-179e545df54a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29461c90-bb31-44ca-b5fe-eb7e44f7030c",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b42544c-e32c-4677-80f8-d20ae4edf45c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8a2e9fc-8f69-4a59-ab3a-7d7ff972b017"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f44101f-9660-437b-ab86-661cd314c804",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b9a138f-6cc8-4904-b63a-e9605b349d29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "456a70e8-917d-4fd4-ba04-b54162b45063",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "794915f5-ca79-424a-bd25-6cc20e39de45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f50e88e-7e9c-4a8c-823c-fc49d0989968"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0907e0aa-7b7b-40fd-ba26-0fad0a5a2db8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "993b34c0-4eb9-4514-8aee-dab2ebbdc24f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffb6b298-bc3e-4b9c-861b-8c3150e021d5",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4284ef0c-7568-4cd8-a219-522fca43e74b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13b31b55-841d-4ec2-8550-b44bd1a69390"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4d18c70-1279-47a3-abd0-4f324080348b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25c3695f-b15d-4d3b-bca9-8ff316cae7c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0526bf45-3ec7-40e2-84c0-cdc98921ef25",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c4012cf-50c1-4bd1-a4fd-861d428c6712",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f401ffc3-488d-46e0-a940-695b84f9b793"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23d23e2a-10d9-4487-8dcd-c84be44a9d88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cac61d25-4e7e-4c16-990d-8da5c6b2a6fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb936c5e-83a1-4f3d-a349-a210c48a4103",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bd62cf1-0a0d-4ee0-a9e4-e0162db74428",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ea20bc7-b035-4b24-a10c-44213023e97c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46df8e67-5e64-46fa-be12-2770fd240ede",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "375dc38f-bc43-4a19-85f7-7f01ba7e6c9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c3981be-2f16-40ae-8acc-5aa3d0ddf7a9",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48058643-f2c5-4c02-9602-4accca8a11a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8a47f69-1a61-40ef-b506-6866f9ed46f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12f84fcc-60b1-4095-95cc-1c2a03d3bc6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6271b3c0-14da-4111-834d-2ec5ceb1ec7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f66c03ae-b590-4e15-b019-75c76e4d83a9",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72daa510-55d4-4b92-bbc7-62488669ec0c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b75c47bc-e933-4944-b4e3-1840cc3edc55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c83d51b8-02bf-45d7-b7fd-4b433ea4ab2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cab2ba7-176c-47f1-a554-4e5c4cd6c32e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89fa9cab-03cb-46f1-995d-af5891a0c866",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fa1e0fe-e01c-40fb-88af-7b0d0b5c041d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1fdb31b-d447-49e2-bb4b-403eaecc39df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be11ac73-990d-4b19-a475-2b1a00a5eed6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2921e0d7-6f70-469c-95fe-ee7d2acb3bf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "460225eb-215d-45a5-bcda-41dffcda2010",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cb0f401-d3a8-4cc4-bd01-3ec34a651e42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc712d4d-427e-4ca9-a714-7fdfba391f06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fecfcc4-ccfd-4c8d-bb98-f2aed323619f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b82dc12-7882-45ce-993f-df34042e613f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0dbb53d-5a04-4b9b-9ca0-33d9418dc960",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed89d7eb-57f9-4b08-abfe-aa9386c04024",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7fe5cda4-3cc1-4fe8-81e3-ae78e07b238a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de6c9a4c-d09d-469e-8e48-f390b61cefa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94bfca2f-b655-4b14-9756-5579ef90e8e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8498ae42-4277-481b-aeaa-a0ccf0aa15ed",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "003d0b86-e99a-4ced-99dc-449a2e7159bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a241db8-cf67-4a36-b84a-da1b3320188d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dbd12cc-8323-49d0-977d-d267ac579ba6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6988903-2f7c-4a20-8bf2-f9a501aa0417"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d5b77c5-8bf3-4b2f-b0ca-621b21573884",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00d3d249-3fda-4c4a-902e-5a403d2726c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7af6dd28-43d3-4a86-8d9d-bfa6f0f47e15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37a383e0-0278-4564-b579-d21acdb1287c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36128db2-d0ef-42c4-ba86-ac1874f1ea7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa912658-6455-4920-a103-d55910f8b357",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e48413e-4599-4149-bfd9-7863516d0fbc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b82ead98-1a08-41e1-8166-f1539155cb01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d95f0178-bc44-4515-98e7-498546a66303",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36fac76e-823d-4da2-869b-a0c8c2ec7a3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1515dc9-0260-481e-b3de-676edadf5755",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b36a265-4859-4512-82c3-724c5e314360",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c04d112-9e7a-4e9b-9206-cae53a9553e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b14d243-9b51-4b06-8bd0-83ea464503b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36e6fa70-f83a-42ad-86ea-af98c283e09f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef375c57-1324-4f02-928d-8d4030f64406",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed9c1d35-d8f9-419e-8465-f4778e01e12d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9ddc139-8165-482a-9cb0-f6179381d6bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04aedcf8-cb83-41e9-95b7-e3e0a2ef215d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b834a7e2-2443-4371-a405-64f7ef46ce6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e73a81f-4286-4f2a-82bf-42589497d676",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bbc0e2b-8791-44ef-a3a0-947266f4d8a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb3d559d-0e01-47c5-a06b-942c5570006f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5440277-888f-4e6a-9530-e642163f006e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d01e3318-8836-4b00-bab2-fc5e7ea978d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5b6e8f8-7bc5-4deb-8bd7-3ec947903fe3",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89d7c250-62e2-4e80-be7d-1f14d60532bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "221df92d-aad9-45c4-868c-521e92145dc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e2b6064-3532-4f71-9359-11dcde820e8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e2c89bd-0ea1-46dc-ae52-03239e3cabf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7af6a90-2f29-4d16-867f-cb4142b1a259",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fef74bd-6010-41d9-bcfa-1265c52c4294",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9c9f15d-d21e-4cac-b385-0f0d3dd9a9ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "778b518f-cebd-42ae-94d6-a27ecbf58a16",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13e3382f-2e09-4877-b0e3-5ec48a865073"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf2b6e0d-4966-47d8-b962-e57b70fedc4f",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e28d73e5-f1dd-43b2-8a59-4d69bf993be3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb710807-71ed-4f4d-a98e-45c5a52c6075"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88e737b6-e009-4d94-85c3-a2c17afeba70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "775fa500-2988-446c-9b12-311b5eee6b97"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e2422de6-28f1-43e6-aa74-2e1362086ee2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9cf15cb4-e4a4-4b2b-9133-9334569fb66a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9694f4b1-8dce-4d34-b401-3e943c1a311b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "97b7400b-3d3b-47f7-97d2-3ec70d2811dc"
                    }
                  }
                ]
              },
              {
                "id": "5ee6f76c-6de5-4587-930f-bf17f07f9f4d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "52c85afc-f47c-4f31-87ae-fbeee7e84af3",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9cd62fe-60ea-4c98-96c0-7c5255f64ae1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "43ac0e3e-f4f8-4cdd-b50e-0ba80322d715"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e092e4b2-619c-405e-9cd1-ea51d812744d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "93a32c9d-9414-4f2e-ade8-9e9e780bb3a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aef3bf25-b618-4a2b-b566-5bbeca301c78",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8958caf4-276c-4ea6-ac52-a833b85de965",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "bf12ce02-e725-4923-9c90-95f264603cf6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d12eccc8-2776-40ab-aebb-1481ba649f59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e1d78889-1523-4ac0-8af9-1844db0759f9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ef269d11-7101-4596-a436-0c894ce500e5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4ec7921d-ac56-4473-b954-98a30ba3fb24"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f09db166-c469-4f5c-a19e-80bc356c1be1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fd6e5832-b72b-4d69-91ab-22f8a0ea6170"
                    }
                  }
                ]
              },
              {
                "id": "7c824b32-f948-47ad-a58c-f7e2a1cb8a7e",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "20f6c187-2310-41b2-b3ff-9a4492be2e13",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "965acbac-18f6-4f03-9599-3e1674eb669d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "150f1f8d-6d06-4e30-8084-691a563f8356"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2318e06-b38b-45cb-983e-6b284de66ee1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2168f81-a8b8-4ba8-a69a-a4d89f88568b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "74aff68c-02cd-446c-aced-09049318d57a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3f7210d9-02e8-47d9-836a-0e8aeee77ca5",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b35d9943-82d8-4e24-aca7-ddc896ea19fa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "583b2c1e-4120-4f44-bc3e-e8591572911f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "65809310-7498-404a-9c95-cc9741ae154c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a5ccb389-1aa7-484b-820c-c341b19c6bd5"
                    }
                  }
                ]
              },
              {
                "id": "86c08b21-b0df-4596-8b03-8f4d040ae851",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "eb6ca32e-ac60-44a3-9c01-d0392972dae8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a53a5575-7778-473b-a9f1-cccf9634da97"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "782557e2-f8ab-4490-a52e-a50c79578e79",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "37e81ac7-dc26-4b14-91b4-7d222c8c053d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7d1b66b7-a188-4b0f-92a5-45a4646bea28",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "aa82dcef-ec34-4849-a4a4-06c4b0cbc1d1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4a6e534b-43c1-4bd9-afd0-bf832680e1f3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "619cbe55-974d-479b-a8f8-c1973123f7d5"
            }
          }
        ]
      },
      {
        "id": "04b63c2e-56f2-442a-9d81-b992c586648c",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "5a3bc33a-e387-4e56-80ab-117be48ff804",
            "name": "Negative Testing",
            "item": [
              {
                "id": "475bcbc5-1932-4ca2-a8c6-5f0090e23991",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4f6f2d8f-021a-4867-b10a-34c209836170",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5c7b118-6119-4d30-b998-520e99ccb109",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "45835d0c-2db1-4aa0-a277-665fa484bd33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97f4dbf6-b808-496a-9c06-84be4e5a84bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3b19bd2e-4d13-4063-b852-c0a8754fc6db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64d963f5-8619-4a74-86ed-849eb4bd3b29",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51e5548a-0610-46c5-b21c-f79b051b7511",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "4d12c369-4594-4447-8559-e3ee68963681"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cd4e668-1f5b-48fb-91e6-d9ee8b857c31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2ec3b77c-64a8-4820-8088-c230f5a0b515"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c5befc5d-2d9c-4395-b41e-69be55cc3d3c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6f26a452-a328-47f3-926f-293c153ad4cf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "46db352a-0ee0-4638-8d99-2d083dd2ef8d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1b621236-2b06-452c-b1ba-24190c3fff73"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "16687984-8641-4aa1-ac91-9e979de419ca",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "b4830fb4-87f5-4f02-b1d5-f34d8d9836b0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4add72cd-2ba7-470e-95b2-d0a91ccb9f80",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0108b766-61de-4f96-9154-25c23831ed82"
            }
          }
        ]
      },
      {
        "id": "ca0642a8-3589-496d-a884-d3c2669ecc9b",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "fce0e33d-daff-4beb-8315-68539c4f556a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3907343c-c8b9-496b-aa3c-80043ea425cb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dc7cbb85-e8df-44c4-ba65-7c7b6106a254",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90503ac2-59ec-4397-ab7e-2182f6ccb32e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "862a6ae8-77ab-48bc-95e7-523d8c728c9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6b01901-edc2-409f-98a6-19252d7b4764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a333a6ac-81e4-47e5-a407-d6e304b1d3b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "951434cf-5c50-44dd-9b5c-8631d21df9a3",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98331648-7bff-4a97-b957-8a7c79b92e1c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "8d75bf72-2910-44da-8c49-f3321c904f0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0f5e504-3ba4-4aae-bbf0-474775f623fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "06ca9900-7339-4107-a722-ab0e478aa70a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2723e1e5-0be9-48da-a328-d1a7c75c156a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0c9515e3-986f-484a-b738-17b3e47ca4b5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "567e7452-7651-4224-be67-957cd2073399",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b5751c2c-3cf7-4df1-a924-b2e73c526527"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c933023e-7acf-4e98-9019-4c25ab1581dc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "d7636850-58af-4e38-ba19-d779aa7dae70"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "55dd1d3c-9c43-4d34-bd9f-b74641e0be4a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2b672316-0ed4-49a8-b9a9-3469978ca4c6"
            }
          }
        ]
      },
      {
        "id": "46f7519b-f683-4ab4-b0a0-ce14ff7f4b1a",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "3f3ae4f4-d0f4-4601-bd87-9716f8ff4ff1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "938c7bb4-8631-42cf-b445-7a09d3520f19",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "583c984c-22b4-411c-bf63-042fde9bf8c1",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12ee59e0-6c8a-4fcb-a33a-64cb41b795a8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e5db6111-dc7c-4f1e-87e4-94e3fc11e032"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "952b187a-edeb-4090-8243-f66a163b2c32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1950f209-3562-499c-b4b8-98e2bc6bb22f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ffea7c8-9855-448f-86fd-94d794a9589d",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1162b326-e4e2-43df-95c7-7feb58639136",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "6141ba36-cf3f-4803-b4c5-2e863ad337b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a743b367-7eb5-4e06-8c24-14b0c6e1efd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e527e155-591b-422c-b62a-69d2950803d5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e8df0889-b72f-431d-a645-9ffcc32c093c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c4fcd2dd-4d02-456a-b70e-46cd8da8e295"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "141457d6-fb8f-498e-8155-80cd1f4020b7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a644fb98-16e9-432c-9bcd-b6d4a197b6ef"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3268cdaf-4442-4899-92c7-d17c812bc21c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "02b4284b-ceae-4e71-8b86-642e4898fc78"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c7bf4efc-7b0d-4eef-a8a2-3b6e98ea04e0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "49cf438f-ba5b-4a8d-b024-cb0356f0e554"
            }
          }
        ]
      },
      {
        "id": "f8046609-e2d6-4595-b414-01cd711aa3bb",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bf625799-e7d9-4402-8bf0-9c62810e751b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f98dacdb-b612-48f2-87eb-29f5d4f0a8bd",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "08480ea9-bb06-4857-9167-9678e68acbf2",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6be24535-d4ad-4893-82a3-929321ff5f73",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "76984313-9321-4a30-94ea-42c747d8c12f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 101
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 111.17557251908397,
      "responseMin": 15,
      "responseMax": 1107,
      "responseSd": 168.07654476303762,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1671323808252,
      "completed": 1671323851430
    },
    "executions": [
      {
        "id": "50c46be2-bb1f-4acd-9389-d80036aa229f",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "7e530335-c1fe-4436-ace9-32ad12bec5c3",
          "httpRequestId": "aebedf02-9d99-4b6b-81cb-0534a444f1fe"
        },
        "item": {
          "id": "50c46be2-bb1f-4acd-9389-d80036aa229f",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "3ba74913-8ba0-4685-a36a-55d53aa489ce",
          "status": "OK",
          "code": 200,
          "responseTime": 100,
          "responseSize": 0
        }
      },
      {
        "id": "f4d4407f-5957-4fe1-9271-85fcd246563b",
        "cursor": {
          "ref": "9b593b8e-0ee3-49c3-b299-1cf25b8623e1",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "12c446a6-f63d-43b8-b547-f811c617689c"
        },
        "item": {
          "id": "f4d4407f-5957-4fe1-9271-85fcd246563b",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "7588e32d-149a-4d39-adcf-a3984a7dac89",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 0
        }
      },
      {
        "id": "97f9553a-65cf-43d3-a0c1-d34a268095bb",
        "cursor": {
          "ref": "1d55f1dd-dcae-4e43-a055-b3fad04dde1f",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "bd79717c-9768-4eed-94ee-54837df9b249"
        },
        "item": {
          "id": "97f9553a-65cf-43d3-a0c1-d34a268095bb",
          "name": "did_json"
        },
        "response": {
          "id": "f8a457c8-792e-4636-ba6b-c31ef30be195",
          "status": "OK",
          "code": 200,
          "responseTime": 167,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b0f104a-1564-4749-95a7-b845ee2aff9b",
        "cursor": {
          "ref": "34a57250-3129-4272-8cfe-2187dbfdd01d",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "10e509a1-006b-4308-85b5-6d07c96864fb"
        },
        "item": {
          "id": "1b0f104a-1564-4749-95a7-b845ee2aff9b",
          "name": "did:invalid"
        },
        "response": {
          "id": "fc3916f5-7072-46a5-99ca-8f12990f5d20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b0f104a-1564-4749-95a7-b845ee2aff9b",
        "cursor": {
          "ref": "34a57250-3129-4272-8cfe-2187dbfdd01d",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "10e509a1-006b-4308-85b5-6d07c96864fb"
        },
        "item": {
          "id": "1b0f104a-1564-4749-95a7-b845ee2aff9b",
          "name": "did:invalid"
        },
        "response": {
          "id": "fc3916f5-7072-46a5-99ca-8f12990f5d20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "296e16fd-38b1-42c2-bd07-0dc01fe69be1",
        "cursor": {
          "ref": "be683daf-5503-46ad-b2cc-f3a99de5291a",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "e746a526-08bd-4def-89fb-bcedb8c63de3"
        },
        "item": {
          "id": "296e16fd-38b1-42c2-bd07-0dc01fe69be1",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "346a9150-d977-4c52-a031-50c02500df9e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 96,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "445c0b4f-19a5-45e5-b438-ec5da631a324",
        "cursor": {
          "ref": "a89ca709-b06f-4e86-ac23-a3dc204aaa73",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "44fe8a32-4343-4783-b73b-87f7d487b466"
        },
        "item": {
          "id": "445c0b4f-19a5-45e5-b438-ec5da631a324",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "aece73c3-2b98-4cd3-a40c-8969639b5f1d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 32,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11bf1337-5e2e-4c1a-aed5-0e8da9e44811",
        "cursor": {
          "ref": "129ded78-a311-4d79-b15a-e0979803aff0",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "4ec77afc-d057-4fdc-bea5-74833d8006f2"
        },
        "item": {
          "id": "11bf1337-5e2e-4c1a-aed5-0e8da9e44811",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "b4848b58-0f34-4250-bbf0-6d37fe8af238",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b0da1ab-6df5-4c21-8c18-9e95712198d2",
        "cursor": {
          "ref": "4fa8278e-ed01-4ba8-81b9-308dac463974",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "09165dc6-a815-4ac3-a9bc-ff31e9be039b"
        },
        "item": {
          "id": "7b0da1ab-6df5-4c21-8c18-9e95712198d2",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "4bec2424-2b16-4e5e-9536-6f76dd3f1287",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 33,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b0da1ab-6df5-4c21-8c18-9e95712198d2",
        "cursor": {
          "ref": "4fa8278e-ed01-4ba8-81b9-308dac463974",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "09165dc6-a815-4ac3-a9bc-ff31e9be039b"
        },
        "item": {
          "id": "7b0da1ab-6df5-4c21-8c18-9e95712198d2",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "4bec2424-2b16-4e5e-9536-6f76dd3f1287",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 33,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5197d0b-80a7-42e0-b2ed-2af7279d5f69",
        "cursor": {
          "ref": "210ef3e1-e6b2-4b7d-b237-083fd7cd5317",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "29702dc1-463b-4af2-abb8-119e7e0b261b"
        },
        "item": {
          "id": "a5197d0b-80a7-42e0-b2ed-2af7279d5f69",
          "name": "identifiers"
        },
        "response": {
          "id": "5b7b5930-1682-429d-ae39-02067c4c80be",
          "status": "OK",
          "code": 200,
          "responseTime": 108,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c825d50-bd37-478f-9458-11c81bc8c859",
        "cursor": {
          "ref": "f5ff8517-c0aa-42ef-a46f-30c3fe3f8332",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "7f3d6d10-56f1-430f-8e25-af91ee525210"
        },
        "item": {
          "id": "8c825d50-bd37-478f-9458-11c81bc8c859",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "c07fa05d-9fa6-4781-b4b9-ac6aa6cec13a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c825d50-bd37-478f-9458-11c81bc8c859",
        "cursor": {
          "ref": "f5ff8517-c0aa-42ef-a46f-30c3fe3f8332",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "7f3d6d10-56f1-430f-8e25-af91ee525210"
        },
        "item": {
          "id": "8c825d50-bd37-478f-9458-11c81bc8c859",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "c07fa05d-9fa6-4781-b4b9-ac6aa6cec13a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fa0adbf-1f49-45c8-be70-0b650646c48d",
        "cursor": {
          "ref": "e671eecb-7029-458b-953c-950901c7bea0",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "844fe0b6-b1d1-4a85-a748-64e82a9f9010"
        },
        "item": {
          "id": "2fa0adbf-1f49-45c8-be70-0b650646c48d",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "542b474f-ab9b-4e97-afa3-8d5e86814838",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d267a538-7a4f-4c84-b245-569bcae1714b",
        "cursor": {
          "ref": "4104f895-0669-4a1d-94b9-606ac2a89f31",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "07f75363-054c-42bd-9af4-6a9cc958c5e6"
        },
        "item": {
          "id": "d267a538-7a4f-4c84-b245-569bcae1714b",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "b12b3dc1-228a-4160-88a6-bff8d2855d4d",
          "status": "Created",
          "code": 201,
          "responseTime": 610,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "3c74d136-dfc4-4635-9dec-09611f18eba7",
        "cursor": {
          "ref": "e4792826-5163-4d1c-bd64-fe00d2a699bb",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "d5708dd3-9ac7-421d-89d7-ff8b80198a1b"
        },
        "item": {
          "id": "3c74d136-dfc4-4635-9dec-09611f18eba7",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "c27b6b74-f998-4802-9e78-cd4ba1e1bbb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01445a64-ee3a-4641-b648-9440becade28",
        "cursor": {
          "ref": "0a95d85b-7b74-4764-b9f9-084a732e416e",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "3595307b-f0e7-4621-a506-f741b955c596"
        },
        "item": {
          "id": "01445a64-ee3a-4641-b648-9440becade28",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "e49d68e4-3f7f-4626-9e49-5fca2e892083",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d09b4863-e7b2-4e5a-aaa0-51d37626e191",
        "cursor": {
          "ref": "9b7088f8-9e6d-4342-b04c-fb45c439ce5d",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "7b74c7fb-5ead-4995-9777-9829318dcd36"
        },
        "item": {
          "id": "d09b4863-e7b2-4e5a-aaa0-51d37626e191",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "b5439d5b-144e-49ad-a7e4-aad34b0dc999",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b6bcbad-ab82-407d-bbd1-19b5404bfc8e",
        "cursor": {
          "ref": "5bb930ab-222c-4e78-b69c-2239efef07d0",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "e85a9987-398e-4c76-a4fd-701ce419fe8c"
        },
        "item": {
          "id": "7b6bcbad-ab82-407d-bbd1-19b5404bfc8e",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "e38a45c5-b452-47b4-9786-3efd1bd1d392",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04f32850-1010-4b64-9d8d-046488f91401",
        "cursor": {
          "ref": "e86ba9b1-d14a-4379-84cd-7b63f7fd8f00",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "21dd4768-5cc4-42aa-87b3-5d5a1a1684e6"
        },
        "item": {
          "id": "04f32850-1010-4b64-9d8d-046488f91401",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "e7445831-f79b-4eeb-9562-ba2b5ce133d1",
          "status": "Created",
          "code": 201,
          "responseTime": 536,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "051715be-1d0f-405d-9ada-6abc7bced5c4",
        "cursor": {
          "ref": "53a46442-a7c2-4be5-b55b-1d933f4e23b4",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "b39e5078-a24e-4fbe-8a99-746a8c968d29"
        },
        "item": {
          "id": "051715be-1d0f-405d-9ada-6abc7bced5c4",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "d3e1fa49-1668-44e4-9911-d8fb04c5c7dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09376e47-3e35-4d68-acae-28cee054bbf0",
        "cursor": {
          "ref": "2f735be7-6e60-47f2-9f3a-27cb75302868",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "93af3c25-ab4f-4761-81ac-2847bc53d15b"
        },
        "item": {
          "id": "09376e47-3e35-4d68-acae-28cee054bbf0",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "aff0ac5f-2947-4070-a867-f4cd43913ec2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9add5dc0-4b32-41ba-bdbc-7dc6fadb820b",
        "cursor": {
          "ref": "f1c542fc-ff34-4c04-a3b9-ad6e1c8bd60a",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "4816a63b-0208-424e-9aa4-ef667f473c93"
        },
        "item": {
          "id": "9add5dc0-4b32-41ba-bdbc-7dc6fadb820b",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "014ce1af-5d32-4f00-95a7-c679d0ebfb54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd34d3f4-5916-4bf6-b963-8feb8e8f9bcd",
        "cursor": {
          "ref": "8fdb8ebf-0020-4e00-883e-d333ff919ed8",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "b38f51b3-3d6d-48d0-8078-bfd71caecd2d"
        },
        "item": {
          "id": "bd34d3f4-5916-4bf6-b963-8feb8e8f9bcd",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "7bc65697-efb7-4d36-ac7e-6318cf94ae73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30258682-30ea-40af-8ba0-e0f54ea08787",
        "cursor": {
          "ref": "a4b2bd66-d49b-42e1-92a9-0c265540e3df",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "8c04fff6-6764-41e0-8815-2e7d7c80223e"
        },
        "item": {
          "id": "30258682-30ea-40af-8ba0-e0f54ea08787",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "64e75ed7-6e38-48b1-b687-a67924c8f7a7",
          "status": "Created",
          "code": 201,
          "responseTime": 519,
          "responseSize": 736
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "0f93d7b9-cc8b-418a-b5f5-90a31d5752e1",
        "cursor": {
          "ref": "9a74af4c-ae0c-4a9b-8637-109ca7136955",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "7cc5d878-c20c-4f3b-abc0-e50a0cbacfe5"
        },
        "item": {
          "id": "0f93d7b9-cc8b-418a-b5f5-90a31d5752e1",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "270946c0-e0b8-45fe-ac72-0a716c825edb",
          "status": "Created",
          "code": 201,
          "responseTime": 1107,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "eafedf76-dce2-487b-a934-47886d561c20",
        "cursor": {
          "ref": "3fbf548b-5c12-417c-8d4c-a136b4204bac",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "bcf7574e-3d3a-4fdc-a664-9c42b60c261d"
        },
        "item": {
          "id": "eafedf76-dce2-487b-a934-47886d561c20",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "ad22a22f-5f3a-435c-8b1f-dc91d3cd1796",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0790acc7-51d8-4f23-92ff-f27cfd7473f1",
        "cursor": {
          "ref": "8593d2b7-d465-4ceb-97df-96997766c132",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "12cc5c9c-b8e7-4e96-bf85-b2ca59b4cc8a"
        },
        "item": {
          "id": "0790acc7-51d8-4f23-92ff-f27cfd7473f1",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "555f55c3-f13f-4cea-b1ae-99878b09a4b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fa4ae85-32bc-4b06-a76e-8a15191e681d",
        "cursor": {
          "ref": "111deaed-cbb1-4a2a-b418-74a822f385bb",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "4b48186f-82dd-452e-a71e-9ca569dcc6ca"
        },
        "item": {
          "id": "8fa4ae85-32bc-4b06-a76e-8a15191e681d",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "364ad175-959d-49cc-8eaf-861f4522ee82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1a9e31a-b8e5-47b2-965f-90fe61a610c9",
        "cursor": {
          "ref": "04171686-cee2-4c98-a68e-efc3044cf479",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "70f8b376-06af-4bd1-b6cd-aa405bc59bfc"
        },
        "item": {
          "id": "a1a9e31a-b8e5-47b2-965f-90fe61a610c9",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "177608cd-13a5-4652-83a5-1597e81ae04b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdba5911-2c71-4a9b-8fd7-6b6de48e34b4",
        "cursor": {
          "ref": "9c28786e-8b1e-4380-bc10-c109b5b44966",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "002f94d4-fda9-4d73-9e53-3da18a454105"
        },
        "item": {
          "id": "cdba5911-2c71-4a9b-8fd7-6b6de48e34b4",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "68717b6e-c603-4b26-94c0-d95d463a5016",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e9a3702-180b-4eee-bf6a-8fb664477e9e",
        "cursor": {
          "ref": "c95e0a78-f0b7-49b9-b532-ce564f5dbc12",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "7b53de45-ce06-4a20-9ee3-406d06e2708a"
        },
        "item": {
          "id": "9e9a3702-180b-4eee-bf6a-8fb664477e9e",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "6115f30f-2c00-4873-b2a6-29fd3e9a2e7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bda90552-cd32-464a-a241-efc2311df8a9",
        "cursor": {
          "ref": "02f91c40-6bec-4fd0-8612-22a8a9f92c78",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "da362853-7690-4b83-8835-1e98c7445746"
        },
        "item": {
          "id": "bda90552-cd32-464a-a241-efc2311df8a9",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "1b4b8791-bdb8-450e-b5ee-12fab8ebb410",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf90bff1-1835-4638-8114-2df8a5eea816",
        "cursor": {
          "ref": "14994e14-8bce-45c1-8bf7-46a99d376d83",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "a97cce47-e3ec-44ed-a9e8-7f5a7050133a"
        },
        "item": {
          "id": "cf90bff1-1835-4638-8114-2df8a5eea816",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "53825ae0-46b5-4585-8a99-95b3ead25d00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10e60386-36f1-4291-9476-7b4760bf2e4c",
        "cursor": {
          "ref": "94a3ed55-7552-404c-9481-6f329cd90970",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "1f91cb57-33d0-41f9-ac71-583ec0d5da43"
        },
        "item": {
          "id": "10e60386-36f1-4291-9476-7b4760bf2e4c",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "ee69b2ac-3275-4233-a87b-7a89fb8ab6f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "532cec8f-df2f-49b6-aefd-7337a218636b",
        "cursor": {
          "ref": "8b45c9d8-1931-4ac4-98ff-925c10b44472",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "5ba8d3e9-c66d-4a8f-8c2e-822c7afd0cc1"
        },
        "item": {
          "id": "532cec8f-df2f-49b6-aefd-7337a218636b",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "c78b5dfe-207a-4677-a0db-db28138f193f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "415d8c65-8be6-49b0-82ca-aae58433a24b",
        "cursor": {
          "ref": "0980d514-f6e1-4428-8b9b-bbb5e0a35afb",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "43f8c4dc-cfa4-4d38-a072-5772bb9568bd"
        },
        "item": {
          "id": "415d8c65-8be6-49b0-82ca-aae58433a24b",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "c077caed-bd91-4a79-8449-5315a3d9c79e",
          "status": "Created",
          "code": 201,
          "responseTime": 656,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "d2c451ea-3956-43b7-8b90-87c08119e54f",
        "cursor": {
          "ref": "7122c1c1-8666-407b-b135-9b86b4c5ab7e",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "ce4a7d9d-b5a8-4984-a623-3bb89fce6886"
        },
        "item": {
          "id": "d2c451ea-3956-43b7-8b90-87c08119e54f",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "bdcd1b1a-db2e-4878-9080-ff67695c4fbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea95b628-4f08-49d6-bd26-213fdd953644",
        "cursor": {
          "ref": "8b373c34-3874-46ea-b05a-836565b98fb9",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "feb36f0b-f094-4f82-80a8-c7c0e547f34a"
        },
        "item": {
          "id": "ea95b628-4f08-49d6-bd26-213fdd953644",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "0209a0f2-f1ab-42fc-bc7b-d240f6a2c3cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8720c70e-4145-4a00-b75a-9d22d5a31cbf",
        "cursor": {
          "ref": "f4e240dd-2f73-4e71-a2ca-918da5e5a14b",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "260ebf87-62f2-4e69-afea-529c289a067d"
        },
        "item": {
          "id": "8720c70e-4145-4a00-b75a-9d22d5a31cbf",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "0861abda-184e-4867-889c-f510dc0037b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "639e4dc4-6c7c-4da2-b099-a266bbf2fd56",
        "cursor": {
          "ref": "01411ee1-6e76-4afd-9aca-3e6d88aeb296",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "26ada7d7-7688-466e-acaa-e5f55fd8a0eb"
        },
        "item": {
          "id": "639e4dc4-6c7c-4da2-b099-a266bbf2fd56",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "ee174a00-e130-4dc1-a8b1-7cf62c480894",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c27340a-fdc7-4d30-aea3-c1507453b0a5",
        "cursor": {
          "ref": "fbf1aac9-09d9-4bc1-8b9d-ee9cb07053df",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "d17a8bdc-8630-4bf2-bdf3-0f3637919faf"
        },
        "item": {
          "id": "1c27340a-fdc7-4d30-aea3-c1507453b0a5",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "15d41abf-356d-4ecb-8a24-84454e7c0c44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3103a635-a407-42bd-9cea-4fae13ced257",
        "cursor": {
          "ref": "c0bab043-e5de-4246-bdfb-f484d34b449e",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "f225bdc4-0e7e-4a9d-be75-c0a2748e2a71"
        },
        "item": {
          "id": "3103a635-a407-42bd-9cea-4fae13ced257",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "c4a4825e-a110-4cfc-a9f4-57a30a8f7b17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10362627-df06-4d6f-83b3-05efeb3385dc",
        "cursor": {
          "ref": "bd6f738d-35f7-4028-aafc-005d9c63ec86",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "cfbfc5cc-c5b7-4b37-ab88-278d78749462"
        },
        "item": {
          "id": "10362627-df06-4d6f-83b3-05efeb3385dc",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "cee4e37b-b3c8-49dd-9f2e-3f8019b8a96a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7a5322c-b7b4-4203-bc1e-f4c1718a3b1b",
        "cursor": {
          "ref": "9694f69b-fed6-4821-8f89-201e1847bdea",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "023651d9-7dab-426b-8bea-105c9fda78a5"
        },
        "item": {
          "id": "a7a5322c-b7b4-4203-bc1e-f4c1718a3b1b",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "a0afe01d-2e4d-4575-a70a-c0cc55aa6863",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c898e986-a71f-4a67-8cb2-4048c0e74092",
        "cursor": {
          "ref": "e2f6627a-c06a-4eca-a5a5-4a0d44989e9a",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "f7d7a98e-1854-46c7-a3ea-5207a6c552e3"
        },
        "item": {
          "id": "c898e986-a71f-4a67-8cb2-4048c0e74092",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "b5ddc39a-737f-465e-a571-3b7ec174a055",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8664ac0-48e5-490e-b73a-8ac9d26050c0",
        "cursor": {
          "ref": "ddc44fe2-89c5-4b14-9cd8-cedc1965de32",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "f6d7bdd6-9444-49c6-9ef2-7b099a1ba84b"
        },
        "item": {
          "id": "c8664ac0-48e5-490e-b73a-8ac9d26050c0",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "589590a6-1f4a-4d32-88c3-1ba3fe857c5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa378c1c-eb6e-4929-adf6-41bea44348e6",
        "cursor": {
          "ref": "5f5558c3-6cc5-4113-b4cd-54b824e8e87c",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "11ab45ab-daf5-41ea-9d50-5f1afc562129"
        },
        "item": {
          "id": "fa378c1c-eb6e-4929-adf6-41bea44348e6",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "9f63a89f-e524-4e55-bf42-920f34dd6bcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cf89f8d-614f-4b90-9d7d-c70606880ed3",
        "cursor": {
          "ref": "a7e41dda-64ee-405b-9ed0-31be60f6350c",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "bb778f09-b567-402c-bef5-c89579d80c5c"
        },
        "item": {
          "id": "6cf89f8d-614f-4b90-9d7d-c70606880ed3",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "45b544f5-4b0c-4043-a312-ac2ff6d2918b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dc6996c-2b35-4790-9168-5eea818d9b02",
        "cursor": {
          "ref": "3a839e62-d402-4351-99d8-846f0a659e2c",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "b8c7232b-abab-4496-96a0-aa3cd7d91f54"
        },
        "item": {
          "id": "3dc6996c-2b35-4790-9168-5eea818d9b02",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "9cc50bde-86bb-47fb-bcf9-2619f264a0de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 325,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "3e6260fc-5b91-4d95-8e0e-0e6d20615983",
        "cursor": {
          "ref": "97b79387-77e5-4856-8837-f9ac7046b1a3",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "d35497c6-219a-47a6-94b6-6203f2a73898"
        },
        "item": {
          "id": "3e6260fc-5b91-4d95-8e0e-0e6d20615983",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "a00100d1-cba8-432d-87e0-dbc02cfa81f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a3f727d-eb6c-4d08-86ad-ed698746dd33",
        "cursor": {
          "ref": "67747a6c-adad-4182-82c1-07f3c2252858",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "3bf30e50-b99d-4aa4-9efa-851e57d32db9"
        },
        "item": {
          "id": "3a3f727d-eb6c-4d08-86ad-ed698746dd33",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "bdd52c61-53dc-4283-99e4-1f794268d87d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c8f0afa-b864-4123-8be8-b969252a4f1a",
        "cursor": {
          "ref": "13a4d4de-8987-4bd9-85bc-128d222327bb",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "731ec59f-09b2-4544-846b-a65ae00a9b8c"
        },
        "item": {
          "id": "9c8f0afa-b864-4123-8be8-b969252a4f1a",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "97367632-7e01-4f59-9419-8d6feaa0b01a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12ce1fdc-671c-4722-8e74-66714718022d",
        "cursor": {
          "ref": "0df37ddc-56f4-4a88-822d-352dbbcd737f",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "f26bf05e-14aa-4fc6-8252-8588c2215f88"
        },
        "item": {
          "id": "12ce1fdc-671c-4722-8e74-66714718022d",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "9a3db741-af32-433c-9fc2-dc5bdd197606",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8efb7eed-494d-47a3-89a0-aeaa9acd378b",
        "cursor": {
          "ref": "0b14d96e-646c-4b16-9bdd-b2da25ecb287",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "8cfeba12-6875-4440-b839-5d6998737604"
        },
        "item": {
          "id": "8efb7eed-494d-47a3-89a0-aeaa9acd378b",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "73b4de25-0e31-431c-bd62-838abeef75a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "928f0a49-7732-47b7-8589-efe25e65b6bb",
        "cursor": {
          "ref": "0505543e-256a-41dd-8fe9-0d24b4504a3b",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "8d50198f-1fc7-49d1-816e-520b27c35b57"
        },
        "item": {
          "id": "928f0a49-7732-47b7-8589-efe25e65b6bb",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "8cf1b820-c8e6-4632-bbba-8e406c64a83e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ba46aee-42cd-4c29-95a8-14af15f0bf31",
        "cursor": {
          "ref": "956f5f25-4570-466a-b7f4-04adcb6db176",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "ef97079c-22ef-4977-8fcf-4eacd0678910"
        },
        "item": {
          "id": "6ba46aee-42cd-4c29-95a8-14af15f0bf31",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "7ae327af-8fe5-4f6b-a45f-3d9f007e6778",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 369,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "3f4d2ce2-baca-4188-8855-50ba4e6d5fee",
        "cursor": {
          "ref": "54f4d17c-a9bb-4125-85a1-e3c1fed5c1e3",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "4b8490c4-c33b-4f44-b27e-c425525f1430"
        },
        "item": {
          "id": "3f4d2ce2-baca-4188-8855-50ba4e6d5fee",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "264cce0e-118c-442a-9ffd-4165f4c4c781",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aab6de00-3646-4d13-a678-b50004efc51f",
        "cursor": {
          "ref": "2403750b-2cdb-4a46-bacc-866dd88b4516",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "11a6e446-1035-42ab-ae81-77e9bbbcc108"
        },
        "item": {
          "id": "aab6de00-3646-4d13-a678-b50004efc51f",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "c4ca2a94-9be4-44ea-9d8f-42a838fb01d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22b8dece-f142-4c2d-8cac-d88894aafb5e",
        "cursor": {
          "ref": "387e9660-1a7e-497a-889a-cb7d88615be6",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "f6fde76c-7ca4-46a4-8522-33b396b32ed7"
        },
        "item": {
          "id": "22b8dece-f142-4c2d-8cac-d88894aafb5e",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "eedad31f-a52a-4b06-b61f-5f28468d9943",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3bf4d4b-149b-4935-a487-4d830a5f0298",
        "cursor": {
          "ref": "5ed8e760-9394-49c1-8185-0c79b83956d7",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "244838e4-3618-4e3d-9519-7be7ba476ed4"
        },
        "item": {
          "id": "e3bf4d4b-149b-4935-a487-4d830a5f0298",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "a7665009-0f8f-48f1-abfd-2c53c691b5d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11898032-d50e-4bd1-980d-77c9db852b65",
        "cursor": {
          "ref": "e3e1f865-739f-4a98-93f7-ab829b87aefc",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "93057fd3-2ebc-4e14-ab21-5fc09d9abb24"
        },
        "item": {
          "id": "11898032-d50e-4bd1-980d-77c9db852b65",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "bb78f82c-ae9b-4f42-98a0-495776e7099e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "439e001d-6d96-4bba-a957-180bcb89f0d1",
        "cursor": {
          "ref": "fed4adb4-aa81-4ddd-b50b-e91d71240f72",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "f59957e8-0604-44e3-a886-3097083f9015"
        },
        "item": {
          "id": "439e001d-6d96-4bba-a957-180bcb89f0d1",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "93909e72-d796-428e-bade-e20b2c2dd012",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c5bfeb4-96f8-46a3-b122-433289c91d85",
        "cursor": {
          "ref": "c648ce98-ce09-4d4e-9359-646eb5f162df",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "3fe43a47-f037-47a1-ad4c-6796a98bf567"
        },
        "item": {
          "id": "1c5bfeb4-96f8-46a3-b122-433289c91d85",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "3672f959-7550-438a-8911-fa9ff388ffaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75131ba7-349b-4a74-8b56-fdf9ee5da5ad",
        "cursor": {
          "ref": "1ddafab3-342b-49be-a828-77401ea6b7d2",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "e9c505f7-5b77-40ea-884b-d667b53adf09"
        },
        "item": {
          "id": "75131ba7-349b-4a74-8b56-fdf9ee5da5ad",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "d37401f1-9646-45b6-9396-f619369eecac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0327f49a-71c2-411f-bcf0-7151b340efe3",
        "cursor": {
          "ref": "b9ffe867-ca14-4e3c-9d11-5b04b04073da",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "1e227fe0-fb56-45ce-9018-5f280aae90cf"
        },
        "item": {
          "id": "0327f49a-71c2-411f-bcf0-7151b340efe3",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "17486e92-cb3f-4acd-a116-245ee428f02e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89d40e03-96d6-43cb-ba89-0e437f37de53",
        "cursor": {
          "ref": "7337b639-2f5c-436c-9a69-a51c65d1688d",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "1d87bdb6-cc6c-4951-9749-20350e166f82"
        },
        "item": {
          "id": "89d40e03-96d6-43cb-ba89-0e437f37de53",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "1da374a8-2d31-42d9-a8d2-91c9b24a6aa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac4d3968-8fa1-4a00-b00b-d18a8f29cccc",
        "cursor": {
          "ref": "66192333-3f62-420b-89d7-3880bae18e99",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "30633574-4594-46bd-b1d1-fc35a2dd358e"
        },
        "item": {
          "id": "ac4d3968-8fa1-4a00-b00b-d18a8f29cccc",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "be7451d0-e389-4a4a-b4d5-33bf8ce29757",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c466f194-ef93-443a-b13d-8d1e6f03b755",
        "cursor": {
          "ref": "4f787d83-3484-4aaa-a4c1-90eded977a43",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "16c03079-9554-4fc0-b2eb-81db878a2e8f"
        },
        "item": {
          "id": "c466f194-ef93-443a-b13d-8d1e6f03b755",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "d17e1ec8-6c28-4265-a3c6-726583194e8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e314fd7a-22e4-4172-8d14-400ef7d4c7f2",
        "cursor": {
          "ref": "6272b9ec-de52-4116-a291-2df525214421",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "d489268e-ac13-4fe3-ba3c-84bcc688177a"
        },
        "item": {
          "id": "e314fd7a-22e4-4172-8d14-400ef7d4c7f2",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "60fac784-c572-4c9c-991d-48d64b1d634d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b790827-1872-412c-a0d3-6f426935f738",
        "cursor": {
          "ref": "842b4efb-0427-4b88-8ae6-6a507d939927",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "7b244bac-76fe-45c0-9337-cd53f9985020"
        },
        "item": {
          "id": "1b790827-1872-412c-a0d3-6f426935f738",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "0342e7d3-0a5d-4e0d-b2fe-0ed70cebbed1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41ce1b59-cb68-4b8b-90b2-0154131424a7",
        "cursor": {
          "ref": "f5513aa8-bc1f-4f42-ba3d-7a556884c9df",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "1110c12d-e30f-46f3-a5e4-d160d7d6f0ba"
        },
        "item": {
          "id": "41ce1b59-cb68-4b8b-90b2-0154131424a7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "d0e5826e-6f10-40f8-91a5-e4540ecd82d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92c6a5bc-bd48-43c2-8ef5-67f269525a4b",
        "cursor": {
          "ref": "e490ac5f-b877-45e2-af89-d91dde33b2a0",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "260b4d80-2bd7-41af-ba06-b086f7f4e7f7"
        },
        "item": {
          "id": "92c6a5bc-bd48-43c2-8ef5-67f269525a4b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "a08078f6-19ca-4d70-be77-5355855ec03d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6ffff51-b35c-4cac-8fc9-5194f7aabb77",
        "cursor": {
          "ref": "bd794b05-8e1a-4a64-b622-e11d9e09ecb0",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "e406a6b3-77e3-4683-90fc-2bd09ed52f48"
        },
        "item": {
          "id": "a6ffff51-b35c-4cac-8fc9-5194f7aabb77",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "4d58c506-476a-4ab8-b9da-0749c2928778",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 200,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b04063f-36d1-4373-9df3-9a59dd067086",
        "cursor": {
          "ref": "5dd7bce2-85ad-43ca-99d3-e6ca2a6f00ad",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "f319bbb6-10af-4d40-904f-705cb2eb8173"
        },
        "item": {
          "id": "6b04063f-36d1-4373-9df3-9a59dd067086",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "0f860305-6f67-408b-978a-54962a76efeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86b6365f-e6b2-4b9a-a8c4-09480bd949a3",
        "cursor": {
          "ref": "8a2f2d95-eb69-46b4-b77f-da8720dd577e",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "9a409d7f-9ea6-4dec-aa34-88f8d5e588a7"
        },
        "item": {
          "id": "86b6365f-e6b2-4b9a-a8c4-09480bd949a3",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "6c52042f-95a4-4629-84f7-906a0ea27fe3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c5d806f-2417-42de-a11a-b9413b6e100e",
        "cursor": {
          "ref": "e648589c-22e8-4808-aa85-d98eaf0b9d5a",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "7bd396da-9ac5-4ec8-85d6-d979abbc3ec8"
        },
        "item": {
          "id": "7c5d806f-2417-42de-a11a-b9413b6e100e",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "2b261818-aac4-4af0-808a-3f8abe3cda3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c470841c-82e3-44d2-8e33-904f81e83526",
        "cursor": {
          "ref": "3817c585-a697-46dd-9404-074ecb70c1d2",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "11d3a2a3-8e0f-40c4-912b-35679f062aed"
        },
        "item": {
          "id": "c470841c-82e3-44d2-8e33-904f81e83526",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "03f9e91c-04da-49ed-87ff-668c99eecb7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9eb3650-4fc0-4381-9374-223e3c90c218",
        "cursor": {
          "ref": "73abf8dd-7b01-4770-9bfb-f8587ee6b7b8",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "ae8dbfc6-abef-4481-898a-3d2300aaebbc"
        },
        "item": {
          "id": "d9eb3650-4fc0-4381-9374-223e3c90c218",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "5d90e7b1-f2d0-439b-aa94-8e425e4cf899",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53422ffe-6475-4930-a5f1-2dc5b04591d0",
        "cursor": {
          "ref": "0126e8d7-4583-4963-8e04-6856666ee1cc",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "ccdf9944-ef09-4c5b-ab6b-409e5581755f"
        },
        "item": {
          "id": "53422ffe-6475-4930-a5f1-2dc5b04591d0",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "52e65d3f-dc6e-4ddd-83e1-d9e318f2e357",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "221b3667-5d8d-4538-b836-2000b0671248",
        "cursor": {
          "ref": "f258a29d-9f9b-4927-ab83-57620b495d50",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "33bcce16-738b-409b-b82d-c56a435ab293"
        },
        "item": {
          "id": "221b3667-5d8d-4538-b836-2000b0671248",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "1e324616-3ba7-4454-9df6-7d520b3a99c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21caaee3-e63d-4f03-91a8-86dd7c2c1ea1",
        "cursor": {
          "ref": "0dbcaa52-fdd7-48e5-b857-587833134796",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "31d6655e-6954-48ee-a018-cec56cc84071"
        },
        "item": {
          "id": "21caaee3-e63d-4f03-91a8-86dd7c2c1ea1",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "f4094eb8-089a-4ee5-b05a-162370a83c81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ec00d77-5385-4d2f-a5e6-5570c72293b4",
        "cursor": {
          "ref": "7c87eb19-1151-43e5-96c9-a0972bd59276",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "50bde2d2-0968-4068-a10e-8fb8270e76ba"
        },
        "item": {
          "id": "0ec00d77-5385-4d2f-a5e6-5570c72293b4",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "4068c0ce-3b72-4c9e-ab70-027b29514ee5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c0e4a7f-d96e-4d73-9f1f-cd5d00dbdae3",
        "cursor": {
          "ref": "bf5c6d9f-c45a-4397-afde-b03649cd0de6",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "2bde607e-d695-4061-b9f6-0757364a7af0"
        },
        "item": {
          "id": "7c0e4a7f-d96e-4d73-9f1f-cd5d00dbdae3",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "bc401652-5cd1-472c-aa9a-0e313f19fa3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "636456c6-36ff-4853-8990-522641657f4f",
        "cursor": {
          "ref": "ad91fc08-3ead-4ed5-a022-be5ac6dbccd4",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "16e37271-869d-4f35-a99d-ff280fda2ab7"
        },
        "item": {
          "id": "636456c6-36ff-4853-8990-522641657f4f",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "07196622-ea16-4f85-a995-902cd702b6ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4c3ea3e-6d47-4cf2-a382-f6571005d874",
        "cursor": {
          "ref": "27a21d41-e2b9-4681-86c9-44f1a39d9aea",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "a92cedf8-3ea0-4c9a-9b7d-34857f0d4e6c"
        },
        "item": {
          "id": "a4c3ea3e-6d47-4cf2-a382-f6571005d874",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "a5c4effe-3198-40ac-ada2-3336ac7db8c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69b78e3f-bbb9-4391-be6f-84facf10ef02",
        "cursor": {
          "ref": "2c6791c0-c87e-44d4-ae61-6baba96efcd4",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "44b429ae-3a46-4b5d-9514-181c7441f993"
        },
        "item": {
          "id": "69b78e3f-bbb9-4391-be6f-84facf10ef02",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "d72aaf01-490a-46cb-84cd-90301c0bb6d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "887f49ef-70e7-4cf4-b038-3015d85eec2b",
        "cursor": {
          "ref": "67c1e61f-a93f-470c-858d-c2f40aec56ea",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "b74aec77-9859-4824-9f75-50b349194206"
        },
        "item": {
          "id": "887f49ef-70e7-4cf4-b038-3015d85eec2b",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "eaf60e23-d177-4e7f-810a-bed38c07e8bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 372,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1319ddc-82e1-4cc6-b872-a80f160a1a4c",
        "cursor": {
          "ref": "03ec94ae-4ec5-4c9a-bba2-9e67c90662ae",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "9fd6e7be-5628-4229-a04d-b9d4c01512df"
        },
        "item": {
          "id": "e1319ddc-82e1-4cc6-b872-a80f160a1a4c",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "efd6bfb9-df17-4873-bdb7-014f79aa3687",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ac787cf-7307-46f8-a9e4-5e7dc8b5ba23",
        "cursor": {
          "ref": "510afaad-ee2b-42d2-af3b-d435efe42977",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "717af123-f061-445f-b7ab-b91e134f6aa3"
        },
        "item": {
          "id": "4ac787cf-7307-46f8-a9e4-5e7dc8b5ba23",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "bebfa207-5e80-476e-a0c8-cbe11c7b4c0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd32619f-38a2-4034-8325-986dedc4d229",
        "cursor": {
          "ref": "c3cd4153-1f90-475a-9331-713a693082b3",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "b04f3f13-93e7-4751-918d-9f0539c96ffa"
        },
        "item": {
          "id": "cd32619f-38a2-4034-8325-986dedc4d229",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "ce0d59a3-bb50-4df9-8148-4d0618454fea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "524fc5d9-7d5b-4974-845a-7f0da7f56077",
        "cursor": {
          "ref": "6cb1afac-5b8a-4626-8866-48a3e59e90d2",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "17e905a3-e973-4bd2-9feb-79a20b2e5058"
        },
        "item": {
          "id": "524fc5d9-7d5b-4974-845a-7f0da7f56077",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "8f510de3-87b9-4fff-ba52-28ebfa5486f8",
          "status": "Created",
          "code": 201,
          "responseTime": 661,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "1359b1ea-654e-4a4f-9aae-05481cd47166",
        "cursor": {
          "ref": "e210c92c-5f42-438d-96f2-f4e3a8a92f97",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "f834b26f-54ac-48a3-92a7-d582f3998e24"
        },
        "item": {
          "id": "1359b1ea-654e-4a4f-9aae-05481cd47166",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "690455a6-6ad5-4c6f-969a-5575dc852cfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c506b79e-ee03-48fa-97ca-0b39b96d7358",
        "cursor": {
          "ref": "76c65f4e-fee5-4587-8cfd-8de3bddab9f3",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "6fb3001f-56cf-4273-ab0e-9d518d3c3e2e"
        },
        "item": {
          "id": "c506b79e-ee03-48fa-97ca-0b39b96d7358",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "e323c668-3c5b-4857-9ec0-04e45c77f16a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f38c2c6-4fab-4c09-97a4-3625c8d58d4c",
        "cursor": {
          "ref": "f651264f-6ad9-4937-9703-621b3442d11a",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "b222ad74-9519-4961-ab36-b43a3c419254"
        },
        "item": {
          "id": "9f38c2c6-4fab-4c09-97a4-3625c8d58d4c",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "72d11744-9cc5-4a81-b59b-ff518462bd70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eba775af-70cd-452a-b8b4-360c6bc970b2",
        "cursor": {
          "ref": "557eabb2-441c-4d0e-968a-01d0615cfc43",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "e50bd131-1570-4991-a213-2a8e8c8035df"
        },
        "item": {
          "id": "eba775af-70cd-452a-b8b4-360c6bc970b2",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "34885c54-6ff9-4821-93eb-59ec9d471eb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db069105-811a-4712-bbfc-d0af8b39aecf",
        "cursor": {
          "ref": "d6ad78dc-c009-4fb7-b595-304b1130751b",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "59ddf3c3-ba6d-440f-8d9c-19ebaead5f72"
        },
        "item": {
          "id": "db069105-811a-4712-bbfc-d0af8b39aecf",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "b6a24561-a6d5-45a4-9a38-58d0f6b8142f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bc352ae-0ff0-4c50-a6fe-2bc8eedaa1df",
        "cursor": {
          "ref": "496f6af4-476c-422a-bdbd-5a6ccc56c2cd",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "db375561-5753-4f69-af41-64dab0115481"
        },
        "item": {
          "id": "3bc352ae-0ff0-4c50-a6fe-2bc8eedaa1df",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "f0f6ab7c-b39b-4397-8ce3-64ecb6396855",
          "status": "Created",
          "code": 201,
          "responseTime": 634,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "c32fd0df-d2b6-4bb4-8307-4f48bf72d466",
        "cursor": {
          "ref": "36acfc8d-a696-44a8-a8bd-cdffcf4aef31",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "218f9a0b-9e0c-4d13-8db0-1aa916d77d31"
        },
        "item": {
          "id": "c32fd0df-d2b6-4bb4-8307-4f48bf72d466",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "4bca8dbe-b7a5-4ed3-b66f-1780aff7da17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9accf985-e081-4abb-80be-5fecb9abc7cb",
        "cursor": {
          "ref": "c8952550-8dea-4707-9618-9ca07fef62c1",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "2e45350c-1f55-46c5-9cf8-0e45abffabc9"
        },
        "item": {
          "id": "9accf985-e081-4abb-80be-5fecb9abc7cb",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "e5f61bab-f0c4-4dab-b1c5-c0ee404c6ddf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c9f44f9-502a-495c-ac22-c857d81fb883",
        "cursor": {
          "ref": "976ea3cb-ee6e-4c7e-bb8c-52f12141e290",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "5f9d1cb7-da8b-41e7-9118-8071010b8330"
        },
        "item": {
          "id": "8c9f44f9-502a-495c-ac22-c857d81fb883",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "0ef608bc-e979-4e71-821a-5e7a278edb82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0041521-3a50-4c51-9ae1-2ce352acca54",
        "cursor": {
          "ref": "432b3213-8984-4a84-9529-b7fde614fda5",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "9bc59b3a-6456-4a61-bcf0-6ae03b7334a9"
        },
        "item": {
          "id": "d0041521-3a50-4c51-9ae1-2ce352acca54",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "bcdf62c6-ddd4-4cb7-ab81-99834e159829",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b3b2db7-5728-40ad-bc7b-51d54d89e099",
        "cursor": {
          "ref": "0f0e1c1c-1615-4e5b-a43e-0a701ec058e8",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "d9bf2512-94f5-4236-b204-5220f0e8bd26"
        },
        "item": {
          "id": "7b3b2db7-5728-40ad-bc7b-51d54d89e099",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "19b88431-28da-4dc9-ae72-1b8e576a9b86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6ea66b3-1330-4395-9128-224a2a8625c5",
        "cursor": {
          "ref": "0b09090f-ac5a-4cb3-bc0c-858149de84a4",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "54f8d482-2687-4177-a6ab-44657252c209"
        },
        "item": {
          "id": "b6ea66b3-1330-4395-9128-224a2a8625c5",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "3a3a0122-40da-4fd9-80f1-ca29961d2869",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee516b8b-fb61-41af-a84d-06aac636b943",
        "cursor": {
          "ref": "1c25411b-18f7-4a14-9ace-88cbbe6c5efe",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "82b68fbf-72c7-4050-980d-5cd840bdcaa5"
        },
        "item": {
          "id": "ee516b8b-fb61-41af-a84d-06aac636b943",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "7bf4b432-ab58-46b6-8ec5-c998fc829e23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7927f9a-0c62-4ef7-98a0-3cd7c252504f",
        "cursor": {
          "ref": "c9b3edcc-a17d-4214-b13b-9a5a4f0029fb",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "d3d9c3ed-903e-4716-b6b3-82086362eacd"
        },
        "item": {
          "id": "a7927f9a-0c62-4ef7-98a0-3cd7c252504f",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "c1950214-7ba9-406a-abaf-6e3da878a279",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14ae1add-47d5-4f5b-8af9-a35e75f6913f",
        "cursor": {
          "ref": "fea326e8-1e80-456e-9aed-e2fe2be1784a",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "1fa7e78e-6d6b-45c7-b228-1898a55e78c2"
        },
        "item": {
          "id": "14ae1add-47d5-4f5b-8af9-a35e75f6913f",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "bd5f80a7-f5d7-474d-bf04-dda1685db032",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "c96ec5af-ce78-4ad7-a9e9-0cb31cf9c399",
        "cursor": {
          "ref": "f1c42c46-c428-4d63-be8e-842dfdd7e3f4",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "74ad9c03-46e2-40de-ad6f-90114055e50e"
        },
        "item": {
          "id": "c96ec5af-ce78-4ad7-a9e9-0cb31cf9c399",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "5a403f57-d88d-407e-b7ad-5d956a94234d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "09a3a241-6118-4967-ade9-eab1f4d271fd",
        "cursor": {
          "ref": "4ad37b97-d1cb-47d6-9fab-e64a901b4f8f",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "bd3adb24-a041-4b2a-bfef-4ccfb05d4cd2"
        },
        "item": {
          "id": "09a3a241-6118-4967-ade9-eab1f4d271fd",
          "name": "credentials_issue"
        },
        "response": {
          "id": "757213ae-1449-45e8-8d6c-d735e3375e8b",
          "status": "Created",
          "code": 201,
          "responseTime": 670,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f354448-007f-4eba-ba9c-6d3979c0d393",
        "cursor": {
          "ref": "e004e74f-6cfe-4131-88a5-b1fe1a508090",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "7b218935-b66b-46e1-a8cc-28e55813e658"
        },
        "item": {
          "id": "2f354448-007f-4eba-ba9c-6d3979c0d393",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "c9233449-f397-43e2-9f0c-8edb3ff814f7",
          "status": "Created",
          "code": 201,
          "responseTime": 651,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "63b743eb-d8ed-4dd0-bbde-ef9cd1361af5",
        "cursor": {
          "ref": "ddd695f4-ee52-4c58-889c-758f5450bf77",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "a77827ee-82c2-440d-9439-79b15af586ad"
        },
        "item": {
          "id": "63b743eb-d8ed-4dd0-bbde-ef9cd1361af5",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "083660e3-40a5-492e-a922-520598230b1e",
          "status": "Created",
          "code": 201,
          "responseTime": 665,
          "responseSize": 747
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a944845a-2095-4a48-a9bb-68e5289e11ef",
        "cursor": {
          "ref": "61e7cfd1-2280-40ec-ad18-69c04eeb0a49",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "34fa3ccd-96d9-408b-a27a-ee95d5b0dabb"
        },
        "item": {
          "id": "a944845a-2095-4a48-a9bb-68e5289e11ef",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "5d5fb261-c34f-434c-90a0-b98c96e8de7a",
          "status": "Created",
          "code": 201,
          "responseTime": 643,
          "responseSize": 715
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "77a0de3c-110d-46fa-a140-aadbbec94935",
        "cursor": {
          "ref": "077e5f22-6f1e-4333-ad43-9fb6a75691bf",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "21303f74-a215-41eb-911e-d02686d24ebd"
        },
        "item": {
          "id": "77a0de3c-110d-46fa-a140-aadbbec94935",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "00110284-ba19-4eb2-b7f3-db10327a3f57",
          "status": "Created",
          "code": 201,
          "responseTime": 682,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1488137-1e56-4fc4-82b8-f2aec4d220e3",
        "cursor": {
          "ref": "b8db546b-4fb7-43b2-b760-36cc4b15790d",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "849eac85-971e-4d5e-b820-e94dc41e17f2"
        },
        "item": {
          "id": "b1488137-1e56-4fc4-82b8-f2aec4d220e3",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ee8410ba-a250-4503-8073-ebaf17cb7d1d",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "b1488137-1e56-4fc4-82b8-f2aec4d220e3",
        "cursor": {
          "ref": "b8db546b-4fb7-43b2-b760-36cc4b15790d",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "849eac85-971e-4d5e-b820-e94dc41e17f2"
        },
        "item": {
          "id": "b1488137-1e56-4fc4-82b8-f2aec4d220e3",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ee8410ba-a250-4503-8073-ebaf17cb7d1d",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "4f21912f-abf2-4117-a115-8fb42cf60a64",
        "cursor": {
          "ref": "53cde868-6f66-4a00-a8b8-a35c2563fc8b",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "b7c69739-28ae-497c-bded-ebb759ea928b"
        },
        "item": {
          "id": "4f21912f-abf2-4117-a115-8fb42cf60a64",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "32be51ed-0cce-441c-bf6d-387a19c42678",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "ed605b7f-439e-47e3-bebd-83ef4678710c",
        "cursor": {
          "ref": "789c523d-7595-477c-bff4-afddbf49434f",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "45d8dc2f-5f42-47d1-8ce2-d1330b490402"
        },
        "item": {
          "id": "ed605b7f-439e-47e3-bebd-83ef4678710c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "644d7b30-5d59-4345-82d8-7d5e6bcf4831",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "cb1e355e-87bd-45f9-a981-1212aa506cf3",
        "cursor": {
          "ref": "a7c23fc9-4e15-423c-adde-e5203162f22d",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "b705853e-504b-4df7-bb3f-11c73024a465"
        },
        "item": {
          "id": "cb1e355e-87bd-45f9-a981-1212aa506cf3",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "9471e344-dc3c-4c58-ba51-a040b6fab98c",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "c7516bdc-2989-4054-8ee8-486207786a19",
        "cursor": {
          "ref": "7c6a4b59-b168-4ae3-aa20-3da9e30f93de",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "7d434027-7910-4422-ae12-1d45c4681da9"
        },
        "item": {
          "id": "c7516bdc-2989-4054-8ee8-486207786a19",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "a0231cff-2d6d-44a2-9d4e-673b15233dc0",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "8d8d9d34-f38a-4382-a65b-129679b54e07",
        "cursor": {
          "ref": "99ddf68b-38f7-4b6f-9d6d-cbabc1d96781",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "44d0ff8f-f1a0-4f4a-aeb5-8543e597c27e"
        },
        "item": {
          "id": "8d8d9d34-f38a-4382-a65b-129679b54e07",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "f6222833-0c01-4a43-87d0-430e3ca71f2c",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "d679ae61-383e-4f26-9390-328a7d5b8236",
        "cursor": {
          "ref": "9244f0f7-9fd3-4502-9343-3614ce1a35bd",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "9d619953-5a1e-4f4c-aa2c-a07c2dc70ab3"
        },
        "item": {
          "id": "d679ae61-383e-4f26-9390-328a7d5b8236",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "b0f02af1-a670-4e8f-a4f9-f262afb68b0c",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "173dabc9-5d14-4ea1-9568-783a445ee221",
        "cursor": {
          "ref": "ea7b4a22-0c10-4a6a-8f80-ab18475de362",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "04b03e39-b4cb-474c-ab57-563c463f7f80"
        },
        "item": {
          "id": "173dabc9-5d14-4ea1-9568-783a445ee221",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "48015f6e-7bc1-4d52-a823-2e4149c40449",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "9f392146-060e-4682-b85f-9866db5f1b07",
        "cursor": {
          "ref": "983db565-ec0d-4988-a1f7-4c5838a26dce",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "b53635cd-bbd3-4068-91d0-173dac545bad"
        },
        "item": {
          "id": "9f392146-060e-4682-b85f-9866db5f1b07",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "e5d1374c-0ecc-430b-be44-8203ddd6f503",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "8397605e-c37d-420c-b2c8-7d32c323489c",
        "cursor": {
          "ref": "d55ea30b-2202-4720-9f2b-215c9d44ed21",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "c0c017c2-e95f-46c6-b753-70277943b66f"
        },
        "item": {
          "id": "8397605e-c37d-420c-b2c8-7d32c323489c",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "23417540-1154-47b6-832e-db9acb26af73",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "5b726d6e-86cb-4c8c-93a8-370bf6a3440c",
        "cursor": {
          "ref": "a33566c2-475f-4485-bdb8-ec8127fece0e",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "17e1f146-7d35-47b1-8027-a0b71868d564"
        },
        "item": {
          "id": "5b726d6e-86cb-4c8c-93a8-370bf6a3440c",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "61ec2b0e-f15d-478c-9cfa-8cd31ee173b1",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "7b5f5fbd-2ebe-4602-994d-6320267a6f08",
        "cursor": {
          "ref": "86b404bf-af20-444c-8c35-3f732e3beba1",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "7f1017f0-69c2-45be-885e-9575065aa227"
        },
        "item": {
          "id": "7b5f5fbd-2ebe-4602-994d-6320267a6f08",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "495ff21c-21a1-48bc-9c31-1d34c2007646",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "5f34f943-ba29-43bb-a6a0-5fc2dbc94804",
        "cursor": {
          "ref": "e5d36060-6a43-4f49-a9cb-5db561e50228",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "e509fa18-aafe-4490-a6ee-fd9cc244e11b"
        },
        "item": {
          "id": "5f34f943-ba29-43bb-a6a0-5fc2dbc94804",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "e007f871-4311-45b7-b527-d47bbbd9f3cc",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "a01f1210-6128-48c5-8291-949c82ca06b6",
        "cursor": {
          "ref": "b91b7ee7-609b-4e09-803e-e9e47faf36f8",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "4e80a121-d9c3-4742-be16-17ed514bf49c"
        },
        "item": {
          "id": "a01f1210-6128-48c5-8291-949c82ca06b6",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "de5127d5-763c-4486-b723-0f621241a539",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "3966ae4b-68ba-47f3-adb2-832c613a1277",
        "cursor": {
          "ref": "1b2761ec-23c8-41e9-8a1f-67d732b1b620",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "fe51cfb0-78c8-4923-abe3-b57d0c05e9d7"
        },
        "item": {
          "id": "3966ae4b-68ba-47f3-adb2-832c613a1277",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "fdc47302-3ee4-4d41-97d6-9ce1bcde0dd4",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "23143071-df56-4cf5-b3d9-2a25644aab3d",
        "cursor": {
          "ref": "1176c376-5445-489a-869f-3f2ff862b420",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "81c8de98-abe0-43ab-8c25-76a6331b112b"
        },
        "item": {
          "id": "23143071-df56-4cf5-b3d9-2a25644aab3d",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "45c685be-d28a-4134-97f4-19245e49ad8c",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "25b34f3d-9f9e-42aa-ae39-172a9c877fa4",
        "cursor": {
          "ref": "455052b6-a999-49a3-bfc9-da226f8efd9e",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "a0e79675-6318-4a12-ab31-cdeb4b02f9d1"
        },
        "item": {
          "id": "25b34f3d-9f9e-42aa-ae39-172a9c877fa4",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "4789364c-3e48-41e4-805f-39eff48cbd40",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "d86c378c-a7e7-4c1b-94eb-8684942d853b",
        "cursor": {
          "ref": "dc4c6574-be47-4bc1-b5bc-9ccc7c8fdcbc",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "5425a90f-b6fd-43c8-9097-acc8123ad82c"
        },
        "item": {
          "id": "d86c378c-a7e7-4c1b-94eb-8684942d853b",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "8ce57906-3b60-4621-912f-3749bd4d6289",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "4d6253be-ee68-4163-aaa2-ce39dc3b3b48",
        "cursor": {
          "ref": "acafd799-46c0-4086-9e9e-56dfae389835",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "10ab650a-7e20-4748-b6c6-77b95886312d"
        },
        "item": {
          "id": "4d6253be-ee68-4163-aaa2-ce39dc3b3b48",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "b976d862-bd37-4d6d-bc4a-b7510e04d459",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "4bc975e9-bcd6-47f7-a937-b81da86f6246",
        "cursor": {
          "ref": "60eff845-0055-4291-a601-7d41333fbe7b",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "19822015-666e-49c0-bad9-28277641f2ac"
        },
        "item": {
          "id": "4bc975e9-bcd6-47f7-a937-b81da86f6246",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "40fb8a1c-6548-4d76-8ab7-47ed2cd4d6c1",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "2dfeb45d-d862-458e-9b73-7022c25c10f4",
        "cursor": {
          "ref": "844da7d3-be56-46d0-b452-938872d5d750",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "b2b55194-644a-43c6-98b9-b78694f06442"
        },
        "item": {
          "id": "2dfeb45d-d862-458e-9b73-7022c25c10f4",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "05d8d83c-29c8-4738-b89f-9c12c43510ff",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "62b6805a-308f-408c-bd21-6af7c9cab358",
        "cursor": {
          "ref": "ceb39f72-bf8d-4890-a036-bd7186d73f82",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "290ada17-1a95-4ec9-a5c6-d97117e5b50e"
        },
        "item": {
          "id": "62b6805a-308f-408c-bd21-6af7c9cab358",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "4023a468-20cd-42bc-b30a-5917dd8b279e",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "1cd9b1d7-d8e4-40ad-967b-2fae5d71190d",
        "cursor": {
          "ref": "f9bf3f99-1029-495a-b0de-a3d7a9e7b63a",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "ada5736b-0e7c-4b9c-ae60-9d8062d40072"
        },
        "item": {
          "id": "1cd9b1d7-d8e4-40ad-967b-2fae5d71190d",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "3b5887f9-69f5-4ca7-8e18-584a3b27b6dc",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "0b901874-795c-4c3d-86d1-d69061de9411",
        "cursor": {
          "ref": "264e379f-afcb-4787-b015-381debc15681",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "1cab64f8-ff09-4f73-9a35-b916c79df4ce"
        },
        "item": {
          "id": "0b901874-795c-4c3d-86d1-d69061de9411",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "d5619344-dbc0-4296-8819-713312539052",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "c0e3fa6c-b075-46fa-8ac0-3e7be4c02071",
        "cursor": {
          "ref": "9feda9ea-9f82-42f5-b929-caa544ab5c70",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "d1626708-895b-45c0-b942-02163c7bfd43"
        },
        "item": {
          "id": "c0e3fa6c-b075-46fa-8ac0-3e7be4c02071",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c6d32161-61f2-4cbe-8db4-34f560b2a289",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "840429cd-34b0-4791-8489-e7da0ab70f1c",
        "cursor": {
          "ref": "7c072807-d661-4805-b1a4-c81120a3af34",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "6a0fcbb8-cabd-452a-93e0-0b03948a8d8e"
        },
        "item": {
          "id": "840429cd-34b0-4791-8489-e7da0ab70f1c",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "6e863145-17d3-40a9-af68-ebfd819893a7",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "2f91b3b9-2cbd-455b-803b-b8d51fe27896",
        "cursor": {
          "ref": "9689427e-b6a5-42e6-a400-b60f1e8d76bb",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "7377a510-ffaf-41d4-8b8b-9116906e0ac0"
        },
        "item": {
          "id": "2f91b3b9-2cbd-455b-803b-b8d51fe27896",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "526cedd5-412a-480e-86c9-0eb17ed6fb05",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "e69598d3-705d-44cf-a3d9-7000be0305f3",
        "cursor": {
          "ref": "d816b0ca-4042-4b7f-aa4c-10b382b90789",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "12e83a03-6236-4c92-b3bf-c4631993dbdc"
        },
        "item": {
          "id": "e69598d3-705d-44cf-a3d9-7000be0305f3",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "47bae1d8-99f1-4fe1-b39f-86367500f321",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "5824bbe4-88ca-4499-a461-4943f1301530",
        "cursor": {
          "ref": "f3b159b1-4bad-460b-9249-a5a075baa9c3",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "4d348b08-f480-4f38-b9ff-7ef294b55740"
        },
        "item": {
          "id": "5824bbe4-88ca-4499-a461-4943f1301530",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "3a686692-4c4b-4081-8a5c-bcbcda22f59d",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "db5bbbf5-b254-4e81-91ae-b1172ad90bb1",
        "cursor": {
          "ref": "db2904a1-aca8-4d47-8177-4d005c60877e",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "58cec309-09e7-46c1-94e9-42d4990d8667"
        },
        "item": {
          "id": "db5bbbf5-b254-4e81-91ae-b1172ad90bb1",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "cac677df-d10d-424a-a993-baf76953b054",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "ff23e5fd-6557-497c-b227-b512349924c2",
        "cursor": {
          "ref": "4ae8d859-f200-4c03-9d0f-8e3fddf6ab67",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "74458df8-277a-4113-b939-04f226faa6b2"
        },
        "item": {
          "id": "ff23e5fd-6557-497c-b227-b512349924c2",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "5b7a8e7f-fc4d-4ef3-ad11-40b470852358",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "20faf20b-ec38-444b-ada5-bb601073f1b0",
        "cursor": {
          "ref": "0f7e2b7d-b0b7-4723-919e-e9e59390e362",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "e37d83df-2a14-4a07-861f-11f60c062fd7"
        },
        "item": {
          "id": "20faf20b-ec38-444b-ada5-bb601073f1b0",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "01a6e0e8-37cf-41ec-aa30-49c444089275",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "b8fc68c6-23b9-49f8-b3ba-8c5e1a850d33",
        "cursor": {
          "ref": "ca6dadfe-418a-4706-9b4a-a6e1857616f4",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "e792c983-fa9c-4daa-bb3d-d3ede193d8b0"
        },
        "item": {
          "id": "b8fc68c6-23b9-49f8-b3ba-8c5e1a850d33",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "d0ac2e88-b4c2-4f39-9bd3-8b06f8dff712",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1e7f608-6dff-437a-b374-2d38d019c186",
        "cursor": {
          "ref": "9761c1eb-228c-4821-8d88-5671ad158558",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "a12830bb-c6e7-42fd-a62a-4224f8395689"
        },
        "item": {
          "id": "d1e7f608-6dff-437a-b374-2d38d019c186",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "fb41fc6b-3756-4869-b03b-92f81481f868",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "612adad6-2606-4c57-925b-359a6524fe22",
        "cursor": {
          "ref": "9b9a6592-82a0-4356-8c0e-14a4853493de",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "79bcf723-a9ee-41e2-83c2-015e93d3c887"
        },
        "item": {
          "id": "612adad6-2606-4c57-925b-359a6524fe22",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "e1aa6887-ca10-4d47-ae5f-901aa4de3b0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "612adad6-2606-4c57-925b-359a6524fe22",
        "cursor": {
          "ref": "9b9a6592-82a0-4356-8c0e-14a4853493de",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "79bcf723-a9ee-41e2-83c2-015e93d3c887"
        },
        "item": {
          "id": "612adad6-2606-4c57-925b-359a6524fe22",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "e1aa6887-ca10-4d47-ae5f-901aa4de3b0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50211af7-d32d-402b-b957-6cfe23644864",
        "cursor": {
          "ref": "8d487dc9-a4fd-4c6a-a586-f183306aa8d0",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "7c10c0ce-c5ca-47b6-b9e7-bd09516d3a9a"
        },
        "item": {
          "id": "50211af7-d32d-402b-b957-6cfe23644864",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "e5aa4b5a-ea9d-4cc1-9e30-de6b787de529",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c3e0d69-2a51-4aae-bf42-a2cdbca8e0e5",
        "cursor": {
          "ref": "bbff333d-f207-48c7-868a-521ff19af95d",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "81967bc4-5978-4480-93e3-2d99020e63b9"
        },
        "item": {
          "id": "8c3e0d69-2a51-4aae-bf42-a2cdbca8e0e5",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "ea4b612d-eda3-4a13-ad19-790605080e3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6736bda-fb4d-4971-9a42-7301eba48465",
        "cursor": {
          "ref": "f8afb461-59ff-41db-8a69-ff4120f04ca6",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "270033bb-5e5d-4e19-8ae1-d58550698510"
        },
        "item": {
          "id": "b6736bda-fb4d-4971-9a42-7301eba48465",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "c3f34fea-dba4-4e2c-8380-2cedb39a8796",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1da8e666-b712-4639-bf1b-2c3770029f8e",
        "cursor": {
          "ref": "550c9684-e8db-406c-af7f-3bb6fa782c73",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "c5cf3949-9ec8-4dcf-ac8c-4afe752d15b0"
        },
        "item": {
          "id": "1da8e666-b712-4639-bf1b-2c3770029f8e",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "068f6e61-fdd8-41fd-93d8-bd13611511fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18e5f23e-4743-4a78-bae7-218a4ff17dd9",
        "cursor": {
          "ref": "6a2de395-71b9-4689-89bf-76dca14091ad",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "4f64cedd-96e3-446e-b441-3bc6c6c3f924"
        },
        "item": {
          "id": "18e5f23e-4743-4a78-bae7-218a4ff17dd9",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "c988b93c-eb86-49bc-bdb4-de1e3b42f65d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ae3ff2c-b8e2-46b6-ac3c-c818ac711fde",
        "cursor": {
          "ref": "3a01371f-0ed5-46aa-a5dc-b61c33268e11",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "595108e9-6d31-442e-a12b-083f47bf6d2f"
        },
        "item": {
          "id": "4ae3ff2c-b8e2-46b6-ac3c-c818ac711fde",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "d2e53850-9c80-4944-99fb-e0cd1d751339",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 134,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52457a11-2715-4bea-bf19-b9269983fcd0",
        "cursor": {
          "ref": "2236a40f-08d4-4cd8-a588-3c01718ef43b",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "b4c36494-9ae0-4c5a-877b-a2503a159fa7"
        },
        "item": {
          "id": "52457a11-2715-4bea-bf19-b9269983fcd0",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "f846f80c-60cc-4117-9aca-550f74b529a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb7206db-b12c-4528-b994-a9b8a34e4497",
        "cursor": {
          "ref": "ec3f0318-6453-427e-8ef1-610c563f7729",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "196352ef-9dee-4a02-a21b-87c968635ee2"
        },
        "item": {
          "id": "eb7206db-b12c-4528-b994-a9b8a34e4497",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "cf5194ac-5117-46f2-a99c-7657d47ae47e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cb67935-602e-4672-bfcb-17b4fc765d7f",
        "cursor": {
          "ref": "bf3c4a31-420d-4ba6-8275-9976b824f190",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "4c33fcae-c39b-4334-bd22-2f8a495e822c"
        },
        "item": {
          "id": "8cb67935-602e-4672-bfcb-17b4fc765d7f",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "453aaa35-b36d-4f6a-83e5-f44367eb8e7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab7cada0-6d2d-42ef-bc49-d2807bdd2d93",
        "cursor": {
          "ref": "bc478022-9eae-48d9-907f-212326f379c3",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "9a92d1dc-3bfa-42e3-a7d7-6fb5ddf62a78"
        },
        "item": {
          "id": "ab7cada0-6d2d-42ef-bc49-d2807bdd2d93",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "d1507cb7-7541-4cd6-88cc-af8a188e54a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98d64c18-bed5-469b-81b3-c88dc4acd1d9",
        "cursor": {
          "ref": "33da0220-adac-4d7b-ab55-bb10828da16e",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "319818a3-5be4-4d89-afe3-4f131c8d99ca"
        },
        "item": {
          "id": "98d64c18-bed5-469b-81b3-c88dc4acd1d9",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "5769bfc5-5aba-4c8d-9951-3c4ceba5e911",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f08929f7-adfe-4b54-8560-1a3e890e4470",
        "cursor": {
          "ref": "5ac4666a-9984-4584-8783-2cc709872bca",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "ae353e07-7d37-4801-983d-fba0a3498f71"
        },
        "item": {
          "id": "f08929f7-adfe-4b54-8560-1a3e890e4470",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "0b507ec2-8470-43c4-bc29-cc35127f7a85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a6b5e33-f246-4b32-969f-3e97bd655938",
        "cursor": {
          "ref": "b53a253a-a8b4-454f-b8dd-42fc4f6a1c16",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "c4e30674-6ace-4894-9f06-60de144e2f57"
        },
        "item": {
          "id": "1a6b5e33-f246-4b32-969f-3e97bd655938",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "80d3519c-9545-48dd-b7fb-a8240f38e0d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10b6565f-9925-49be-9719-167f37fc9b23",
        "cursor": {
          "ref": "62476a5b-dce0-4909-8094-92c281b67bb9",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "a9b1d0fe-74f9-4a55-b4f0-186c1b5cbe4a"
        },
        "item": {
          "id": "10b6565f-9925-49be-9719-167f37fc9b23",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "a1696a64-02a1-4e75-9250-a2c655a51f23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2576c8bf-3cb0-4638-a23e-22bdaf1862c8",
        "cursor": {
          "ref": "8f33e9a1-56e6-4929-a85e-29c4f5588c8d",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "08e4d1c5-4661-4611-9820-9ba629707f83"
        },
        "item": {
          "id": "2576c8bf-3cb0-4638-a23e-22bdaf1862c8",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "6ec52663-839f-4789-b6d0-fb8f2f1b1973",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83507d23-9ec7-4a75-aa4a-740696436ec2",
        "cursor": {
          "ref": "993ef750-a40c-4484-8d12-bd761d2864f6",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "f768fdbd-54a5-47a9-82b0-3727c380d83a"
        },
        "item": {
          "id": "83507d23-9ec7-4a75-aa4a-740696436ec2",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "1514a3b3-f987-428a-9570-a6beed899d57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59746377-c67f-4927-8d27-ed0a81c474ec",
        "cursor": {
          "ref": "e0fadbc5-bf34-4e5a-b1fb-a69767c9dedf",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "fd558ac6-f79c-425b-9810-4f5bf83d7fdb"
        },
        "item": {
          "id": "59746377-c67f-4927-8d27-ed0a81c474ec",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "75ff7e41-6f98-4897-8b12-6eacdc196951",
          "status": "OK",
          "code": 200,
          "responseTime": 570,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "971966e2-55c1-4a3a-a06e-351294f8e479",
        "cursor": {
          "ref": "c9996aa7-3991-4e5c-8f3a-9b8528e5ed45",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "0fd2ea1f-424e-48ca-a3d1-24b0fbfc815d"
        },
        "item": {
          "id": "971966e2-55c1-4a3a-a06e-351294f8e479",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "fe48effe-b3c8-43b4-af46-e67fa048f1dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 281,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eef8c48-0460-412a-a6e0-b5d23cc79bc0",
        "cursor": {
          "ref": "3f136aca-f64a-452c-afd7-32e3fec7fe6c",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "693f8b06-a74b-423d-bd48-1d590c04a994"
        },
        "item": {
          "id": "1eef8c48-0460-412a-a6e0-b5d23cc79bc0",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "50066899-c4f4-4c5b-855d-f6235717d8b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 283,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73f1c687-f96a-4a86-b45f-b57ee0c92e6a",
        "cursor": {
          "ref": "01f1123b-22d1-441b-a00f-5b3648311e7c",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "74c1869f-6993-441c-b1a8-cf55542ec097"
        },
        "item": {
          "id": "73f1c687-f96a-4a86-b45f-b57ee0c92e6a",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "1833406c-cd92-41fc-a550-5cf1cbf7ca3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 275,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3c1383d-9aa6-4499-a564-4703751595d4",
        "cursor": {
          "ref": "0fe89bff-1660-4562-aeec-147cc16ffe2d",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "71d3a239-92bd-4e6b-9243-2a29c4da1f4f"
        },
        "item": {
          "id": "a3c1383d-9aa6-4499-a564-4703751595d4",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "705d8328-72cb-4a49-b257-cf6d2edbd796",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 296,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b3b0044-0043-409a-8fff-e2e077fb03ae",
        "cursor": {
          "ref": "9e8d69aa-8033-4ddd-be42-8c853dc4f4ef",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "d4cc3732-ae01-46a5-bbb7-19e4ae796e5d"
        },
        "item": {
          "id": "5b3b0044-0043-409a-8fff-e2e077fb03ae",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "10b09c1b-236c-4755-81e5-9d47998730b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 283,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4815bb64-4672-4c10-8462-d7a426a9a3c5",
        "cursor": {
          "ref": "bc204f7c-2b1f-421c-a7a6-be0049adf618",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "010f63e2-7ab1-4318-9c3a-2dd010f12ccd"
        },
        "item": {
          "id": "4815bb64-4672-4c10-8462-d7a426a9a3c5",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "dbe00abe-1c7b-4705-bd9f-fff0f1030119",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 286,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fe70186-a0f7-4b9e-9915-7cbe103e2637",
        "cursor": {
          "ref": "7ef2427d-ef3f-4122-a2c4-463c102e6a53",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "88f733ae-9f69-42ba-b1f2-ec707b9cdef2"
        },
        "item": {
          "id": "6fe70186-a0f7-4b9e-9915-7cbe103e2637",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "52573318-7e14-4b71-a30b-5c9dcb21260b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e3b2f90-4b83-4661-96b6-894405783f59",
        "cursor": {
          "ref": "01efcbe1-78b0-470e-8da8-36a00caf14fe",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "71b1cabd-0736-4480-98bf-674105f70033"
        },
        "item": {
          "id": "0e3b2f90-4b83-4661-96b6-894405783f59",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "6bb2ddb9-c511-4bd0-bc81-cd3eefdf077d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2babb5e-e770-4cac-a172-b727a176ec11",
        "cursor": {
          "ref": "9a16daed-439d-4390-8308-2b3c6b836460",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "b91c5279-1086-4b9b-9f69-4035dfdeae66"
        },
        "item": {
          "id": "b2babb5e-e770-4cac-a172-b727a176ec11",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "338353cd-a08c-4158-a2e7-57490d9f471c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 263,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df2eb6ca-0e67-4c68-b271-a1157e8a19b9",
        "cursor": {
          "ref": "d8e75a14-d0cb-49aa-a687-65fd6c150152",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "caa32de7-24b5-496c-9f39-8bf6c74a83d9"
        },
        "item": {
          "id": "df2eb6ca-0e67-4c68-b271-a1157e8a19b9",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "39e547a1-50f3-4463-b77f-73c7d9c5e8e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc5e7fb1-70e9-4706-a579-ec079bb8f2f0",
        "cursor": {
          "ref": "b301ca00-a758-454c-83f5-c86c53bca3de",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "8e1058fe-8080-4e01-bc0c-e1f2c3d9d0a4"
        },
        "item": {
          "id": "dc5e7fb1-70e9-4706-a579-ec079bb8f2f0",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "9e90a328-0971-4191-a000-058b105df00d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9562d9c1-583d-4e1f-a1c2-7f8aa83f9fbd",
        "cursor": {
          "ref": "be4904b4-56fa-4b4d-a98b-f16a150eb33e",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "14413ec1-2240-4dc0-816a-beff0622ea10"
        },
        "item": {
          "id": "9562d9c1-583d-4e1f-a1c2-7f8aa83f9fbd",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "9a821919-070a-4a22-85b8-ce010501d272",
          "status": "OK",
          "code": 200,
          "responseTime": 252,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "76cd1991-cb35-456b-b0ef-c7e28616c0fe",
        "cursor": {
          "ref": "f6385e91-dbe7-42c1-a6e5-aa300eeede08",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "c68c2bb4-49f1-4f23-9f5e-3befd1b86086"
        },
        "item": {
          "id": "76cd1991-cb35-456b-b0ef-c7e28616c0fe",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "8c4d060a-ca97-430c-b5cf-e43d57b21c2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d088d2b3-e9de-4186-aa76-d6927d94ef8f",
        "cursor": {
          "ref": "0ea6ad9c-5f25-4ea2-a61f-1bdd7465a111",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "c63f5b34-4699-4325-aa0d-4956863a93bd"
        },
        "item": {
          "id": "d088d2b3-e9de-4186-aa76-d6927d94ef8f",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "059c51df-f650-4268-86ff-7569515e7b71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66c6a400-84e6-44ea-a1d7-52569d4d7412",
        "cursor": {
          "ref": "7d9c439f-c703-4912-aa29-aca2ca39897b",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "258f6b94-8033-4789-afa6-fef83ab0f18d"
        },
        "item": {
          "id": "66c6a400-84e6-44ea-a1d7-52569d4d7412",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "1df0f60e-b3d5-4117-a533-9e426a58d971",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1d06cd2-69cb-404f-9531-e4132def063d",
        "cursor": {
          "ref": "0de7085f-561e-459a-aeea-667a3ccf1522",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "11377a4a-423e-4522-8995-9b26fc6e7103"
        },
        "item": {
          "id": "e1d06cd2-69cb-404f-9531-e4132def063d",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "3bee711d-4357-4e7a-bffa-34445caaaa34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 246,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a022fa2-339c-432a-a0c1-a468b8d40f60",
        "cursor": {
          "ref": "6f24ff48-1822-40ab-b7fb-389ab22ee946",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "fc8987d0-471c-4e61-ae76-db22ee3896f5"
        },
        "item": {
          "id": "3a022fa2-339c-432a-a0c1-a468b8d40f60",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "966d634a-f468-4cd0-9624-3d2a5a773736",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f967ae8-c80b-4f3c-b023-851c3ee94f88",
        "cursor": {
          "ref": "492c5f58-7f96-46c4-aa8d-8c4f720fa9c7",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "5537cda6-a96b-4792-ab8b-1320c8716540"
        },
        "item": {
          "id": "8f967ae8-c80b-4f3c-b023-851c3ee94f88",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "0e89ceac-b742-42f3-adc0-500f12bc2ef3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 270,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3160bfed-1bc1-4425-ba88-01cc9f94e3f2",
        "cursor": {
          "ref": "0798dd35-62e3-46c3-8f65-decc163548fa",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "a5de1c29-fc74-4d9e-b15e-ead81e9e8743"
        },
        "item": {
          "id": "3160bfed-1bc1-4425-ba88-01cc9f94e3f2",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "78703a8c-ccff-4ed0-9f98-bb44dae1af67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 293,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "481e24a6-9de7-41cd-ba4d-06622e5cbd49",
        "cursor": {
          "ref": "53b56f8e-4a89-414d-b7c0-9feca66b25f2",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "97394125-af99-48c6-a00b-b5c0ff3094cc"
        },
        "item": {
          "id": "481e24a6-9de7-41cd-ba4d-06622e5cbd49",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "9385c65a-d88c-45c6-b1b3-87713f895c39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 270,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64ea8205-1ecd-4c4b-84b7-df777ebc82c3",
        "cursor": {
          "ref": "45ed0da3-8945-4158-a5b9-c0256ea6829e",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "61a2b1a4-5317-4ab8-b345-fd5a27a89cfb"
        },
        "item": {
          "id": "64ea8205-1ecd-4c4b-84b7-df777ebc82c3",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "8fdabf00-7c01-48c5-af5a-25480b97218c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 276,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e11dea43-3d77-46fc-9323-c97d834ae420",
        "cursor": {
          "ref": "affb8448-5c50-459b-9aa7-950024eb3ad1",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "3cfd10f8-067b-4672-89db-b4e1355c04f8"
        },
        "item": {
          "id": "e11dea43-3d77-46fc-9323-c97d834ae420",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "240f2fc2-7908-475a-8ebb-636bd81b3df2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 630,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "335fee99-6143-462b-8eb8-2c91eefd45a4",
        "cursor": {
          "ref": "d474ae89-3a92-43a8-bbcb-ff77cacd5d2b",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "42088aa5-c3ba-493c-bac0-253400ee7825"
        },
        "item": {
          "id": "335fee99-6143-462b-8eb8-2c91eefd45a4",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "7e6a77a7-991f-4c06-b0e9-fe7342d4c358",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 294,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27558f4b-fed9-4db8-a14a-eac9b22f71f3",
        "cursor": {
          "ref": "21b26d1c-479e-40b6-8f09-6d2d6e45524c",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "9ed23bd9-3ef9-48df-8114-461223082fb5"
        },
        "item": {
          "id": "27558f4b-fed9-4db8-a14a-eac9b22f71f3",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "81be4fc7-0ee7-4427-900a-62c8bae51c8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 322,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc38a370-2cbe-412b-bca9-8ab332b94b14",
        "cursor": {
          "ref": "c4bebb86-1159-4394-bb68-b3851ca06ef8",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "eaf70ab2-0164-4df4-bb87-a42de4c7cc2e"
        },
        "item": {
          "id": "dc38a370-2cbe-412b-bca9-8ab332b94b14",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "35819cad-cd72-40b4-b0d4-59c86ba47351",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 282,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87d776bf-63bb-4ad2-bcb2-48d2ba30020d",
        "cursor": {
          "ref": "2b6888c9-5355-4c8b-b5b0-455e0b72c040",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "e352874a-4422-4d99-9fba-334bd402b7dd"
        },
        "item": {
          "id": "87d776bf-63bb-4ad2-bcb2-48d2ba30020d",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "0ebd6c1a-72c0-4342-a1e3-b4e0431007bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 263,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "072a1fdf-9222-4461-8e98-4b37b02b57ee",
        "cursor": {
          "ref": "d1ffd1d3-ca85-44d4-b902-f75075149f46",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "cdd0dbff-cb37-4bae-8443-77936b0e7b6a"
        },
        "item": {
          "id": "072a1fdf-9222-4461-8e98-4b37b02b57ee",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "b74bf8de-72b4-4aaf-8d09-aa7b9f2cbddd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 274,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc3719ff-3a5e-40a5-bce4-751fbd2974f6",
        "cursor": {
          "ref": "8de62957-44e0-448a-bb09-81c8c316204f",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "8eb04487-1637-4392-99be-8b99fd18a5af"
        },
        "item": {
          "id": "fc3719ff-3a5e-40a5-bce4-751fbd2974f6",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "e5867f0f-2f5c-4788-acad-5fc49a8bf979",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 263,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5346cf40-8f51-4a4f-9ed4-8f9bfbe5d21e",
        "cursor": {
          "ref": "bb5461eb-d63b-4778-a743-fbd2f75ae6d8",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "e2c9c3c9-9baf-4082-8236-ad477a1f5c31"
        },
        "item": {
          "id": "5346cf40-8f51-4a4f-9ed4-8f9bfbe5d21e",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "0ba0ff12-3a40-4617-a319-7429bdfc071c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 305,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95c6e8dc-5830-40ca-918a-ca3a9a306469",
        "cursor": {
          "ref": "33ffaf87-c628-47a9-801e-5ae90f444e7e",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "cb314041-0c6c-4a22-a22a-d96ca172e227"
        },
        "item": {
          "id": "95c6e8dc-5830-40ca-918a-ca3a9a306469",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "ecf743ac-fcb6-4ee8-b2db-b3763633125f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 315,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8429ef3a-a493-4799-917f-b926354b6239",
        "cursor": {
          "ref": "dcebb9b2-b5ac-44bd-9dde-64db32e94bb7",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "beddd86c-2e1c-4fb8-81ec-010f269272ee"
        },
        "item": {
          "id": "8429ef3a-a493-4799-917f-b926354b6239",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "80a79eb1-ba14-4ede-b101-39b155efed58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 465,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f0a4729-80c5-429d-beba-596caa553580",
        "cursor": {
          "ref": "a6d5dd22-6eba-40d0-8836-f95f4fe81fbd",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "48edfb3c-e4f7-4db0-bb66-2336434d6059"
        },
        "item": {
          "id": "5f0a4729-80c5-429d-beba-596caa553580",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "5f41a875-b7d3-4ad6-9720-7110e1ec510a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 304,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c445b045-b997-44fa-b3b5-2ff389b739a0",
        "cursor": {
          "ref": "74924fe7-ab16-465e-9f26-172c4480069f",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "8a544a51-dff4-4977-b73e-41217a663119"
        },
        "item": {
          "id": "c445b045-b997-44fa-b3b5-2ff389b739a0",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "b8aed0d8-84cf-4bd5-bff3-e88591e36854",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 259,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "367e42fe-a842-46bb-9fcb-39bb59534cc0",
        "cursor": {
          "ref": "24e6e546-0d9d-42d9-8975-96e2ca054d39",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "ca232bef-88be-46b1-890f-dc84848b20ac"
        },
        "item": {
          "id": "367e42fe-a842-46bb-9fcb-39bb59534cc0",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "bb12081e-fff8-4cd5-8bd9-87bdd1667aea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 277,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "543b3701-2da2-4d5e-849e-d015f91b060b",
        "cursor": {
          "ref": "4069a277-8156-4c5c-a8c3-e99db04ecdf4",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "15f0996c-952f-4548-b257-80fb5cdd9ae7"
        },
        "item": {
          "id": "543b3701-2da2-4d5e-849e-d015f91b060b",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "0b7984f4-1867-4e19-8f11-41458c891685",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 313,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b872a2a9-afb6-4801-a9a4-d246de8075b4",
        "cursor": {
          "ref": "77ee11a8-0a49-4936-b772-2a1ea2a12c75",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "4e79f387-6425-44ae-9dd9-bfff9537b51c"
        },
        "item": {
          "id": "b872a2a9-afb6-4801-a9a4-d246de8075b4",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "f40d9a8f-9d7a-4f8d-931d-36c265ecf16a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 269,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e472ba41-4022-4a74-aa49-524f3a0f351b",
        "cursor": {
          "ref": "29bd9051-51f5-48ed-8680-1b56fa40edd0",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "b2f47323-2953-43f8-9576-d31bf39acde3"
        },
        "item": {
          "id": "e472ba41-4022-4a74-aa49-524f3a0f351b",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "7dfe2ef0-7d79-4f00-a41d-bf3a0e3c81b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b38875eb-0f63-475d-8f62-ba6739c4d5fb",
        "cursor": {
          "ref": "83edf164-20f5-4e66-9e9a-98ab045ee3f2",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "58ca3468-ae61-40e3-96b1-dc829f04467b"
        },
        "item": {
          "id": "b38875eb-0f63-475d-8f62-ba6739c4d5fb",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "f3dcd598-3c8d-4c90-bc74-a17c7ad7e296",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34bec9a6-d989-43dc-a563-4a500c1fb860",
        "cursor": {
          "ref": "0b802637-fd65-4198-bd50-9d2808037c61",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "cb2f8fb4-401d-4520-a559-d29a3e35e624"
        },
        "item": {
          "id": "34bec9a6-d989-43dc-a563-4a500c1fb860",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "cee9f65d-42a6-4a2a-9705-62a178f1cd49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adc49dac-bf07-4a8a-a16a-43375defc5d4",
        "cursor": {
          "ref": "060152e2-966d-46e2-b4d7-2a9aeecde593",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "43b137f4-513b-4083-889d-22f8c9046b55"
        },
        "item": {
          "id": "adc49dac-bf07-4a8a-a16a-43375defc5d4",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "f0e143ce-1dc3-49b0-b55d-bd40792c34ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 296,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69c8ac5b-3ae0-441b-acc3-dd3f2d5b96d9",
        "cursor": {
          "ref": "a9e250c7-5ee5-4aa2-aaff-7b398470fbe2",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "0681398e-d79e-45cb-9c60-da060247848e"
        },
        "item": {
          "id": "69c8ac5b-3ae0-441b-acc3-dd3f2d5b96d9",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "eaf854dc-a3ec-41d2-9180-657d61ce7340",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a66d26c9-ce3f-44b5-b3dc-4b8556c16026",
        "cursor": {
          "ref": "4f56562e-c57a-4d9d-bea9-6c53b885aced",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "34db4fbf-f658-4af1-bc05-9c7b341f3059"
        },
        "item": {
          "id": "a66d26c9-ce3f-44b5-b3dc-4b8556c16026",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "757ced8c-d959-4883-a771-c493b9db8cd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae427d06-5518-4f5a-a67f-7d7a078b8d46",
        "cursor": {
          "ref": "aab2f314-2758-4833-b350-91445797cd4a",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "b3b5a880-1687-4cc2-b9e6-e79b07e41d06"
        },
        "item": {
          "id": "ae427d06-5518-4f5a-a67f-7d7a078b8d46",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "3ad3ca26-8161-453c-8cd1-9ab5e9bb1022",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db07b1ad-90b8-4c9c-824d-50e7b0ea7a62",
        "cursor": {
          "ref": "cd0a975e-ba27-4c28-aae7-fe23508ecd90",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "e4b36a8c-a72f-4422-8f1e-f747a78e5af2"
        },
        "item": {
          "id": "db07b1ad-90b8-4c9c-824d-50e7b0ea7a62",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "18c51407-218c-4720-ae6c-e01ba2594baf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e64212c-0ca0-4ffe-86ec-aa4d49d3efd0",
        "cursor": {
          "ref": "bd92783a-2d39-451e-813c-69907b760fa3",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "b6e6ba56-4f59-4d0c-88fd-9999746872c1"
        },
        "item": {
          "id": "3e64212c-0ca0-4ffe-86ec-aa4d49d3efd0",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "b75a478a-1b2e-48df-9ae5-edffe040115a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 288,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbe43051-712a-4f15-9692-3875a1d25b74",
        "cursor": {
          "ref": "2afb6af0-7547-4229-95b7-70d0f98c34c9",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "e033e78b-897d-40f8-b75b-63d318d97d01"
        },
        "item": {
          "id": "cbe43051-712a-4f15-9692-3875a1d25b74",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "3cad1fe0-bcbb-4525-9aa1-819785a0251b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69f63249-44bc-4979-8eed-db3909d9a778",
        "cursor": {
          "ref": "bd8d48bc-a7b0-4bfe-afbf-125461e0f23b",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "dd03b145-e132-49ab-8019-c1b79cebe7d4"
        },
        "item": {
          "id": "69f63249-44bc-4979-8eed-db3909d9a778",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "a6225819-0018-417c-a290-70deb8e743d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "656ece2d-ed16-4020-907d-318ad01b9bc2",
        "cursor": {
          "ref": "3273468a-4faf-4b70-88e5-bdc7300366f6",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "95ca94af-0939-4405-b998-f356326bc19e"
        },
        "item": {
          "id": "656ece2d-ed16-4020-907d-318ad01b9bc2",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "d93e074f-7f73-462c-951b-bc9e6ba0e8ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f858113f-2fc2-4e46-9657-94df11931cb2",
        "cursor": {
          "ref": "acb82b46-3587-43e4-910f-f87d549b3c36",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "ac821d83-43df-4c7c-8dc3-3408949b7408"
        },
        "item": {
          "id": "f858113f-2fc2-4e46-9657-94df11931cb2",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "9e5b0067-ed6d-4511-9524-e432c3378ee5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14fe7f8b-774f-40a7-98d8-2d9063dc8f7c",
        "cursor": {
          "ref": "bc4ab341-f229-47d2-8d7c-a44eda7b47d2",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "5326d2f9-4dbf-4033-b34a-1950ac102f9a"
        },
        "item": {
          "id": "14fe7f8b-774f-40a7-98d8-2d9063dc8f7c",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "bf679342-6a8f-4ab7-b33d-db1eb30fe355",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81deff13-a5f2-4ad4-bf3f-ad22fbeb35ba",
        "cursor": {
          "ref": "5f21f8cf-a3d0-4980-9902-0ddc428cd517",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "9eb481d3-e2cf-44ea-a8a0-a515a6cc03d1"
        },
        "item": {
          "id": "81deff13-a5f2-4ad4-bf3f-ad22fbeb35ba",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "0085a124-b076-44f0-83b1-b54a573075f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4df345fe-0d7b-40a7-9daf-10961be8f802",
        "cursor": {
          "ref": "7df99dbd-c11a-4c1c-8e4d-fbc7878a06be",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "5375db57-fe3a-4f9d-86da-fe87ae8e9ff3"
        },
        "item": {
          "id": "4df345fe-0d7b-40a7-9daf-10961be8f802",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "cc9962fe-8fce-4930-b20b-712ac9a2ccf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56e4e56c-8744-4a1f-bd44-f129783dfe75",
        "cursor": {
          "ref": "c55311db-f5de-45cf-8ddd-f3ffde397bb9",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "315823b9-d2bc-4951-b866-57bf3eb5a29d"
        },
        "item": {
          "id": "56e4e56c-8744-4a1f-bd44-f129783dfe75",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "0d89600c-f97c-443a-bd69-b76af93e86b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "218a4145-3e98-4faf-8ae3-3b679ceb3f6d",
        "cursor": {
          "ref": "7a23ec00-7e90-4d1e-8d43-dddae3f9f1de",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "7ee80960-e85d-4d86-b869-974aca34a1d9"
        },
        "item": {
          "id": "218a4145-3e98-4faf-8ae3-3b679ceb3f6d",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "6f076f92-c7a2-4553-8769-55b4b5fdfdd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f70bd0e-006b-4042-9f99-60ae6192296d",
        "cursor": {
          "ref": "44e67bc3-d131-4100-9c23-d1c58e83b345",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "488b25fc-3172-4b09-8705-f45a5064c931"
        },
        "item": {
          "id": "5f70bd0e-006b-4042-9f99-60ae6192296d",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "a98d53b1-5139-46c6-8cbd-3409344a4f6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22c2c2e8-14e1-48cc-bfa1-f19b7a4b2298",
        "cursor": {
          "ref": "24028452-97c5-4590-a181-03b075c48005",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "91f00499-0b9d-46ee-b10e-5c0880ae847b"
        },
        "item": {
          "id": "22c2c2e8-14e1-48cc-bfa1-f19b7a4b2298",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "518750bc-d3de-4eb3-86c3-f6d868f01007",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e343a903-b4bb-4c8b-9139-d2872e6ea0e0",
        "cursor": {
          "ref": "1724d413-8a5d-4855-8458-6be2b255116e",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "074ce742-31c5-47d8-8283-712728b153f2"
        },
        "item": {
          "id": "e343a903-b4bb-4c8b-9139-d2872e6ea0e0",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "544fdef6-533a-4f0c-9351-503cf1f09ec2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0192332f-e559-4999-b10f-72daecf4c787",
        "cursor": {
          "ref": "7aecf13a-89c7-4a41-8764-4ffeb91a9094",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "150dd992-677d-4adf-a93c-412865f54980"
        },
        "item": {
          "id": "0192332f-e559-4999-b10f-72daecf4c787",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "b5ac9901-b9d5-4296-a499-773cf3b695c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c0b01c1-5bde-442e-b2ee-20679d549641",
        "cursor": {
          "ref": "648acc38-7eee-4b12-a282-bd6992e78e03",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "e2b099cb-9a54-425a-8114-398d86fdac0d"
        },
        "item": {
          "id": "2c0b01c1-5bde-442e-b2ee-20679d549641",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "5aa5269c-2710-4d0a-81b2-4dd4715d461e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecc25f26-fafd-47c4-86a5-91a2b93a1db5",
        "cursor": {
          "ref": "6e96fefd-5bce-43cc-99d4-5d5a471210ad",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "2a703447-dfc7-45b7-9c6d-22b5f60a50ef"
        },
        "item": {
          "id": "ecc25f26-fafd-47c4-86a5-91a2b93a1db5",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "15cfcba7-efd9-4916-9c39-399882ba65c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d131c5a-c42d-4922-be57-5e2d94ee1f0b",
        "cursor": {
          "ref": "1e989669-9e43-43b8-9484-c6c33a4c1fec",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "bbe6cec5-9683-4c9b-9993-361ef60a748e"
        },
        "item": {
          "id": "1d131c5a-c42d-4922-be57-5e2d94ee1f0b",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "ad447e20-f07f-4165-b57d-465c58c16787",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29461c90-bb31-44ca-b5fe-eb7e44f7030c",
        "cursor": {
          "ref": "c51561f4-8dbf-44a0-9b05-bfee92e34165",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "51f94c55-c607-4441-8d3a-1061322021c4"
        },
        "item": {
          "id": "29461c90-bb31-44ca-b5fe-eb7e44f7030c",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "3a8e8435-1979-4e82-b17c-c82af1aa44fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "456a70e8-917d-4fd4-ba04-b54162b45063",
        "cursor": {
          "ref": "00ce0ab2-35ff-42be-b90c-4b90c8502479",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "3380cc6b-470f-4436-9d9a-8a0ae185b902"
        },
        "item": {
          "id": "456a70e8-917d-4fd4-ba04-b54162b45063",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "1e012c2a-814b-46eb-8f40-4f10552844f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffb6b298-bc3e-4b9c-861b-8c3150e021d5",
        "cursor": {
          "ref": "6ae8d6bf-265e-46a3-b89c-7d1074c35e36",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "13af4cde-3aaf-49ca-9847-a6e603ba21a0"
        },
        "item": {
          "id": "ffb6b298-bc3e-4b9c-861b-8c3150e021d5",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "0971e780-b5a3-4fa2-9ec7-c51be0b652a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0526bf45-3ec7-40e2-84c0-cdc98921ef25",
        "cursor": {
          "ref": "725c11b2-e531-44d1-84dd-87c8cd9e7fda",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "92f87162-adc8-408c-b12d-da4047daf5fa"
        },
        "item": {
          "id": "0526bf45-3ec7-40e2-84c0-cdc98921ef25",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "8d7c9e6a-0b14-4f24-9baf-617583de3d46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb936c5e-83a1-4f3d-a349-a210c48a4103",
        "cursor": {
          "ref": "8941cc1c-bee8-4e26-b5b7-a938e63656d6",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "bbcc8d10-b6e6-482e-9e6d-88803d570899"
        },
        "item": {
          "id": "bb936c5e-83a1-4f3d-a349-a210c48a4103",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "082490dc-8ab7-4f82-92aa-3632ea19b464",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c3981be-2f16-40ae-8acc-5aa3d0ddf7a9",
        "cursor": {
          "ref": "14a5eeee-edda-4bbc-b246-510b408ceca9",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "17730cb9-fa01-4d35-ae66-141da8014770"
        },
        "item": {
          "id": "3c3981be-2f16-40ae-8acc-5aa3d0ddf7a9",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "9e5e1382-7cbb-4b01-8434-cbdf93d7ce08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f66c03ae-b590-4e15-b019-75c76e4d83a9",
        "cursor": {
          "ref": "8d4675c2-b6e1-44c6-8331-385ee4715c73",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "aef997de-dd26-4209-a706-88e3f9f7eb2c"
        },
        "item": {
          "id": "f66c03ae-b590-4e15-b019-75c76e4d83a9",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "9d136f23-f763-45f4-8ce1-5d72060566b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89fa9cab-03cb-46f1-995d-af5891a0c866",
        "cursor": {
          "ref": "7c12272b-873c-44d4-be24-777e2cb5a057",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "31f66f10-f4d0-4418-9118-1af324a68ff0"
        },
        "item": {
          "id": "89fa9cab-03cb-46f1-995d-af5891a0c866",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "f94192fd-fc79-4a63-9492-229da650a0ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "460225eb-215d-45a5-bcda-41dffcda2010",
        "cursor": {
          "ref": "f72eb20b-907d-4f09-9d56-37481e434e29",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "5301f22e-f418-4980-b8e7-19a69f174b84"
        },
        "item": {
          "id": "460225eb-215d-45a5-bcda-41dffcda2010",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "35b9841b-d0fe-4975-9ccb-3bbd221062e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0dbb53d-5a04-4b9b-9ca0-33d9418dc960",
        "cursor": {
          "ref": "5f954a27-78bd-4614-87f6-4420b0229a49",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "0b801554-bef9-41e2-bc23-8364c7e06edd"
        },
        "item": {
          "id": "d0dbb53d-5a04-4b9b-9ca0-33d9418dc960",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "f30c5e90-3478-4f70-8bc2-cde09e55eacd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8498ae42-4277-481b-aeaa-a0ccf0aa15ed",
        "cursor": {
          "ref": "c2b81a1b-b576-4a30-8e4d-ae98a90cd42b",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "906c44e2-10c9-4e7a-8f20-76549dc386ca"
        },
        "item": {
          "id": "8498ae42-4277-481b-aeaa-a0ccf0aa15ed",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "5304aa0c-85d8-4018-b32d-4dba0e692922",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d5b77c5-8bf3-4b2f-b0ca-621b21573884",
        "cursor": {
          "ref": "4ef43ec4-23d7-40f2-a2e9-ffe26ed93db5",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "86da2ddf-71df-42b6-bbac-460f6f42fccc"
        },
        "item": {
          "id": "3d5b77c5-8bf3-4b2f-b0ca-621b21573884",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "274795ac-290c-4a41-a8f2-33479d678506",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa912658-6455-4920-a103-d55910f8b357",
        "cursor": {
          "ref": "e2d4ee6f-88c8-42ff-9404-d929f625d76c",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "2fb0af6b-8d29-4f7e-888f-aed1a1986b05"
        },
        "item": {
          "id": "fa912658-6455-4920-a103-d55910f8b357",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "f58eaff9-8e59-400a-b98a-f303794feae1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1515dc9-0260-481e-b3de-676edadf5755",
        "cursor": {
          "ref": "bb7310e9-5b92-425f-b7c6-e19b090ba67c",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "087d802a-77db-4678-bf58-1e2936081f21"
        },
        "item": {
          "id": "f1515dc9-0260-481e-b3de-676edadf5755",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "4b45a022-cf03-4bf4-ae89-f34c79a173f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef375c57-1324-4f02-928d-8d4030f64406",
        "cursor": {
          "ref": "1c552ec0-4a69-49b0-9892-612ce3db2fbf",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "d6266476-1fbe-41bd-ad56-9d906f54930a"
        },
        "item": {
          "id": "ef375c57-1324-4f02-928d-8d4030f64406",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "62329453-d8bc-4358-a9af-ee0b53e7c744",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e73a81f-4286-4f2a-82bf-42589497d676",
        "cursor": {
          "ref": "03b84184-6966-4b07-ac45-5c64cedbdcbc",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "92e44bd6-4f6b-44a3-a07c-d8bfb647eb67"
        },
        "item": {
          "id": "0e73a81f-4286-4f2a-82bf-42589497d676",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "234ba247-ecb8-4a48-b313-3f8601992e32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5b6e8f8-7bc5-4deb-8bd7-3ec947903fe3",
        "cursor": {
          "ref": "35acbf71-feeb-4b83-912b-bbf59b9cef91",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "a32401d4-3aaa-46cc-ba87-ff19a6c9fe52"
        },
        "item": {
          "id": "f5b6e8f8-7bc5-4deb-8bd7-3ec947903fe3",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "d0aa5951-f34c-4ddb-839c-ff328338923c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7af6a90-2f29-4d16-867f-cb4142b1a259",
        "cursor": {
          "ref": "d71e9dbb-2966-4cfd-9408-7b5d8fefc2e2",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "0fa0ebcc-27d6-4390-9aa8-1a61c1287a89"
        },
        "item": {
          "id": "b7af6a90-2f29-4d16-867f-cb4142b1a259",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "3dbc8f12-23a5-41eb-abab-d1b0b0ae2468",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf2b6e0d-4966-47d8-b962-e57b70fedc4f",
        "cursor": {
          "ref": "29a85b8d-b49c-45c2-8093-4d34e3114042",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "f60eaf1d-ce4b-4e89-9f21-0597884f8c63"
        },
        "item": {
          "id": "cf2b6e0d-4966-47d8-b962-e57b70fedc4f",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "bbb40329-0f93-4786-8bd0-babc2b70907a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52c85afc-f47c-4f31-87ae-fbeee7e84af3",
        "cursor": {
          "ref": "0e49456b-32ca-494d-9df8-8f16baced405",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "dca39ab1-cb4d-4649-b704-e26adfef5917"
        },
        "item": {
          "id": "52c85afc-f47c-4f31-87ae-fbeee7e84af3",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "db9cdd86-8343-445f-b6c5-4900830bb468",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aef3bf25-b618-4a2b-b566-5bbeca301c78",
        "cursor": {
          "ref": "4ea4ff2b-01a3-4ff2-a3d3-a4d480d7282e",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "5a92c223-ded5-47df-b788-206739714ba2"
        },
        "item": {
          "id": "aef3bf25-b618-4a2b-b566-5bbeca301c78",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "a0fdc205-7ee1-441f-b366-1a129cd5f1aa",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 33,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20f6c187-2310-41b2-b3ff-9a4492be2e13",
        "cursor": {
          "ref": "348fd908-4602-48dd-8405-b763a40b13a7",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "19bbf444-92bd-4a4d-9549-4a85e9450819"
        },
        "item": {
          "id": "20f6c187-2310-41b2-b3ff-9a4492be2e13",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "580a8cdc-5919-442a-9395-6d03c234ee29",
          "status": "OK",
          "code": 200,
          "responseTime": 252,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f7210d9-02e8-47d9-836a-0e8aeee77ca5",
        "cursor": {
          "ref": "f3f036ab-6382-48b8-a0f9-1670bcaed29f",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "dd28148a-9eea-4751-b1cc-d8d7c128b778"
        },
        "item": {
          "id": "3f7210d9-02e8-47d9-836a-0e8aeee77ca5",
          "name": "credentials_verify"
        },
        "response": {
          "id": "9ec3d27f-a591-4bc8-bb4b-d924276c8fed",
          "status": "OK",
          "code": 200,
          "responseTime": 592,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "86c08b21-b0df-4596-8b03-8f4d040ae851",
        "cursor": {
          "ref": "5484f622-8834-46ce-9add-6a3a1966be8d",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "f3425b97-eff2-41e1-b527-e1d5179fc2ae"
        },
        "item": {
          "id": "86c08b21-b0df-4596-8b03-8f4d040ae851",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "cdb40062-0127-42a9-a55d-46546ccdde10",
          "status": "OK",
          "code": 200,
          "responseTime": 617,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f6f2d8f-021a-4867-b10a-34c209836170",
        "cursor": {
          "ref": "6787a5bd-ec8d-43df-a05c-3871131c7d3f",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "a6d091e4-e6df-4c7f-aeba-cdd3b678a073"
        },
        "item": {
          "id": "4f6f2d8f-021a-4867-b10a-34c209836170",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a4bdc2fe-09cd-45f9-9571-b53d365bcbf0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f6f2d8f-021a-4867-b10a-34c209836170",
        "cursor": {
          "ref": "6787a5bd-ec8d-43df-a05c-3871131c7d3f",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "a6d091e4-e6df-4c7f-aeba-cdd3b678a073"
        },
        "item": {
          "id": "4f6f2d8f-021a-4867-b10a-34c209836170",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a4bdc2fe-09cd-45f9-9571-b53d365bcbf0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f6f2d8f-021a-4867-b10a-34c209836170",
        "cursor": {
          "ref": "6787a5bd-ec8d-43df-a05c-3871131c7d3f",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "a6d091e4-e6df-4c7f-aeba-cdd3b678a073"
        },
        "item": {
          "id": "4f6f2d8f-021a-4867-b10a-34c209836170",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a4bdc2fe-09cd-45f9-9571-b53d365bcbf0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64d963f5-8619-4a74-86ed-849eb4bd3b29",
        "cursor": {
          "ref": "49a4ee83-f537-4418-9f55-c8a34122385e",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "fc1c1f14-6ccc-4572-b367-e768c39356e7"
        },
        "item": {
          "id": "64d963f5-8619-4a74-86ed-849eb4bd3b29",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "57b5cced-dd03-4690-a303-1155693851ed",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc7cbb85-e8df-44c4-ba65-7c7b6106a254",
        "cursor": {
          "ref": "e9cdf9d2-1969-461b-ba03-9d801ddf01f3",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "99e77750-dc4d-4120-a945-0b7f1cb5527c"
        },
        "item": {
          "id": "dc7cbb85-e8df-44c4-ba65-7c7b6106a254",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "4ce18f10-3692-4bea-8462-9015a0fd67b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "dc7cbb85-e8df-44c4-ba65-7c7b6106a254",
        "cursor": {
          "ref": "e9cdf9d2-1969-461b-ba03-9d801ddf01f3",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "99e77750-dc4d-4120-a945-0b7f1cb5527c"
        },
        "item": {
          "id": "dc7cbb85-e8df-44c4-ba65-7c7b6106a254",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "4ce18f10-3692-4bea-8462-9015a0fd67b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "951434cf-5c50-44dd-9b5c-8631d21df9a3",
        "cursor": {
          "ref": "daa8b484-e765-4b52-a24c-090a70397233",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "e27077f7-75f3-4ecb-9b1b-ae78820bb4f1"
        },
        "item": {
          "id": "951434cf-5c50-44dd-9b5c-8631d21df9a3",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "724f6c33-5dee-40b5-9ab8-176f53432285",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "583c984c-22b4-411c-bf63-042fde9bf8c1",
        "cursor": {
          "ref": "f56a3272-23b3-47d4-af92-979458f5afaa",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "def6f0aa-7200-4d01-a719-17ecb388d387"
        },
        "item": {
          "id": "583c984c-22b4-411c-bf63-042fde9bf8c1",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "eb883333-9898-47d1-8289-951e095ba20d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "583c984c-22b4-411c-bf63-042fde9bf8c1",
        "cursor": {
          "ref": "f56a3272-23b3-47d4-af92-979458f5afaa",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "def6f0aa-7200-4d01-a719-17ecb388d387"
        },
        "item": {
          "id": "583c984c-22b4-411c-bf63-042fde9bf8c1",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "eb883333-9898-47d1-8289-951e095ba20d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "4ffea7c8-9855-448f-86fd-94d794a9589d",
        "cursor": {
          "ref": "783aa520-76a5-4915-9990-7ef41c6e4c6b",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "96472cce-5fb6-4068-b46b-da27e6f0c054"
        },
        "item": {
          "id": "4ffea7c8-9855-448f-86fd-94d794a9589d",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "c829daa1-aefe-4cc0-b6e2-dbafe5bdb655",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}