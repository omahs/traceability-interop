{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "6f0ce539-3f75-4613-b7ce-fb5627b6b6e6",
        "name": "Clear Cache",
        "item": [
          {
            "id": "70af1aac-8dd5-4b69-b755-b7883548f0c6",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "83131b01-4260-4002-96e7-846693e7ac88",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "9194f33c-cc0c-4c73-a828-e2061d6e301a"
                }
              }
            ]
          },
          {
            "id": "d782aeac-40a1-47a3-823b-1b20e4c7cc23",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "105e041b-cc22-4c4e-be31-309a97434267",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "0c723815-b920-4cee-b945-189723c62eb1"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "6ee78ce4-4edf-4ea1-a2a9-ae7a3a44ad5f",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "1107962a-e88b-4866-939d-dd8e43d35798",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f368fb61-853b-4773-a667-e9a625c65d5f",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ab4dc6a1-d06c-45c0-9a69-61e1c0923c40",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4a88dfd1-fa59-4117-91b9-72ba193a4c62"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cc9e39a6-4bf2-4213-91e1-67ce3b780b72",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cbbaee01-1c2c-4e54-8ab5-b33d471782cf"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b65c6054-157d-4866-a390-04697fe8d99d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6a35d5fc-7352-481d-8fca-378f147f52e6"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "408a4f2c-6eff-494c-807e-c065c786e2c6",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "e94494bc-217a-42f5-bd95-2aa87c1f0009"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6ac7c4f4-31df-45ac-8514-2e66fd89830c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ae76596f-acb8-46a0-9352-d530c286a171"
            }
          }
        ]
      },
      {
        "id": "b744b365-eed3-4c63-906b-fcf2800b9825",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "93dc2159-5616-4c26-9fdb-65c7571107d9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "391fe0b1-a4c2-4b0a-9887-df418a7f6788",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "183c40be-60c5-4d90-a284-2c278e456c65",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9d7fff6-f69f-4593-b77f-67879fa7a134",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "539a1026-ed45-4a02-8370-4bc98d1d12aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c4e401a-3ab4-455e-9146-b3132e3bedb3",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d772db65-eb2c-46c3-a370-6f4967eace9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "245e8e0d-323b-4f37-ba9e-458da54c3603"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2197c3b-eb03-4796-93a6-615a3a6b90ca",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c769cc2-9db8-469d-a517-c1105e13c59f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b8572816-d640-4645-92a9-1468e0107b50"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "31684073-d0d7-4433-ac82-7e2924272240",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cebb89ac-5d0a-4285-8bef-f1876f903e1f",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2f84b7b-da15-4176-848c-f1e9eead156f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "56c0297d-d1c6-4c9b-8558-4120e4c48de8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "523698b9-66ec-442d-bf8e-efbd0b0d44c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68ede77a-7da7-4904-95d1-57f3838b1d1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cc0f12f-086e-456c-a497-f079d1862702",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bf7c2e3-dc5d-4e5d-854a-429ddb82b750",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "382f67e4-15c4-49bb-a336-69d9243f1eb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eb3acd4-4745-4627-8c79-a0f15044ca40",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "d55cab2e-b4c8-40c6-8663-3b22a33abbbe"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "78e7fe01-d49d-47ff-985e-447a86a7f9be",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c9654511-7bff-40c3-8cb2-c82015eddbfa",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a3970396-de14-42ab-90c0-b6c61a15b533",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "10a355a0-be42-4240-b1e1-dc73ff1b23eb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "67fc83c7-e657-4038-a523-add41250699b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "2c099079-e6f7-48ad-a3c9-31d161308280"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5bbe704d-df10-459f-96cc-4dc33a7b685e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "476a08ba-8139-48e3-b3c5-abed6a4e59af"
            }
          }
        ]
      },
      {
        "id": "0da6a4e1-0d72-451f-abfd-6fc3f6b3c0eb",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "2056a410-854e-43ad-bb9a-a5ae01214aef",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9614d8f9-7743-4b18-b25e-04ed6c0bed5c",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "6e701eed-7dec-48be-bc1b-9d2672c8dc39",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34ac7cda-dd52-4014-9c5a-bcd4baa1854a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbbeb33a-3dee-4361-a7eb-5f889eeebc2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6e75f35-078b-4f5e-83aa-7b63ddde5ce8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "98670372-aa8e-45bb-80b6-2f0ad4d927b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5930249a-ff0c-4992-a557-c8fb9ea3d780",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3e693f3-aae4-4567-9871-b02cc2de55ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9b70dcf-7f96-4559-b07c-c6e04a0da4c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea3c0c3f-d73c-4131-91fc-a018d4cf7453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5b7a510d-ec67-42e5-a66e-198da0047170"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de5d9f14-6bf3-4f4d-9def-c4e4d48f5626",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03fc07d1-882e-4767-815f-c772173e4884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd8ab924-4d48-4b76-a645-ce0aac061d52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bda322e5-19f0-43d2-812f-6c70339fe0ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d8b25643-dd6f-4f11-a5b8-61d4bf8ad33d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eb848e6-bdb5-45f7-af8a-16749bf044d7",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70762539-f3b2-47c5-ad41-ad540f35a97a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "257f16b7-f856-4877-bf75-301b08271ca0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d69e19f1-c662-4b76-a127-ca6bf9007832",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cf10aca0-f510-4e66-ab9c-2a27ad8c2880"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6834cfd5-331c-4e38-bfe4-ff66da7132c6",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2467b72-9132-4d4b-aa61-16a4ac51ed33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "931770cf-1eae-41d5-bb3a-162d00302e1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b9cc9a7-a504-42e3-aac7-70a1f4faa3e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "22dd2b75-9179-40dd-bc46-587f50e12cc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45c111d9-0946-49c0-becd-bf973d6942ed",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75787851-27c3-4e7e-bec0-ca574ef6b2b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cca62dd-5ece-4adf-806a-325daa1bc710"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "834526a2-5f19-4680-8d51-92ef3d24ef5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c63a4092-1c80-416e-a25b-98097578a9b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccf1cf33-2ad3-4d5a-a709-be533bcb497f",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86a36e34-44ad-4869-990e-5e1f83275051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c25831d-e441-4941-8423-2224d2998d0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e23b5d2c-60d4-48a5-a32a-dc70f5b6d100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2609dbfe-cf38-42d9-8865-44a4be6ee11f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63b94002-c510-402b-93f4-0c188edc6c3b",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4793fd1c-dcf7-471e-ab1b-87d60cb48c68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6995a21-3c00-492f-95e6-61c460922570"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "744b2824-1d37-444f-8cf4-6eff742671de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a52b8acd-f6da-4c4f-b751-0d72761fd9d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09445bbe-2c33-49f8-9044-d90d550147dd",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b649b5c-aa11-4a63-9760-f650956d1b73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0933bd3-82fd-4cb4-990a-501a8ba24395"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8e0bdc8-118f-4466-bc5e-2175c743b9e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cca8f075-e7ae-4a72-a4fb-945ed9b231d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "022cece1-f1d2-4a54-bda1-15843b69c426",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7da89953-cbe7-4ed3-ac53-464b5e8aff62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fc8df6a-91cb-41ff-b618-db086f75b21c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "472bf6ab-64bc-4ed7-b05c-e1b78e03455d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f607ed9c-ccd4-41d8-bccd-65bea12aecb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c867083-d454-420e-8e8f-45f64006e62a",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a9e6f14-0171-4c03-a37e-1502cff9a2e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3321d337-f947-421c-9073-077fa296ff36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afc3229b-59e3-4293-b72b-4a2a5688dbec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "835a2207-e7f6-4691-925c-f64aa1bbfdda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff1baeb4-d02e-4756-9da4-4f5e13210e86",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7efeeaee-eed2-426a-a628-d29cdb53717a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf2bdc92-11c9-4de6-9a8f-1dc8d1ce3806"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb579f15-e9e0-4a9c-8366-a92c939d56cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a4a668f0-62bb-489a-a3fa-4b2dd478a37c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d142016-a5e6-4eb4-a671-470b67a754a3",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fccfdbdc-4f6b-4965-b78a-2cdc17072581",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aec9630c-4542-416b-b687-f09beea1e0ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6da521cd-62e4-4971-8a4b-383be9d9ddc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3c2d2ca1-0f6b-40c3-b0c5-bca736904246"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30fc6c52-4daf-4719-a314-e8710abef5d0",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d835b83a-5ae0-4f6a-8ebe-f5b77d1cb451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e077ce1-cadc-4cbd-bce9-d1f205b37218"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08be2ffc-304f-4024-9842-e79db427f677",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "88495326-2c77-4741-91cb-602565cc39be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12e71894-fb7d-416a-8505-70a86e67129f",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aec6634d-424e-400d-8639-17d9493c34b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1dc073c-2954-48d4-9a3d-f2bfb3d489bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "687caf49-7a94-450f-a678-3d49bd3f8a1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "82346688-6ee3-4c9f-aa7b-35f7896a2e03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bafe95f-28df-47d1-8fb7-3e96e6842ed6",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5bcc358-9b6d-4cfa-a91e-be9a8ddabe1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "555a2633-8350-41dc-9f7b-350e6c7c0ca8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b363236-db38-4364-b434-a150a083ae8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "617df49f-5684-4cde-a5c1-e360f9a2cd67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ee5c0a1-2e11-4ef1-abb2-f02f4417a27e",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3db100e-f7ca-4ff8-8f23-e64b163cedb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd64e3db-8f24-411a-a8fb-3a4553edec60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "410dbecd-c296-4bdd-b842-99ad9a4a6b32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d18f3bab-d5a3-4057-9301-8bcb06f24edc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a27d63d-2999-4170-9f72-4af410ba01fc",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc0bb02e-715d-49f7-b040-a76e28734c29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e2a59d0-41b3-43d2-865c-fe0c7d99ab0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee91af65-c4c6-470f-8e62-0600493bc6a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "30d38de2-8b8a-4814-ab79-af85be113188"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e41d4735-d4a1-4e45-be74-546756f643ed",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a2a85bd-0da5-40b0-931d-b9604c2cee7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57c87dbe-7c39-4001-9005-046e30500f00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66929c61-f26c-4e74-be66-702d9d28ad0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f76cb8f-6482-401b-ad5d-09142aec8961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cce66585-b425-4f4a-895b-aecdbedfe7f3",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4076993-7d8f-44ef-8c1f-962f1b10ef83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09484b27-23ba-44ee-849d-fc6b13547b31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "685082a3-ac8d-4346-9815-015c130a0afc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb63eb20-2c7c-4286-ad71-8666e6077893"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5040efcc-1f04-422e-88b0-3f6239ba241a",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5084eb34-a932-4beb-a782-5fd8c8ec1bb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc55a752-bcdc-48a9-94b4-99b8e9cc7c67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f212975-6307-42c6-a9fd-93661954ce73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a075bd53-dffb-4a4c-a82e-0ae41c50f167"
                        }
                      }
                    ]
                  },
                  {
                    "id": "869a941a-2dc5-47dd-bc4c-c218f0171165",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b0e27bd-2cec-4af0-b6bf-e51a5062047a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e04f87d-fe3c-4768-98bc-56a42bb839a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67b35684-d718-40f0-b0ca-0b28863563c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "804ed77c-4b19-4a4b-8662-38253a4449df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a82b5b2-efbd-41e0-be22-4406f3d96ccb",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3b41641-e085-4d01-b881-ccb911c7aa4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2c32e4c-7e21-4a94-9b17-223dbac7258f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fad4ce80-97f5-4b0e-9d56-a5df8146310a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "11e75059-fe4a-4b1f-ac17-91184fb8d6a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e74f48e-8dcf-43bd-ae80-ccefa05a8f4e",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9791bdcf-1b80-492c-8c53-775bf6855fbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e784bc79-c8ca-454f-80e3-4f8f85c5b138"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0717f72e-4096-4521-aaaa-acc76ee68808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b652f53-e83d-4d9a-9e1d-daf4e169bbbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b2c2596-15ad-4b00-993e-4f01a0b896ac",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8524d5bc-510a-4080-ab75-e1248d75356f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8e089f2-99ea-47cf-845b-46381529568b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c509cdfc-3672-4954-8771-8d0da6c052f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9f56aac-33ff-488f-a7fd-3756362823b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d481f53e-e321-40fd-a510-9a3f8428ae75",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58aa9645-9a08-4f5a-b81a-ab2e17fece66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7963feca-690e-4868-a6bf-89957ae19ad1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdf4f90b-a519-48d2-b0f3-7f9475c7f470",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d2d6b7e-3489-45f9-a0a9-0abc385e38d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ac1ee04-4fc6-4832-98bc-498e134799d8",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d897530b-7c3e-482b-9611-45d99bdd9ade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c3b656b-43f4-4aa2-b1c8-bc9e8c194c4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a076dda0-3039-453e-bce8-381feba3fd34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e88a7772-ef64-4fef-bc8f-1b3508387e43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "706984d8-0027-40bd-abe1-d9ebba9a817e",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8f509f6-47e1-45ac-876e-4864b477bc4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb247828-df32-45e4-83c8-62e498b1e7b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5efdc5de-1c58-40b2-bb48-e5dc2a94fc07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "87743224-d03b-464b-912f-c715922eed76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63f1fb25-420e-4ed2-a25c-b1ebf44e7aea",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d92e799-d0ef-4927-a5be-868aa0f07982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2880988e-95b1-413d-a826-fe906e9b83b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b56a700-724d-4c8e-b860-6c002cea2dfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c152423-157f-4cc4-9869-ce93193f3381"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49e567cb-a71e-40eb-9512-6a75ad940de8",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75596c7b-0a52-47bd-b213-ac20f5032b88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8a841e1-c76c-48e7-bdb7-6fb3796d2902"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfce8dd0-cfea-45fc-904b-28bcd437095f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef0c7440-86ad-49ba-9627-3efc01042a36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6bbccf6-ea23-4e97-a6ea-bfd677f51531",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "feabfd6c-5b33-4abf-8e12-d87f9da2e670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "719fe03e-b693-4041-8da4-8859a3f78a3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c0beb14-fee8-4402-a22d-26621d5a8d63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e1007f7-13dc-41c6-8d81-3be9a147c11a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e51db149-87cd-4dca-b7f4-615a192a9e7c",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8933e302-c63f-4652-8dde-9fac04f33955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf50b360-eabc-4f6d-8463-af3aabc7d09a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3272f1a-f38c-4931-a290-944e9ab31019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3108a59c-8312-4036-b63a-47f9c0cbc060"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bc169b3-5a71-4c1e-9dd9-4dbc258e183a",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe9bb981-f770-4bae-93cb-b844b3ba2c73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31e84ddf-8cc1-4ca6-a3d2-5aa198be3ff9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28c08b34-18dc-4db7-bb03-fedac1c84bc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3790425d-0de9-481f-9ce5-7fe3bef9719b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64463456-ae34-45be-b87d-ac0f60f8de8d",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70f0dd18-5b22-4d65-b0cc-1fa067f7895a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e176a02-b004-407b-a8c3-7f663ff18fb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "006ee86e-1667-4d56-a2e9-38210b0806a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b470530e-b538-4e8e-a32d-c5dcec22c7e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81f59b35-2c17-43d0-afdb-8566089b0af8",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c702ee0-a9ea-450a-9887-2c1b0627fa13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e62b9d7-b0d1-475c-96d1-9d2818604db6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e7a981a-4773-46db-a7b5-b84260665a02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "483b3deb-946a-4331-8f3f-166b186530bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3044a869-14a8-42bd-a6e4-1079947302e2",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a58b7fd1-a361-4f53-a74f-a772105f9fa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7beb88c1-fd1f-44a8-830d-7e6dc5714d40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5625fb2c-112b-4eec-95a4-4b24b7afefda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "18d254e7-0a33-42df-bfb3-0ad7a2ffd415"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db242b38-943f-436f-8d99-dce485d7af2d",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a5d7663-70d4-4a8d-8f8f-861c477862df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6917f3a5-d977-4911-aaf2-ef59c13ecd1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23e6bc0c-4526-4107-93c8-b886127278b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "04ac5847-998a-4223-a992-798cf3d87e25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff4187f9-1513-49df-90eb-c5cb3a90092c",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6478a485-6a3e-4b90-a7ba-69105648c00c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2228596f-5e0f-47a3-a08f-a9a78d3db4c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3998023a-bff3-4eb6-9178-feff1c93b229",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7cbedb30-bf76-4013-943d-ec46d1a1ae68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2a4ca34-4a3f-4522-a3d0-f1be14ba3412",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0d03a62-e22c-437c-9b05-10bd25bdf247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e8880fc-f413-4e04-8bae-ac589cf28087"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93c6c926-691a-4427-8f32-0c802231152f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "18c54d0d-c2a7-429b-85f2-e88eacc73bc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49bac0ac-6fc7-4316-9808-2f4522ebaea1",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caf9fbef-e888-49cb-8e91-f63336296557",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9b37f84-d0c6-43eb-82d9-d94b900483d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4fb6eeb-27ef-474b-a300-6a56e17d2b1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "77391d2c-f681-4ee5-a027-57bdf17a9294"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f2e807e-a76f-4a75-85f2-b078dc4bdd51",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a33407c-b633-4270-b28e-0f12e6b9c6a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "037c6068-6f6a-45e5-b835-f115bf341954"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f809b7da-7572-4e5f-ad65-50290f946758",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0548377e-6bd6-4c7b-845c-a1aae67886f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27e5ee75-6d37-4be8-9484-926b8c27e258",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97c92f29-a4c4-455d-8fcc-58817e2bb203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72af7719-6667-4a35-923d-217085d8553c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecc2bf22-8c3e-40a3-8bfc-e21b8e01e72d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "687be42e-1cb8-4f08-b0c0-b0a3cdb96c3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f89a77d-653a-424b-b3a6-a49e07e8baf0",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "323d2115-feb7-49e8-b9dc-1bbb8cae2da5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "349331f0-7e0b-4423-944d-68f8c45f8c3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "757dbba1-0eb7-438a-9c49-730283353901",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "2b0af6c4-7abf-4f0c-8808-b3afc66e5fe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b6d484f-df01-4691-8295-6534ee910e44",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faac64da-d936-4f19-99c3-3ac9adc1408e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8938a948-2e71-496d-9423-61a5012c63a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02835988-cba6-4060-8315-3ec1a7e703f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "dad69eb8-7078-4ab2-946d-73fc13594c91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6878cf2-bc8e-4ba3-b6f4-629b2bc091eb",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fb143c7-4e46-403b-9eb8-f43cd10065b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39e634dd-ae3b-4ac8-978c-aafb45979d03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cbaee80-5cc7-4930-8387-96835d75be63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1b359d8-f76b-4ec8-946b-29ae0775807a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7a79b41-14cb-4e5c-884f-a4de64a40a2d",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57f0ecaa-6c43-44f5-86c0-ac99e449d03d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fab4cf1b-a450-4936-8099-5bf981da3667"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a85874b-6272-47c3-b5b0-71656959d428",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8063b76f-86ae-4640-aa50-b55095557e34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d0ddeba-7663-4076-b024-210c92f1a774",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30c7ffb7-97e7-4f79-bb16-c719a00a0161",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1e0c646-57c5-436f-a0f7-faff4fa199a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "438f8ed4-c21a-4643-b12f-897000087115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4ad680a-0d12-4bdc-b1c5-0eb8bb185393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "115b62ac-5a4b-43f2-9180-de035ce62091",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17ddab18-299d-42ab-9e32-b302856bcdd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0496ff66-8300-4a14-beb9-ba6840f4ccc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05481a7d-76a4-431d-8169-9a63c6a9b094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "097fc70e-c433-4f7f-994b-fd3f8b083c39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5da05438-f7e5-48be-93ae-70e0a360de95",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cc6aa96-c542-4ea8-8e34-6e4a9244a0c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85994f50-654e-44c9-8cdd-799b76e430fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db0042c9-ba1d-405a-ae92-f043b3f7febe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c0c514ed-29ee-4194-a298-660651bcd203"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0bd0acc-a2a3-445a-8827-7425a9131763",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d15e9c4-bcea-4606-96d7-fcd1b55090b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b848b2d9-7021-4da8-bb4b-a03929cdd60e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "947531d1-429f-4a50-aace-67c7408590db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fad29459-d996-47e4-8011-29a41aa19736"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0f2ff0b-2708-41cd-80c6-95ca2a41b703",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16232147-72db-4d39-819b-de74ad1a62a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88d652fe-d562-4126-81f2-cf53d3bd001b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "533ce131-122d-4426-8935-0ffee63622f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b55bb38-43f9-4995-a33c-d02b6c52cd67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7674ef9-984c-42de-8df5-ac575f5cb096",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5459d51a-97a5-4278-ab91-a3f4993fee92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d1e5fc4-6866-49cb-9676-6bf6abbd7078"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b462c7b-efc4-49a6-bf3c-fb6891ecfeea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8bfc6f9-5b9f-49a1-88fe-846e4021f716"
                        }
                      }
                    ]
                  },
                  {
                    "id": "760504e1-d69b-46e5-b0c7-c19221f2a207",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b036d424-86fc-4045-a039-84acd3010ea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2492a3cc-bb6f-42c3-876f-067dcba3c620"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2502359b-a4f2-4648-9b58-87998e65d1af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0296c062-6167-491f-9ff4-c15d20959892"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff6e698b-762c-4405-919c-af965a9a59cf",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fea6923b-164e-445e-824d-17e40ae67ed1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efcdaefc-75a6-42df-8a89-4658f0d2c64a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72a01b10-0b11-4702-b191-1a9d286be3f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6f81ed0-60c0-4c57-906c-5848950927ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f15ef85c-8a6b-4a2d-a49d-bfdaaf2e4155",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df9051b3-5a2c-418b-9c7d-f4f398f8b618",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc59f840-d5da-41ae-9d11-1d1651f3af33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79aa0b34-b89d-4c58-a3a3-6df3fce3cbd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "33e0ce16-ce30-4f4a-b54c-9a5f750f44d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b37af8da-7e14-4cb1-9cd9-e7fbf8b58aeb",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bac1f7d-cf46-4929-9609-eacb5e37d139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b39bd2e6-ea92-4111-ad36-f8d3a7b55a38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fdd0fd9-bcea-4919-b1cd-6fd06055dcf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "ad1b8bd3-edbc-4b77-b615-1f21648737be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8d94a39-94f4-4e78-8781-ece03cd8ed62",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a29af704-0d33-4df8-ac5c-ad0c1e2f14b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45cb2934-e521-4aa7-907e-b580457febf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b9007bb-54f5-4d82-b273-36c016bc2b2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ccebedac-0cbc-42a4-b3a6-f1dabae8b83f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a3032e9-7467-43e5-832b-98c3e3a97e4e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "172d8e04-2ead-4eb2-8b85-dd21878b62c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49740f0f-75c2-4647-95e7-6de68765ca41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09973f82-bc99-46a2-bcb1-43678f546500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6e61f111-e1b8-47f2-a1dd-54227934169f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a011defd-e804-432f-baaa-d9f5a822d9ad",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b26fc2b-fd38-4d26-999e-a29aecf44bdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd932b0d-7200-4592-9284-f06d3607c4eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aae3525-f342-4275-9848-4e25638b4002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1fcca2d7-6607-4d85-aad6-ae5437f8c494"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e454daa5-7632-4a7a-94d4-0b538eb4389f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f3779c4-8c0a-4244-9775-306303122190",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3a360dc-a59e-423e-ab8d-c8ff7174f8e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eca9c635-c448-4da8-b7d5-dfc2c271c698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "15d654c4-bc48-463b-a863-16e5c6165cf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb2e0777-c67a-4a1e-94ea-b898faf0c3ce",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f64b0c07-c42a-43cd-98fa-db7762308ec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "558e3e29-c0b3-488f-83c3-c11c557fcbd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51c9f018-2ca7-40f2-b3ae-411bc33bbe5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "6f88ea7d-08c5-49da-9753-590c34544f41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b05f9e9c-bc28-4592-b1cb-f0d6b43f2352",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da2cc110-410e-4cbe-8a69-55327e1dbd0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c5e9040-2896-40f7-bbfe-83b8b5d1672e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2061afb3-62b6-4d0b-afd1-47e1301fb6ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "4617854d-18cf-403b-938f-390e7473bc56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55aa896f-dcf4-4147-a3b8-f84f2fdab6c4",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aeff6b1-160b-4c05-8ce6-9186d7e7d9bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f40c1fb6-3b33-46c0-b816-dc5b25e41001"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3ff3b89-5f4a-4193-abea-08d070480728",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "8aa7587d-97ec-4a0f-b8e9-78ed458d5a87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8ec4d52-e6cf-46d5-9386-7ef407f2273c",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f24cd47-1d8b-491f-9b5d-7aad71ea2172",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19ac5fea-40ad-4996-8a81-58badbdb0b4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c2fa61a-ecea-49aa-b71b-bff4f8352c49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ce0a110-62fe-4ae5-9750-4be9d0367190"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba690505-d2fb-4032-9ebd-05aff7c4f98c",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dc5be5e-6e09-4f7c-a9e7-2593449637f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54c85b26-38d4-4b73-b0da-df46f890bd70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a996e4a9-821d-41ee-9c84-28448ae9796f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7e3ffa2-a9b0-418e-ad41-f3981c7052a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "969298d5-e617-4a09-b14f-1a9a59e22b3b",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f26cec92-e7d2-4d2d-8a1b-989cc651d4cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2823e6d0-6cfe-4656-971c-c456f12f6301"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95cb7cfe-48da-42d4-9e76-1eaf0c662a3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "92ef5a3b-35b6-4efa-b7d5-5e5bc3c58f10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a70ace56-afdf-45a6-9b8e-b48ca5cfd8c1",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98475e0a-3cd7-4a35-8456-eb6fb9ca7a2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2978f980-2c72-4c46-9311-5f0c2715548a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85211c37-ce90-44d7-bd49-a63f5a045560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e75bfebb-ce78-44a8-b4ec-173c8a8a0f7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc45090f-257b-4a38-b0b9-de79e065f3ae",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3cdc87c-bf8b-423d-9268-ac7177a360f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff87f250-6ed2-4520-8d13-e58bebc71c07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "917f61f8-3355-4a45-912b-a64b370265fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "582579b4-1394-4fd8-b27a-daf73ace2924"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dc8e127-09e2-4a4c-8085-591a4647b6e4",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eee13c7a-f751-4f08-9a12-743e8ba3e9b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34ebe72b-66e1-4568-a40e-dbd683b79135"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3fb20ce-0aef-4d1d-9876-5885f89b051d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ac48b85-2ee3-42bf-91ef-092dfeef88c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "980837db-53b6-4fdd-bd9c-4881a07efbd0",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47eefe3c-2722-4916-8b63-5509ec8a828c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0b7067c-e74b-4c43-95f3-7f95d09eae91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb7e7481-a402-4cfe-8108-0c6e57133b65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "79aa0987-82ce-44e1-a51e-3b112968c457"
                        }
                      }
                    ]
                  },
                  {
                    "id": "786eef56-0481-451d-a54c-1f2044cf4708",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cdbdbb3-c68f-4acb-9441-d74276d999bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68385168-8be8-4182-b737-5d7168f3b047"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61dc7ca1-939f-4702-82d7-220a756f54d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f72b7ae5-533a-47eb-b44c-5a5690951b3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7df1ab0c-fa11-4785-b0b7-37a6aa90b2d8",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83791985-34c7-447a-b810-150fbc6f8e0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d7b1b1a-1bae-4eda-883e-78665cc201ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0beeeff3-37f8-4bd3-86bb-8ff2f363dc8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6a79b9d-28f6-4cc9-a319-86fd6b5faa17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1b87043-709c-494e-b00a-f6eaa7d7abc5",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "045a2f86-ee99-40b9-8034-1b4d71079a6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9839d4d-8be2-4678-bc15-4edfc88cf698"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3b8bfcc-2448-4115-a5ec-287ba2280bf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "89b8df3d-9ebf-4b32-9339-2c647ac4810b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e897c54-003b-43bf-bd8f-d374e965127b",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3f8e104-4b9d-4da7-9927-ebf36d82919e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bd80a4a-850b-4c4e-9c7c-95bfec4d442f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae56a495-f72c-4304-97b0-367e50cf50be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2705905b-745d-4865-af6a-4b88f4ab4136"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2accbdf-f644-40e4-878e-99b39e9f820e",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8528034-24ad-4d15-99ce-7b8982736c53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ab97af9-4e1d-4186-b67d-8b3f197b5594"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "536f1ad4-2ebf-4aa4-9be6-85fa372e8c26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b0fa916-271a-43d0-b657-d5047c9cd31b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e4752db-8421-47aa-bacb-4b5d168b692b",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8be90da6-b92e-4095-9cd5-ff81c7f6033b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c70aac52-af26-45a0-9161-026d0f083a65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cde19b4-0adb-4cf3-bdbb-bfda372d5c7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d30cdaea-3b59-43ab-a965-56cf2da59c15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4206598-382f-49a1-acff-58eb64e27066",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7c78f08-7f29-46f6-a3e8-a5e442f760f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d9eed3a-aae8-4c9a-a0f4-e82e11d4e1ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "280166d1-33c2-42d5-8af8-e5a8bd6fd1cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "adaa22e0-a2c2-4765-9dcb-bf744ed189c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6862fcf-5641-4199-9ea5-eeac4d679460",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d1c0047-5114-4b74-9e3f-dba93cb2c473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "505b9428-0018-4b83-8705-498c931d6656"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcfbd9d8-908f-41ff-b38e-c55ec0acf1db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4a62494-1257-4a93-8e3e-842b8f9cbab8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51a64e09-2c3e-42f7-b1de-34de3b210d28",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ab0e97c-fab4-4e10-bde6-eab6e59cbf6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e23a3d4a-529a-481e-8d30-20eb416ab5a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5668f132-d33b-4589-a9ec-c912178db1eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e8d11030-a0bf-48b9-9def-6d9644d43e9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f05bebe-de78-45f5-997b-3555c3c2ff2a",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf74e1d6-8afb-47f0-97e4-1b715418b7cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31876914-52f5-4e7d-b25d-5117437755c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3466b333-8fa5-4a9a-976a-e3349d42a1af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "08e353e6-8405-4747-b376-12e2910d6ac2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fcec2f6-7274-4e43-8cf9-3a9315ab56db",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "425671e8-c31f-4368-9392-5d1fc82ccaf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47745efb-accc-4114-98e9-420fd74a41fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d4ea667-4c49-4681-aa7a-333ca40f9e2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a667794b-6913-4149-8cb4-af7dd68251cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23e8bf02-288f-4d73-81ae-f39e4e32d4be",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ae486ac-860c-49d9-984c-e8c934a5246c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "827bd7f6-5a7d-49cb-9dc5-569009bd2f0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb7ad6d2-0cdf-4d89-b2df-573083de074a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "91a0faa6-243c-4fac-9e71-50315458c977"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6790e3f0-567e-47bf-a3df-436de416bb68",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cbdeae2-33b3-413a-a6ca-0ca00f36fdc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0631ffe5-7893-4c35-8b94-481b66f0ab97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0131353-9a97-4cab-ae47-4e54546a5663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d854096e-1975-47fd-b3a3-433267a2c57f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7aee977-e55d-4533-82a9-0f26af32779e",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "155f19d8-b8f9-4621-b8e9-b0fac477e85c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7289e1b-ab77-484f-b126-13eb92cbe91a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c26349e3-0645-46dd-914c-4d45b2af7840",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a802fc78-cc6c-4cd5-98ec-cb9af5bbe17d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c83ade2b-fbfb-4843-9f1b-4d23f1caf3eb",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "689718ed-17dc-4cf1-b9ad-b2faecd9e1e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e299c62f-6bb6-48f5-870f-0581878574d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa480e46-e094-4b9b-8191-5ea7ecd05667",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6ba6eb58-0f78-4abf-9e58-cb01339e1b68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07723fc1-f7bc-42ad-82dd-8b7505044563",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01c6509e-7326-46c1-b3f8-56b1e083c6c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92018fd2-49b8-4639-9835-77fb48ca0a3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8af2a534-228c-43ec-9a5f-f303c5c50458",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f8d9f0fb-8a85-4b20-850f-077e325b4273"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e31821c-4887-486e-a09b-aaf44cab21b1",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdb51498-7800-49ac-bbeb-96ebdb818cf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f086299-8511-4fe8-94c7-1f607d2f7e82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "036d9e73-223a-4b26-98de-a7fc0ef4f49f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1c46da72-1649-43dd-b8dc-5ace347a916e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74038d70-a01a-463c-a48e-f5bf1d88d735",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba5ad38f-397d-4a8f-a13e-7f21e018526d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4d5178a-69a9-4496-a1bd-caf5f56a28d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9450a1bf-8b4f-4741-a677-74b7b6fa6263",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2bde9157-236e-4cf4-9362-430d816911eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ed9dd4f-fdd9-4849-a94b-78956fe32311",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fab767e-fded-443f-9d16-e45b48b4a8e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22a75123-9cda-4cc3-9268-4ced5ab369cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef83432b-1952-4d67-b4a6-f096a1f450e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6c3745c1-50c4-467f-b7e9-893369c43a8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6595d87-6135-47db-b728-84236c2057bb",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb4b88a6-8514-4a0e-81df-33461d62c0d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26ec48b5-8905-4e9c-881a-bef99db2e259"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c71d4f4c-f6c2-471e-be96-11cc5b08d82a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "abe3cdb8-26d3-44fe-928e-a053061ede47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73fb3c5d-9edb-40aa-8d5f-80849302e633",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f343f96-ec3e-4491-a19f-2298855ec4fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48335907-a429-4139-a0ed-fbd384f30e81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f05a87b-47b1-4a32-a63f-4e5a5e23aa3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "154a29f9-ee2a-4b2b-900c-b71317021e14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b34d28f1-aeef-467f-83f0-55db81c54801",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "858feb3c-ec9d-4705-8c61-ec8845166536",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "830db20a-3598-4cdc-95af-0d66fa570fc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4554dc5b-4e98-4576-b81e-60aa74d494c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "16056f21-c3b4-40c3-a3da-ec9ad88a3eaa"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "13d8681b-0012-49b3-9d7f-e758f0708c6d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fa0415f3-aca2-4e11-8834-cfd3ef8487f9",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52936fc5-1df4-4fb6-94dc-4019a408ea3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6bb615ad-168e-46e9-9683-a469d6fcaa64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45a78a17-b009-46ea-90ca-26260ca79f5b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "6f1abb83-752a-47a7-a00a-82ae11359579"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f74fa580-d29c-42ca-ad12-92462445a5a3",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbe8966e-e922-4759-9682-45c13d33c9d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "33ae9a87-7e84-429a-bd5c-c601eafd5760"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3a3312a-21b8-4be1-ab8b-73fb30e084c0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "d45e44bf-1cc1-443b-9d54-5f2f5216522a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "66402b19-705b-4e6f-be0c-a41b0680da41",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e55e1a6b-e1c8-4ad2-803c-62d67e97c44b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a5c08ac3-6c34-4f45-bd9c-d4731ff197e8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "73b2e923-41dc-481d-a398-ea9f6eb8cfb5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7fc04e42-ab88-49b3-83fc-ef6db5d6646b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9630d9d0-7455-4354-8026-d78b85ba0615"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e28d842d-e44d-47c2-9ad6-d7889847e0f6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7abef23a-bd56-4369-9b1c-beec07194b69"
                }
              }
            ]
          },
          {
            "id": "2336a32f-2e1d-4e8c-a484-d8036566420c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c2649e35-4b36-4191-bc2d-5b38d5518447",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4b436bfc-d182-4e93-b220-141f3db91a2b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1d731a4b-3c5e-43df-9502-204385ff1eb8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e27ab8c1-6bcb-4a2e-9d5a-154793e321a5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "843092b2-d8f5-4a14-a9cc-cdf7da84c7d4"
                    }
                  }
                ]
              },
              {
                "id": "dea03f6e-0334-481a-956e-900a3bc3bfa8",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5e784397-2c79-4388-afc9-7bca133dff45",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "49d667a0-3aa7-46a3-bfa5-b3d84bb37f5d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "92b7fdb3-90ba-4431-88ae-29e685b693a4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3b070e1b-9045-42a3-a7a4-a3f26e3a9bb6"
                    }
                  }
                ]
              },
              {
                "id": "6a833e7b-217b-4b48-a251-6288b4a4fa8d",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "56b252b5-41a4-477f-94f1-2fce1c345057",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ab5ad02c-c543-40a3-bed1-9520f9810f8c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cf89d76f-1119-4dd9-9440-5aefbe4ba082",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c33ee732-b97a-4020-8fce-84f669a74fe6"
                    }
                  }
                ]
              },
              {
                "id": "34504e20-c644-4fab-817c-57cf4177c95c",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e812e6a4-3e9b-4cf5-b5b7-be56ab74ef97",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2934f850-f4b4-42b8-902c-d01983ffea99"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ec2badcc-5258-4e0a-a96d-e0972f23723b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "d07dfadb-fa9b-4c5c-a8b0-962b652620d2"
                    }
                  }
                ]
              },
              {
                "id": "659cf521-cb5a-49d4-bbf2-d31a1f991b88",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9755847f-3c03-4af9-81fc-89c7a8a7b735",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5a5e0fc7-9a02-45fc-b531-2de03730639f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8c273966-5e12-42c3-99e3-dfe000516342",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "7255a36b-ddcf-4315-a421-7474bc828b99"
                    }
                  }
                ]
              },
              {
                "id": "333df974-d19e-4a51-bc2e-b0fa673d6cf7",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cc60b0f9-e2bd-47e2-9e11-5a6f1f5c84cf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "41dc1bf4-49ff-45ea-a85e-839d93f2bc28"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "12a82cee-a6fb-424a-aaea-c9f4c8d54ffa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0b0474dc-f094-468a-9eee-dd59a4086a67"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "634847ab-b8a1-444c-b50b-8950f87588d0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "75ee4cb9-1c20-41fb-bdaf-da3e00fe90ec"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "77b507cd-9b37-4e79-9a99-0e77e246240d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4db96523-8c3c-4078-8bf7-0e188372a827"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c2bb8150-3ba8-4370-bb14-034bd6a79075",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "4abe14f1-8320-46a9-bcc5-d07f7b2df9de"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0f3824a0-dad0-4c9d-9a3e-0090250cd4f4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4558bc03-1943-46fe-9583-982d4909efdd"
            }
          }
        ]
      },
      {
        "id": "866c19d9-1c3b-4a8a-a7fa-b7a00227b190",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "ac372c4c-df46-4b84-b27c-a40c527d61ae",
            "name": "Negative Testing",
            "item": [
              {
                "id": "11d23b92-2e61-419a-b642-2091588474f2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b43a6367-5177-4fd3-9237-57a68cf16dad",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b76d85b-5f9d-449d-8527-af970970c268",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30915d06-868b-4520-b941-473a5dd8af23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82269be9-661f-4d84-8701-5d9b5c5f9415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "f99d75ee-c82d-445e-8543-39cca8887eb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7fe4f42-c878-490a-b230-88d8fd82d8ea",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed94806f-ed32-46db-89cf-f1683d80b067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cec25806-02e8-4b12-b79e-7c5e56cf6815"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2a4e24a-598e-47fe-b66c-d22e91ab65e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc5e1d09-0fa7-4f47-b616-0eec4019053c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fdc83c1-2359-4b35-9226-bcab1abb27fb",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08f8b23e-96be-48a7-8a50-efdb571b0a69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9af5b4c2-3e7b-41fc-88ad-11740ac36f65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2cb79e8-0c84-4c7e-88e4-00b0ae0d6a08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c395648-6fd9-4718-bead-2cb0042d499f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7e65b5a-413d-4255-9082-3a0f551730f9",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "734ed5c0-7e8f-45f7-87df-ae8f99279691",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "744ea31b-7ca1-4181-a185-31465a66333e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62eb94bb-8b48-4263-a0e8-0bb7ecdee8e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed08d425-ef5e-49cb-8a07-5d811579392e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f7b8e9b-6082-47e4-860d-910e53eb6f58",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4f34c02-521a-4950-b7e2-35dea07bbc22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcf376e6-acf8-469f-86a5-b68214d9286d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "786b5622-98a4-48e3-b6a2-5c42bf443ea8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "79dab494-8d56-4099-9614-0d64836fe336"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27a3bef1-7765-457b-bbc2-7b8c44c2e416",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc014d3c-04bd-417b-8c09-4e1b03c7fe16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a12f913d-715b-4d23-8b06-a1c47d6dbaaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e62e268d-7569-46d2-a8cc-0093a5611e20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "56ead2e7-5d1b-4105-9463-d78e1dc5284e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2341b5ae-c1e7-4899-bab6-469d9cc0cc38",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb2c2f26-1c5b-48b4-9d3d-be267460e1d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd2ba7be-342f-4fa8-8c6a-b8087b4c1ff0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5027ce94-548f-4e2b-a387-a9e9a92ebcfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c968211-89e0-42f5-9867-7cc47f087d81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a25ca866-d85e-4e4d-9eb5-c8a6107e4410",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa4e0345-f7c6-40c8-a324-1d30cefd9924",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37597e60-fb8a-42d1-a04d-7641993e6e1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fdd2cf6-1061-4c97-8872-5f5d8e785c43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "eec494a3-8d65-45fe-babf-a5236f14e771"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b592276a-0614-4b66-bb31-9cb9bf077f58",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d3c7445-04ee-4f15-9f19-b83c2cdb2b60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79c771bc-c55e-44ed-a774-57ffb8b8dcb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed2af41e-acc5-4e82-8cd4-45b8c5316bc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f15f80a2-7178-4cfd-936d-6e3d1e3a4988"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c1d4f14-41a7-4cfc-80f7-914904b49773",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f78050d8-9dab-4efa-b7a7-b3d62f04e3c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7264d34d-107c-470d-b2df-aee6a78557bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "242062db-e9c4-4486-bf68-6226601ca303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "55405080-fced-428e-a358-72cf8c18b79d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c563b24-bbe0-4062-9fdd-46ae93be839d",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a5dcad3-60fe-405d-a657-e173fdd634cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f75682e-5d46-4a6d-8ce9-d291e27bd968"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc70c265-18ed-4843-a2b0-5edfdfbd5481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "538edad6-c0f8-4ff5-831a-c6b5b815b4f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5222a946-a6af-4721-b57d-b2197f6ecca3",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8120fbee-0cc7-4584-9d21-87614227b371",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07530002-3283-440c-b8b7-4b79aa598fbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f3d967d-e476-463b-bec4-ae542cb9ed59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2cd87ded-82a9-4c18-b3f2-6e28400299e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5406f8fd-7580-4bdc-a692-61a75b526eb5",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da0bb4a5-e0b3-4ad4-9816-f6b3cb6a887d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c05952cb-ec65-4929-84b6-e24cb4061048"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a96ddb5-cefe-4a62-bdca-2ce26bf388fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "52f9ca33-01bc-4b20-84fb-ad87d2a07184"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a96458e7-2575-48b9-a0fd-f37d73157f6f",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60cfecfb-b21d-4381-ab40-4f5b9c595175",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e2cefff-2e1e-4542-af90-2b3f533cd3d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8827fac1-08ce-4b85-aa66-e6382af755b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "b9f32aeb-6318-4efa-992e-72ff8e530805"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f03e04b-9824-4e35-84d9-4aa2791a8e96",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "085c6aa2-b737-41e7-8059-dfe8b9553c5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "857a1e6a-45cf-4523-b49d-13c5a8095126"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daf786b6-9930-4722-b19a-e3f1d7410367",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d7c0454-a372-4dc7-b8d5-ed6e6127b0c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a0dfb8a-d661-4b03-b496-35563022d3b2",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df23d5e9-5908-43d3-921c-d61eacb83547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82a05ced-6956-4a25-b235-b5a16aeb7006"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8762f8f4-f911-4644-9301-a3d7688526b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "9cd15830-0702-4de3-a26b-b07b37056404"
                        }
                      }
                    ]
                  },
                  {
                    "id": "316bf366-df3f-461a-9090-50d3c47a98c2",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c57c4068-ad3d-4097-a140-46b90ba264c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86e4d932-eb02-4d20-8902-9694a5c45a85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6605f279-33d9-4bbf-b88c-f699e1e27727",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd583ed7-8352-48e5-9d59-0abeb5876ba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e128b26-1a06-40cb-abe7-861e60fa6b51",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87e245a6-57d0-4cab-ab32-0e3b09a9f4ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02618593-65b5-4bee-898d-15b60ff148c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16cc70cd-c58a-4e2f-bd34-727eb5b72ccb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f08b27e7-09fe-4767-af33-689ee291949c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c011eb45-66f5-467c-a659-8cf58e1e789b",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43b2de32-9a6e-4727-860d-eb4b62b885ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab6096f0-d510-4314-92ad-b786b5305274"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34264fec-31ae-45d5-a18a-c60f9d8105b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2d217f8-f228-44a6-b9b7-b1b5badfdae0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b18eb6e1-a0d7-4f3f-b976-6590284933d4",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9722bc03-d3ad-4484-b185-c09734741f54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fe05452-27d6-4ca9-aedf-a8a064e3825d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cbe53f6-e96b-4fca-b82e-c98c09e3d98f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "948d5d1a-ecd3-4edc-86d6-56845f70bbe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2527a6e-b4de-4b30-985e-26d151c2208c",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfe27963-8af1-4f89-87e7-4ce3fd6ef4d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5698c6e7-bf5e-496a-9f5d-7ed27e927c51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03776901-ac35-43b8-8072-518fef82a06d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bacfab6a-8295-447e-ad0c-85f4dbf73cbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "931e49ce-0fd9-4612-b851-275c786e575a",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f2a568f-7522-418e-951e-a4f8e453868c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd76e17d-90db-4e83-acd2-317e5519072f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c2a4783-b97b-4caf-94a9-54e340de05aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "97469b34-b0a7-46f2-9259-f5ad2620cda8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a8095c5-01f9-4cda-829b-bf7eab6fe219",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d687038-d268-4f45-ada5-3bf0255bffaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d41c3bb3-af77-4f97-bcdd-4b5cc7234792"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0dc41b6-d399-4252-9862-c3a7f2524712",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f4f4e8b-c2d4-4e0b-a448-8085129e8bf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7beceaf-7b1f-4a05-8c3f-ad9dc9a14f5d",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79b305ba-7643-41dc-9482-a8554db5ac36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c9cc9ff-69c9-4732-9869-8ef1e2fc2f7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8619f0bf-df3c-4f9d-897f-ddf242de6e9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7d18764-93b8-4c5a-ba0d-ce794f524db8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7855c7cf-30d6-49fa-8a64-ddfe2388a7b8",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57e3f84a-ea11-493f-8ee8-6f7b496ad60b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "419d78ff-07c7-48cd-a6ac-51f0cd13d9cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cd018b3-b1fa-4a5a-acf9-00b06a69432c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8346cb17-2334-4acf-9d34-c39f809aabd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b28a7069-337f-4dbb-b391-cb7f159ba612",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "badb5440-210f-4e58-82a3-7f794e911616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31281239-51f5-40d6-af31-12b20d8123c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47c32481-7cf8-4caf-a173-71865fa4d0a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "901f6901-f205-48e6-9449-5f1837dd1e73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0281ae7-c36d-4006-a7ee-2fb6b148e3ce",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3985f01-b713-4b5c-85c5-271be4165b29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c347f09-a27a-40ea-bff6-ee5e9bd2abd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a10a3a03-de2d-4b0a-a9ad-7e2a73bbd6cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cae4171c-921b-4a77-b262-4c339454a5e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc6d0950-8177-4ab4-b75f-cbbff543f18c",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b23440f5-6359-4dad-a235-3a417c16ad7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "703f21f7-1e76-470f-b889-2f9bc0727bfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a7edc64-455e-4953-9272-2596c92ea6bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8540a300-8045-47b7-869d-96eac13d53dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f321b53-1810-4f69-85d6-f996a26ffbfa",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20cb0070-223f-40ec-bda5-0ef957e34d13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "875be8ff-6ecb-4c96-8c40-6c649bb23eec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf95da4a-896e-4c42-98db-4f27c9c7b01a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a73d13fe-0c96-4767-9548-3287e75a50c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33f9da2b-b5b7-4ce9-aaed-ddf7bcc08b0a",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7076ea9f-bca0-4d20-9201-e6576f76b1ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "066b5cc3-a178-48dc-84db-7adf7ff9c894"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "725ae6c9-6108-4680-9219-44c886d83e14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "62b44770-06b2-4913-add2-282ecc7a21c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cd6ae7f-dfa0-44e6-bce6-e2a40a783ea8",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "decf28e6-649d-47fb-90b7-b877db538131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3a8b487-04b4-4ebb-bae2-3e22b788d263"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef191f10-3b2b-4435-a8d7-62448c6be33d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8cc5f651-97e2-470c-af8d-24cd7be93750"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e54f0308-ae33-4f13-93fd-2c259d09d3c1",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f6317f0-1b15-45c4-a817-12c585edf585",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50145b92-69d6-4412-a84b-c4650fc9a98d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff22038e-10a1-4bac-a63a-ff2875c9ebde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6490555c-9936-4312-87a0-fc0f3dd9e0dc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d34775d1-a55f-4d65-b8d9-100c7048cfcc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c1cef38b-daea-451c-884e-331b2b275ad4",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac861c7a-3bd6-4b21-8c70-67a5d469983e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f7cee00-524b-4200-aba9-f42801e50944"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "821657a9-258c-4839-aa88-809bec15961e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b2616031-70ac-4afc-9431-5061b3779258"
                        }
                      }
                    ]
                  },
                  {
                    "id": "879d09b3-2cd9-434d-a70f-b6915e69f8c2",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6abc8651-13b6-4322-94b0-d05383ca78b3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "532e455b-3baf-4130-bdff-6bce938dd018"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39566c13-df17-4e63-8bb5-82d343d17744",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d3ad9693-5bc3-4e91-9048-c18be038fbb3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "730c1a26-9d72-4152-9c24-521ee46f749f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "40c4fbfc-d1af-4f0d-94b4-d780de75ad80"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a9d07c0d-5615-4138-aa50-04a2afcca82e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "83b029d3-9866-4e8a-bf75-3c27d87c5f92"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d22ac405-e01a-4dcf-81e8-ae8dd3563f7f",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d5eb8e60-2d18-4aac-8567-30412c8250e5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "eb85728b-ca1e-439b-b4c9-17c9c358405f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0e0d8646-ba48-4c04-8ee0-270faf4dfb99"
            }
          }
        ]
      },
      {
        "id": "24e02bf7-d2c0-4b24-b261-2449ca327fda",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "72f7def8-2585-44be-ae2d-7c2ea8e18733",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9be26854-b853-479a-bbd7-0ca483d16a8d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "19ee3b76-06f2-40d6-9c45-0617b6e5e6af",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03743c85-0747-461e-81b9-0fd0103454bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4378001-16ba-46cb-bf88-0be9777a1135"
                        }
                      }
                    ]
                  },
                  {
                    "id": "811c7e20-fb92-4fae-8be1-6a576ba8ec2a",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4687df2-9ef9-44e4-8bd8-115d6d4f7a81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c5ab28c-a3c6-4c1b-a6a9-0ceb0728b8e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb4a1506-2f7a-4b34-8265-014223eb5088",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d23bbbf-a305-4d53-bbab-5ba77e030e16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f70a2db8-ca5f-4666-8038-1a74d2b6f265"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11055e08-222a-404f-ad9e-19c7ec376cf1",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a5051fb-56c4-4146-bb59-ff98a9942656",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71fbd2d6-3c5a-4763-86bc-08dc35f9df18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0b86e01-c082-49a1-8ab2-74ba4553c084",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25ae501d-8158-4f2c-a835-7ec0986478c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03f21347-7ef0-4e89-97f6-f0ae88075a83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c45da1f8-d237-4578-a60d-fab50083091a",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa85ff74-6abf-401b-b863-08358e48d19e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcf4b8f9-5861-4a5e-8392-037d96503eea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdbb05dc-a560-473c-b9a6-4e803181b3d0",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "849f774d-d39f-48fb-bd02-61541a1dc958",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ece74b3-3e38-4bf4-8bc3-f6c2c455818f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddb82186-58c4-4143-8af5-0dca2827e460",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e350c83d-aa9e-4bfe-a778-0caf522ebbb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37c26756-69ba-4b50-ab7f-26ff57945213",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a12091ab-f585-446f-8894-f56b40066d7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c402b1b-bc93-41bc-846f-9bd64f28e9d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c1bcffc-3d14-46fc-9ad1-3bcbee6ae054",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "555ccf9c-c803-45d9-aa75-b1e0245050af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63a214ff-797e-4a13-9d07-9e5c8bb1be5d",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42b1823a-0890-4317-ba89-8c2ffc741032",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d634f6a-9b2c-42ac-b8f1-b4626860d9e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc097bbd-aa7e-49d7-9f07-4a9569e712f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14ccd7b6-fa2d-48f4-abfe-002c2a3d0354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec8e2c8f-636d-48b1-b0dc-639108cb6d9c",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0b3a1cf-b894-4d51-b4bc-ba90c1222f7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d17d83f1-72ef-4cd9-88f4-74fb592c2a14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3e1a32f-3882-4260-b307-1818a11e7539",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e000998-44da-42a8-ad95-65bdf66ec38e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d60ee751-5f63-47f2-8975-80c8a14167e0",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07a274ec-8559-403b-9026-bb1bd21a5262",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b584127-a708-4aa6-96cd-db8b28c4c751"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26382cc7-94ec-4a4e-a744-f6d4e48fc577",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d69d20a5-f0ea-4d36-911b-1f0e86f53834"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48db40f5-5e31-44d7-ba9a-8cbf41a7096a",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b728462f-a23e-46d8-a924-010c4255236c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a07e7a5-4a62-44cf-ada0-2be3022a5e38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8316a366-0114-4488-96f9-2815f2464133",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92e811ce-ed87-4e06-8ad2-bb3858276cdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aadf757-f175-4eac-b0fb-97902c6c1847",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5866e0d-bea9-4b3d-908f-bc32e6490f35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64a018ae-c420-444a-a911-3b9dd5ef5ea7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "242217f8-edaa-46a9-a63b-61c275b7db98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9746479b-ea27-424e-b326-462173901da4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "963fb9e4-7ce6-4506-b2d8-fa6099dd0c9d",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a070d9e2-5d20-4c1f-837b-96951a1bd44e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74446eb9-ea24-4521-bb1f-ed69de776dc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3064e9ef-7b6c-4460-8656-595113ad58c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18d5f022-4f12-473d-aa33-e6181e3619e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1da6fa96-b4d7-4cd3-9c26-e091c95255c4",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83a0ce33-5779-4e54-a93d-e3a77e6d9fb6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "647e077c-e2e4-4b3f-8ac0-aad333fc158f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c6802e6-4df4-499a-bb96-091871419efa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e58abb2-18e4-46ae-ac6e-3c2342e7d140"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17f5ae05-93cf-4ddd-88bc-ca7c90afc43c",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6504ba82-3a7f-4a69-a5d0-6c125c0831fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c2b50be-5e12-48d9-b78f-d9d695023869"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ef32260-3af4-4b70-8546-d1c73a037e89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cad8d276-cf87-4d0a-aad6-807db1c81a53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77093fbb-d22d-4e81-8077-206964d7facd",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44d09bf3-2b11-4671-998d-7b1ed50c8274",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "680f3ac5-0c31-4ea3-8fa8-efb849b3fd7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e92aba1-78a9-403a-b200-44ca3a04f6ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b84eadf0-1d00-495c-8370-3e403c650c98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2e18260-33f8-4eb1-ba0c-3020345779fa",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c9e7e82-db2d-472a-ae85-b4593c2e89fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dba0cdb3-9eda-44ba-ba55-e64f4ce30df6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6c069a3-54a4-443c-88a8-22de42758460",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bf19199-4c1b-489a-83f4-9a79581944ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "118ba472-220d-4c93-8b37-9ddf73fd5276",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26a6faab-86f5-4a64-a359-297e91645d76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9995f2d0-d2ce-45f4-bdbc-23b672acef79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5ac5938-cf40-42d6-9eb8-d1f4f53e7e59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c95fc016-cc13-4657-bee7-ea0179c62218"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ea3257b-072d-4198-9d4d-0dfe482b34e8",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40279c5a-1d2a-4af9-8401-6821a5103f66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ecae7ec-396b-492b-b623-d6345eda9843"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f51cf789-1b03-4915-bae5-42069d1280d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70b1c18d-e064-4171-a1e9-00589e0da3ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f25e304-42eb-4ab2-8746-e89798eb1df4",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d0b1e19-065a-4cb6-99a9-15a0382c94f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf4b84b4-fd0e-472f-adc2-77c80c91032d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f90056df-1372-4e70-8d0b-987c190e3778",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "754ddd77-8a0f-4cfa-9622-75cc45b9f062"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92fa4a68-16b4-4c10-8d51-4ee060aaf1cb",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5ae2fbf-2269-425a-9e4a-8c55bbb298a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4ed3d96-e98b-4924-82f1-4a4233697ce2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41f2253e-ff8d-45ef-b4f7-3bd051a64f3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba8c6063-7e4e-490f-a2ec-c43a74cc5424"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca6e8ad5-814c-4d7b-b61a-d85148d3600b",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc8daceb-b1be-4a79-9e0a-508b8f5fae06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90dffab8-a7d2-49c8-9112-f14097bfb753"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52c057d8-4450-4fa0-89ce-dfa9f0cf8b12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b6248ae-4117-400e-b83b-3d95aa18baf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f48b3863-01b8-4e09-b071-ade0cc983af2",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8631e21-01a8-405e-8edd-653005ff624d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a49e4416-b501-496f-8eb3-268d854ef54f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e04e7a9-3951-49bf-83a9-7f11bd3e83fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75f9944d-3c10-4ca8-a86c-24a814a4e894"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95c955da-73d1-423f-b9fa-750f77d63095",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9d14064-96b8-4e60-ae9c-f2011e4e0897",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc10a8a2-c54b-476a-92bc-5c0c8dc4bffb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fdc8241-7d06-4e53-acf9-066d4f5fba76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29fe6065-9451-43ca-8417-bf5cf2ae63ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "203b0d3b-f6df-47b1-9e43-4659279a0732",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5189d637-5c96-4ef5-8fd6-496e226c7cac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dacfcb2e-b07f-4038-a158-fdba9a51e230"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85e67bbd-b494-4088-9838-ecddd0d125a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f3770a7-16e6-46d9-a04f-d2a4b06d6ba7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fea94600-00e3-480a-b7d4-5742be87a6ed",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60061857-cf68-4fdd-948d-0fed2154968f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84239931-4a14-42fd-8d63-552da2c11687"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3253f07d-d95e-4a35-a3c9-8184f2b9afc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abb63c1e-32e3-464a-b4ee-47ad189d8f17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "630c0ecf-47bc-4208-ad8d-804ae17cf5b7",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67dbd8cc-8558-4238-b805-5467e6e82029",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eebb5864-4d00-4446-ab0c-20958ebd3e0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a677b08a-dea5-4c9e-b3a6-622a42ff24b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2feac198-800c-45de-89b9-c91a8f456511"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8a5abff-86e5-48c1-98c7-4311864bfae1",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e4fd079-2a10-4eb8-9394-bd112711a8a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07188864-1d58-4d56-8032-a5793e65179e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f892f57-d532-47b2-b363-98680375e3f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a755df3d-e1ef-4d07-b59b-22f4be55ef8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8da2dd8-b9af-40b1-85fd-a9273d111786",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6f9b85d-442d-41e5-9207-8090611ff748",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d879ed5-0b6b-4b3d-b0d0-ff60348095ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07f6c810-e005-402b-aef8-0a23b0da6245",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14f2896e-d355-495e-af2a-92c44db2e1b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c744d28-d4ca-46cc-a1cd-a45f4c57bd9b",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6699e43c-53b8-41b7-b9a0-a58821710c34",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4900b975-7cb6-4216-aead-0a0d755ad9ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "410ec766-bdb6-4fb7-b779-420c80c0eed8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13b580b5-bbbe-4102-a0b0-e5cebd21d4e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "346cf66b-1a69-45f5-af8f-faf93c3a8ed7",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c8c391a-ce74-4e0e-a22d-8ef3e86f1a62",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ed647ca-6149-40a2-8483-80373dab5415"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b289650-b7d4-4e13-9d75-2507d93bb928",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6020591c-d7b5-4065-a8e7-119155da81ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d43d556d-0e9e-4249-929b-77669d912671",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0847098a-6d9c-4c30-a21e-084ecc9baafa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37ef8acb-3cba-4e5f-9ca0-7f88b005cd37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f00c098-480c-418e-a92a-b0488167da6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1da57b81-2248-4296-9db0-9616b0220e58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bc60425-c9cf-4c61-aee1-8ce341920128",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a1a85b6-38c9-41f4-8f32-b7ff211f6f0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "abb7d17a-0966-4341-be8b-0b672ace3add"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dd22d37-7244-499f-855c-5875d586d58d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b105093-c90d-4e99-bbf7-79681624acc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "602b2ccc-17aa-44a5-afc2-95aceba1a046",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "875284cb-cd59-4e50-bc08-f8e031663a56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4a1be97-74a6-4fdb-bbdb-15dd3851c158"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8108202-a702-402d-bb1b-adc47935cc11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a9fe156-0141-49de-913f-5812b2e7d169"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44c9356f-f1bc-46dd-8d80-b10274d0a09f",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ea5af47-6916-484a-a05d-f526151524fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ac1cdd2-b318-4f14-b2d6-7c5af04a6dda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61a1fd39-1e14-4d9c-99f4-372085d233ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d18263b-aeb6-40ef-8e7b-927e8b743107"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d881938-aa27-4544-9192-ada950b3c6b5",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90ef36af-60f5-4d36-b5f5-e3d4d9d55a7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88c77a1d-3aeb-46e2-83b2-c6882e9eca08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82ef8a94-2b7d-4bbe-8733-a57d2960b3a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "238e2fd5-eebd-4c95-9268-9fab2074ee1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bca92156-b3eb-44e4-ae56-0482e46f69a6",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d1a139c-1323-46b6-9daa-a0bb2cd9f0e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f955683-4056-4e2c-91be-fc3eb54088fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ed9c59a-15e7-424c-bea9-7d9908e8e6eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b2e1eee-9df7-4e7d-ad27-94cf724e9fc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed5d2c47-f560-42ba-b08a-634b31a5d0f9",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e343ce63-4cbc-4550-8257-0276410bc318",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37895021-f68a-4991-a776-1bdb7db43d04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7a6b415-89da-4e68-b749-5bb9f2081cea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9db582d6-cf62-4028-9859-088cd4cf32e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9962a258-b750-4acb-8f48-287f93a1b007",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99f64f40-dfb9-4d6a-ac13-3e8d21c18d9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9c1e4b7-42e6-4367-b912-6fc92a79d18d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ba7d426-1740-4e7e-be60-8cd34320c4be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b24a4813-9c3b-4b99-bad5-96f9b072528d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fe6846a-4977-4e12-a144-45d833f8f260",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02f86afb-f14f-46a4-adc2-154934b6acdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60e5774a-627b-4a2e-a207-88edf7bb0354"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59ffa8e8-e866-4f4d-ac20-7ab1974c3804",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7288f6e-4290-4e43-accd-bd50811c2580"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08e8d8b7-588a-4c8d-a43a-6ccd6f075d3f",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c306d40-efcf-4a38-b228-9aa5a6f55a0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62992175-e797-4730-a462-8402d373bd6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83ed64fc-e58a-4e3d-8e78-9dca31b941b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b2ca7f6-dd33-4663-afd5-537770409b5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8acf5d31-aa55-4a50-8d32-c44ed0990308",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f069319-5bac-4a3d-8594-2eed8ab528ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b6e4cff-8695-4094-9c36-e1f7839e97b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "681f42d1-b04b-4344-97ec-e1d51409068b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b7bfd46-906c-4cea-820f-c5036172e317"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b32e45f8-27cf-4af7-a327-5e8eb7405955",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa74e54a-414f-4c39-af0c-64757a3b7658",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6650e2f-2b80-4a1b-8bb9-02cffd735431"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73281448-cd6c-4da8-8c9c-65cb3d7f2441",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b07aa4e6-3a18-47a4-ab0d-7b9a0efa455a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21bdb09d-3ca3-40db-980f-195c1d724f54",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d5e274b-b2cf-468d-96fa-d003babf10e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09dff7c3-955e-4fe7-a742-156c8f03354d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a073e30-9d73-498f-b198-45ef217f5a88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8a10259-4261-4df6-a52d-609f151d1c3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1455cf6-a913-45f2-b4a8-321612c202e2",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9a9eac1-3a7d-4fb7-8260-c7cf5ba41da4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "172d5761-1143-460b-9a76-590227068947"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a854b26-1757-4834-8866-bef04a11c56b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a20d7ffe-4744-4342-bf27-250b5392dad5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a0a794c-593a-4e6d-be59-c2ea668492fb",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d69d1e43-4160-4273-a8bb-7f8f0ebf07ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "512c3d2e-4ad6-4035-8a4b-91514f082a7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24e83565-591f-4d11-b992-4632236d667b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d480bce-6bdc-4195-bbf7-98150200b310"
                        }
                      }
                    ]
                  },
                  {
                    "id": "483c8c03-440f-4fad-8ef4-2754956f5c77",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23730c26-e03c-4a9d-87b5-5408345b4eda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "894f3821-f276-4de6-8d39-fba53e507286"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53e1b6a8-6475-4789-bf1e-53db498dc325",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "481d546b-7afd-43c5-98c6-7890781feb06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8ff1fa0-5c83-4aac-959f-eaea8d9891d2",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4d356c8-3371-46c6-a3b4-e3302dafe78f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e69dfb7-644f-4a27-8d87-f7864e94b037"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9c393a0-dd04-4287-99d0-12a162e36fa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbe0110a-f3d8-4e04-b572-361745a4448f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "917d6286-554a-4587-b8f5-3cdb341df411",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f3715c7-9fc1-4050-9258-c66be2dbc6db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "506c00cb-2838-4ddd-9fb7-62c4ab032e28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc3f66d9-bb02-45c3-a450-b193cef87b88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "878ba63c-760a-4db6-a5a6-d7c789c5bb6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fc4de8f-f38e-4295-bb92-b33a721acfdd",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff38e888-4105-4148-a3b6-2ea94e01270a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c57b6fc7-dc06-43b4-b1c4-7d8a7ffe3c63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ce1b463-85aa-4145-bb3c-357452e3716e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "536894e0-907a-4310-9efb-4c2f6bde0f16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ae7004e-eaba-4247-beff-6d0b2cee5205",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5648a90a-f869-43ea-a827-e50bb5a4531b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26e76ee3-a5fc-4ab6-a9fc-bb300372afbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "897c8bcd-3e3a-4432-a7b6-01965d7c6623",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ae2a43c-bade-4c17-b1ee-4b6bb5a6bff6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f978422-7ab7-45a0-82c0-80a1fc61f223",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f433b7ab-ba81-4e72-a45d-2f0898f15047",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4705890-3978-45e9-ac55-ebebde627c9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62bb49f8-a843-4b0c-9c5e-6e52e04fe313",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "763ca81b-9683-49fb-a444-1f3a43548494"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b070f473-4321-4b6c-9ce1-8ba023defcc4",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c70785b5-68b5-46cb-8482-cd488d798756",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9432da59-2dc4-4db0-a413-b753a785deb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eced698-0e43-4069-8d4d-efe7d0eafc6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f777a8f9-e124-4125-b637-86f4f0eb9649"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea053351-d8ef-4bd1-942f-e55a16f28792",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fad74cb-ac79-46a8-a6e6-d33e68296174",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b196dbce-8f88-4f96-a149-d6d52353e8a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afdf4a7b-a7da-4dea-8401-83557ec855f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "190f8ec8-bc85-44cb-97ad-0d011ccf8199"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6657634b-ccb4-45e4-928d-a0f8414b876c",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7d9eb82-35f5-47dc-9f65-7b49e91433bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97a64917-d968-44c1-bf6c-956a44695df7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6259c21-8665-4038-931a-8a9ee3849dbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a804388-0012-412a-b15f-d45869004740"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a86a6a9-068c-4b91-a61d-6a5f7152437e",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4de9badf-615c-4f0c-bb49-4b1d53790e32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54e5a8d2-8202-4909-815e-a82e1f043a4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dbeb977-9b3d-4e9d-8324-4481e1a8b7ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "154329f5-b42f-49d2-935c-0027e1e97b01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fc1c1e1-590e-4f54-96fe-83befc0b2881",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5a4b110-5cc0-47b6-8520-14f7386f100c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f8985fd-64da-4a0c-933a-6106def40f55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e0e271e-9e10-4130-b3c8-c25e071c26d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed62d8d2-8d4d-4b5c-bbb2-ae3b5d92e97b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3f82ba8-b5d5-4095-af7a-5078c880c998",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecb1016e-8497-4d6d-8f63-793dfa562605",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "451cad4e-a926-43fa-8a7e-3960c039952f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a04ac83-82c4-4713-a26c-5c8dd4fc3fd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db90783e-5a38-4088-b538-86e22504ff77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a802410-df0b-4dcb-b4ae-51f43f69ea7a",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b79356a-34e8-4d30-bbf3-5b1996f37273",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb43d12f-4652-426d-9738-1d518dc7969f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f474e82c-4658-42db-aa04-803e1d7aedd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6b796a8-bc82-4764-8707-b96dc4a1b044"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68feb085-9544-4055-b9aa-13d58c596e6c",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a94ffde2-bc3e-4bf4-832e-49fdd7a17974",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d53358cc-3053-406e-976c-680c265262a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "792ce850-7da2-4520-b9c0-6f8aeb28e6b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1cedc0b-21aa-4186-9f95-3c3a2c7cbbd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "011eb591-0171-473a-98fb-19c8619c7011",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acefbb05-d6dc-4d64-a6cb-883d290c28a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7281e889-0d7f-41a4-ab35-9bc06f7a4aa3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccb74b21-80fd-41cd-8b8a-f15921e1e368",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f09f7ac-52ab-4a56-aa55-55ba4c51cba3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26e5ec8e-296f-4d8e-b8c2-c5e90757b9d6",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33340da8-79b0-443e-97f8-032aea861f84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b03d9ed7-550b-4a92-bc32-5be89c9331ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ba098ac-017f-4fe7-b735-933b57ff5996",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cfe8f93-ecbb-4b2d-b4ac-c2e8ba690c05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d0f087f-d033-4ff9-89ee-2e0eb93a91c9",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf9ca361-6e9e-47ab-a4bd-3b306b2a9f19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e8b7086-7632-4068-a0c4-97e76cc61484"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5118d38d-95e0-4645-a9b2-c5a52976e48b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd0cf3cd-226a-4757-b369-d71bbbf78623"
                        }
                      }
                    ]
                  },
                  {
                    "id": "096a74da-7e82-4a83-a097-bbb8ed3aadc5",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "919e267a-6c58-4a5e-89ef-e2dbcfcece98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "672a8fa9-6e32-467d-af09-c7322648cc20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "043c86df-c6e8-4f40-97ed-764830126e64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c71064e3-32b9-4b47-ba41-b1ba6dd0f42c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27aaf821-04d9-4893-b7de-23925c0c66e7",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a92c74cf-4c87-45e2-97d4-803e095d404f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3907f998-af2f-46a8-aab5-86bde3d4fef4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bbf2566-b728-4265-9346-945801ef09cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e972378-1d9d-4147-90eb-b99c11bf07a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9fde5ec-426c-4e4b-b24c-b82b901cec0a",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b6f2ded-89d2-4da9-ac8a-9dd1bdd3cd7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "292f066c-c493-41b2-9a3c-40b4e02f7aaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7305453-a944-46a1-9c72-4e52e7c38302",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ab9750b-4978-49f5-ab9d-fda00263c847"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e5c5b15-8bf4-4238-8c8e-33b5158185d5",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dadee26f-bb3d-40cb-ac34-e182b6d1db23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca159fbd-7265-447e-a5f8-0de3c707fef0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "180168fd-da5f-4954-9e02-88c5dcf430b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e0b64e7-be8f-4d95-a831-4835c3d2eb1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e297caf-9072-463c-a2aa-3d20b475b74d",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de43fcb6-2ac7-404d-a5e9-112592790d3e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4799db53-d7ca-4090-a855-1a19ce33ceac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ccf812a-5ce7-495a-b220-b8755ba618b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cd7ff6c-a9c7-4425-bbae-e9728cf36c16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69c86f56-038e-44bb-8c91-a50d11cad9fb",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9023a846-05e5-46b0-801b-9d2f2af115d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd7cca60-2961-4d1b-964c-313b3f379df0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ee0e949-9a87-427c-9554-c9a149d4a3e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af79306e-285c-4965-b575-3f43714c4274"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51939693-aa96-4f86-8920-11f8a369ede0",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74e7f26b-e32a-4836-9af8-28c65564b6e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55a621e1-e9d1-4716-8287-aa4cee192b64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b82fc8be-d5b3-40a5-a7d8-f63fb4389aa5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3677e73-e36f-4a06-8e35-73c42848aaf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a777c33-f4da-4b5b-9a2f-d0bb336263bb",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5034afe4-dc2f-4ff2-85e8-3af415b64bab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2509186-bf42-46f7-8d6d-f78690911f16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b40a840-ea0c-4805-88f9-3b39b8bf3cc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "830e599c-a108-4187-9e5c-d1cfedcb9f2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bb90a76-95f9-4a4a-b43c-1bd97850e503",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65aac2ce-5d60-43e2-b396-fb8191d89b42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae02c4d4-ffa7-4df6-a998-7f4e3c1cb07e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39c30c2a-1004-43f1-8797-2a1061c87952",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00f8c666-427f-4d56-ac20-67504bcd206b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f80b64f2-3ef4-46f1-b39f-7db5e2a65fb6",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74f4b40a-c74c-44b3-911e-751df3b04d3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b22aa3ee-d140-4ee5-8f55-c7ca83db6666"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "654eb738-0ce1-4709-b6fe-c7c9a5fd7f95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9287ffd2-26d6-432c-b435-0147a9ffa268"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5e98cf4-51a1-4853-b049-8ffcc4fdd837",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c1fc308-3166-45ee-9948-48c69d96eb4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9cf00f16-8011-4833-b9f0-deb5bfc273d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5faa730-a1ee-4110-be0e-a66dce5f76f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df37bef0-7b74-4548-8b17-f88a5cbcd1cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c01ff61-11bf-4d90-b5b4-97056b572a3b",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7e0c9c2-f520-4180-9c63-3847f1c063a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "502d2e2d-737f-41ac-9778-997abac3458a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8a8364e-48a4-4ec8-82c9-22437bc69154",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc39eabc-7ad9-4a7f-891a-c7e9445e7dbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77f4c6be-79c0-4e96-87a9-cb67a877dc78",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b6bfa2b-e77a-44c4-8c4d-f479791e46bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3fb0457b-f6c5-4d0c-843a-3979ecc53f27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9565b41d-b70a-4736-b0e2-c47b6d3367cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43e5281b-5dbe-4d7a-9a6b-59a83d3b4824"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d65211b6-0d45-4dd6-a17d-e850af6e32b4",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a487d6b1-c576-4be8-b83c-572b11ca3098",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b5813d7-7cb5-4300-9250-2a00abb68f68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "233e3e37-5270-4c7f-9f5a-40b71a4706e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e947fca2-882f-4341-b337-13f6826be9df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f024bfa-c8c2-43ed-8ff2-dec7064f104e",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a724da6-7407-4341-85ad-773f850b09a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ea2ed3d-ca40-43b3-bb05-dd236357d10b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f11394f3-c0bb-418f-977f-8c966c25b193",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6725bec7-5d32-41e7-85c1-413d7e539643"
                        }
                      }
                    ]
                  },
                  {
                    "id": "405196d0-dade-478e-8c16-647af63a4f55",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c38297ff-9b6f-4099-937f-d3fd6059aba5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39ff1250-5872-4913-8ef6-e4ce184c10b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b0ee357-7ac6-4d67-9809-be41f48a9a01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64eac9c5-8b45-438d-a339-452208422f5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51205c2e-4351-44e5-80f9-990fd43c9010",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5362016d-b31c-44a2-9091-1cdec8dcc947",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49f4d264-b11b-47b9-94c4-a407be9a4d0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b5f19d6-3e0e-4ed1-a247-166024efd806",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52ca7b90-8438-432b-a5c5-648b92da4432"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3774df55-3825-46d8-b702-fbcee58800aa",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e679cfcb-2873-4a77-8dda-fc57b3dbe36a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "774475c3-1dc6-42c5-8580-80730c492cd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fffba4aa-6ae2-47fd-9e51-aa370426cd40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e179e3b0-db29-4dd5-b986-7fbe8cd76b1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beafa115-d1af-4ad4-ab55-dd2993ceb3fa",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1e5ed39-9afc-4123-8847-0e6afedb4b85",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01bbbd53-a202-4f48-865c-de52c9a62c7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2463d96b-81f0-4ea9-ad70-3619708961e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26f6e5e1-597e-445e-9a27-30818d49aa42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61db4bf3-1ffa-43f2-832a-453ef3b43d5d",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f560e2fd-411a-43a3-8c3f-2850a08221aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab97f2ec-f3e8-4d96-9f05-c2ab1325e290"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "906c2562-7148-48a1-8454-922501d2beb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31ddb234-37e1-4824-b80d-f6976f5c1bb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89332fe3-4187-46d5-94de-9ece579f0d57",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3feb951f-0899-46bb-96e8-fd2629b71ef3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5b4aa1d-a711-4930-99c0-d08ba3a33b7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea55d207-dfb4-40fd-b1cb-75d7e9b17dc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "926d0add-b842-422e-a511-dc1f54f0c444"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9032085-f502-4683-a765-971f7c1032dc",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "889fc169-ac3d-4f3a-ac74-c6a041db9fa3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b54ec822-2072-496a-b0b3-b77cdaffcc7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b309d29-b855-48f7-8953-76596775f8b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38c104a1-de96-40c1-9311-55eebd3bf923"
                        }
                      }
                    ]
                  },
                  {
                    "id": "547687b0-e504-4ecb-9185-eb5c1b3a216e",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd90fa5e-8352-4dec-b483-5fca6cd34ea0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b77e6bd-4c51-451b-aba6-bef6163f9170"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b72b748b-20bf-44ef-a3ef-3d14c4739c3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6943aa9-8e9f-42b6-8853-ff794c78cf9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "923495ea-7331-45b5-b5c3-cb91349a20b3",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e099999a-abe4-453b-bd9d-60de6bab4f1a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac7bd590-1c4c-4f41-8890-e7e8018e27d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e37568eb-4fd0-4097-a9ef-0417bc7796f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b8fbc40-7cc1-4c4d-90fc-e45bad6ebe10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e9f85d4-08be-4cb1-888e-f859b5327daa",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1bf1bad-70c2-4cc4-8ba6-5384d9e7e0b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7849afcb-17c1-4a81-88b5-71addf8a2b20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77b668c3-d0a3-49a2-ae5a-d2a007076490",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c90332c4-6f80-4d31-9303-234dbd2e10eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3245dc79-84e9-4492-81d0-27c6e0bc9e7c",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af30c1a7-47da-41fb-b16a-bc615d110c44",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "095f922a-05d0-4f56-8683-cd929934c752"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52181133-865c-4022-a3ae-98c608c93d87",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3485fa6-3b06-4bd6-9e7b-1df9f34b3701"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ac4022e-1321-487c-8600-75de474d1477",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca3a6e4e-b42b-4203-b4c8-65260deb1601",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4bffc5b-d339-44c1-8340-dfc7131bf9b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30ac345d-3f15-4a4d-9523-8a192a305887",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b27f9c52-0e12-4032-9552-a0bc4eed5b77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5a9b876-4ba1-4119-99ee-dacf59646c22",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aaba9b1-da86-460b-bd66-b80985f43d99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "073c31e0-3a8b-48c4-83dc-819726dab0a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6187e43-b029-4c4e-ad02-3d77a1487057",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78ec25f7-a48d-4372-a9f7-3c18eb14b1b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbbded76-0237-4235-a150-f7421a19b9f0",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f3a7c65-71f2-477f-b0bf-75d20abca13f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "200aec8e-87f0-40f8-b2a6-d06f851e4c01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e531c7df-3c8b-48b4-bcf7-6d99f9676ba8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ed081fe-c8b4-4804-8abd-73b95f4d7310"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8a312d1-92b8-4f0e-802b-c4e3a93a9833",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4f46dba-8027-4f41-8c9a-75e2894fea19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01834a46-4e2f-4770-b311-5219197e89a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e88b57e-c2df-477c-901d-8d72932c15c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30560bf6-c4e2-4f13-b341-08a05c288097"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b0d3c30-39a1-45b8-9391-66d82aedd383",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fa08409-851e-493e-8d6a-c4d6d6dfedfd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "753866a2-bc23-4977-a54d-8167b9db7fa7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1201c355-97ee-4dcc-91f0-f62a2ca65e98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "720b2a0d-3f36-4879-ac90-00414fc1ce53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87057a4f-23eb-4b79-9ad5-ee951a82d613",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67e779ee-883b-43b4-a4fb-e7cbff6f0478",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07498384-d9f0-4618-9ad1-908ae7ecb116"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74ab652f-1f32-4e82-b281-d15d2889ba05",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2824eb9-5570-4dab-8fb1-a1432e51c430"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ab0ba4e-13d6-4316-a2d7-37ecdefb8d1a",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae1b9877-7744-4e30-9674-0a39fded4a74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "939a5cf3-6f2f-4526-a570-8e0c857dd2f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b74fd10-07f4-465c-9be3-05da9e8a09f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e562bd56-3773-48b9-abee-fe981b2b8448"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2a3a595a-3b76-47ff-9337-3b76c0b96e7a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4847cc1c-3527-4f0b-938c-ef8c14693ddf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b0f4c3d3-657c-4830-b6e9-e7d9dbe6f112",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "32dbc053-3a5e-4a05-8f15-0e54c5b0b887"
                    }
                  }
                ]
              },
              {
                "id": "06c1ceaf-54ab-4df0-ba5f-9b2262499caa",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7737a60f-adaf-4867-afbf-59a8ca204ec6",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aeca709-2ab5-410c-8bb7-97a5fbf75748",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "6a03e17c-43f8-491a-936c-0b9583f9427a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d854294b-598d-46a1-9b9b-359f5b18fe97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "32ee8992-caaf-4499-bf20-da6f722ff9a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2a64e98-bfd6-46e7-b56e-f4f2cb0f0d73",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50cbf33a-05ec-47a6-aac0-4ab7403c2f04",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "f5d2ba89-cd98-46fd-b337-7b141dba35c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c2e6892-c95d-480a-b23b-86414cded855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a3a9d485-ca90-44dc-af7c-9dff779686ce"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eea9353c-ef28-4e32-8672-9fb628d443b6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dc7d45c1-1a6f-4b31-9c96-8834845a97f4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0e800367-87a4-42cf-81a8-c7e7f790734a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ac7b1e3d-cc89-46a6-bf3c-9cc53f01c5a5"
                    }
                  }
                ]
              },
              {
                "id": "b34e050b-3599-4639-81e9-666da4dc78f1",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "1d7f2bc1-e871-4994-88ab-a73f60179ae4",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cc6fbb0-ec26-4672-a12e-d213df52953c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "c289d7d6-3d61-492d-b8f7-f3830fadeaf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d8d7b7d-7aeb-421d-baed-1ce3fc9ae2ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "903ed7b8-ee9a-456f-a22c-95d92ca36026"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "07147e8f-6284-4a4c-97ae-4925c3912e0d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "727a2a2e-f627-4f80-beb9-0ab54009e238",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f09503b0-1d24-41e8-a4c6-f908e2ca3d18",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b19146ae-c0a3-48ec-8a17-3d79f861ff04"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "15618ceb-bce3-4154-9b34-ef1caf3c38f3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cf7f4850-245b-4495-8f1d-14418b7319ea"
                    }
                  }
                ]
              },
              {
                "id": "5e5da6a2-a96f-4fb6-875e-ae19d8722c31",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e772e114-cb69-4040-acdc-e60309e46bed",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "0cd83b4d-f22f-46a9-b959-905eb6848e8e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1883db52-36d9-4054-9ee9-624f8f037f0f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "661434e2-1013-4d45-9880-483d7a4bc234"
                    }
                  }
                ]
              },
              {
                "id": "57000b48-df04-4771-a691-d85c4b86719c",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1763cd7e-b579-4f79-9075-d412261e3e86",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "05c2b2bc-5544-4e0e-a461-6cecca103af1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "74ed18df-196c-4587-a507-8f503d95f4cd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9dab6aab-8a96-4511-a690-03f57f4bb3df"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a43605da-8b19-46bb-a765-22996d043416",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "5860ecca-2883-46b7-94f5-91e42a6477a4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9058b555-3f86-4f26-9499-b7b51b122907",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8b95c6e9-bdd5-4fb4-8d77-ee06ef5c1435"
            }
          }
        ]
      },
      {
        "id": "c01eea86-8634-4c5d-9490-15f0d51b7948",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "a54bb9e4-d928-42a1-8c93-08f176ab6fe9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4a2e37c3-f50a-4aaa-9ddd-2c030d1d3ccb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1a0720ee-fb2c-4382-a838-13a5d1cec61e",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fac813de-dac5-4402-a950-cabce864d26b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f4b657ea-955c-47f0-9b63-ea0a602baf21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1602b209-60e2-4cc0-a9ce-54f3e9585ca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "683ed761-4a0a-401e-903c-740000eae074"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02189235-3bf2-4fdc-a7a6-cb28f8a99480",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b783988-96b3-49e3-9647-e9bf6c556daf",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "fbe41b05-5691-4a5f-9d12-3afce57e9766"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "106aca51-6ecf-4cdb-914d-3a72e0210367",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "54eca3c7-34da-4f42-9e8a-f78eb69dc742"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "52a3f8ce-3f47-47dc-b958-830ddaf82cf4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "70c394fd-190d-40dc-b1e6-26088da1882a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d3c1ac98-03bf-4d33-bb62-a8d63f86a4e8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "16edb566-0361-41ed-bea5-d383e0d07ac6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "318fc808-c16e-497d-93cd-3caaa4579fa5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "2192f945-8962-4095-9436-bfd90e21a058"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ffd4d098-6c31-422e-ab2c-d94e19f1942b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "752d5454-53f9-4d80-9b3b-fa10cfcb0f46"
            }
          }
        ]
      },
      {
        "id": "3a56e6ca-0c97-4c04-8f33-c36e7bdc81a5",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "ca9523ee-fdbc-4815-ab61-afb87cefa126",
            "name": "Negative Testing",
            "item": [
              {
                "id": "825e6ac6-1fba-4716-938e-19e66b266ede",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "492c9107-c830-4e4e-9dc8-a7672b1e3cf0",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88bef6f2-36b1-4c87-b6a2-00be68f71961",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "88e4b41e-1511-4c1f-82e3-76b573568f09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0fe44c2-095d-4667-b4eb-fd1eaa280cfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f4d2b2b9-53fc-4e40-86cd-b7bf066b9523"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12073ff9-d479-4e16-8905-2142c1de7149",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34afd09a-71e0-4f99-a98d-7340c098b12b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "cb15175f-23f2-4527-9f2e-d851be28b192"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b9c0288-2d36-40a4-91a8-bf4e80e7ce21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1f86022b-6847-4bce-a636-88eed56fd527"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f0c37dd8-c7d7-4d52-85b6-e4f6a365da79",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eb34ad6a-97c1-4123-bcec-f57e9e562bfb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "27a98da9-899e-4e45-b6f6-47d851b051e7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "29794cdd-5fdd-4b1b-813f-89b511cef733"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c2d5a128-465c-4b10-80f1-abe3be96984d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "d630a98d-25f9-484f-a7f3-0b38e5925ea5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1a9d4337-87e8-48cb-927d-d49fd542043c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "56716bf8-6fa4-4bca-8603-f5f56c61535b"
            }
          }
        ]
      },
      {
        "id": "a746f473-66c9-426f-a76b-6cc6771cf5f2",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "d4cf2df2-5cb8-4497-b7d1-a5697196fdef",
            "name": "Negative Testing",
            "item": [
              {
                "id": "af9a6232-f6ea-4201-8827-f44b081e2f5c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "634338d6-b529-4f41-a4ae-dd8ccd8bd477",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "779e7661-749b-4acb-9ab5-f3246f7fe785",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "2c52e0a2-565a-4f80-9d3e-06dddb23f88e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25183efc-c07d-4b55-85a2-f8e9a7ae5db6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "053334b0-4e67-4f71-a504-276f5d2af190"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c667c2fb-178d-43c0-99a4-b8c277bd81da",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d90006dc-e04e-48e7-9272-8e0f258e17d1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0d9028de-634e-4305-9c90-5e833a6b2e0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d196bac-d2ad-4c96-81ba-0298d0efbf07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bf1e09ab-4f59-4380-8a74-d32bd79b216f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "584e0749-9220-4661-b5aa-7344db75b1de",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ff110415-f878-41af-b599-f4ae40c10026"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "34063237-87b5-4af4-bfd0-94e82f0ccaee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f8e38516-a95a-4a62-bd8c-372221944868"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "66eeb962-9056-4874-988a-92fbe9622c42",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "1e1946f3-8b3a-4336-b9e9-92df070c3498"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d3bf3b4f-6406-4693-b531-2a47698d237d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "af1508dd-25e5-463b-9763-8bc91e613b06"
            }
          }
        ]
      },
      {
        "id": "27d8adeb-408a-4279-b916-a96e6ad55940",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6eeb7a3a-9465-4f0e-b5d5-894bbfbb5663",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "60ae7f55-862f-413b-ae6c-725b069b0a7f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "073f7ba1-8c47-4de1-80f0-77696ca1d18c",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6387da1f-a816-4211-b78d-8bea2dda2062",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "528d180d-c65a-4dde-9496-7207afb73e56",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1915,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 261,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 92
      },
      "testScripts": {
        "total": 962,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 953,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 91.45977011494256,
      "responseMin": 16,
      "responseMax": 697,
      "responseSd": 109.72796085342412,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1669829750714,
      "completed": 1669829785499
    },
    "executions": [
      {
        "id": "70af1aac-8dd5-4b69-b755-b7883548f0c6",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 252,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "3714ec9c-8321-4f17-b934-8c3613f67d58",
          "httpRequestId": "8e860203-9588-4ebf-a61d-9feefa3e1684"
        },
        "item": {
          "id": "70af1aac-8dd5-4b69-b755-b7883548f0c6",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "8829b4f1-3dc2-43a7-94e5-f4498a56f896",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 0
        }
      },
      {
        "id": "d782aeac-40a1-47a3-823b-1b20e4c7cc23",
        "cursor": {
          "ref": "38189be0-607a-481d-a786-b7f32b966b3c",
          "length": 252,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "6873e23d-11c6-428d-ae3e-963eb157a40a"
        },
        "item": {
          "id": "d782aeac-40a1-47a3-823b-1b20e4c7cc23",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "18f331a3-de25-4899-b4f1-cda73c473625",
          "status": "OK",
          "code": 200,
          "responseTime": 16,
          "responseSize": 0
        }
      },
      {
        "id": "f368fb61-853b-4773-a667-e9a625c65d5f",
        "cursor": {
          "ref": "6561d57b-c5a8-407f-bf15-038b3f9bedfe",
          "length": 252,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "27e7cd5c-c831-4835-ac0d-616c4b83498a"
        },
        "item": {
          "id": "f368fb61-853b-4773-a667-e9a625c65d5f",
          "name": "did_json"
        },
        "response": {
          "id": "4eb2b39d-005d-462b-bd22-0d9ed2887a62",
          "status": "OK",
          "code": 200,
          "responseTime": 180,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "183c40be-60c5-4d90-a284-2c278e456c65",
        "cursor": {
          "ref": "369a7f07-996b-46d9-a858-3a3c7ccf3d6e",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d24fd721-b41b-41d0-af39-3420cfb1be71"
        },
        "item": {
          "id": "183c40be-60c5-4d90-a284-2c278e456c65",
          "name": "did:invalid"
        },
        "response": {
          "id": "344d74bd-acfc-476e-8740-4e22c6cbbbd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "183c40be-60c5-4d90-a284-2c278e456c65",
        "cursor": {
          "ref": "369a7f07-996b-46d9-a858-3a3c7ccf3d6e",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d24fd721-b41b-41d0-af39-3420cfb1be71"
        },
        "item": {
          "id": "183c40be-60c5-4d90-a284-2c278e456c65",
          "name": "did:invalid"
        },
        "response": {
          "id": "344d74bd-acfc-476e-8740-4e22c6cbbbd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c4e401a-3ab4-455e-9146-b3132e3bedb3",
        "cursor": {
          "ref": "e94a0c54-e4fd-462a-ba57-e4bbb8cf71d7",
          "length": 252,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "3d5a6373-fada-46ad-84fd-e5feb7f66361"
        },
        "item": {
          "id": "4c4e401a-3ab4-455e-9146-b3132e3bedb3",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "f7305778-6f5a-4e5a-a854-c5e2c41113a2",
          "status": "Not Found",
          "code": 404,
          "responseTime": 151,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2197c3b-eb03-4796-93a6-615a3a6b90ca",
        "cursor": {
          "ref": "778a6d72-9068-425b-ad4c-7da10b0dde1a",
          "length": 252,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "67b02695-5dac-4cdf-8598-8fe7488b2d6f"
        },
        "item": {
          "id": "c2197c3b-eb03-4796-93a6-615a3a6b90ca",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "c1fd0d86-b637-41de-9edd-1c081c31c7e9",
          "status": "Not Found",
          "code": 404,
          "responseTime": 34,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cebb89ac-5d0a-4285-8bef-f1876f903e1f",
        "cursor": {
          "ref": "0ab3094c-fc83-4adf-92dd-dce1e6e3e948",
          "length": 252,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "29795da3-b9f9-4de9-9271-d26cb613a5c3"
        },
        "item": {
          "id": "cebb89ac-5d0a-4285-8bef-f1876f903e1f",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "60280be2-246c-4cbd-b063-3756900fe5fc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cc0f12f-086e-456c-a497-f079d1862702",
        "cursor": {
          "ref": "2e9b74eb-5773-4c02-a963-fbc91ee07306",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "3177aa60-3e91-480e-9bcb-3c3e000fd836"
        },
        "item": {
          "id": "9cc0f12f-086e-456c-a497-f079d1862702",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "31104ecd-5931-456b-b0ff-8f31c0496768",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 43,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cc0f12f-086e-456c-a497-f079d1862702",
        "cursor": {
          "ref": "2e9b74eb-5773-4c02-a963-fbc91ee07306",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "3177aa60-3e91-480e-9bcb-3c3e000fd836"
        },
        "item": {
          "id": "9cc0f12f-086e-456c-a497-f079d1862702",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "31104ecd-5931-456b-b0ff-8f31c0496768",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 43,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9654511-7bff-40c3-8cb2-c82015eddbfa",
        "cursor": {
          "ref": "5ad0e13f-751e-41fe-8f46-f5e0a17fe5ae",
          "length": 252,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "6b365f3d-06e6-406f-bc34-883fb53efc74"
        },
        "item": {
          "id": "c9654511-7bff-40c3-8cb2-c82015eddbfa",
          "name": "identifiers"
        },
        "response": {
          "id": "a026a3f7-a37a-4511-a0a7-118030c21783",
          "status": "OK",
          "code": 200,
          "responseTime": 189,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e701eed-7dec-48be-bc1b-9d2672c8dc39",
        "cursor": {
          "ref": "37e77cae-3d39-45fc-9cfd-2249241ecfd4",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "29fb6a94-c61d-4c50-b02a-44d45cb53096"
        },
        "item": {
          "id": "6e701eed-7dec-48be-bc1b-9d2672c8dc39",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "c284d706-78b2-478f-a5d4-b8ebe397d9d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e701eed-7dec-48be-bc1b-9d2672c8dc39",
        "cursor": {
          "ref": "37e77cae-3d39-45fc-9cfd-2249241ecfd4",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "29fb6a94-c61d-4c50-b02a-44d45cb53096"
        },
        "item": {
          "id": "6e701eed-7dec-48be-bc1b-9d2672c8dc39",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "c284d706-78b2-478f-a5d4-b8ebe397d9d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5930249a-ff0c-4992-a557-c8fb9ea3d780",
        "cursor": {
          "ref": "849814ea-0158-4843-9c68-5bb9c6121d66",
          "length": 252,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "340d78b0-d71e-48be-83d2-52fd00848952"
        },
        "item": {
          "id": "5930249a-ff0c-4992-a557-c8fb9ea3d780",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "fc1a6d54-ff19-46b2-9171-0b6f8dae939c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de5d9f14-6bf3-4f4d-9def-c4e4d48f5626",
        "cursor": {
          "ref": "632601e9-0117-4c83-8554-fe8157a868c2",
          "length": 252,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "963c4f70-301e-4f14-863d-2ffb149d4b62"
        },
        "item": {
          "id": "de5d9f14-6bf3-4f4d-9def-c4e4d48f5626",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "d74ecdcc-c472-410e-9133-e530c14e4d4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eb848e6-bdb5-45f7-af8a-16749bf044d7",
        "cursor": {
          "ref": "fa4b30e1-7957-41ae-84d6-a9ebd93a9626",
          "length": 252,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "a97fada3-251e-4607-a876-5807233361a4"
        },
        "item": {
          "id": "4eb848e6-bdb5-45f7-af8a-16749bf044d7",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "45921c90-192a-4e18-8aa6-57511e8c91e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6834cfd5-331c-4e38-bfe4-ff66da7132c6",
        "cursor": {
          "ref": "1c256007-7dd4-4dbc-bea3-c5dc5a1dbf88",
          "length": 252,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "6556b975-f8ca-4752-918a-2e82fcf973b7"
        },
        "item": {
          "id": "6834cfd5-331c-4e38-bfe4-ff66da7132c6",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "c071dbf2-0203-416b-a0c8-8d546c8c4ce4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45c111d9-0946-49c0-becd-bf973d6942ed",
        "cursor": {
          "ref": "5be331b4-13b4-4ed4-8525-e3ed625c0467",
          "length": 252,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "d7c71c29-eec8-4de6-8779-1796f57ca021"
        },
        "item": {
          "id": "45c111d9-0946-49c0-becd-bf973d6942ed",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "2101cd54-6067-409e-a3f6-d11f42bcaef6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccf1cf33-2ad3-4d5a-a709-be533bcb497f",
        "cursor": {
          "ref": "5011d1df-02fa-44a8-8577-fbac66257209",
          "length": 252,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "9a475e10-eafa-4842-bc3f-a7668227725b"
        },
        "item": {
          "id": "ccf1cf33-2ad3-4d5a-a709-be533bcb497f",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "57a1ec07-78f6-432a-b12b-cb3007fa4bcb",
          "status": "Created",
          "code": 201,
          "responseTime": 617,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "63b94002-c510-402b-93f4-0c188edc6c3b",
        "cursor": {
          "ref": "40c9310b-61df-4610-b1be-308f9339169e",
          "length": 252,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "efebb2ef-e2f7-4db3-a557-d4011dd7531b"
        },
        "item": {
          "id": "63b94002-c510-402b-93f4-0c188edc6c3b",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "2629c297-c30f-4eef-8314-a6cd88da1931",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09445bbe-2c33-49f8-9044-d90d550147dd",
        "cursor": {
          "ref": "7fbc468d-488b-435b-ab88-ed9f3aea0f8e",
          "length": 252,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "49f48d40-76f5-4518-a27c-4288cb0cfb6e"
        },
        "item": {
          "id": "09445bbe-2c33-49f8-9044-d90d550147dd",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "18978534-8192-49f6-af5a-d547f2f9b2fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "022cece1-f1d2-4a54-bda1-15843b69c426",
        "cursor": {
          "ref": "0f828f80-afe1-4ee1-98f2-850addbdec0c",
          "length": 252,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "87acf076-2a1c-49e0-a44a-c84539ffaaf8"
        },
        "item": {
          "id": "022cece1-f1d2-4a54-bda1-15843b69c426",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "56886af7-acce-4c74-bdeb-be83fe390ced",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c867083-d454-420e-8e8f-45f64006e62a",
        "cursor": {
          "ref": "718f0e00-73d7-4894-9d21-ab094cb49ab8",
          "length": 252,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "f3541e99-a00a-45b9-8c0d-547bb20f11c4"
        },
        "item": {
          "id": "5c867083-d454-420e-8e8f-45f64006e62a",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "ecfaee11-7f5a-4de4-b9f4-2b2d169434bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff1baeb4-d02e-4756-9da4-4f5e13210e86",
        "cursor": {
          "ref": "eec49c3e-ea75-4408-9487-3c01d5a1e43c",
          "length": 252,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "d6f49c1b-1336-4249-bcab-e1dc7024ea7e"
        },
        "item": {
          "id": "ff1baeb4-d02e-4756-9da4-4f5e13210e86",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "e455406a-7279-4bce-9fab-ebc481a36bc0",
          "status": "Created",
          "code": 201,
          "responseTime": 316,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "7d142016-a5e6-4eb4-a671-470b67a754a3",
        "cursor": {
          "ref": "a29d80ff-4ea0-45f9-ad65-50803f083b0f",
          "length": 252,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "f3178bc7-98b7-47a4-99df-1b0c59f06b20"
        },
        "item": {
          "id": "7d142016-a5e6-4eb4-a671-470b67a754a3",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "90c377d8-88e4-4e41-963d-d0843e06b8ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30fc6c52-4daf-4719-a314-e8710abef5d0",
        "cursor": {
          "ref": "7d38d9f9-f9ed-436c-a0a9-9113a98a6478",
          "length": 252,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "a39759f9-2a7b-4e12-983e-ddf5021653a4"
        },
        "item": {
          "id": "30fc6c52-4daf-4719-a314-e8710abef5d0",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "2e6399b6-cc8e-4767-8107-cfb7b2ab4584",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12e71894-fb7d-416a-8505-70a86e67129f",
        "cursor": {
          "ref": "4f31be98-0165-43c2-82e0-091a4f21efb4",
          "length": 252,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "92216931-15b6-48dc-96ff-0cfc80fb3d40"
        },
        "item": {
          "id": "12e71894-fb7d-416a-8505-70a86e67129f",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "00d34cce-917b-4942-90a5-ba7ac326826c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bafe95f-28df-47d1-8fb7-3e96e6842ed6",
        "cursor": {
          "ref": "adb43294-b0ac-460a-8e76-c1540f4d52ed",
          "length": 252,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "1788408b-8b4f-4dbf-b8c2-3f2491073391"
        },
        "item": {
          "id": "0bafe95f-28df-47d1-8fb7-3e96e6842ed6",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "6248153b-7866-4d2e-9f9d-92bc73ff4142",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ee5c0a1-2e11-4ef1-abb2-f02f4417a27e",
        "cursor": {
          "ref": "54421cec-e9ab-4c3b-a14f-245f31bd0850",
          "length": 252,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "895f1cd4-8dfb-4418-9886-c7c21de5fb8c"
        },
        "item": {
          "id": "0ee5c0a1-2e11-4ef1-abb2-f02f4417a27e",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "1a630651-9783-4489-86b1-68e58bfd0126",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a27d63d-2999-4170-9f72-4af410ba01fc",
        "cursor": {
          "ref": "df4b2e5f-781a-4725-9ac8-236dd4909e65",
          "length": 252,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "05058edb-f9f5-4e54-a0a0-ef041442ca82"
        },
        "item": {
          "id": "8a27d63d-2999-4170-9f72-4af410ba01fc",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "c02da85b-94b4-4bc4-ab1f-8c43b349db61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e41d4735-d4a1-4e45-be74-546756f643ed",
        "cursor": {
          "ref": "afc0e07b-873a-4685-aaba-c20f7a006222",
          "length": 252,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "387d46c1-d152-47c9-83be-b478794129b2"
        },
        "item": {
          "id": "e41d4735-d4a1-4e45-be74-546756f643ed",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "6dbb422b-25ac-4ba7-ae37-1b29d14ab274",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cce66585-b425-4f4a-895b-aecdbedfe7f3",
        "cursor": {
          "ref": "9eaf4c3e-8f61-4c04-9227-1e1b27b99570",
          "length": 252,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "9bec56a9-032a-4029-aaa1-eebbaae153d7"
        },
        "item": {
          "id": "cce66585-b425-4f4a-895b-aecdbedfe7f3",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "69e44ac5-4103-4622-85c5-aa9c9fd065f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5040efcc-1f04-422e-88b0-3f6239ba241a",
        "cursor": {
          "ref": "8c67ea39-0132-4e61-89e6-20e37872052d",
          "length": 252,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "d6f04104-f95d-4e4b-b043-0d2bed5cb2c9"
        },
        "item": {
          "id": "5040efcc-1f04-422e-88b0-3f6239ba241a",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "a87982d7-dc76-4d9d-a5ad-d3aeeceb26c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "869a941a-2dc5-47dd-bc4c-c218f0171165",
        "cursor": {
          "ref": "6dee298f-586a-48d3-8507-4a45acb6856d",
          "length": 252,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "344aaffd-7b87-42ba-9952-09881bf7e105"
        },
        "item": {
          "id": "869a941a-2dc5-47dd-bc4c-c218f0171165",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "02385942-6836-469f-bcf3-93f512aa6040",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a82b5b2-efbd-41e0-be22-4406f3d96ccb",
        "cursor": {
          "ref": "397961ad-c72d-4402-9dd6-d6dec2d9e226",
          "length": 252,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "bb204383-aaec-4bce-878c-13aaa85a33f4"
        },
        "item": {
          "id": "2a82b5b2-efbd-41e0-be22-4406f3d96ccb",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "f3fb8de8-a7f6-4e77-9008-5c8497a7ebd9",
          "status": "Created",
          "code": 201,
          "responseTime": 566,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "1e74f48e-8dcf-43bd-ae80-ccefa05a8f4e",
        "cursor": {
          "ref": "111f9289-a749-4a4f-b087-5054ee6bac32",
          "length": 252,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "e711f409-7f1d-4ef9-b3e8-bf5083222ee0"
        },
        "item": {
          "id": "1e74f48e-8dcf-43bd-ae80-ccefa05a8f4e",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "e3999481-f253-4178-b1e4-fad0e1d9aebe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b2c2596-15ad-4b00-993e-4f01a0b896ac",
        "cursor": {
          "ref": "dae1839f-3f80-40ac-b6fa-f2606918ec18",
          "length": 252,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "26b15840-8f25-45e6-b472-dc887635f528"
        },
        "item": {
          "id": "7b2c2596-15ad-4b00-993e-4f01a0b896ac",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "20befeb4-019c-4699-81a4-67e16f710e8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d481f53e-e321-40fd-a510-9a3f8428ae75",
        "cursor": {
          "ref": "07f96a1c-5d92-4dca-8a6c-044e9ef6c2f4",
          "length": 252,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "ee2d30fd-e4a8-45ae-bfcc-f2d0d63f4c81"
        },
        "item": {
          "id": "d481f53e-e321-40fd-a510-9a3f8428ae75",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "3e5e22ec-71e9-464b-a74d-aaf9cdadbbb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ac1ee04-4fc6-4832-98bc-498e134799d8",
        "cursor": {
          "ref": "c57c3668-2bcd-4ee8-8dbc-62231b1c5112",
          "length": 252,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "1fa3479c-8457-4afb-bb68-6b468480b20d"
        },
        "item": {
          "id": "0ac1ee04-4fc6-4832-98bc-498e134799d8",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "e9018ac2-b7cb-4306-b17f-66ee59331efd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "706984d8-0027-40bd-abe1-d9ebba9a817e",
        "cursor": {
          "ref": "3a4da91b-3fe8-4347-be9e-0ca1612f604a",
          "length": 252,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "e8c79fb9-f169-4921-bb58-4c036c5c44e3"
        },
        "item": {
          "id": "706984d8-0027-40bd-abe1-d9ebba9a817e",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "76bd9c65-f916-4f83-9d7d-5e85e35a2cf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63f1fb25-420e-4ed2-a25c-b1ebf44e7aea",
        "cursor": {
          "ref": "1884f105-086f-4930-879b-44ed2397e7b4",
          "length": 252,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "c3d9d3f0-d4a7-4866-83fa-2b334b76c123"
        },
        "item": {
          "id": "63f1fb25-420e-4ed2-a25c-b1ebf44e7aea",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "ec38304a-3901-43b1-af9e-23df68f9516f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49e567cb-a71e-40eb-9512-6a75ad940de8",
        "cursor": {
          "ref": "af6e1df5-7e8c-4aa2-8b73-7c5600c9aa5a",
          "length": 252,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "e9fc9119-0e31-4157-9448-33e382cf69eb"
        },
        "item": {
          "id": "49e567cb-a71e-40eb-9512-6a75ad940de8",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "93ab3f22-6d41-4115-bc55-fcc415477f33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6bbccf6-ea23-4e97-a6ea-bfd677f51531",
        "cursor": {
          "ref": "30b27cd9-ddaf-454a-abba-884df6c17e67",
          "length": 252,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "7267e843-4257-420e-a176-149da345f7dc"
        },
        "item": {
          "id": "c6bbccf6-ea23-4e97-a6ea-bfd677f51531",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "abd2b362-73e3-4647-a481-acae24c84373",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e51db149-87cd-4dca-b7f4-615a192a9e7c",
        "cursor": {
          "ref": "142ccc6f-bcd9-4368-b440-2946dbe341e2",
          "length": 252,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "5bd952cc-8b94-47f8-9e02-6095d2ec43db"
        },
        "item": {
          "id": "e51db149-87cd-4dca-b7f4-615a192a9e7c",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "7d835f72-43e2-4c6b-8e55-5a38be1fa2ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bc169b3-5a71-4c1e-9dd9-4dbc258e183a",
        "cursor": {
          "ref": "3fc798ed-164e-4d0a-9d6d-c4d36aeb1be4",
          "length": 252,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "16436247-e556-47c5-8f43-f16e251a22e8"
        },
        "item": {
          "id": "6bc169b3-5a71-4c1e-9dd9-4dbc258e183a",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "1b47b471-d817-41f7-9756-ba14ed4b66d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64463456-ae34-45be-b87d-ac0f60f8de8d",
        "cursor": {
          "ref": "8a2e8e4c-42f5-4e7b-a6df-5ab0237ab597",
          "length": 252,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "fc5a389e-c790-4683-9b62-e07228084960"
        },
        "item": {
          "id": "64463456-ae34-45be-b87d-ac0f60f8de8d",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "152a48f1-9c89-4e8e-8106-558871955a91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81f59b35-2c17-43d0-afdb-8566089b0af8",
        "cursor": {
          "ref": "dd11569f-f080-4c84-aae9-2643848b21dd",
          "length": 252,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "9ef9d8b9-3115-4991-9ce5-e23bd4475b3b"
        },
        "item": {
          "id": "81f59b35-2c17-43d0-afdb-8566089b0af8",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "b65375bf-5b20-4508-866d-7b2b87e7b4ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3044a869-14a8-42bd-a6e4-1079947302e2",
        "cursor": {
          "ref": "48d3d20d-aa2b-4bb9-aec6-54d06551af2c",
          "length": 252,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "54fb7a8b-4c25-4ce5-8696-a5c9dcad4658"
        },
        "item": {
          "id": "3044a869-14a8-42bd-a6e4-1079947302e2",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "3d9d2106-008c-4b2c-bb67-4fed04b3a160",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 247,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "db242b38-943f-436f-8d99-dce485d7af2d",
        "cursor": {
          "ref": "108cd314-f341-4e5c-94a2-c25be304f0d1",
          "length": 252,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "37ca5f52-3cec-409c-893e-d7051d76a334"
        },
        "item": {
          "id": "db242b38-943f-436f-8d99-dce485d7af2d",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "3b3f4f04-dfe3-451e-b7c1-fd492ed2517b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff4187f9-1513-49df-90eb-c5cb3a90092c",
        "cursor": {
          "ref": "5fc120f1-3f77-4baf-ba2d-8ce28b1bfae7",
          "length": 252,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "67ec1b04-027e-4aa8-8cfd-c52a1ffff2ef"
        },
        "item": {
          "id": "ff4187f9-1513-49df-90eb-c5cb3a90092c",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "0e970e9d-dcfc-4924-8a74-0daf0d99a61f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2a4ca34-4a3f-4522-a3d0-f1be14ba3412",
        "cursor": {
          "ref": "f3461e66-17cf-471e-a21c-58db3f91a145",
          "length": 252,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "3eda904b-3185-4314-b44d-39fbd66b9052"
        },
        "item": {
          "id": "e2a4ca34-4a3f-4522-a3d0-f1be14ba3412",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "7f6f1c7a-7ffe-48d1-9b91-a5b9cecccd64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49bac0ac-6fc7-4316-9808-2f4522ebaea1",
        "cursor": {
          "ref": "cf3f461e-de3b-4232-83f4-62793cc3a1e5",
          "length": 252,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "8c412e9c-97f7-4c16-81a0-aea407b4e745"
        },
        "item": {
          "id": "49bac0ac-6fc7-4316-9808-2f4522ebaea1",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "b5873c50-ef93-46c4-a00c-96283028267d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f2e807e-a76f-4a75-85f2-b078dc4bdd51",
        "cursor": {
          "ref": "2e777a57-02ca-4d4e-a49c-30958762b083",
          "length": 252,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "2346940e-b362-441e-9983-e0d519bcd3f0"
        },
        "item": {
          "id": "5f2e807e-a76f-4a75-85f2-b078dc4bdd51",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "712a3e5d-e804-478c-a484-4272a7b3da3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27e5ee75-6d37-4be8-9484-926b8c27e258",
        "cursor": {
          "ref": "8c513a7d-c304-48fb-96dc-23cdb07c3415",
          "length": 252,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "0afb11b1-4199-489a-b804-705d3f7fa85e"
        },
        "item": {
          "id": "27e5ee75-6d37-4be8-9484-926b8c27e258",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "1e61ec90-8743-45f7-8704-11ff912405fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f89a77d-653a-424b-b3a6-a49e07e8baf0",
        "cursor": {
          "ref": "4d06aa67-9ada-4243-8b00-948f4c0a841d",
          "length": 252,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "4d1d3721-bb9a-489f-b91a-1ef1f7822d98"
        },
        "item": {
          "id": "7f89a77d-653a-424b-b3a6-a49e07e8baf0",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "d919be53-5888-494f-bef0-cdd5e037d6a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 176,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "4b6d484f-df01-4691-8295-6534ee910e44",
        "cursor": {
          "ref": "94adde94-ccf0-45ce-b284-72190f73f11b",
          "length": 252,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "199dae9e-0ed5-4e3d-b2c0-f4ed3f73c1be"
        },
        "item": {
          "id": "4b6d484f-df01-4691-8295-6534ee910e44",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "3c01cf42-f3f3-48a9-884b-8dd579a7dbf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6878cf2-bc8e-4ba3-b6f4-629b2bc091eb",
        "cursor": {
          "ref": "6be88163-1fd5-4a29-ab4b-c5622044cbd8",
          "length": 252,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "7b602043-29e6-4e10-9b6b-0fa59d28c5e2"
        },
        "item": {
          "id": "d6878cf2-bc8e-4ba3-b6f4-629b2bc091eb",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "50b829fe-d5c3-4f97-8d49-32c5c4338862",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7a79b41-14cb-4e5c-884f-a4de64a40a2d",
        "cursor": {
          "ref": "04626c83-8cc8-4546-829f-37f2b9c284a1",
          "length": 252,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "c0b1e8bf-3644-4a9c-addc-089b0414957f"
        },
        "item": {
          "id": "f7a79b41-14cb-4e5c-884f-a4de64a40a2d",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "f10c2f41-88db-4876-b4cc-70b69f5d2300",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d0ddeba-7663-4076-b024-210c92f1a774",
        "cursor": {
          "ref": "eb842dfa-1120-40f0-91ba-c1c1d9f490d2",
          "length": 252,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "5c037565-7b2d-4962-8b8b-9df6b6f37007"
        },
        "item": {
          "id": "0d0ddeba-7663-4076-b024-210c92f1a774",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "391673f5-1e19-4f8e-b4ba-986fedae503f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "115b62ac-5a4b-43f2-9180-de035ce62091",
        "cursor": {
          "ref": "5343d959-08e0-4f55-ba8f-a025a29286fe",
          "length": 252,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "a3f60667-524d-4a04-b3eb-8abcc03cd0f0"
        },
        "item": {
          "id": "115b62ac-5a4b-43f2-9180-de035ce62091",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "cf24c479-dca5-4932-aad0-b0c89d77cac2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5da05438-f7e5-48be-93ae-70e0a360de95",
        "cursor": {
          "ref": "b0f8ee2e-c254-45f1-85e4-6bb8d9221b34",
          "length": 252,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "866174bd-883e-4544-bd0b-75f168397c0a"
        },
        "item": {
          "id": "5da05438-f7e5-48be-93ae-70e0a360de95",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "5658d302-5c35-4c07-b031-5f843ed94d7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0bd0acc-a2a3-445a-8827-7425a9131763",
        "cursor": {
          "ref": "de49f390-c457-470d-a145-399b65cc082f",
          "length": 252,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "ff0f6900-11e2-488d-99cc-7e5cd4089c04"
        },
        "item": {
          "id": "a0bd0acc-a2a3-445a-8827-7425a9131763",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "fdf52b0f-d435-46c7-903c-1435b0afd3f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0f2ff0b-2708-41cd-80c6-95ca2a41b703",
        "cursor": {
          "ref": "989bec6b-96d4-4c49-b121-fa26cd4e1b7b",
          "length": 252,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "00309c10-ceca-4855-81c5-286596d2234b"
        },
        "item": {
          "id": "e0f2ff0b-2708-41cd-80c6-95ca2a41b703",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "88552802-cf4c-4719-a804-18202994da8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7674ef9-984c-42de-8df5-ac575f5cb096",
        "cursor": {
          "ref": "fafd9147-203a-4009-ba4a-f393f364abf0",
          "length": 252,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "25c0d7a9-9f8a-486a-963a-723a5b1fcc61"
        },
        "item": {
          "id": "a7674ef9-984c-42de-8df5-ac575f5cb096",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "dc6d8ec6-a727-4472-8da2-f4e1f02c9d8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "760504e1-d69b-46e5-b0c7-c19221f2a207",
        "cursor": {
          "ref": "c3d2f3c3-0c54-4050-ad3f-3822a2b08c83",
          "length": 252,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "7d894661-2752-48ac-8467-24a70f5ecb30"
        },
        "item": {
          "id": "760504e1-d69b-46e5-b0c7-c19221f2a207",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "397062bc-59f5-4a61-a724-6d0d51c1bb47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff6e698b-762c-4405-919c-af965a9a59cf",
        "cursor": {
          "ref": "d96d048c-b50e-46e7-aec8-1cbb6157fcac",
          "length": 252,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "40829d4f-2cb4-477d-b1ef-046753bddf47"
        },
        "item": {
          "id": "ff6e698b-762c-4405-919c-af965a9a59cf",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "1cc1bee2-286a-4a76-a358-549151263ef5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f15ef85c-8a6b-4a2d-a49d-bfdaaf2e4155",
        "cursor": {
          "ref": "11e9d1ba-c834-483f-ba8a-ef4ff754daa6",
          "length": 252,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "664735ac-1b22-49c4-a332-8146d4db63a1"
        },
        "item": {
          "id": "f15ef85c-8a6b-4a2d-a49d-bfdaaf2e4155",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "9c70b675-c0b4-4165-9b20-874462ace33d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b37af8da-7e14-4cb1-9cd9-e7fbf8b58aeb",
        "cursor": {
          "ref": "9dd8f26b-aa07-4397-bf7f-848f49564b25",
          "length": 252,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "598a20f0-bde9-44e9-9a77-27e99c7dcca4"
        },
        "item": {
          "id": "b37af8da-7e14-4cb1-9cd9-e7fbf8b58aeb",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "32466f09-9e83-44db-b69d-8c8082db459f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8d94a39-94f4-4e78-8781-ece03cd8ed62",
        "cursor": {
          "ref": "01aa4dc1-8ad5-489f-90f6-f6c8fb0d68fa",
          "length": 252,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "20846709-c16e-418e-8495-b20060a4fdaf"
        },
        "item": {
          "id": "e8d94a39-94f4-4e78-8781-ece03cd8ed62",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "57c0ac3f-eb3a-46dd-bbcf-16854591f3dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a3032e9-7467-43e5-832b-98c3e3a97e4e",
        "cursor": {
          "ref": "79197eb7-c1d1-4a06-a1ce-19348ea0ff63",
          "length": 252,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "5d44656c-1504-495c-9f21-3aa75e847db0"
        },
        "item": {
          "id": "4a3032e9-7467-43e5-832b-98c3e3a97e4e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "d99bc93b-a2a6-4aa5-b588-d829506e1f0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a011defd-e804-432f-baaa-d9f5a822d9ad",
        "cursor": {
          "ref": "64887cf9-ad92-4947-b6e6-8c951ad2b4ba",
          "length": 252,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "fb9ba706-2ad2-4837-8db0-6c14498f2e77"
        },
        "item": {
          "id": "a011defd-e804-432f-baaa-d9f5a822d9ad",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "91b52035-a20e-46ba-9474-c289113c1b30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e454daa5-7632-4a7a-94d4-0b538eb4389f",
        "cursor": {
          "ref": "9bcdfa79-8a4c-4fb0-8858-7fe2f2b6b3ca",
          "length": 252,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "bf90a4d2-0dec-4b32-b8cc-8a824aa8da4a"
        },
        "item": {
          "id": "e454daa5-7632-4a7a-94d4-0b538eb4389f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "1428521d-272e-4ab5-9b28-53783d73c97f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 222,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb2e0777-c67a-4a1e-94ea-b898faf0c3ce",
        "cursor": {
          "ref": "19e76664-7354-4311-87d3-74120381ed28",
          "length": 252,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "0889f365-69d5-4365-a95e-cd0eef017cfb"
        },
        "item": {
          "id": "bb2e0777-c67a-4a1e-94ea-b898faf0c3ce",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "413131ee-e612-439b-9c14-404aa4cf6b82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b05f9e9c-bc28-4592-b1cb-f0d6b43f2352",
        "cursor": {
          "ref": "218c867e-a7cc-4b65-9d18-8aa5f2a2c1a0",
          "length": 252,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "a6e2cc39-3d75-4afe-b53a-8cb03659e985"
        },
        "item": {
          "id": "b05f9e9c-bc28-4592-b1cb-f0d6b43f2352",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "c304f29f-cb59-4011-b455-8a1277764cb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55aa896f-dcf4-4147-a3b8-f84f2fdab6c4",
        "cursor": {
          "ref": "948d0a8f-d285-47e3-b2de-7c2e60043d31",
          "length": 252,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "5da561c5-171b-4e11-9b4f-ef318b6da44c"
        },
        "item": {
          "id": "55aa896f-dcf4-4147-a3b8-f84f2fdab6c4",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "f7939cdb-8dc3-41f1-98f7-dd89e72fb66a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8ec4d52-e6cf-46d5-9386-7ef407f2273c",
        "cursor": {
          "ref": "35330ad6-cb0c-432f-aa66-582ff6ff8896",
          "length": 252,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "2a59d458-6919-47c1-acfe-0e00d39a9994"
        },
        "item": {
          "id": "b8ec4d52-e6cf-46d5-9386-7ef407f2273c",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "5ba17d28-9609-4d4f-af77-39b78c327a4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba690505-d2fb-4032-9ebd-05aff7c4f98c",
        "cursor": {
          "ref": "485cc6bd-c692-428d-aa24-712d6b41fa3b",
          "length": 252,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "584f62d3-e238-4289-b1c4-7a04e7c952a5"
        },
        "item": {
          "id": "ba690505-d2fb-4032-9ebd-05aff7c4f98c",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "5792a008-f596-4b3f-9ddb-fd1592d019e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "969298d5-e617-4a09-b14f-1a9a59e22b3b",
        "cursor": {
          "ref": "de6b5f31-068d-47fe-9d41-c77f6ad4604b",
          "length": 252,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "31f24e84-da95-447f-a666-e406c7b73144"
        },
        "item": {
          "id": "969298d5-e617-4a09-b14f-1a9a59e22b3b",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "031147d4-3d69-4a5a-8f89-3654ede84e93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a70ace56-afdf-45a6-9b8e-b48ca5cfd8c1",
        "cursor": {
          "ref": "0f5329fa-818e-4fa8-925e-020556adfb84",
          "length": 252,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "c1ebd3ab-236e-4554-8ba2-f45a79f5f23d"
        },
        "item": {
          "id": "a70ace56-afdf-45a6-9b8e-b48ca5cfd8c1",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "f19924bd-d6a7-4de5-914e-ec05997c599d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc45090f-257b-4a38-b0b9-de79e065f3ae",
        "cursor": {
          "ref": "d6ef1019-6bd9-4bd6-ab53-068744ea5910",
          "length": 252,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "2a121775-3cf5-463b-9095-6deda23df366"
        },
        "item": {
          "id": "cc45090f-257b-4a38-b0b9-de79e065f3ae",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "d6dba993-10d7-406f-b54f-c9959a38b012",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dc8e127-09e2-4a4c-8085-591a4647b6e4",
        "cursor": {
          "ref": "21b01c5e-fc1e-46e6-b039-8937479c596d",
          "length": 252,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "70abdc3d-66ce-4153-91ac-0e23a2512c0c"
        },
        "item": {
          "id": "9dc8e127-09e2-4a4c-8085-591a4647b6e4",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "23640cab-cd4c-42a0-bc4c-0868b6e445a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "980837db-53b6-4fdd-bd9c-4881a07efbd0",
        "cursor": {
          "ref": "7a0931e5-d053-45e5-a1c8-03c8a219cbb1",
          "length": 252,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "356b522d-3813-4bd9-8966-8ca8a4cf9308"
        },
        "item": {
          "id": "980837db-53b6-4fdd-bd9c-4881a07efbd0",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "4d47a272-27fc-405e-b61e-3c7870a6747d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "786eef56-0481-451d-a54c-1f2044cf4708",
        "cursor": {
          "ref": "05174dd4-e862-4d11-80f5-b3ce528e6a30",
          "length": 252,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "2e9e32b0-f762-4320-a9d0-e5d5f8ab4641"
        },
        "item": {
          "id": "786eef56-0481-451d-a54c-1f2044cf4708",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "e3cdd6ba-ae18-4f3a-a77f-7de8d54a3199",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7df1ab0c-fa11-4785-b0b7-37a6aa90b2d8",
        "cursor": {
          "ref": "2791dedb-2eb9-40f0-a094-609628a5b89f",
          "length": 252,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "915eea52-03c0-474c-9984-c61e2095a666"
        },
        "item": {
          "id": "7df1ab0c-fa11-4785-b0b7-37a6aa90b2d8",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "8992bfe6-3b83-4fd1-b8b7-8e5a04b1d942",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1b87043-709c-494e-b00a-f6eaa7d7abc5",
        "cursor": {
          "ref": "2641ae37-10f7-48cb-a76c-04f357138401",
          "length": 252,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "0c036b0d-3a30-475c-b7ae-3cfa02fe7d96"
        },
        "item": {
          "id": "f1b87043-709c-494e-b00a-f6eaa7d7abc5",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "7288fd51-afef-4d44-b265-e9857fb7562a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e897c54-003b-43bf-bd8f-d374e965127b",
        "cursor": {
          "ref": "ba8d8dc8-3ef0-4db4-b35e-0773193a5154",
          "length": 252,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "964c21e5-cc39-47f4-ba96-67b89215c354"
        },
        "item": {
          "id": "4e897c54-003b-43bf-bd8f-d374e965127b",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "4da2ed7c-b08e-4da8-918a-21a2abcd6b27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 288,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2accbdf-f644-40e4-878e-99b39e9f820e",
        "cursor": {
          "ref": "3566a930-0569-496a-853f-247048fb945b",
          "length": 252,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "fd320759-6e4c-4994-89c8-51e7d263bb32"
        },
        "item": {
          "id": "b2accbdf-f644-40e4-878e-99b39e9f820e",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "8fb27964-c3b0-4614-897b-a2a7651fff75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e4752db-8421-47aa-bacb-4b5d168b692b",
        "cursor": {
          "ref": "7f5b9697-44bd-4f54-9805-16c1f0b7a564",
          "length": 252,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "7bd1701d-7c9d-4f3a-a53c-9805a8e71ef1"
        },
        "item": {
          "id": "3e4752db-8421-47aa-bacb-4b5d168b692b",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "6ff95999-fa2f-436f-b0d2-f00a189e0002",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4206598-382f-49a1-acff-58eb64e27066",
        "cursor": {
          "ref": "3c73a783-b431-451f-9c83-74311b35cfdb",
          "length": 252,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "3cc1c561-0498-44c7-bd01-466ba201813f"
        },
        "item": {
          "id": "c4206598-382f-49a1-acff-58eb64e27066",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "3ea2a002-698c-4beb-a537-4f503dacf888",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6862fcf-5641-4199-9ea5-eeac4d679460",
        "cursor": {
          "ref": "e2064eba-6b8b-4518-9efe-137a540a0fa9",
          "length": 252,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "2e5d4072-b337-498e-ba7a-afe74cfe5e9c"
        },
        "item": {
          "id": "c6862fcf-5641-4199-9ea5-eeac4d679460",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "9368c61d-0b6a-4cf5-a038-501341c189cf",
          "status": "Created",
          "code": 201,
          "responseTime": 344,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "51a64e09-2c3e-42f7-b1de-34de3b210d28",
        "cursor": {
          "ref": "92a2f1e0-c2c5-4d63-9e6b-bbfe46e883d0",
          "length": 252,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "4c6e5973-b5d0-4ed4-8059-264993430efe"
        },
        "item": {
          "id": "51a64e09-2c3e-42f7-b1de-34de3b210d28",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "c0d6858d-3426-475b-be5c-27b44ea182eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f05bebe-de78-45f5-997b-3555c3c2ff2a",
        "cursor": {
          "ref": "6f3079c9-d1fd-4a72-be33-d6ded4638435",
          "length": 252,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "93a15864-c12c-48aa-8012-bd51051001ca"
        },
        "item": {
          "id": "9f05bebe-de78-45f5-997b-3555c3c2ff2a",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "38ec5f79-3ff3-4636-8a25-66433a24779b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fcec2f6-7274-4e43-8cf9-3a9315ab56db",
        "cursor": {
          "ref": "cd60e5d4-0017-4fe0-a45c-9fe70c56b355",
          "length": 252,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "0f6b2a78-8f16-45dd-b7e6-4fee6111f762"
        },
        "item": {
          "id": "4fcec2f6-7274-4e43-8cf9-3a9315ab56db",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "efc3f1b1-1540-481a-b89a-b0e2db805999",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23e8bf02-288f-4d73-81ae-f39e4e32d4be",
        "cursor": {
          "ref": "46c54afb-96a5-48de-addf-bfd5ab691f7d",
          "length": 252,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "1b78d92c-a208-4e5d-b66e-a41328d68208"
        },
        "item": {
          "id": "23e8bf02-288f-4d73-81ae-f39e4e32d4be",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "e85953f4-f16b-41b9-a452-470f31df6455",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6790e3f0-567e-47bf-a3df-436de416bb68",
        "cursor": {
          "ref": "5799a278-12fb-4774-bf6b-49193c54b891",
          "length": 252,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "7dc619e5-0f8d-492e-a8cb-50472719c5c0"
        },
        "item": {
          "id": "6790e3f0-567e-47bf-a3df-436de416bb68",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "b8c10baa-e248-4999-8767-b432b5db7bfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7aee977-e55d-4533-82a9-0f26af32779e",
        "cursor": {
          "ref": "b3707487-081f-4d6a-9425-71264095c8ac",
          "length": 252,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "5f42dc2a-5468-4c9e-adfe-dd908958a7f3"
        },
        "item": {
          "id": "b7aee977-e55d-4533-82a9-0f26af32779e",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "45eab3a7-dc09-4c33-b667-04a59dff9143",
          "status": "Created",
          "code": 201,
          "responseTime": 307,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "c83ade2b-fbfb-4843-9f1b-4d23f1caf3eb",
        "cursor": {
          "ref": "5b0bad66-95a4-494a-8edf-11ffbacb1abc",
          "length": 252,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "3b906118-90de-4893-bd9b-dbb09a91cd00"
        },
        "item": {
          "id": "c83ade2b-fbfb-4843-9f1b-4d23f1caf3eb",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "9856a274-e0b5-4cd3-8cdc-d0759d4048fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07723fc1-f7bc-42ad-82dd-8b7505044563",
        "cursor": {
          "ref": "1bfb8e14-b00b-45ed-b549-2b4e065b3029",
          "length": 252,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "23ae9561-1e58-46d2-9169-b35c37a7f0eb"
        },
        "item": {
          "id": "07723fc1-f7bc-42ad-82dd-8b7505044563",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "e53982af-1563-494a-b0fd-22543ac2fb6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e31821c-4887-486e-a09b-aaf44cab21b1",
        "cursor": {
          "ref": "9516f543-f321-4c76-a89c-69e733c09aeb",
          "length": 252,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "20d2b2ff-3f27-4af3-8333-7ed604252acd"
        },
        "item": {
          "id": "1e31821c-4887-486e-a09b-aaf44cab21b1",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "4b627afa-cbaa-49c4-b98e-661c06f6d217",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74038d70-a01a-463c-a48e-f5bf1d88d735",
        "cursor": {
          "ref": "06492694-4a0b-48cc-b1b9-8e5a3b5bffad",
          "length": 252,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "5209c2ab-bf21-4697-930d-05bdc3529e63"
        },
        "item": {
          "id": "74038d70-a01a-463c-a48e-f5bf1d88d735",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "fcac8d36-ffb0-4e12-8b9b-6a733d44052c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ed9dd4f-fdd9-4849-a94b-78956fe32311",
        "cursor": {
          "ref": "683e77d8-8de8-45e2-80d1-b03a172da219",
          "length": 252,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "d1d97ebd-149e-4986-8d6e-1a6e70434948"
        },
        "item": {
          "id": "2ed9dd4f-fdd9-4849-a94b-78956fe32311",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "0a79614d-c474-4384-9e7c-383a6304b624",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6595d87-6135-47db-b728-84236c2057bb",
        "cursor": {
          "ref": "61343a12-ed56-41fd-98e2-12ccac99ca52",
          "length": 252,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "f664eb1a-6557-4764-9552-ace66f447586"
        },
        "item": {
          "id": "f6595d87-6135-47db-b728-84236c2057bb",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "dfcd2aec-d0b1-41b7-a349-4452dfb9356b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73fb3c5d-9edb-40aa-8d5f-80849302e633",
        "cursor": {
          "ref": "1b73d766-476b-47f0-aced-b4b7f99aff93",
          "length": 252,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "e06894b4-af38-40eb-8847-9de5a98b69da"
        },
        "item": {
          "id": "73fb3c5d-9edb-40aa-8d5f-80849302e633",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "2e7bb325-c6d4-4861-82ef-e21bc47e9cef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b34d28f1-aeef-467f-83f0-55db81c54801",
        "cursor": {
          "ref": "377b37a9-0138-432e-976d-4de6d698881d",
          "length": 252,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "48a0a6f1-621c-41bc-b476-ad4af182534d"
        },
        "item": {
          "id": "b34d28f1-aeef-467f-83f0-55db81c54801",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "f8ec0902-735c-463a-8437-5f7243ab3818",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa0415f3-aca2-4e11-8834-cfd3ef8487f9",
        "cursor": {
          "ref": "1d3b4609-3a1d-4448-af1e-3f5d02421235",
          "length": 252,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "b45cb57a-e057-4b0d-a642-3d18dc7bffa1"
        },
        "item": {
          "id": "fa0415f3-aca2-4e11-8834-cfd3ef8487f9",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "9c6f6658-08c5-4c78-a3cf-5942e3ccb0c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "f74fa580-d29c-42ca-ad12-92462445a5a3",
        "cursor": {
          "ref": "bd4b426d-ebf4-4f0f-994f-9faee1205d0c",
          "length": 252,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "a863ea34-22ae-49b3-b25d-de99a0670b6e"
        },
        "item": {
          "id": "f74fa580-d29c-42ca-ad12-92462445a5a3",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "38f6abba-4f1e-4e43-9823-4722eaf42565",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 162,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "c2649e35-4b36-4191-bc2d-5b38d5518447",
        "cursor": {
          "ref": "6bc35be3-3d54-4abd-adb8-f786632aabc4",
          "length": 252,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "2a33f553-531c-4141-bf75-6dc99584037d"
        },
        "item": {
          "id": "c2649e35-4b36-4191-bc2d-5b38d5518447",
          "name": "credentials_issue"
        },
        "response": {
          "id": "a8c7bd81-d1f0-4025-943c-95c6666d0412",
          "status": "Created",
          "code": 201,
          "responseTime": 377,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "dea03f6e-0334-481a-956e-900a3bc3bfa8",
        "cursor": {
          "ref": "d517c0dc-4e80-45b1-956d-d35af6b7e26e",
          "length": 252,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "4bf48463-3a41-49b2-81a5-d0129e0c9d13"
        },
        "item": {
          "id": "dea03f6e-0334-481a-956e-900a3bc3bfa8",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "057a14ad-1a03-4407-b22b-cb404d3675f5",
          "status": "Created",
          "code": 201,
          "responseTime": 334,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a833e7b-217b-4b48-a251-6288b4a4fa8d",
        "cursor": {
          "ref": "f3b36971-043a-4f16-843d-9675bd37bf2f",
          "length": 252,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "4b03725b-2e0f-4c99-bce4-8bb555b746c3"
        },
        "item": {
          "id": "6a833e7b-217b-4b48-a251-6288b4a4fa8d",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "10871689-a912-4ed3-9c07-8eb09fc727c6",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "34504e20-c644-4fab-817c-57cf4177c95c",
        "cursor": {
          "ref": "aa63f375-55ee-4d57-bc1c-3445c6359aa6",
          "length": 252,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "362d9419-2474-42d1-8571-1efadb608692"
        },
        "item": {
          "id": "34504e20-c644-4fab-817c-57cf4177c95c",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "d4f8f6fb-311b-4cbe-bb08-8ce6fb1d8117",
          "status": "Created",
          "code": 201,
          "responseTime": 313,
          "responseSize": 659
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "659cf521-cb5a-49d4-bbf2-d31a1f991b88",
        "cursor": {
          "ref": "15e3e83d-5eaf-4b6a-84b0-68af53ff8cc3",
          "length": 252,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "004ed36b-4842-46d7-b426-4f931ae02b08"
        },
        "item": {
          "id": "659cf521-cb5a-49d4-bbf2-d31a1f991b88",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "d1079f69-8b88-4fb1-ae15-3ddecf182c98",
          "status": "Created",
          "code": 201,
          "responseTime": 334,
          "responseSize": 627
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "333df974-d19e-4a51-bc2e-b0fa673d6cf7",
        "cursor": {
          "ref": "da6cc90a-e2ea-4f6b-b3fb-532320331a98",
          "length": 252,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "d4f5a8f6-f303-45b0-bc84-bb87243b8325"
        },
        "item": {
          "id": "333df974-d19e-4a51-bc2e-b0fa673d6cf7",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "45c6889d-fd5b-46fc-8749-2aede3815218",
          "status": "Created",
          "code": 201,
          "responseTime": 293,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b43a6367-5177-4fd3-9237-57a68cf16dad",
        "cursor": {
          "ref": "700c6a24-fb0e-4564-bbf2-8f7323395bae",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "d6a19ebb-88d7-4bb3-b25b-f7ac91219a54"
        },
        "item": {
          "id": "b43a6367-5177-4fd3-9237-57a68cf16dad",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f2445b0c-0354-4129-b995-60b12a558a30",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "b43a6367-5177-4fd3-9237-57a68cf16dad",
        "cursor": {
          "ref": "700c6a24-fb0e-4564-bbf2-8f7323395bae",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "d6a19ebb-88d7-4bb3-b25b-f7ac91219a54"
        },
        "item": {
          "id": "b43a6367-5177-4fd3-9237-57a68cf16dad",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f2445b0c-0354-4129-b995-60b12a558a30",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "a7fe4f42-c878-490a-b230-88d8fd82d8ea",
        "cursor": {
          "ref": "65b08c42-c66c-4f76-a6c8-b4538cf8b222",
          "length": 252,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "6ee0330e-84a3-4238-b5ed-6a2620d142a0"
        },
        "item": {
          "id": "a7fe4f42-c878-490a-b230-88d8fd82d8ea",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "10b40813-fced-4b95-b3a3-3fd3b60f725e",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "4fdc83c1-2359-4b35-9226-bcab1abb27fb",
        "cursor": {
          "ref": "9092f92d-e495-4dd6-a2b9-7781b28155fd",
          "length": 252,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "dab4bfb2-6318-4e0b-a0de-b361593ce04e"
        },
        "item": {
          "id": "4fdc83c1-2359-4b35-9226-bcab1abb27fb",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "9a484f57-3f7b-4409-abad-bc69d7ed3f73",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "d7e65b5a-413d-4255-9082-3a0f551730f9",
        "cursor": {
          "ref": "ac57c167-1ebf-4e35-96dd-c8ae87477e48",
          "length": 252,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "a1490bd7-9524-4ae8-9362-2f6d70859491"
        },
        "item": {
          "id": "d7e65b5a-413d-4255-9082-3a0f551730f9",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "15203c98-2873-46d4-9df8-63e189234935",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "4f7b8e9b-6082-47e4-860d-910e53eb6f58",
        "cursor": {
          "ref": "fc71b4ac-bbd9-4a97-8dd0-8ccdaee20a10",
          "length": 252,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "4317642a-918f-404e-a602-db1ccc11e5f1"
        },
        "item": {
          "id": "4f7b8e9b-6082-47e4-860d-910e53eb6f58",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "feac290b-43e2-418d-a030-b6b678de685d",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "27a3bef1-7765-457b-bbc2-7b8c44c2e416",
        "cursor": {
          "ref": "e02572dd-811c-4287-a85c-e104507bdc4b",
          "length": 252,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "ccd262a9-12c0-4879-9c9c-26dd480a6aaf"
        },
        "item": {
          "id": "27a3bef1-7765-457b-bbc2-7b8c44c2e416",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "bd61fd12-57d7-436e-9204-df86da085d79",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "2341b5ae-c1e7-4899-bab6-469d9cc0cc38",
        "cursor": {
          "ref": "dd7e93dc-ef97-45db-8404-aa72b3688879",
          "length": 252,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "6d7e58d0-18c2-476e-971d-7e351a155882"
        },
        "item": {
          "id": "2341b5ae-c1e7-4899-bab6-469d9cc0cc38",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "285c990e-ad3a-4bc6-a318-53ac2954f028",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "a25ca866-d85e-4e4d-9eb5-c8a6107e4410",
        "cursor": {
          "ref": "d642cdb1-e402-44da-8389-2ef3bc55d459",
          "length": 252,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "d2998d53-abb2-40b8-ba05-5554d719b75d"
        },
        "item": {
          "id": "a25ca866-d85e-4e4d-9eb5-c8a6107e4410",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "76513efe-478d-49e9-bcc7-7badd53c6051",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "b592276a-0614-4b66-bb31-9cb9bf077f58",
        "cursor": {
          "ref": "ebab75aa-706b-4148-bda5-828de0241315",
          "length": 252,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "7e9a54c3-8553-4df4-acef-ea416b1e30c2"
        },
        "item": {
          "id": "b592276a-0614-4b66-bb31-9cb9bf077f58",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "a4bc2d64-dea2-489d-9c14-e323a891696b",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "3c1d4f14-41a7-4cfc-80f7-914904b49773",
        "cursor": {
          "ref": "d1ff5e79-71e9-45b7-9476-d50730b87853",
          "length": 252,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "302c3926-8950-40e0-873e-21d89f700869"
        },
        "item": {
          "id": "3c1d4f14-41a7-4cfc-80f7-914904b49773",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "99c53583-852d-45b5-9ae8-5b40e3a2e426",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "9c563b24-bbe0-4062-9fdd-46ae93be839d",
        "cursor": {
          "ref": "35413e39-2781-4d7e-b878-8a2a64ef6ed5",
          "length": 252,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "fc8af3ed-e42c-4367-b24d-4cdeaab7068c"
        },
        "item": {
          "id": "9c563b24-bbe0-4062-9fdd-46ae93be839d",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "2f74d092-f5b4-48f1-82bc-7e39906aee67",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "5222a946-a6af-4721-b57d-b2197f6ecca3",
        "cursor": {
          "ref": "7fbc2437-85b8-4b15-84b6-5a1569055bf2",
          "length": 252,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "fc80fdce-fe27-4cb0-9e40-76c567b490ea"
        },
        "item": {
          "id": "5222a946-a6af-4721-b57d-b2197f6ecca3",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "49c9c2d3-2ea2-42b4-961b-4d11ec1fa96f",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "5406f8fd-7580-4bdc-a692-61a75b526eb5",
        "cursor": {
          "ref": "4b883ac9-6d85-489d-969b-2e453d22eaa5",
          "length": 252,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "2f22aeea-ea34-4f5b-82d8-ddb468c3d4ee"
        },
        "item": {
          "id": "5406f8fd-7580-4bdc-a692-61a75b526eb5",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "bc8fbed3-a66f-4e1a-8dba-e44034f30473",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "a96458e7-2575-48b9-a0fd-f37d73157f6f",
        "cursor": {
          "ref": "9d0bce79-4b57-4d23-b95e-c8ee11cc6c3c",
          "length": 252,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "ceb04f41-0d16-43e0-87d0-04f90c0c4a56"
        },
        "item": {
          "id": "a96458e7-2575-48b9-a0fd-f37d73157f6f",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "ad55c448-4ffc-4049-b67f-5a1128bf8698",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "7f03e04b-9824-4e35-84d9-4aa2791a8e96",
        "cursor": {
          "ref": "b7531792-f31c-418d-8d29-e0f316685bce",
          "length": 252,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "8942b2f3-eacd-45bc-87b2-2733c0461747"
        },
        "item": {
          "id": "7f03e04b-9824-4e35-84d9-4aa2791a8e96",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "da35ac7f-6581-4b75-977a-c08ce359ebdd",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "9a0dfb8a-d661-4b03-b496-35563022d3b2",
        "cursor": {
          "ref": "27120cad-657f-4f90-a91f-71fcaf6601bf",
          "length": 252,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "5085211c-302f-4780-a4c5-717d7ec05050"
        },
        "item": {
          "id": "9a0dfb8a-d661-4b03-b496-35563022d3b2",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "a073d6f9-a40b-4fd4-9a53-304ffc069612",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "316bf366-df3f-461a-9090-50d3c47a98c2",
        "cursor": {
          "ref": "8d083ed7-9d72-49a0-b12f-7fbf3863c409",
          "length": 252,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "157c8164-cd34-4de3-8738-5415a1057490"
        },
        "item": {
          "id": "316bf366-df3f-461a-9090-50d3c47a98c2",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "e8749059-06f5-4051-93a3-00ec486e4371",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "1e128b26-1a06-40cb-abe7-861e60fa6b51",
        "cursor": {
          "ref": "8c0c94e5-0316-45a9-8990-acf5b4121438",
          "length": 252,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "a342643e-0c31-40f5-a3a5-74d16be7548f"
        },
        "item": {
          "id": "1e128b26-1a06-40cb-abe7-861e60fa6b51",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "e0d0f3ce-0a4f-4a7a-8bd2-3ccc0fcd4da9",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "c011eb45-66f5-467c-a659-8cf58e1e789b",
        "cursor": {
          "ref": "8c00867d-5dfe-4bdc-a4fc-17198eb4544d",
          "length": 252,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "d0934e41-711c-4f5a-941d-9d5ee84e526c"
        },
        "item": {
          "id": "c011eb45-66f5-467c-a659-8cf58e1e789b",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "0d1c718b-beaa-42a0-afda-89ed8c7e2337",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "b18eb6e1-a0d7-4f3f-b976-6590284933d4",
        "cursor": {
          "ref": "860587be-3f6e-4e78-a903-df723b69a439",
          "length": 252,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "8f78d992-07ef-4e8b-94ff-2eba85ae8d1c"
        },
        "item": {
          "id": "b18eb6e1-a0d7-4f3f-b976-6590284933d4",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "657d4754-1c02-4d0e-9e2b-f62347d018c5",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "a2527a6e-b4de-4b30-985e-26d151c2208c",
        "cursor": {
          "ref": "fd62c345-1b37-43c1-990d-4c74e1cc739b",
          "length": 252,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "04bea3be-e480-40ad-b023-5339cb1d3483"
        },
        "item": {
          "id": "a2527a6e-b4de-4b30-985e-26d151c2208c",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "b7023d0f-4745-4ebd-8762-207d086d1859",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "931e49ce-0fd9-4612-b851-275c786e575a",
        "cursor": {
          "ref": "14fc48a1-c538-4858-b6e7-9cc533c5b228",
          "length": 252,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "6dbd1a9a-9d64-487f-beaa-9ee3593ee98c"
        },
        "item": {
          "id": "931e49ce-0fd9-4612-b851-275c786e575a",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "324b7bec-4af9-41d5-986c-b5886ca269e4",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "0a8095c5-01f9-4cda-829b-bf7eab6fe219",
        "cursor": {
          "ref": "436658e7-bc26-415f-8068-8f250dbe6524",
          "length": 252,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "e560b8cb-6b48-4878-8f3a-9aa6d7ddbd56"
        },
        "item": {
          "id": "0a8095c5-01f9-4cda-829b-bf7eab6fe219",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "6fe0146b-1a17-4161-a0b7-93b4517a214c",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "a7beceaf-7b1f-4a05-8c3f-ad9dc9a14f5d",
        "cursor": {
          "ref": "4169209f-e972-4e17-8757-218fd4bb0d98",
          "length": 252,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "557429a8-422f-44b3-a2b5-5197c893ac2e"
        },
        "item": {
          "id": "a7beceaf-7b1f-4a05-8c3f-ad9dc9a14f5d",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "0fb211ef-0ae8-47d3-8d11-2e1aa5ff0058",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "7855c7cf-30d6-49fa-8a64-ddfe2388a7b8",
        "cursor": {
          "ref": "c75eaa39-8cda-439e-a38b-039dae4058c2",
          "length": 252,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "b60d5d7c-27a5-4c2a-9d11-bcb2eb84e952"
        },
        "item": {
          "id": "7855c7cf-30d6-49fa-8a64-ddfe2388a7b8",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "ed714f03-73d0-44e3-a8a0-835851ada346",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "b28a7069-337f-4dbb-b391-cb7f159ba612",
        "cursor": {
          "ref": "50fdc7b0-4dca-428f-9d56-f1afa6893bb0",
          "length": 252,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "23433c43-b3da-430a-ac69-e3f29369fc82"
        },
        "item": {
          "id": "b28a7069-337f-4dbb-b391-cb7f159ba612",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "967fb2fe-0c63-4659-b306-1b98b488dac1",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "f0281ae7-c36d-4006-a7ee-2fb6b148e3ce",
        "cursor": {
          "ref": "4b839b7f-c54b-4c36-86de-f6daa540e44d",
          "length": 252,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "4eb341b4-119f-4621-920e-a5699706fe46"
        },
        "item": {
          "id": "f0281ae7-c36d-4006-a7ee-2fb6b148e3ce",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "e70bed9e-813c-436a-ae7d-74ac1b28afdd",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "cc6d0950-8177-4ab4-b75f-cbbff543f18c",
        "cursor": {
          "ref": "a2e40784-7029-4223-9a2d-42c1bfd5bca0",
          "length": 252,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "991afcf0-bc30-4887-afc1-6dbdd20c4c07"
        },
        "item": {
          "id": "cc6d0950-8177-4ab4-b75f-cbbff543f18c",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "ff6b4475-bd3d-45c1-81de-59a0e342237e",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "5f321b53-1810-4f69-85d6-f996a26ffbfa",
        "cursor": {
          "ref": "3c01d78c-0f08-4710-b8a1-9b3f8fbdd7fe",
          "length": 252,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "c3713078-ea0a-432d-8bb6-f3668d97cecd"
        },
        "item": {
          "id": "5f321b53-1810-4f69-85d6-f996a26ffbfa",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "cfc1f03e-aff2-4bdb-9639-11334bb4b47b",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "33f9da2b-b5b7-4ce9-aaed-ddf7bcc08b0a",
        "cursor": {
          "ref": "2f65b5ca-0625-4cab-9ed8-694dd65c272f",
          "length": 252,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "a140a6dd-4613-4bc7-8748-facebf57fae1"
        },
        "item": {
          "id": "33f9da2b-b5b7-4ce9-aaed-ddf7bcc08b0a",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "33262c38-0b02-4150-9930-0b1173c708d6",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "2cd6ae7f-dfa0-44e6-bce6-e2a40a783ea8",
        "cursor": {
          "ref": "8a5b780b-4d34-4919-b69c-52fd1447d2f0",
          "length": 252,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "f3a2bc7f-9ee3-4f32-9704-5ec216773143"
        },
        "item": {
          "id": "2cd6ae7f-dfa0-44e6-bce6-e2a40a783ea8",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "9034222a-3fa9-44fb-8833-25e2ccdc57d2",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "e54f0308-ae33-4f13-93fd-2c259d09d3c1",
        "cursor": {
          "ref": "a01039a9-370d-44cc-a7fd-f160d5b99e7f",
          "length": 252,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "df11bb6b-d2dd-4e02-abd0-b90331da278f"
        },
        "item": {
          "id": "e54f0308-ae33-4f13-93fd-2c259d09d3c1",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "e228ddb6-f153-4362-88c2-f808b8a97320",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "c1cef38b-daea-451c-884e-331b2b275ad4",
        "cursor": {
          "ref": "d8818d50-cea8-4dc2-955b-a488cd359912",
          "length": 252,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "55ef525d-08c2-4715-96ee-f98e036f5239"
        },
        "item": {
          "id": "c1cef38b-daea-451c-884e-331b2b275ad4",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "07848350-0393-49cb-8303-27f10c9253bf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "879d09b3-2cd9-434d-a70f-b6915e69f8c2",
        "cursor": {
          "ref": "d8d816b4-d6b6-4e2d-a962-a9f06d20ec0d",
          "length": 252,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "06a84941-855c-4d9c-a9a7-8f3d317d9a57"
        },
        "item": {
          "id": "879d09b3-2cd9-434d-a70f-b6915e69f8c2",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "be1b33ee-1a66-41bd-9ca3-57501001f09a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 31,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19ee3b76-06f2-40d6-9c45-0617b6e5e6af",
        "cursor": {
          "ref": "3599721c-542d-4727-a0ee-b644fd393f8e",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "c33e1cc6-cde8-4819-a649-c6aa1af3ca7f"
        },
        "item": {
          "id": "19ee3b76-06f2-40d6-9c45-0617b6e5e6af",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "469e13d3-3b87-450d-8409-2b522eff1d98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19ee3b76-06f2-40d6-9c45-0617b6e5e6af",
        "cursor": {
          "ref": "3599721c-542d-4727-a0ee-b644fd393f8e",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "c33e1cc6-cde8-4819-a649-c6aa1af3ca7f"
        },
        "item": {
          "id": "19ee3b76-06f2-40d6-9c45-0617b6e5e6af",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "469e13d3-3b87-450d-8409-2b522eff1d98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "811c7e20-fb92-4fae-8be1-6a576ba8ec2a",
        "cursor": {
          "ref": "ed9a1ba9-d357-4b1f-980d-b08b0d8c00c4",
          "length": 252,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "19ca5b41-46f9-4c67-bf62-9e16e7ffb9e5"
        },
        "item": {
          "id": "811c7e20-fb92-4fae-8be1-6a576ba8ec2a",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "46f2e338-8470-4056-b8a3-31a4e53548e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb4a1506-2f7a-4b34-8265-014223eb5088",
        "cursor": {
          "ref": "c5bbf309-0dd2-4a62-8965-17e39f57f8ec",
          "length": 252,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "2a1a8f7b-6db7-4df4-98d2-be6fb22a8940"
        },
        "item": {
          "id": "cb4a1506-2f7a-4b34-8265-014223eb5088",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "cbd5ebd1-8546-4d88-b7e8-847e7ec989c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11055e08-222a-404f-ad9e-19c7ec376cf1",
        "cursor": {
          "ref": "93dea847-7f0c-42ec-adb9-f354f5662788",
          "length": 252,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "a5880395-f31d-4e31-812a-8eaaa4bfc44d"
        },
        "item": {
          "id": "11055e08-222a-404f-ad9e-19c7ec376cf1",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "cd3be987-04bf-46ec-ad3a-adbb3fd4f35d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0b86e01-c082-49a1-8ab2-74ba4553c084",
        "cursor": {
          "ref": "a5f304f3-95ba-4fbb-b0a5-9a083be8c99f",
          "length": 252,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "447e062d-99c8-48f3-9156-99bed0dae723"
        },
        "item": {
          "id": "c0b86e01-c082-49a1-8ab2-74ba4553c084",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "bd42e0cf-5a59-439d-a466-e4a5f57a31a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c45da1f8-d237-4578-a60d-fab50083091a",
        "cursor": {
          "ref": "87a19616-8879-4a59-8bf1-92d154c98e6b",
          "length": 252,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "bf4c9ca1-8445-43a8-ae97-7e2ca0b8c48b"
        },
        "item": {
          "id": "c45da1f8-d237-4578-a60d-fab50083091a",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "e9b6a70b-82df-4d8b-87c3-c53bc4beb416",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdbb05dc-a560-473c-b9a6-4e803181b3d0",
        "cursor": {
          "ref": "396dc9d5-c90a-4305-a289-e7f3fe68c5fa",
          "length": 252,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "3fbb785b-b6e6-4437-874b-a91646d14c19"
        },
        "item": {
          "id": "cdbb05dc-a560-473c-b9a6-4e803181b3d0",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "c4a1cee5-455b-46a9-8dae-41ba21325eb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 619,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37c26756-69ba-4b50-ab7f-26ff57945213",
        "cursor": {
          "ref": "4a883ef3-96c7-445e-8db6-f2622e1f8272",
          "length": 252,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "3fe5c274-4e4e-4cf0-b941-4a3ed9881c55"
        },
        "item": {
          "id": "37c26756-69ba-4b50-ab7f-26ff57945213",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "90598a29-77ed-4b0a-ae70-e6da5a482943",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63a214ff-797e-4a13-9d07-9e5c8bb1be5d",
        "cursor": {
          "ref": "b5830678-565c-437d-8e05-3dd81ab82c42",
          "length": 252,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "da2e9041-a68e-45cf-a4bf-addababbc172"
        },
        "item": {
          "id": "63a214ff-797e-4a13-9d07-9e5c8bb1be5d",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "f5f6e50f-f3ff-4f0c-a000-d0360af7ae54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec8e2c8f-636d-48b1-b0dc-639108cb6d9c",
        "cursor": {
          "ref": "9a993311-b531-4d6e-8eac-08efa7cc745d",
          "length": 252,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "1bc4761f-f62a-4609-9f1f-29025904cfc4"
        },
        "item": {
          "id": "ec8e2c8f-636d-48b1-b0dc-639108cb6d9c",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "52f2c7ab-d6f5-485b-8c84-369309c206fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d60ee751-5f63-47f2-8975-80c8a14167e0",
        "cursor": {
          "ref": "aea8804e-3f91-419a-881f-6bb556f7e3fa",
          "length": 252,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "6cc04ae5-cc0d-4784-8bb5-d71b0fd1966f"
        },
        "item": {
          "id": "d60ee751-5f63-47f2-8975-80c8a14167e0",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "aa1ee045-4eac-4902-8e79-a00bbe6d430c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48db40f5-5e31-44d7-ba9a-8cbf41a7096a",
        "cursor": {
          "ref": "d02d6a5e-fbfd-4ef5-8040-5a44a566fbdb",
          "length": 252,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "3f2387ff-3d04-4996-91e0-3256228fcb8c"
        },
        "item": {
          "id": "48db40f5-5e31-44d7-ba9a-8cbf41a7096a",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "8bc05643-595d-4ee7-bd60-702139e77190",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aadf757-f175-4eac-b0fb-97902c6c1847",
        "cursor": {
          "ref": "4088fdd0-0839-4a42-b304-c3a0aafd71e6",
          "length": 252,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "c5e36c69-190a-4991-aeea-f715d8c8c3fb"
        },
        "item": {
          "id": "1aadf757-f175-4eac-b0fb-97902c6c1847",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "81b19a3a-7d8d-4663-96e8-72095337de6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "963fb9e4-7ce6-4506-b2d8-fa6099dd0c9d",
        "cursor": {
          "ref": "385ba910-8312-4e15-8f08-5b281efe6fc3",
          "length": 252,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "3e0e1368-b9d0-407e-ad5e-3e1b9b7c6d73"
        },
        "item": {
          "id": "963fb9e4-7ce6-4506-b2d8-fa6099dd0c9d",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "ca79dc89-779a-4ef7-9e41-86e52f27f3e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1da6fa96-b4d7-4cd3-9c26-e091c95255c4",
        "cursor": {
          "ref": "039990fd-a87b-46ad-a7d5-32e8016af38c",
          "length": 252,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "32ba0f3a-1c77-43aa-ba6c-a0b4ac17a51a"
        },
        "item": {
          "id": "1da6fa96-b4d7-4cd3-9c26-e091c95255c4",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "fa2ad864-d359-431e-8230-e28146ffbf20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17f5ae05-93cf-4ddd-88bc-ca7c90afc43c",
        "cursor": {
          "ref": "5bcc6a5e-b2ba-4057-bfcc-ef579a6fe960",
          "length": 252,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "7ad431f5-3280-4f0b-b82a-3d0483242ae7"
        },
        "item": {
          "id": "17f5ae05-93cf-4ddd-88bc-ca7c90afc43c",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "2ad324c8-2bb8-4a74-b0d4-6f453f8db6c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77093fbb-d22d-4e81-8077-206964d7facd",
        "cursor": {
          "ref": "218c4c43-ca34-44fb-a1b8-0ee66fe8c336",
          "length": 252,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "7e7a02b4-7cf9-40dc-8378-90fc4cb50da0"
        },
        "item": {
          "id": "77093fbb-d22d-4e81-8077-206964d7facd",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "496840e3-f8f6-4150-a1bb-e264ed7fc47e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2e18260-33f8-4eb1-ba0c-3020345779fa",
        "cursor": {
          "ref": "b531826d-c8fb-4162-b0d7-926567f522c3",
          "length": 252,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "befeecc6-1c94-43fb-b81c-1b43ec38fc5d"
        },
        "item": {
          "id": "b2e18260-33f8-4eb1-ba0c-3020345779fa",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "c9f345f4-5deb-4f07-90f9-0b78554f4f3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 333,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "118ba472-220d-4c93-8b37-9ddf73fd5276",
        "cursor": {
          "ref": "c814bf93-2b28-4b77-bcd2-9ffbbe5f72fc",
          "length": 252,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "43f8d623-d3c8-4242-a6ad-a45f682202e2"
        },
        "item": {
          "id": "118ba472-220d-4c93-8b37-9ddf73fd5276",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "cd99f553-e56f-4723-bf46-9555fe179e5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 203,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ea3257b-072d-4198-9d4d-0dfe482b34e8",
        "cursor": {
          "ref": "3fd86ff0-5a8d-409c-87b8-db28965c3f07",
          "length": 252,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "ad746e4a-9e09-4510-a370-5c57c60ee01d"
        },
        "item": {
          "id": "3ea3257b-072d-4198-9d4d-0dfe482b34e8",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "1bbd0fc6-dc6f-470e-9aec-9502ddecafe1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 194,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f25e304-42eb-4ab2-8746-e89798eb1df4",
        "cursor": {
          "ref": "0b92e4b4-3243-47fd-b64d-d6cafb7a7143",
          "length": 252,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "98e97ed9-04a1-41b5-85f2-57234ed56b0b"
        },
        "item": {
          "id": "3f25e304-42eb-4ab2-8746-e89798eb1df4",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "8549cab1-6085-42e7-9248-382b1e0a0b4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 199,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92fa4a68-16b4-4c10-8d51-4ee060aaf1cb",
        "cursor": {
          "ref": "43e8a5d2-8137-404c-b9f4-9fe0d5cac2d5",
          "length": 252,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "71777a84-705a-4606-afa8-82e155f19b55"
        },
        "item": {
          "id": "92fa4a68-16b4-4c10-8d51-4ee060aaf1cb",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "aebf3e38-81cd-41c1-8285-50bb6d6f8ec1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 195,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca6e8ad5-814c-4d7b-b61a-d85148d3600b",
        "cursor": {
          "ref": "57bcecd4-0232-467b-a581-fbc946952d3f",
          "length": 252,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "8125dab1-d586-4a92-84a3-cfe8d5be3655"
        },
        "item": {
          "id": "ca6e8ad5-814c-4d7b-b61a-d85148d3600b",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "422fc7ce-b4d3-47ab-8e7c-b61e9e80b5be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 317,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f48b3863-01b8-4e09-b071-ade0cc983af2",
        "cursor": {
          "ref": "15901505-6bcf-4f06-b398-c8a106333c8a",
          "length": 252,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "ab776a59-ee89-40fa-92c0-549c23c078c2"
        },
        "item": {
          "id": "f48b3863-01b8-4e09-b071-ade0cc983af2",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "34072626-dd8c-4d35-b7c6-4f83b6474274",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95c955da-73d1-423f-b9fa-750f77d63095",
        "cursor": {
          "ref": "6389b063-d686-4462-bc93-2da84f352ac7",
          "length": 252,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "67c38ed9-b82b-4918-b1ec-6142af8fddee"
        },
        "item": {
          "id": "95c955da-73d1-423f-b9fa-750f77d63095",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "6b5a8e41-5c44-480e-b20a-9ebc81160c5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "203b0d3b-f6df-47b1-9e43-4659279a0732",
        "cursor": {
          "ref": "82f3827f-9a08-4023-bac2-e796159a7fe0",
          "length": 252,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "c7db8bb3-611c-44a0-9d7d-3f6af046a867"
        },
        "item": {
          "id": "203b0d3b-f6df-47b1-9e43-4659279a0732",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "b005b390-0432-48df-8e2b-29cfd49392f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 199,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fea94600-00e3-480a-b7d4-5742be87a6ed",
        "cursor": {
          "ref": "2f26d3f6-7b0d-4b91-ad91-e72286cd09a4",
          "length": 252,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "bf4bc221-34fc-4347-9797-a20d75ccf492"
        },
        "item": {
          "id": "fea94600-00e3-480a-b7d4-5742be87a6ed",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "d9f30081-2cc1-410b-bd94-ce5eccc24593",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "630c0ecf-47bc-4208-ad8d-804ae17cf5b7",
        "cursor": {
          "ref": "052ed5f4-ec03-4220-8d9d-99d3ebe07cc2",
          "length": 252,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "0feccbc3-2d2c-413d-909f-f64a86d5620b"
        },
        "item": {
          "id": "630c0ecf-47bc-4208-ad8d-804ae17cf5b7",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "5d3ef7c5-2be9-4785-82ba-f2ca1dbc9757",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8a5abff-86e5-48c1-98c7-4311864bfae1",
        "cursor": {
          "ref": "8cb70770-ec8c-47b0-a0cc-cc84b08e6e6a",
          "length": 252,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "53d43d39-6eef-4703-a18b-3bd3fc605fe5"
        },
        "item": {
          "id": "e8a5abff-86e5-48c1-98c7-4311864bfae1",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "f9553169-6b6d-47c7-8045-545868fab50b",
          "status": "OK",
          "code": 200,
          "responseTime": 197,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "b8da2dd8-b9af-40b1-85fd-a9273d111786",
        "cursor": {
          "ref": "c8f04ed8-bd52-40ff-892e-b5e3c8725b2b",
          "length": 252,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "35acbe60-1498-4673-8f90-e77fd5a549e7"
        },
        "item": {
          "id": "b8da2dd8-b9af-40b1-85fd-a9273d111786",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "311f3028-bc14-44d9-90f7-7f6032f5064d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c744d28-d4ca-46cc-a1cd-a45f4c57bd9b",
        "cursor": {
          "ref": "076dffc2-da8d-492d-8449-91c52d79a150",
          "length": 252,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "669a55ba-2afa-4977-811c-dfdd9a00b1c5"
        },
        "item": {
          "id": "2c744d28-d4ca-46cc-a1cd-a45f4c57bd9b",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "dc54ecee-f82b-45e3-a010-984277dd0f85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "346cf66b-1a69-45f5-af8f-faf93c3a8ed7",
        "cursor": {
          "ref": "e8ac04d8-748a-4984-9eb0-ecb3e260cac6",
          "length": 252,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "8070ad68-a660-4f02-9764-2f83a8c90acf"
        },
        "item": {
          "id": "346cf66b-1a69-45f5-af8f-faf93c3a8ed7",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "8a952a08-53f4-442d-9e04-9ff796ead8b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d43d556d-0e9e-4249-929b-77669d912671",
        "cursor": {
          "ref": "6873580e-dc28-4137-a69d-9923821b7e3a",
          "length": 252,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "32af62be-1ae5-4b6c-8890-d5cb825a2798"
        },
        "item": {
          "id": "d43d556d-0e9e-4249-929b-77669d912671",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "903f9cfb-7628-4cc6-ae24-dd7d64c404b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 205,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bc60425-c9cf-4c61-aee1-8ce341920128",
        "cursor": {
          "ref": "fac1b14f-e9a7-4560-89fe-9558b45e195a",
          "length": 252,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "c9952e2d-6039-429e-9cb2-a017cdc53d72"
        },
        "item": {
          "id": "5bc60425-c9cf-4c61-aee1-8ce341920128",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "7772c441-e93f-4c7d-84e7-9fec9d1e039a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "602b2ccc-17aa-44a5-afc2-95aceba1a046",
        "cursor": {
          "ref": "478e13ff-557c-42fa-8886-87ec5c951048",
          "length": 252,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "11fb596d-2a75-43bf-b31c-8be5801fd55f"
        },
        "item": {
          "id": "602b2ccc-17aa-44a5-afc2-95aceba1a046",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "bdb88b93-70e6-4796-ab2f-16e101028a00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 204,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44c9356f-f1bc-46dd-8d80-b10274d0a09f",
        "cursor": {
          "ref": "75fae376-c66d-4513-913b-40609c4d0780",
          "length": 252,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "34673c52-1868-417d-9237-41ddb55cc428"
        },
        "item": {
          "id": "44c9356f-f1bc-46dd-8d80-b10274d0a09f",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "1bfa8fd4-eb2b-467c-8997-7086cff9f5fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 201,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d881938-aa27-4544-9192-ada950b3c6b5",
        "cursor": {
          "ref": "908f8a3a-752d-460b-b1de-da8425bc376a",
          "length": 252,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "22c3e11a-e0ea-436e-8a11-6527e0a87fac"
        },
        "item": {
          "id": "3d881938-aa27-4544-9192-ada950b3c6b5",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "04735b93-187d-43ee-a3fb-1707e6753120",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 196,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bca92156-b3eb-44e4-ae56-0482e46f69a6",
        "cursor": {
          "ref": "84349045-f063-44c5-b196-b4bae7afe069",
          "length": 252,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "56ef08e7-c016-470a-9c6c-31a577749541"
        },
        "item": {
          "id": "bca92156-b3eb-44e4-ae56-0482e46f69a6",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "0dc41862-05c7-4ab3-a99b-e75a48565cbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 207,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed5d2c47-f560-42ba-b08a-634b31a5d0f9",
        "cursor": {
          "ref": "b76ddf1a-01e5-4c7e-8a57-dec84b2fe5e1",
          "length": 252,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "8fcf7e1d-3022-4d85-baf1-015f62581cd1"
        },
        "item": {
          "id": "ed5d2c47-f560-42ba-b08a-634b31a5d0f9",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "a297d1f9-ed96-4d5b-8dcb-03b720ed728c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 197,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9962a258-b750-4acb-8f48-287f93a1b007",
        "cursor": {
          "ref": "e798c1a1-ae64-445e-b731-d665c312ab4a",
          "length": 252,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "b495b180-164e-4c0b-99a4-dcfed0bb0ad8"
        },
        "item": {
          "id": "9962a258-b750-4acb-8f48-287f93a1b007",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "f17751d6-5df0-4a00-ba86-f03493ef0377",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 199,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fe6846a-4977-4e12-a144-45d833f8f260",
        "cursor": {
          "ref": "2b695ad1-43d9-404e-bf25-3a3413ccd092",
          "length": 252,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "31731ae0-9d17-4925-b4d3-bd7183d5283f"
        },
        "item": {
          "id": "0fe6846a-4977-4e12-a144-45d833f8f260",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "8924c17e-94ec-46b4-8d9e-edce6baddad6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 200,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08e8d8b7-588a-4c8d-a43a-6ccd6f075d3f",
        "cursor": {
          "ref": "139c348c-92d1-4d51-8537-9cb67630a5b0",
          "length": 252,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "ef4d0c17-4e9c-46f6-b545-fc17b47c53f8"
        },
        "item": {
          "id": "08e8d8b7-588a-4c8d-a43a-6ccd6f075d3f",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "68507fd9-085b-4a71-b38d-bf08a2ebb70b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 220,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8acf5d31-aa55-4a50-8d32-c44ed0990308",
        "cursor": {
          "ref": "fabdca25-fbe4-4fa8-a65b-dda1b29b6655",
          "length": 252,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "7aa52ab6-b1fb-4800-928c-1b3d595e24eb"
        },
        "item": {
          "id": "8acf5d31-aa55-4a50-8d32-c44ed0990308",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "fd136f3a-e537-425d-beaf-d3fa961baff2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 198,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b32e45f8-27cf-4af7-a327-5e8eb7405955",
        "cursor": {
          "ref": "7c524113-ca1f-4859-9dd8-a8016f0a250d",
          "length": 252,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "22a765a0-984b-44b5-9ba4-2eb849c919e7"
        },
        "item": {
          "id": "b32e45f8-27cf-4af7-a327-5e8eb7405955",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "74f44594-888e-49ab-a601-bc4c48ebff7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 214,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21bdb09d-3ca3-40db-980f-195c1d724f54",
        "cursor": {
          "ref": "b775220c-c854-4bbe-ab8f-e54e06f0d09c",
          "length": 252,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "634fd65f-51f5-475b-9b17-93c1323653c9"
        },
        "item": {
          "id": "21bdb09d-3ca3-40db-980f-195c1d724f54",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "d881b254-26bb-4bc0-bdbb-81f5ce36332f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 186,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1455cf6-a913-45f2-b4a8-321612c202e2",
        "cursor": {
          "ref": "75259983-0f3b-43d1-b61c-96d7db272248",
          "length": 252,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "719f1900-be81-47c6-b920-9d66eabb986a"
        },
        "item": {
          "id": "b1455cf6-a913-45f2-b4a8-321612c202e2",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "5b1886d4-40d7-4e98-aa42-059bdafbd750",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 207,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a0a794c-593a-4e6d-be59-c2ea668492fb",
        "cursor": {
          "ref": "aa9425ab-f9e4-4dab-aef9-3c92215e2a43",
          "length": 252,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "d95d70ff-2e7c-48d6-9fd3-7a5060417d5b"
        },
        "item": {
          "id": "8a0a794c-593a-4e6d-be59-c2ea668492fb",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "572fcd23-86d8-4a00-8590-d2b52908b45a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 243,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "483c8c03-440f-4fad-8ef4-2754956f5c77",
        "cursor": {
          "ref": "2404728b-825a-47e0-8e01-668a3e47c814",
          "length": 252,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "94bcb08d-8f98-403e-bcc4-6356fb384555"
        },
        "item": {
          "id": "483c8c03-440f-4fad-8ef4-2754956f5c77",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "e4a4725d-c047-404c-83ce-e2098e8273f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 190,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8ff1fa0-5c83-4aac-959f-eaea8d9891d2",
        "cursor": {
          "ref": "4c2bdb70-8806-41eb-840f-3a73d5279948",
          "length": 252,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "457a4e63-1deb-48dc-93d4-037453225652"
        },
        "item": {
          "id": "b8ff1fa0-5c83-4aac-959f-eaea8d9891d2",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "8e6c46aa-2120-46e6-a04c-70b4ef09e76a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 192,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "917d6286-554a-4587-b8f5-3cdb341df411",
        "cursor": {
          "ref": "6819d175-2510-4e33-b03f-50798276c9c5",
          "length": 252,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "0b020b87-8918-4eca-8632-959865c0e7e9"
        },
        "item": {
          "id": "917d6286-554a-4587-b8f5-3cdb341df411",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "ca2f1c5b-dfb4-44d7-a7d8-364ec8fcfd14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 227,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fc4de8f-f38e-4295-bb92-b33a721acfdd",
        "cursor": {
          "ref": "b693e293-c112-44c1-88b9-80ce08910c59",
          "length": 252,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "a74e0902-6c15-480f-b6f7-db4f4d0e9fbc"
        },
        "item": {
          "id": "2fc4de8f-f38e-4295-bb92-b33a721acfdd",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "63c3c5ea-7534-4905-9efe-fc35bc94f077",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 200,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ae7004e-eaba-4247-beff-6d0b2cee5205",
        "cursor": {
          "ref": "4d500770-4ade-4900-893f-a0eb58d6834c",
          "length": 252,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "18fe1c3c-8741-4927-90bf-45421437b03e"
        },
        "item": {
          "id": "2ae7004e-eaba-4247-beff-6d0b2cee5205",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "588c80db-54cb-41a9-8076-8b8007c651d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 196,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f978422-7ab7-45a0-82c0-80a1fc61f223",
        "cursor": {
          "ref": "fd3d2085-cd12-420f-9cf4-30265658e563",
          "length": 252,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "68c07978-d2cf-4229-a750-8bff4c4e320f"
        },
        "item": {
          "id": "8f978422-7ab7-45a0-82c0-80a1fc61f223",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "ed5b3a02-9e99-403c-8a5a-f2f3fd2ff5d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 221,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b070f473-4321-4b6c-9ce1-8ba023defcc4",
        "cursor": {
          "ref": "3d3652a3-d00e-4cff-9469-709bcd2d441e",
          "length": 252,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "af3fa6dd-4292-407a-9497-90ee4bedcb20"
        },
        "item": {
          "id": "b070f473-4321-4b6c-9ce1-8ba023defcc4",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "28497e63-6f7a-4675-97bd-3de6f4ce1bdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea053351-d8ef-4bd1-942f-e55a16f28792",
        "cursor": {
          "ref": "493a2c2f-48fb-47cc-9b1d-35b7d6242931",
          "length": 252,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "69ef3cca-a96d-4e11-b54a-fd6611affcc5"
        },
        "item": {
          "id": "ea053351-d8ef-4bd1-942f-e55a16f28792",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "d10f60a9-20ef-4245-b1dd-dd3d9da00866",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6657634b-ccb4-45e4-928d-a0f8414b876c",
        "cursor": {
          "ref": "bc8ebc24-0b3b-428e-acb7-d4b22e5ce244",
          "length": 252,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "1870ac88-e2d7-4f86-bb7c-e9edf03adac9"
        },
        "item": {
          "id": "6657634b-ccb4-45e4-928d-a0f8414b876c",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "23e1e105-3050-4e84-b86a-98dd61f43871",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a86a6a9-068c-4b91-a61d-6a5f7152437e",
        "cursor": {
          "ref": "e87cc96b-dab6-4b38-99ad-bb8c34411d6e",
          "length": 252,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "b3d59efb-1b42-412e-8ebb-050795be58e4"
        },
        "item": {
          "id": "3a86a6a9-068c-4b91-a61d-6a5f7152437e",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "23fb000a-255d-44b8-b52b-5bbf3e708da7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 225,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fc1c1e1-590e-4f54-96fe-83befc0b2881",
        "cursor": {
          "ref": "fcf7217a-f0dc-4814-a59e-cd7e89ec69fa",
          "length": 252,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "25d171d8-692e-48a3-b33b-465e388a114a"
        },
        "item": {
          "id": "0fc1c1e1-590e-4f54-96fe-83befc0b2881",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "138b6f22-f0b3-454f-9969-17f002ba7b8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3f82ba8-b5d5-4095-af7a-5078c880c998",
        "cursor": {
          "ref": "4d830646-a5ee-477f-a789-b1405aa10e28",
          "length": 252,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "00e7b4be-dc52-4b5e-afbf-f43a4a0b18fb"
        },
        "item": {
          "id": "c3f82ba8-b5d5-4095-af7a-5078c880c998",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "d35ff788-3197-4ab8-821d-00dcc056d522",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a802410-df0b-4dcb-b4ae-51f43f69ea7a",
        "cursor": {
          "ref": "570f3c02-eb99-4a7d-a1fa-084210bdbcf4",
          "length": 252,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "d3cd6fa2-eba4-4971-885f-a8965992def9"
        },
        "item": {
          "id": "6a802410-df0b-4dcb-b4ae-51f43f69ea7a",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "66d40191-d546-4858-8bc5-910443c5385e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68feb085-9544-4055-b9aa-13d58c596e6c",
        "cursor": {
          "ref": "e949baac-c12a-4dac-9046-23247fc5b196",
          "length": 252,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "e165d694-9d36-4b82-9d42-ed1a14630824"
        },
        "item": {
          "id": "68feb085-9544-4055-b9aa-13d58c596e6c",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "cf53ea90-d39d-40e4-abe0-7e89ec88177a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "011eb591-0171-473a-98fb-19c8619c7011",
        "cursor": {
          "ref": "2594ba12-c53a-4711-ab1f-3175b752a60c",
          "length": 252,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "49b69d2b-55af-487f-a368-f1e958573ad8"
        },
        "item": {
          "id": "011eb591-0171-473a-98fb-19c8619c7011",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "2dcad1e8-cb4a-40dc-b292-ab322012123b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 197,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26e5ec8e-296f-4d8e-b8c2-c5e90757b9d6",
        "cursor": {
          "ref": "9efd6132-2eea-4b4e-9e73-a641edb19c9c",
          "length": 252,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "d2ea8782-3860-4c68-9eea-a7feda1f2c14"
        },
        "item": {
          "id": "26e5ec8e-296f-4d8e-b8c2-c5e90757b9d6",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "cca6cfe9-e7fa-447c-9608-86a35afe8441",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d0f087f-d033-4ff9-89ee-2e0eb93a91c9",
        "cursor": {
          "ref": "d83ce773-b801-4f9d-8476-3c2c87e6c99f",
          "length": 252,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "39b19429-b5f3-4b6b-96ac-b34fc866b1ea"
        },
        "item": {
          "id": "5d0f087f-d033-4ff9-89ee-2e0eb93a91c9",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "2811be47-bf53-4ac5-aa5a-aa821697f848",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "096a74da-7e82-4a83-a097-bbb8ed3aadc5",
        "cursor": {
          "ref": "5eb7314b-024c-4081-a19f-8366beef508f",
          "length": 252,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "316fa9e7-78dd-4cd0-b7de-74ef22299f3f"
        },
        "item": {
          "id": "096a74da-7e82-4a83-a097-bbb8ed3aadc5",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "668591d2-304d-477d-bef6-db1fd246d376",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27aaf821-04d9-4893-b7de-23925c0c66e7",
        "cursor": {
          "ref": "d215c5af-5579-4555-b018-8119a8719ec2",
          "length": 252,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "62a60b27-b9dc-4709-a5b3-5e19007d272f"
        },
        "item": {
          "id": "27aaf821-04d9-4893-b7de-23925c0c66e7",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "b36f2886-084d-4123-9b09-130b8096719b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9fde5ec-426c-4e4b-b24c-b82b901cec0a",
        "cursor": {
          "ref": "daa62d19-e894-4742-ba91-6894941c38a6",
          "length": 252,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "3f0ffe1f-8606-40f0-b7d2-d2fdf96658ba"
        },
        "item": {
          "id": "a9fde5ec-426c-4e4b-b24c-b82b901cec0a",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "a4e2d838-315c-4d27-87a6-159a1ae8ec45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e5c5b15-8bf4-4238-8c8e-33b5158185d5",
        "cursor": {
          "ref": "9d8af6e7-2536-4739-9eb1-c73634f0a662",
          "length": 252,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "08183260-78e8-4324-bac3-1eaff7e8c7a6"
        },
        "item": {
          "id": "3e5c5b15-8bf4-4238-8c8e-33b5158185d5",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "299f8dcb-5e94-47e9-a8f7-5faca5e995e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e297caf-9072-463c-a2aa-3d20b475b74d",
        "cursor": {
          "ref": "d92d24f9-de5a-4f64-ad16-d1d2289c9e41",
          "length": 252,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "1848c416-fe91-43b6-839d-fcf7ffec5794"
        },
        "item": {
          "id": "2e297caf-9072-463c-a2aa-3d20b475b74d",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "36bd0559-38d3-4a95-a18b-49672b2bf728",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69c86f56-038e-44bb-8c91-a50d11cad9fb",
        "cursor": {
          "ref": "4b1fe898-a0fd-4f5e-a34b-242a82990248",
          "length": 252,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "2e4deb9e-4795-4c7a-8a91-4b39f49d8ad8"
        },
        "item": {
          "id": "69c86f56-038e-44bb-8c91-a50d11cad9fb",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "8f6c2db7-e6cf-4f56-9ac2-ca1b182ad86d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51939693-aa96-4f86-8920-11f8a369ede0",
        "cursor": {
          "ref": "8d7804ac-b372-4292-9673-396960ae01d4",
          "length": 252,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "07eaf440-b978-45f2-b179-4b570902ff68"
        },
        "item": {
          "id": "51939693-aa96-4f86-8920-11f8a369ede0",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "3e400f69-153e-49f4-945a-103f760827d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a777c33-f4da-4b5b-9a2f-d0bb336263bb",
        "cursor": {
          "ref": "d0e184ef-1737-4b14-bb43-c00194119602",
          "length": 252,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "3ea9f8a5-a926-46dd-b1d1-f8aa7eb6efb5"
        },
        "item": {
          "id": "8a777c33-f4da-4b5b-9a2f-d0bb336263bb",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "8ac79bb0-85ce-4112-add2-2725255cab52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bb90a76-95f9-4a4a-b43c-1bd97850e503",
        "cursor": {
          "ref": "302ef25c-922c-4bdb-9e00-ecfe45b51e10",
          "length": 252,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "f3a1476f-197b-4c1d-9df6-de3b17298570"
        },
        "item": {
          "id": "7bb90a76-95f9-4a4a-b43c-1bd97850e503",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "28de0d11-4340-488d-8a0f-6ed12bf236e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f80b64f2-3ef4-46f1-b39f-7db5e2a65fb6",
        "cursor": {
          "ref": "d29c48c7-2211-4361-9f49-f4dca46c1f9f",
          "length": 252,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "e28263b5-25e3-46ce-8e03-546078cb0133"
        },
        "item": {
          "id": "f80b64f2-3ef4-46f1-b39f-7db5e2a65fb6",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "df71faca-c9f3-4cda-932c-a62908e3f2ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5e98cf4-51a1-4853-b049-8ffcc4fdd837",
        "cursor": {
          "ref": "df8fcadf-8d0f-4e0b-9bc6-ad3dd06e5d66",
          "length": 252,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "d1e05274-c7be-4c05-b78f-4a167087c530"
        },
        "item": {
          "id": "a5e98cf4-51a1-4853-b049-8ffcc4fdd837",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "d6af8fe3-0532-498d-ad6e-296d1d90d090",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c01ff61-11bf-4d90-b5b4-97056b572a3b",
        "cursor": {
          "ref": "1398459a-51e2-41ea-aeb7-abb4361a84d4",
          "length": 252,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "62b05f82-08ed-4d09-8780-33a6c3e77f43"
        },
        "item": {
          "id": "0c01ff61-11bf-4d90-b5b4-97056b572a3b",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "85eb1fb5-5b92-40fb-93a9-f1bb4df87015",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77f4c6be-79c0-4e96-87a9-cb67a877dc78",
        "cursor": {
          "ref": "3817ef37-25b7-4f78-9d29-91b255f48465",
          "length": 252,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "dc01c70e-3919-4165-aa26-45d193dcade8"
        },
        "item": {
          "id": "77f4c6be-79c0-4e96-87a9-cb67a877dc78",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "31384231-8b2c-45ac-97ec-d10e2d4ab3df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d65211b6-0d45-4dd6-a17d-e850af6e32b4",
        "cursor": {
          "ref": "84ea2597-5de9-4bf6-b57f-c1fbc2f7760d",
          "length": 252,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "dedf3d31-8938-4cff-b0da-248ac5de8a9e"
        },
        "item": {
          "id": "d65211b6-0d45-4dd6-a17d-e850af6e32b4",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "a33b2248-fe09-4ef4-a3ef-389ad440829e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f024bfa-c8c2-43ed-8ff2-dec7064f104e",
        "cursor": {
          "ref": "09189255-ddf5-4d44-b631-2900d90dd2bb",
          "length": 252,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "780ab0d7-9851-4a7e-ba99-c493d408e169"
        },
        "item": {
          "id": "9f024bfa-c8c2-43ed-8ff2-dec7064f104e",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "c1c0b64b-8646-44d9-8722-f55501b489d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "405196d0-dade-478e-8c16-647af63a4f55",
        "cursor": {
          "ref": "34c3203e-fdf7-4bb5-84a5-2447f6c0b9e9",
          "length": 252,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "caf8d575-a647-42cd-a014-43d54fa10330"
        },
        "item": {
          "id": "405196d0-dade-478e-8c16-647af63a4f55",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "036cdc43-0c4a-4db6-bb56-07f752e85036",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51205c2e-4351-44e5-80f9-990fd43c9010",
        "cursor": {
          "ref": "5810c96b-c58f-4c65-9de5-e8f70cef57f2",
          "length": 252,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "2b927bcd-e1d0-418e-bb37-d98371ec1fd4"
        },
        "item": {
          "id": "51205c2e-4351-44e5-80f9-990fd43c9010",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "0579e416-0072-4867-b758-26db72b2a56e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3774df55-3825-46d8-b702-fbcee58800aa",
        "cursor": {
          "ref": "c911eea3-71f9-4444-80b6-3b1d41ddb6fd",
          "length": 252,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "9793166c-e6d0-4a42-8ee1-8b12a5569da5"
        },
        "item": {
          "id": "3774df55-3825-46d8-b702-fbcee58800aa",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "dae81443-8946-4f34-bced-304ec5b98f31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beafa115-d1af-4ad4-ab55-dd2993ceb3fa",
        "cursor": {
          "ref": "373d13d5-2c91-4bfa-9ad2-837181d1da32",
          "length": 252,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "3f66cbf2-322c-42c5-99c0-b24d0f26b854"
        },
        "item": {
          "id": "beafa115-d1af-4ad4-ab55-dd2993ceb3fa",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "4cca01e1-edbd-43ac-b468-e5c3f6832380",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61db4bf3-1ffa-43f2-832a-453ef3b43d5d",
        "cursor": {
          "ref": "10cfa940-b1ad-4afc-9374-64d474d84d53",
          "length": 252,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "28f6737d-9b00-480c-95b7-655128dcd886"
        },
        "item": {
          "id": "61db4bf3-1ffa-43f2-832a-453ef3b43d5d",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "20be9dc7-1487-4dda-b53f-46a32fcbf907",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89332fe3-4187-46d5-94de-9ece579f0d57",
        "cursor": {
          "ref": "5b427dc2-d8a7-4f3a-8242-bb2eb1982c57",
          "length": 252,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "8da6f47e-97cb-4580-993d-8061c45ae8c0"
        },
        "item": {
          "id": "89332fe3-4187-46d5-94de-9ece579f0d57",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "77250a1a-a87b-4f42-a94f-07baee0b9e61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9032085-f502-4683-a765-971f7c1032dc",
        "cursor": {
          "ref": "17e33f39-7d69-48e9-9157-c8b60909e997",
          "length": 252,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "a23b7f87-a197-4831-a615-e0b5b13e6a50"
        },
        "item": {
          "id": "c9032085-f502-4683-a765-971f7c1032dc",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "9b61e3ce-1e0d-4010-bca5-a27a151d1b34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "547687b0-e504-4ecb-9185-eb5c1b3a216e",
        "cursor": {
          "ref": "810fd010-d5f7-49f3-9953-9e71f463019b",
          "length": 252,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "3e03a6f7-a634-4001-9807-07e3937a9612"
        },
        "item": {
          "id": "547687b0-e504-4ecb-9185-eb5c1b3a216e",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "5ca0a88c-e47a-4f67-8551-8a4913fbcbc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "923495ea-7331-45b5-b5c3-cb91349a20b3",
        "cursor": {
          "ref": "ebf55f22-14dc-4d84-b53a-ffeb9c8aa059",
          "length": 252,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "c8ffd525-23cb-42d6-a4bc-cb88ac29c620"
        },
        "item": {
          "id": "923495ea-7331-45b5-b5c3-cb91349a20b3",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "ed5b0e58-103a-4aaa-b4cf-7bec804d616a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e9f85d4-08be-4cb1-888e-f859b5327daa",
        "cursor": {
          "ref": "0fc40ed6-37b0-4153-aea7-309b9c9ed053",
          "length": 252,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "8c951c0b-67f3-43d0-856e-3e95497b96ae"
        },
        "item": {
          "id": "8e9f85d4-08be-4cb1-888e-f859b5327daa",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "e9a7bc8b-6ec5-4b62-8501-b80e994e9625",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3245dc79-84e9-4492-81d0-27c6e0bc9e7c",
        "cursor": {
          "ref": "3d47f986-cef4-48d4-90a4-09270bcdc8d6",
          "length": 252,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "e585de44-ab31-4f1c-8e12-bebcfaef5cd5"
        },
        "item": {
          "id": "3245dc79-84e9-4492-81d0-27c6e0bc9e7c",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "882ca3f5-de70-4380-af16-028cfc88ca1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ac4022e-1321-487c-8600-75de474d1477",
        "cursor": {
          "ref": "997fb6f9-a17d-4c61-8da2-3214431ecff9",
          "length": 252,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "c8834af6-c05a-4fd6-831d-29967096a814"
        },
        "item": {
          "id": "7ac4022e-1321-487c-8600-75de474d1477",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "6596fb83-306a-41ba-a4eb-aafa87445fb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5a9b876-4ba1-4119-99ee-dacf59646c22",
        "cursor": {
          "ref": "84bd04e2-6324-493f-bc16-7b6e7eff0d34",
          "length": 252,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "78de5cc6-a72f-430d-8223-b849eac21163"
        },
        "item": {
          "id": "c5a9b876-4ba1-4119-99ee-dacf59646c22",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "1093aab8-b90e-4dd3-8edf-0bdca1545c3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbbded76-0237-4235-a150-f7421a19b9f0",
        "cursor": {
          "ref": "c3e17428-388f-4193-8e8c-17e86f6a837d",
          "length": 252,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "114c442c-b529-4392-8ed6-d2eb7591a43a"
        },
        "item": {
          "id": "cbbded76-0237-4235-a150-f7421a19b9f0",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "6f75b390-66d8-4ad5-8887-eb0b077bbf5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8a312d1-92b8-4f0e-802b-c4e3a93a9833",
        "cursor": {
          "ref": "4c7c65bd-6eec-46b9-a8bb-5cab0c74cb79",
          "length": 252,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "ffa0d427-d290-426d-b85e-aa510f5abd14"
        },
        "item": {
          "id": "b8a312d1-92b8-4f0e-802b-c4e3a93a9833",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "c124880d-424f-41ea-b0bc-6237c7db8853",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b0d3c30-39a1-45b8-9391-66d82aedd383",
        "cursor": {
          "ref": "34bbab86-bf11-46e1-afb3-a1df0495e6dd",
          "length": 252,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "0a92c2bd-757b-4513-963a-f4553ec3d755"
        },
        "item": {
          "id": "1b0d3c30-39a1-45b8-9391-66d82aedd383",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "2b1912bd-67f3-4eb3-8850-12f8a9d3ba40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87057a4f-23eb-4b79-9ad5-ee951a82d613",
        "cursor": {
          "ref": "a59285b2-0c48-443e-a24e-8cd0d871fe84",
          "length": 252,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "94c4eaeb-a3bd-4c51-a943-8c69e14f91c2"
        },
        "item": {
          "id": "87057a4f-23eb-4b79-9ad5-ee951a82d613",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "ed26318b-b98d-403a-9cc0-c86a7ab6e2da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ab0ba4e-13d6-4316-a2d7-37ecdefb8d1a",
        "cursor": {
          "ref": "8efd0dfd-4cbc-417b-aab4-6443a822068d",
          "length": 252,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "5edc80fc-8cd8-490b-a058-647cccb9b81f"
        },
        "item": {
          "id": "1ab0ba4e-13d6-4316-a2d7-37ecdefb8d1a",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "019ff307-75b7-4f9d-93e7-e914455c9374",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7737a60f-adaf-4867-afbf-59a8ca204ec6",
        "cursor": {
          "ref": "bc96cb45-2227-4063-8d14-049376f9dc9f",
          "length": 252,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "6108e879-7959-4142-a3fd-fcd8b52a7184"
        },
        "item": {
          "id": "7737a60f-adaf-4867-afbf-59a8ca204ec6",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "bbeb4334-c49e-48c0-a43a-276152c0b228",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2a64e98-bfd6-46e7-b56e-f4f2cb0f0d73",
        "cursor": {
          "ref": "b3e0a101-eabd-4f75-8ed8-91a53a13313b",
          "length": 252,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "8546ba97-26ff-4955-95d4-d76dd1779d85"
        },
        "item": {
          "id": "b2a64e98-bfd6-46e7-b56e-f4f2cb0f0d73",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "33ba802c-a7d7-44d2-abfb-666c5ef4fb69",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 48,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d7f2bc1-e871-4994-88ab-a73f60179ae4",
        "cursor": {
          "ref": "fe58a99f-2029-4a8c-bf47-381b1a7b1702",
          "length": 252,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "234864ca-0edc-415d-841d-0752f47ded1e"
        },
        "item": {
          "id": "1d7f2bc1-e871-4994-88ab-a73f60179ae4",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "67db3c33-cb08-4913-85b4-30a86d733e7b",
          "status": "OK",
          "code": 200,
          "responseTime": 354,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "727a2a2e-f627-4f80-beb9-0ab54009e238",
        "cursor": {
          "ref": "3f1d43f9-bc61-4893-8720-2316e8088102",
          "length": 252,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "3dae27d8-81e7-4fdc-807d-23430d25aa4c"
        },
        "item": {
          "id": "727a2a2e-f627-4f80-beb9-0ab54009e238",
          "name": "credentials_verify"
        },
        "response": {
          "id": "d1dbb81d-d6d3-4a7a-8eb4-7cb00dbf12c1",
          "status": "OK",
          "code": 200,
          "responseTime": 341,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e5da6a2-a96f-4fb6-875e-ae19d8722c31",
        "cursor": {
          "ref": "b62fbd8b-9cfb-4c1b-9246-f7c4fb188ce1",
          "length": 252,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "48bbbd08-b82d-4fd0-906b-03f5b983b9ce"
        },
        "item": {
          "id": "5e5da6a2-a96f-4fb6-875e-ae19d8722c31",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "f11beb61-1c3c-432c-8daf-abee8d4d948b",
          "status": "OK",
          "code": 200,
          "responseTime": 697,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "57000b48-df04-4771-a691-d85c4b86719c",
        "cursor": {
          "ref": "9d26e3fb-ca3c-4ae9-a10d-ebb1b0077052",
          "length": 252,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "c6b63df9-ca68-4acd-a983-2138c280890b"
        },
        "item": {
          "id": "57000b48-df04-4771-a691-d85c4b86719c",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "3420c141-9350-45d3-b6e1-3a7ef826cbf2",
          "status": "OK",
          "code": 200,
          "responseTime": 347,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a0720ee-fb2c-4382-a838-13a5d1cec61e",
        "cursor": {
          "ref": "15f54c07-e350-4b33-9da2-61d30a03fb67",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "84953a44-1719-45f5-b354-91b171aa8c92"
        },
        "item": {
          "id": "1a0720ee-fb2c-4382-a838-13a5d1cec61e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c99d25c5-ac9d-4ec1-8708-c5d18fc0ff0f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a0720ee-fb2c-4382-a838-13a5d1cec61e",
        "cursor": {
          "ref": "15f54c07-e350-4b33-9da2-61d30a03fb67",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "84953a44-1719-45f5-b354-91b171aa8c92"
        },
        "item": {
          "id": "1a0720ee-fb2c-4382-a838-13a5d1cec61e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c99d25c5-ac9d-4ec1-8708-c5d18fc0ff0f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a0720ee-fb2c-4382-a838-13a5d1cec61e",
        "cursor": {
          "ref": "15f54c07-e350-4b33-9da2-61d30a03fb67",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "84953a44-1719-45f5-b354-91b171aa8c92"
        },
        "item": {
          "id": "1a0720ee-fb2c-4382-a838-13a5d1cec61e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c99d25c5-ac9d-4ec1-8708-c5d18fc0ff0f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02189235-3bf2-4fdc-a7a6-cb28f8a99480",
        "cursor": {
          "ref": "4e727480-c097-4830-a1ad-8070b9c53d5c",
          "length": 252,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "2049e380-b0c9-4e7e-ac3e-ea5bcf8702b4"
        },
        "item": {
          "id": "02189235-3bf2-4fdc-a7a6-cb28f8a99480",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "7866d84d-1dc1-4e8d-8d91-47e76f482e9b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 46,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "492c9107-c830-4e4e-9dc8-a7672b1e3cf0",
        "cursor": {
          "ref": "29ee6f24-e06d-4fec-8493-622eac19321f",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "088f365b-a462-4c23-983e-856c0268b976"
        },
        "item": {
          "id": "492c9107-c830-4e4e-9dc8-a7672b1e3cf0",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "c6a499a0-45dc-4cc4-94ab-5f33f54bfdfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "492c9107-c830-4e4e-9dc8-a7672b1e3cf0",
        "cursor": {
          "ref": "29ee6f24-e06d-4fec-8493-622eac19321f",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "088f365b-a462-4c23-983e-856c0268b976"
        },
        "item": {
          "id": "492c9107-c830-4e4e-9dc8-a7672b1e3cf0",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "c6a499a0-45dc-4cc4-94ab-5f33f54bfdfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "12073ff9-d479-4e16-8905-2142c1de7149",
        "cursor": {
          "ref": "a0bb66de-1ce1-4e54-90aa-7c31d5223f80",
          "length": 252,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "af79cc96-f788-468d-8f0e-a97498a01bee"
        },
        "item": {
          "id": "12073ff9-d479-4e16-8905-2142c1de7149",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "94cb08a2-22e9-48eb-ab18-1af0b96d0f85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "634338d6-b529-4f41-a4ae-dd8ccd8bd477",
        "cursor": {
          "ref": "cbbeca97-02f8-45ff-acda-b0805f0cecbb",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "b02db7fb-ebf5-40b2-94bc-8afb9194600c"
        },
        "item": {
          "id": "634338d6-b529-4f41-a4ae-dd8ccd8bd477",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "76dfb13f-bca9-494c-8bd9-a6be7fea0838",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "634338d6-b529-4f41-a4ae-dd8ccd8bd477",
        "cursor": {
          "ref": "cbbeca97-02f8-45ff-acda-b0805f0cecbb",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "b02db7fb-ebf5-40b2-94bc-8afb9194600c"
        },
        "item": {
          "id": "634338d6-b529-4f41-a4ae-dd8ccd8bd477",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "76dfb13f-bca9-494c-8bd9-a6be7fea0838",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "c667c2fb-178d-43c0-99a4-b8c277bd81da",
        "cursor": {
          "ref": "607a88bf-63d8-4ae8-9d78-d5f983021b6f",
          "length": 252,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "c695a9e3-d1e3-4da2-8895-539c5ba56cc2"
        },
        "item": {
          "id": "c667c2fb-178d-43c0-99a4-b8c277bd81da",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "dd9aa973-e274-43a2-9270-384a45061737",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      }
    ]
  }
}