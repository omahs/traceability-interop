{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "b44bb8a6-a685-4a20-b55f-af0384bf733b",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "697b0566-2922-4ae8-85f0-c67d563c8f4a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d13a07c8-01be-4036-85ff-c2730837b1ed",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "11349d55-6f55-4c75-9f1d-1cf61b4c2f28",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c6a4d5d3-da80-473f-b70d-2f4194c01d31"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "f99e0468-930e-4c04-aa76-56e8c2a02396",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "ed8f2aa1-0c0d-4a82-a873-a06388f99d80",
            "name": "Negative Testing",
            "item": [
              {
                "id": "39be692e-91e5-4d4d-9601-f19433c7e623",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a55e7d5a-da79-48f4-bf62-670a94509572",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "395d29cf-6e82-4159-b2f6-fed74f132dbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "20592b88-2a5d-484a-a698-44a12f3b409b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ced1ac1-cd28-4d35-ac5f-03901c713a6c",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15077278-315c-4374-b0d4-48ddbf1c5112",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c3ac6fc0-a76a-4919-80cc-1cff11fdb241"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b21b86b4-49ad-4978-9b43-e1a9746abff0",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15a4122c-94c6-4fc7-9eae-9f511dbbd6d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "279dfa92-fb07-40d4-b3a0-f46b6ea09248"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3abbbc19-eb98-4c87-9b69-f317c0ae776d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3b3be436-7214-4579-b4b2-514572fc300f",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d589f45-17e0-48ee-868c-7a97b9e692b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9c9c8b29-f05c-4b36-aa4f-90661bde5d80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34378343-cbad-4702-b45b-8e1499786ea6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "781c4087-14ac-4f94-b099-02f6bb83671c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d32283e0-0205-4ac7-a63c-a420590c6290",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2911da4-b2c8-40d9-bcd4-847c8836cfe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c5946114-c459-420a-b79b-e66aa4b56d59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef931a66-db74-49b6-9400-e0e947b40fa0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "958c16ca-4e8e-4f9d-81a7-01a3105189dd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "faa03b18-2f23-4c4c-b770-eed7f5e03469",
            "name": "Positive Testing",
            "item": [
              {
                "id": "cac8162b-bf7b-4c39-87c7-340b6305637b",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "beaf4dfd-5750-4182-8d06-698a4bb96a24",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "dfd3f9be-9ea3-4f08-a919-ca00117f088a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "834efcce-f2bb-4a42-b9e6-f011ce58a62c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "4b0948c0-b6a9-4e1e-80d8-f003bc17922f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "717df91a-9d33-403c-974c-352307b44770",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ff200b3b-7354-4b18-af2a-51c5dc71251b"
            }
          }
        ]
      },
      {
        "id": "040c8619-6ef8-43c4-b026-d0f8406cbd33",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "46cd5716-250d-4051-8347-ebff6c524f5d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "be13110e-df16-43f2-b75d-459533004750",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "33f2da0b-1f97-43b8-9fcc-41f17d2ecbbf",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d58437cc-fb59-4d79-8b56-9d71f22e92e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1afe863a-d52b-43ba-b1bd-412dcbad0685"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eaa4174-ca87-4ad5-944a-fbcd82ce94b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9d65caa-40a6-49cf-afc1-bbf04e88045a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e7606d2-1f13-42b9-ba99-ce60b27db0e8",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d034c241-1666-4aa8-b234-93ac2bb93d27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a599a66-5e4c-412e-ac9a-547402df3877"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9b71297-fe21-4ccf-a5a3-efeeecf5a921",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e347c56-1d75-4cb7-b90c-8439dd727c30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b766dcef-0136-420f-867c-350a60638540",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a59e3e91-9d8b-4c6b-9936-ceec3a229c37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f31020d-8f78-4271-8c83-b8120596068c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73dadf92-3398-4b60-9a86-042f07710636",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b22cf85-6e6c-4dfd-a943-8f95f69b5375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8cd868b-5a50-4003-b1b2-46485c85ca64",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6cf4af3-45c5-46db-9f12-080d3e0da632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f4ce7c6-d4f7-46ae-8e8f-fbbe71382d78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e70ca711-5c29-4915-937b-1f609178f8f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6ba8bd2-8a4b-4ffe-8c19-eb183a274c88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ddc1fe5-bb94-4878-b105-b09e326815d3",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1d9513b-fbfa-459b-a971-395e20d9ec2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a78e0bd-a2d8-4b3e-ad3f-70cb5ed66a5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6eeba72-3e6a-4cde-934a-a8d6b682222b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23bd0e44-aa40-4289-80e5-d95fbc886ede"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19977e28-a2e9-4b70-a05f-17926f69fd18",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45945772-d26e-4d1b-8491-f025c1a82b14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4d5ec98-4b8c-42a8-a607-04a63b2ad1a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd0d205f-3305-4a22-a1b2-8fc4c135ba84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed6bda98-012b-4925-8713-425591657b91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d259741-a249-40c6-9ffe-c17fefced931",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f27bcb7e-fac5-4c6d-a095-b651633a614e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b874a65-6557-41e8-9d26-5645eca2d36a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da3e49db-9781-42f3-81d5-847f42f87996",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81e3447d-556f-4a70-be58-f41545b4bcda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "373e6752-87b6-48a5-8433-aa4036bf3dbc",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4dc80fa-6980-4ac4-814f-dc1706e167eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39d9dbc5-fa1b-4dca-8a16-8c0162791ebc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "252eb2c9-c66e-44c6-81e7-58e859f81af4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2e4973c-2bd8-4b17-bd36-292a57cfe60c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7356ada4-2cbf-4ae9-b19d-fa40ce6d15a6",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b402035-7c93-4f4f-95a5-2926e98cba9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b82620d5-6b07-45d8-be18-7ca1ae7c28e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b899109-eaae-4069-8d59-d3e9cfd5addd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c13f700b-0838-429e-bbe0-bd04b65594c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85d882ec-dfeb-48c8-bcdc-7d9a49ded6d3",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d456f8f-f4a4-4211-a1de-2c08e1e5fe1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cefc7453-a190-42ad-a33e-bc5e1b08fcd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43d517ee-498a-4dbc-b4a6-084d9a824d84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ba4c126-30be-4cfc-a0f0-2250e65b82d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6743399b-7edc-4c5a-8ed9-48bfcc443d19",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69a24f41-5624-4555-9201-43757b302a12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7775501-168e-4b9a-9bdc-6049a20d3b04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcdfdb0a-ad20-4262-8676-c6f44679649b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "e175993d-9a4d-4a1f-9aa1-c700cbe4b423"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f996a2b-a21c-4073-b01c-428e42b76cac",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0c8f27b-111e-4daf-980a-e4b52366d67c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "184ec2aa-957e-4845-90db-9f806543ae6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5322538-4598-48da-83de-3cda4c5207fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "aed4434c-b83c-46a1-840e-516d465f626f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afebe9a8-3fd4-4eed-9fcf-ded51847c4ee",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de8e1866-0228-4d6f-919f-baecfe543ebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25c8da52-5f7d-442f-b0bc-1200689dcf04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cfb2df8-eafc-46cb-8cee-d75010793ebe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a21346c-22a5-497c-81bf-d64471f4f3ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be0ba04b-ea8c-480d-91bd-f6b1a1f9cf40",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b795e45-3a0b-468b-bbcd-dd4657c1015f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7546a907-87e1-47b6-9b5c-143805124cfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5395bc1-0b15-4f37-bc6b-4aeabfe2c4ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a8a3acf-72c2-4ccd-85e8-53cf1bd67e72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1fef578-2a76-4d2c-86b5-633b30f21484",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36ff438b-19a3-4152-8b14-e4471660d2f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09dbeaa6-2058-4c06-a706-1a0beba015cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c096675-16e5-4a62-b239-50f75688078f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "589af334-18fb-45b5-b4a9-c1cbbc141f16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7311b59-dbca-4372-a4ef-5e357b83112f",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e00eb6f-f59f-4c89-82f7-a797dd231664",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "114c76a8-9f53-47b9-820c-8c991028935f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4710a3b2-f753-4431-81f2-385d74a92cd4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "cc3c9309-79cc-44b8-bc2c-0c134391df66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "627b14a2-26e3-4cb0-b9cf-016010482995",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bb6facc-285b-4528-820c-fcf8d38b15ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2212f74d-3622-4e2d-97ff-5c0d82e0508d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "681e5073-b062-41d5-9e4e-ed7245ff511f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f36dd838-b1ec-4ece-9175-90a839e9254e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6248c04-ff8e-4296-9363-011e9545dd9a",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b3ef163-cb2a-4238-a2c1-147a66a08ff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6bf3afe-a0cb-46a7-831b-8bbf3c4cbbca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95ef8538-7b18-4299-a0f3-b40a367ed4f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f85f886f-a6a4-46e8-b462-8fb0a0ee72f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "871288eb-28f6-45b5-afb5-e67ff2377229",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a0b2cb3-b363-4a0d-ac9a-81617f49482f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76ab1f7a-cf82-47e5-aeac-3fd37de54782"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bf34305-2376-4edd-b6df-22d0b5c8db4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5adf2928-402b-43f6-adb0-643ac8f40bf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e07b63dc-f961-4c6c-a8cb-9218d161e58f",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c60bc87-9de5-43ea-a160-3714bbd498bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42294927-1e7a-44bb-8d43-e9f162302d9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83f68144-d871-437e-ba60-203ee212471f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f740de67-a2ce-4d15-a348-99146a9532d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b522aab8-cdef-4a0f-bb97-afc8b6d3cbcc",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27eb3308-aea7-449c-bb16-e11af3699954",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d1567fd-6b96-4c25-a2b8-ad47ac973ed0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ede67f82-234b-4f1f-9e52-70411e640411",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be an object",
                            "rawBody.credential.credentialSubject = \"did:example:1234\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9d53747-0e9a-408c-a44c-00f42956a83a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f92af25e-796d-46b3-82a6-cdfc0d4259e4",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e9ab461-3ad1-486c-acfe-83d1849b51fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac9bf5ae-a48b-4d37-ab7e-571d125c8888"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f5241f0-aec1-4231-bda3-36db794f8273",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"did:example:1234\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2074c3f0-5254-41af-97c4-eeacb9be33d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efbd42fc-e59e-4338-999d-d53d0ee4c2c7",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97d27357-ff55-44c2-96bd-84865fd29e06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ed6349b-327d-4c1e-89d6-f56b2515d71e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3f46dc4-8d6b-4484-ab6f-5833d1b79ab3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27590ee4-d537-46f6-b150-ad168720c533"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d30f481-2247-4bc0-a6a7-33434b3ee6f8",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0535f52-cc15-465f-bfa7-466b779687ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dcc5ace-a617-4fb2-8dc7-7d82d7815a4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fa313a2-1e78-4c94-869c-40cf35ac9642",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84d2e743-a4ba-400b-8cfc-afb0048dc867"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdc72e83-ce9c-41d1-b494-b95f23e7cb38",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1162d03d-ab0f-44d6-91d3-043d466263ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce788daf-63c8-4b65-8b2b-3a008990bc3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14b2001d-84cb-4778-b5a3-edfca0842369",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad075fcf-fad5-461f-90fc-022d05987c52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edc175d4-811e-4107-8eb1-b038da7d3e3f",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "466d2a44-d085-4349-97e2-b0361301c6bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c7ea77a-ab80-4ce9-b0ed-89bff075b5d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "071a82e0-b4af-4257-b8ef-61262da07989",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3293645d-2e96-461b-b3ce-9a93d0d671d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e4d10fa-6a50-4fef-9802-012d2434168d",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cc70c0b-8f1d-4e65-a1a6-66f666de757a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b96a26db-323e-4f98-bb82-310dc2856b71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "851ebe44-3908-4b9a-aabb-6c550bdcb08e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ece1765-5891-4250-9fb1-967a02dca6f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fcb2ee0-8a95-4f9d-844b-e23c69e0c672",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe7b2cfd-1edb-4550-abb0-3f1a3c6a793d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faaec991-6260-4ba0-9c96-828f59fd543b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc5ec46e-2ebc-4138-b47a-484fb6fb5a97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a33c4027-afdc-464a-9b94-d8726098930e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c98593e6-4a6f-44c2-b90d-955af7283af8",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74da32fa-5c61-404f-bdbe-c76a6a017dd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84689244-a7db-48c1-9dcd-b59e7b8c9f28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30665558-a258-417a-b149-15c1e9a4048e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "770ea34e-a57e-4f47-98dd-708fdf3ffffa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30e9083f-4443-4e24-b08d-a8822d1b8d9c",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c15308ef-12b2-475d-9f98-66ee17ea3b4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3a3a0e9-d274-470f-b930-7c8c214b8515"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a768e74c-9201-4758-a88a-e613667acd36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0adb39d-b8bf-4e91-82fb-7fafa4e10f40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3d98609-e5f0-4540-bfbb-f3164ab446cd",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fe1a8de-efe5-4a70-9ec4-59c71fcea38b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "3c51d6d0-b8be-4672-ba4c-7de62193e036"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "195d7ea9-2597-4343-82dd-c43aeae4e01d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4421b1a-f9f7-41f2-9755-9cc46f3694c6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1c1b6da2-df18-40f0-8eaa-ec1b538da684",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1589d9fc-0378-488f-98d9-8ee963844cfe",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7d071be-c505-4386-a4e1-24f67c889204",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "956b1889-687a-4b08-830b-b4aeb3ffcb13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3a2680f-6e68-4455-a016-51c260e3cee7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "aa9d30a1-ac74-4376-adf1-6e15a98dd6ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ba3de6d-ce20-4e39-8a99-6937bb6d5e28",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24445908-3869-4583-a9dd-f220549353e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cdb38b89-6b8f-420a-88bb-9d67c92f026f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a14471b-d614-474a-86fa-3f1439f8ff0d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "5d96a7aa-2828-44f3-baf0-64bc314eab99"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6395fc16-2da4-49d1-8bca-3b5f0b5b4764",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2fbcce58-46b4-49b3-b238-6b8ed59c7113"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "00227433-ef8f-4865-a8b4-0f709e8d0607",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a2e91caf-b7e5-4194-8f33-7bb2f6d8887b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "902c97cd-8a30-4d09-8af7-066d5c703eb4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c7eef420-ea17-4f1c-a5f8-f68b836274f8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "27d3f8bc-a4db-48b9-bcae-0519820b85e3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "87495590-7a6f-49ec-9387-dacf438cdf23"
                }
              }
            ]
          },
          {
            "id": "8071bcaa-e38b-4ae5-9c70-b52c1217e03c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "db18c2e2-9e7d-4dbe-b11d-d55d01d900fb",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "36df1df4-ac22-49da-b7de-e7a340bd138a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "60d7f2eb-dabf-41c6-9040-331a916d5706"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "81de2e1e-09e7-4d3c-9a36-db30bacb118a",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "1fbf1ffd-0611-462e-956d-1d0949a5fd68"
                    }
                  }
                ]
              },
              {
                "id": "442ec34a-801d-47f5-824b-d2e2687dc218",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f4fec60b-5596-45fc-9b03-526da734b623",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b2c4ebb9-bd2b-4741-a3c8-df00d9f14564"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "af6ac51d-228f-4c86-b011-a905b0cde602",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "4751cab0-6c16-4c7f-9b9c-6d4c87279d16"
                    }
                  }
                ]
              },
              {
                "id": "862957a4-af80-4623-b563-bc16b07c6211",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c8031b15-53ff-4955-8756-f4b62162a045",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8f9d4b1c-5e94-4407-b996-f44fb2c3e2e8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a5550e71-4b0f-4999-b643-9ba9da1d06dd",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "5afee6d6-6ea6-44fe-9598-c79c0f9f7acd"
                    }
                  }
                ]
              },
              {
                "id": "0f1f205a-2dac-4e86-a6a2-607aed2a40bf",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1217fd55-fd07-4f76-a865-1e501a1e5bda",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e256e343-9ee8-4c23-a3a3-81eacb97fa48"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d003d971-9474-4784-b2b9-9839f781d2b1",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "36e44e48-bad9-402d-91c0-716b75c89739"
                    }
                  }
                ]
              },
              {
                "id": "801e1d44-4341-4f7d-8f60-d77ffe496818",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "59d94dde-0a3f-47a6-88aa-023a77dd23c5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5c4298f3-1da3-4ed5-bc12-7e9bab14dba2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "55296849-368c-4433-a6bb-6e3a7fce0089",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "b4158308-4806-4390-9878-a301d10bbb83"
                    }
                  }
                ]
              },
              {
                "id": "157df4f7-3709-411a-9c72-2cbc42909c14",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0fcee717-9d69-4979-8359-5ec715ee80a0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f2d18a90-e0eb-4b42-a585-7eaee55a4aed"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4dbf7aae-4295-400d-9d6f-9990dec6c924",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "82988bc6-dbab-4b53-b1df-6c10163fdf51"
                    }
                  }
                ]
              },
              {
                "id": "13f72618-1fdc-4bd5-9461-91d9291856ca",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9c052139-acb9-43b1-ae90-1c4d2cb25ef1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7cadbf1a-1842-46b5-a65a-840e0a9c9d02"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "77c0ac4e-158b-43f5-ac6f-62491fd5b731",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "2338b0ce-4597-4a65-b088-2d280feb7256"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b29f85e4-1984-4af6-b053-656b9cc044da",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "facafb38-c70c-422c-8134-84f5f3cd5515"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0caebd35-d852-4cab-9760-adcb5a6291a8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d97f665e-5078-4808-9f3f-2d67010a3376"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "faaccff6-48d0-4aef-a198-ff3c5655bb0c",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "16544c4c-6221-4b3c-a4e3-0bd1eaa77010"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "78c2a9c3-96e5-4cba-98da-242e59fd2c2f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2f545292-0268-456d-98f3-6afd2af801ee"
            }
          }
        ]
      },
      {
        "id": "6308a845-11cf-4a89-a2b3-2d1e7aa7608f",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "514354be-d3b2-4419-9564-7f8bc7af3336",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bc544db6-dbf8-4da8-b163-44866cc2bb62",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "af576e28-6439-4cd5-ac9a-8092c483d64a",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e15a98b-97fa-4889-9e5e-f3c23a9dc818",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7512805-0dd4-4436-b4ab-50e235f1826e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5422d83d-aacf-4140-b806-3146b8da6da6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "18b145cb-cd27-4d40-a084-15c5e66e7175"
                        }
                      }
                    ]
                  },
                  {
                    "id": "897d030e-c779-4158-be2d-5bd27a670dda",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27f3231e-6f13-4ccd-9cb6-fcf4be5a3acd",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "9a6e6a12-a9ba-4836-b129-0736bd570828"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30f4ab53-75a7-40f0-b34f-5aafaf00fb79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1dff50bb-bc60-444f-86b8-04565e1790eb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cda58ec3-b514-429f-8b51-589823b355d8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b7e098c4-ed7f-42c3-8a99-11c8b12f9265"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f7c4805e-86a0-4fbb-ae10-5e5559f45095",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "65da18cb-830e-4262-95f8-da277fb58748"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ade9d07b-bb08-4132-91c1-ba0868df9a3c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "71bf2923-77c0-422f-8b6a-022c55818034"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c5beb1bb-a2b6-455c-8ab0-6141d1c4432f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ef5c68eb-471e-414c-a61a-720c01965e0e"
            }
          }
        ]
      },
      {
        "id": "fa665663-023f-4ecf-b5a6-6330228592cf",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "a180d658-1f96-4560-93fc-2755eeb84154",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b955b4fa-8dd6-4e28-a190-e1123dbf38b4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c2cd9b88-d7fe-426d-bcc9-8f27cf02e438",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a5c888f-0cd1-4a3e-ad6b-1559953a122a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01a19044-8c51-430b-bacc-0537613ee8a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef43da11-0a6c-4323-884f-1109e5420797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7cbf3644-2e4d-4aa2-9959-396011f02e2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9e06207-ab8f-4a77-a1e0-12582f4b7504",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91dbc04b-d0ba-4e25-ad97-af9113d8e078",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "176409bc-9de4-4569-ae51-86b6b375e90c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "019cad79-f6be-4271-882a-5154f9c95268",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "10b7e5f8-88b6-45c5-9365-da3bac9ca98a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2a39f9e-39d2-4319-9359-7a0956320a88",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13ee6f05-fdb0-4631-8720-f2ccaad502e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bef55c42-33ff-40e6-bd81-edece9624236"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a916366e-a1f1-466d-a1f5-228be03f1eef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7a796f93-3421-4fc7-bbd3-54322dc3a47e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "267d75b5-2a11-4d19-bf2f-1595641a2d0e",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "003250f8-cae5-444c-82d8-397ab5bfa11a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8359cc0-3ef4-4b1e-b445-fc21193e6df1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e9cfe5b-65be-406e-b0c6-64141478a79d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2e714766-f5d4-424c-ac1c-7cafc27be069"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c276ac2-fa77-4fe1-a78e-fb785c086d0d",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "602b63b1-f998-4952-8997-4d7af5a52bb3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13004c3e-dc9c-401c-a219-00756f952800"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a90b6b22-eb7d-4ee6-b8c5-1d0f370cc52e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eb5b41e1-82e9-48f8-bc56-636ddee7fc2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72786523-7a10-47fc-b8ab-047829b9fc32",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b44f60c5-6e49-46b4-8915-8fe9a21ab36f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41924901-d41b-4c40-9e39-6788073a7ba7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a57c8a11-6693-49a9-8d5f-466ad63977cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f84c26c7-9958-4422-a9be-22487ef6d040"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "45a88fd9-7d99-4604-b1ca-385da9e18ff4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b5e6ecd2-2979-4d2f-8e9f-47aa489cadfe",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c03e8654-af1f-41d1-9d7e-0cfee8b47e56",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "b377c5c6-8fa5-4f8e-a6f2-3400b5bc765d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "543b087f-9b82-4d54-9679-145b2600ccba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5044355f-0e62-48e0-b245-bb7cdd8b2783"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55ac6504-5d9d-4cbd-ad3e-64b6f84b5d14",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69bc02ac-8bf5-4212-ba89-1e130c3f026b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "534c3297-51a8-45c2-97dd-3b53d32d82c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e3f55f4-9cbd-403e-ac57-f20e26660326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f632b056-66c2-4f58-8acf-0a5d857f18ec"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d0626588-e2d8-428b-a840-e0d859785175",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d1ebb7b2-af3b-460c-b36b-7cbaf5a6884a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e0e10018-5cf8-4560-b455-289ace1b5c22",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c8f40938-3c79-4e89-8bf5-96e791887ace"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cfcda14f-c83f-4a08-a354-f9391659a28c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"dummyVC\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": \"did:example:123\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "44347c56-a3bb-4351-9c97-a18775f39cf5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "020e45f3-b801-440d-892f-2132b6f8458d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b0c8d965-6d7b-4925-a174-0dcb28cfc5bb"
            }
          }
        ]
      },
      {
        "id": "c22b779b-f99e-4a75-a1b2-172ae9187cdf",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "73e66350-0c2d-483a-a08b-d9aa11292d98",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fdfa0387-f966-42b6-8941-d745262945c2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8342fd79-b7d2-49db-a898-e3ce33572d62",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "600f23ca-d3d8-4694-bdf0-d6944766dc04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "679e964b-e6db-4589-96c1-2fb0102a7e4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f17f022-dd6a-4211-8672-3dda1f329519",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "633e69f2-1ebc-4e7d-b9b4-222711bd5865"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c13e921c-c22b-4844-88ff-e2a42a3101e8",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ced503f5-e84b-4d3b-9425-7018210fd3ab",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "7272aa08-b647-4dfd-98b9-080084dd4654"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d0c35b9-7d93-4079-bf19-684d71cc1e28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9dc47f28-ab51-441b-82f9-924975b1f2b0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ff5b6601-3073-4e35-872f-411824c17def",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9448d0d1-0fca-47a3-848d-f015b59a267e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a7eb78b0-013d-4944-ae4a-2767069b2611",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e22c9bdc-1acd-4b38-a998-2ea032012b06"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b7c68f68-37c7-479e-9a13-491c8fdbec9e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "45607535-34f1-430f-98d9-9d1222049f8d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "519cdf49-8eed-4c3e-971d-fd24c0bfd1df",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3cb9d32e-e230-4a9b-a100-f89a4379ada2"
            }
          }
        ]
      },
      {
        "id": "dfd2cde9-719a-4ad3-91bb-4922f4c8b300",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "ab86c96e-3dcb-42ee-8a4c-f1818cf5693f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d73292c6-ebfc-4380-b759-7f2c25235069",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cb6087b4-254d-4168-b616-84758b32ff6f",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5883e80-f0b7-480a-8707-f912c200053c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22bc03be-9e08-4ed2-9b44-31b7e85000c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "091c2a0c-a93e-44de-a34c-c6b49c921d14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aa1e1a97-ed88-4b2c-8b96-c52cabb25d5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe00040e-381e-4279-9af3-315554f74a2d",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1863edce-a099-4989-9778-3215331be740",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "709a1c26-a952-4e26-87ec-f53f6427cc85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d19024c6-29b8-4b39-a510-fd35989829a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c0635dfa-8091-4109-b937-4d59bc267521"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5cc5ab22-c031-4213-ab83-bf232e643c65",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "78b4336c-0d4c-4f0c-9f0f-ac7db919f771"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c304a7d4-7d33-4785-af80-0f7925f7c31f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "351876e1-2570-4f70-aa0a-b1fbe997a6f9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3fb8ea16-54e7-438d-8250-cf63c2fefae0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "e7acd228-fc5e-465e-8319-eedf9d14cded"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d8dd8e57-5b2b-4aa9-8be1-1bedec614b48",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "eef9b4b5-c733-481d-abe5-2eec44434a5d"
            }
          }
        ]
      },
      {
        "id": "1e076339-955f-4c76-b292-545ef2e43256",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "143a59e8-32d6-43b5-add5-d29b53de1d9d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a4c41f90-3b15-44b4-9b3f-74407cd13106",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fa247682-5e1d-4eb9-b3ba-33c7c7934f2e",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9981dd49-6830-4771-8d92-f392263dd9ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e47f788d-a209-4ab9-971d-aa5d51aef88f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bcdc5cd-cae0-4fc6-890a-a61f2d7baa2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d36737f3-6690-421d-80d2-215a6c5b74f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c905b9c-28be-469d-b83e-edde1b25f45e",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d886f64b-6817-451f-bede-1971445c92c1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "a7a0bf0a-e6c7-4fa2-ab32-1c9d8cfe64d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e18700e-a17e-4cd2-82fb-09d41c9b29d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "37c4b17c-8620-417a-acd3-d94d46ffe7a2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "670c987d-97d9-4ff7-ab96-5872515b836b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d0d03fa4-88af-4fdb-8b7b-8a3dd7bb1a6f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "957f15dd-f53d-4ca8-a0cb-ae3f72db7567",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "19f3cfd1-bf3c-4b30-a05f-5bae4df17cfc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fe6cb7f4-fe29-445b-a685-0df0d428904b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "a44170f5-cc9d-4e12-9cca-5dc5de4a8ca7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "29cb199a-f4f0-4d2a-abe0-6a3b84c64785",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1f25a695-13c2-4145-9d49-ce4146538110"
            }
          }
        ]
      },
      {
        "id": "4548c2d3-1476-450c-a862-936c5ac7ea98",
        "name": "Presentations - Notify",
        "item": [],
        "event": []
      },
      {
        "id": "a25da3f7-403e-4f96-b9cb-d3d3d5e8d521",
        "name": "Presentations - Submit",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 63,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 475,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 63,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 111,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 63,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 131,
        "pending": 0,
        "failed": 8
      },
      "testScripts": {
        "total": 240,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 235,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 94.04504504504501,
      "responseMin": 32,
      "responseMax": 1417,
      "responseSd": 183.03238463943964,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1662857411460,
      "completed": 1662857425782
    },
    "executions": [
      {
        "id": "d13a07c8-01be-4036-85ff-c2730837b1ed",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 63,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6d522201-dffb-4a8b-a33e-bcc4718b51a0",
          "httpRequestId": "3f33927e-372c-4ea6-9a6a-74045e6acd3f"
        },
        "item": {
          "id": "d13a07c8-01be-4036-85ff-c2730837b1ed",
          "name": "did_json"
        },
        "response": {
          "id": "cffb3421-dd17-4dca-864a-50484bd515e7",
          "status": "OK",
          "code": 200,
          "responseTime": 258,
          "responseSize": 1002
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a55e7d5a-da79-48f4-bf62-670a94509572",
        "cursor": {
          "ref": "3a33d670-64ac-4322-9f64-0c644be88847",
          "length": 63,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "ff8505b1-cd5a-492f-b8a7-98c48132bdbe"
        },
        "item": {
          "id": "a55e7d5a-da79-48f4-bf62-670a94509572",
          "name": "did:invalid"
        },
        "response": {
          "id": "ca375933-d608-4314-9f53-cac615c99e5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a55e7d5a-da79-48f4-bf62-670a94509572",
        "cursor": {
          "ref": "3a33d670-64ac-4322-9f64-0c644be88847",
          "length": 63,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "ff8505b1-cd5a-492f-b8a7-98c48132bdbe"
        },
        "item": {
          "id": "a55e7d5a-da79-48f4-bf62-670a94509572",
          "name": "did:invalid"
        },
        "response": {
          "id": "ca375933-d608-4314-9f53-cac615c99e5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ced1ac1-cd28-4d35-ac5f-03901c713a6c",
        "cursor": {
          "ref": "eea18b9d-11f5-4e5d-8300-b6b1da215e97",
          "length": 63,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "3be19141-4325-47bc-a8d6-f0af57e385fa"
        },
        "item": {
          "id": "6ced1ac1-cd28-4d35-ac5f-03901c713a6c",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "3b846069-9940-4fc3-99bf-e0eed254368c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 97,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b21b86b4-49ad-4978-9b43-e1a9746abff0",
        "cursor": {
          "ref": "1340bff8-a414-4273-a0a4-1fd15b988d0e",
          "length": 63,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2604cf84-6c75-49b2-a418-053425458abe"
        },
        "item": {
          "id": "b21b86b4-49ad-4978-9b43-e1a9746abff0",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "0f863e04-26d7-45fb-8228-9eea1c254ad6",
          "status": "Not Found",
          "code": 404,
          "responseTime": 35,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b3be436-7214-4579-b4b2-514572fc300f",
        "cursor": {
          "ref": "1256e56d-31e4-40c1-95d6-04606c539c45",
          "length": 63,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a06e4a83-f5c0-43a1-a1ad-b6eecc91aa8c"
        },
        "item": {
          "id": "3b3be436-7214-4579-b4b2-514572fc300f",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "655cf405-563b-4e74-808a-e74742421fb3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d32283e0-0205-4ac7-a63c-a420590c6290",
        "cursor": {
          "ref": "09e27a1f-55fb-4468-a0d1-631f0dfc91cc",
          "length": 63,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "413556de-77a1-4c26-9b21-0e03683f6288"
        },
        "item": {
          "id": "d32283e0-0205-4ac7-a63c-a420590c6290",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "72950407-5b0d-42bd-9e94-09ae21761799",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 35,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d32283e0-0205-4ac7-a63c-a420590c6290",
        "cursor": {
          "ref": "09e27a1f-55fb-4468-a0d1-631f0dfc91cc",
          "length": 63,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "413556de-77a1-4c26-9b21-0e03683f6288"
        },
        "item": {
          "id": "d32283e0-0205-4ac7-a63c-a420590c6290",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "72950407-5b0d-42bd-9e94-09ae21761799",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 35,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cac8162b-bf7b-4c39-87c7-340b6305637b",
        "cursor": {
          "ref": "bb10a7ec-a326-4162-bf1a-de853c963516",
          "length": 63,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "0219440c-31b7-4e5c-b3a3-e6830c26495f"
        },
        "item": {
          "id": "cac8162b-bf7b-4c39-87c7-340b6305637b",
          "name": "identifiers"
        },
        "response": {
          "id": "125794b2-b01e-4516-8797-ca7eb0be7683",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 1018
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33f2da0b-1f97-43b8-9fcc-41f17d2ecbbf",
        "cursor": {
          "ref": "f3d4c59c-c358-4201-9e99-32f20dffcb95",
          "length": 63,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b191dbea-3848-4c1b-8e22-5b5f133c92a5"
        },
        "item": {
          "id": "33f2da0b-1f97-43b8-9fcc-41f17d2ecbbf",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "b8e4bed6-b380-4989-824e-553f1523d303",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33f2da0b-1f97-43b8-9fcc-41f17d2ecbbf",
        "cursor": {
          "ref": "f3d4c59c-c358-4201-9e99-32f20dffcb95",
          "length": 63,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b191dbea-3848-4c1b-8e22-5b5f133c92a5"
        },
        "item": {
          "id": "33f2da0b-1f97-43b8-9fcc-41f17d2ecbbf",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "b8e4bed6-b380-4989-824e-553f1523d303",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33f2da0b-1f97-43b8-9fcc-41f17d2ecbbf",
        "cursor": {
          "ref": "f3d4c59c-c358-4201-9e99-32f20dffcb95",
          "length": 63,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b191dbea-3848-4c1b-8e22-5b5f133c92a5"
        },
        "item": {
          "id": "33f2da0b-1f97-43b8-9fcc-41f17d2ecbbf",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "b8e4bed6-b380-4989-824e-553f1523d303",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e7606d2-1f13-42b9-ba99-ce60b27db0e8",
        "cursor": {
          "ref": "39081477-30a8-42c5-8eed-6ebe5d5b4c9a",
          "length": 63,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "fea1f340-b498-419d-980d-9ea0fc0e0d8e"
        },
        "item": {
          "id": "7e7606d2-1f13-42b9-ba99-ce60b27db0e8",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "867376e2-cb79-4490-8cb2-9fea88b20765",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e7606d2-1f13-42b9-ba99-ce60b27db0e8",
        "cursor": {
          "ref": "39081477-30a8-42c5-8eed-6ebe5d5b4c9a",
          "length": 63,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "fea1f340-b498-419d-980d-9ea0fc0e0d8e"
        },
        "item": {
          "id": "7e7606d2-1f13-42b9-ba99-ce60b27db0e8",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "867376e2-cb79-4490-8cb2-9fea88b20765",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b766dcef-0136-420f-867c-350a60638540",
        "cursor": {
          "ref": "a86d9fb0-c039-41bc-921c-9d0889853d14",
          "length": 63,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a269b72c-f97a-43de-8a90-48e35b3b4f87"
        },
        "item": {
          "id": "b766dcef-0136-420f-867c-350a60638540",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "26ad937d-764d-4189-a12b-87c6b11865b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b766dcef-0136-420f-867c-350a60638540",
        "cursor": {
          "ref": "a86d9fb0-c039-41bc-921c-9d0889853d14",
          "length": 63,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a269b72c-f97a-43de-8a90-48e35b3b4f87"
        },
        "item": {
          "id": "b766dcef-0136-420f-867c-350a60638540",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "26ad937d-764d-4189-a12b-87c6b11865b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8cd868b-5a50-4003-b1b2-46485c85ca64",
        "cursor": {
          "ref": "71d0265a-2d92-45c9-8e98-ce641d87c430",
          "length": 63,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "16f8bde3-4b80-426f-a394-e70155ec98d4"
        },
        "item": {
          "id": "e8cd868b-5a50-4003-b1b2-46485c85ca64",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "c7673fb4-8f77-4205-a467-bbbf493c9fb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8cd868b-5a50-4003-b1b2-46485c85ca64",
        "cursor": {
          "ref": "71d0265a-2d92-45c9-8e98-ce641d87c430",
          "length": 63,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "16f8bde3-4b80-426f-a394-e70155ec98d4"
        },
        "item": {
          "id": "e8cd868b-5a50-4003-b1b2-46485c85ca64",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "c7673fb4-8f77-4205-a467-bbbf493c9fb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ddc1fe5-bb94-4878-b105-b09e326815d3",
        "cursor": {
          "ref": "aafabd4d-f9a5-44c6-b63f-069af09f7360",
          "length": 63,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "1ed6cd3d-8029-44f5-b256-57f97eff4c0e"
        },
        "item": {
          "id": "1ddc1fe5-bb94-4878-b105-b09e326815d3",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "c3258c8a-ea06-4756-a557-622b6821010b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ddc1fe5-bb94-4878-b105-b09e326815d3",
        "cursor": {
          "ref": "aafabd4d-f9a5-44c6-b63f-069af09f7360",
          "length": 63,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "1ed6cd3d-8029-44f5-b256-57f97eff4c0e"
        },
        "item": {
          "id": "1ddc1fe5-bb94-4878-b105-b09e326815d3",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "c3258c8a-ea06-4756-a557-622b6821010b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19977e28-a2e9-4b70-a05f-17926f69fd18",
        "cursor": {
          "ref": "5870cbcc-3e99-4522-a1b2-4292e039c56a",
          "length": 63,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "d561c558-fe9b-497a-b4ff-3255f6697028"
        },
        "item": {
          "id": "19977e28-a2e9-4b70-a05f-17926f69fd18",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "fb936070-e52d-4ae7-860b-a2d404bbcd6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19977e28-a2e9-4b70-a05f-17926f69fd18",
        "cursor": {
          "ref": "5870cbcc-3e99-4522-a1b2-4292e039c56a",
          "length": 63,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "d561c558-fe9b-497a-b4ff-3255f6697028"
        },
        "item": {
          "id": "19977e28-a2e9-4b70-a05f-17926f69fd18",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "fb936070-e52d-4ae7-860b-a2d404bbcd6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d259741-a249-40c6-9ffe-c17fefced931",
        "cursor": {
          "ref": "5410477c-a6ad-42e7-ba26-b96fd49412c2",
          "length": 63,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "7f97228a-1e92-4cd0-92b6-42e2cc04fc34"
        },
        "item": {
          "id": "5d259741-a249-40c6-9ffe-c17fefced931",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "0c59bfe8-7e3a-4528-8bcd-64189a1df2eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d259741-a249-40c6-9ffe-c17fefced931",
        "cursor": {
          "ref": "5410477c-a6ad-42e7-ba26-b96fd49412c2",
          "length": 63,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "7f97228a-1e92-4cd0-92b6-42e2cc04fc34"
        },
        "item": {
          "id": "5d259741-a249-40c6-9ffe-c17fefced931",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "0c59bfe8-7e3a-4528-8bcd-64189a1df2eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "373e6752-87b6-48a5-8433-aa4036bf3dbc",
        "cursor": {
          "ref": "bd9d523f-eb73-4673-8cd8-c28c44611b7f",
          "length": 63,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a4e06601-01c4-497c-826a-b1a8a43b610c"
        },
        "item": {
          "id": "373e6752-87b6-48a5-8433-aa4036bf3dbc",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "82327be8-3d7e-44a0-95b4-ffc00b76c2fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "373e6752-87b6-48a5-8433-aa4036bf3dbc",
        "cursor": {
          "ref": "bd9d523f-eb73-4673-8cd8-c28c44611b7f",
          "length": 63,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a4e06601-01c4-497c-826a-b1a8a43b610c"
        },
        "item": {
          "id": "373e6752-87b6-48a5-8433-aa4036bf3dbc",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "82327be8-3d7e-44a0-95b4-ffc00b76c2fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7356ada4-2cbf-4ae9-b19d-fa40ce6d15a6",
        "cursor": {
          "ref": "152f60dd-82d5-4575-90af-fbabae3034f9",
          "length": 63,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "968903ef-b796-4e54-8256-685d3adc2c15"
        },
        "item": {
          "id": "7356ada4-2cbf-4ae9-b19d-fa40ce6d15a6",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "30f6c780-31cb-47ec-acfa-ad3e3a4e54d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7356ada4-2cbf-4ae9-b19d-fa40ce6d15a6",
        "cursor": {
          "ref": "152f60dd-82d5-4575-90af-fbabae3034f9",
          "length": 63,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "968903ef-b796-4e54-8256-685d3adc2c15"
        },
        "item": {
          "id": "7356ada4-2cbf-4ae9-b19d-fa40ce6d15a6",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "30f6c780-31cb-47ec-acfa-ad3e3a4e54d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85d882ec-dfeb-48c8-bcdc-7d9a49ded6d3",
        "cursor": {
          "ref": "88bc6eba-d295-4ffc-aa3a-8069596789a9",
          "length": 63,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "a21d0470-b645-4c3b-b105-733cbb143650"
        },
        "item": {
          "id": "85d882ec-dfeb-48c8-bcdc-7d9a49ded6d3",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "04c5f51d-8754-4744-8af1-518d21f284d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85d882ec-dfeb-48c8-bcdc-7d9a49ded6d3",
        "cursor": {
          "ref": "88bc6eba-d295-4ffc-aa3a-8069596789a9",
          "length": 63,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "a21d0470-b645-4c3b-b105-733cbb143650"
        },
        "item": {
          "id": "85d882ec-dfeb-48c8-bcdc-7d9a49ded6d3",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "04c5f51d-8754-4744-8af1-518d21f284d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6743399b-7edc-4c5a-8ed9-48bfcc443d19",
        "cursor": {
          "ref": "abe904e6-dc58-449d-8071-dda3c0af726a",
          "length": 63,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "7f8df3f0-bada-465a-a74e-d18904e05d5a"
        },
        "item": {
          "id": "6743399b-7edc-4c5a-8ed9-48bfcc443d19",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "284e8bca-f279-4129-853c-e68c560e5a11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6743399b-7edc-4c5a-8ed9-48bfcc443d19",
        "cursor": {
          "ref": "abe904e6-dc58-449d-8071-dda3c0af726a",
          "length": 63,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "7f8df3f0-bada-465a-a74e-d18904e05d5a"
        },
        "item": {
          "id": "6743399b-7edc-4c5a-8ed9-48bfcc443d19",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "284e8bca-f279-4129-853c-e68c560e5a11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f996a2b-a21c-4073-b01c-428e42b76cac",
        "cursor": {
          "ref": "2995c09d-dba9-4487-9334-5aaca9f5e8f6",
          "length": 63,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "931c34d3-61fc-4e29-9308-971dd7daebdf"
        },
        "item": {
          "id": "1f996a2b-a21c-4073-b01c-428e42b76cac",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "b753f3e4-7e71-48ff-9fd9-e0b924063e4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 928,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f996a2b-a21c-4073-b01c-428e42b76cac",
        "cursor": {
          "ref": "2995c09d-dba9-4487-9334-5aaca9f5e8f6",
          "length": 63,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "931c34d3-61fc-4e29-9308-971dd7daebdf"
        },
        "item": {
          "id": "1f996a2b-a21c-4073-b01c-428e42b76cac",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "b753f3e4-7e71-48ff-9fd9-e0b924063e4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 928,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afebe9a8-3fd4-4eed-9fcf-ded51847c4ee",
        "cursor": {
          "ref": "10c741a8-466f-40fd-a898-5b1c655232bd",
          "length": 63,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "527242c3-e4c5-4416-aebe-bbe0d08a909d"
        },
        "item": {
          "id": "afebe9a8-3fd4-4eed-9fcf-ded51847c4ee",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "ca6aa471-171e-4aa8-bf97-eee4988756e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afebe9a8-3fd4-4eed-9fcf-ded51847c4ee",
        "cursor": {
          "ref": "10c741a8-466f-40fd-a898-5b1c655232bd",
          "length": 63,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "527242c3-e4c5-4416-aebe-bbe0d08a909d"
        },
        "item": {
          "id": "afebe9a8-3fd4-4eed-9fcf-ded51847c4ee",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "ca6aa471-171e-4aa8-bf97-eee4988756e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be0ba04b-ea8c-480d-91bd-f6b1a1f9cf40",
        "cursor": {
          "ref": "b42dff9b-aa03-4504-a4bb-8388e8994840",
          "length": 63,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "ec9b8f01-c0aa-42a3-901a-a012768e9630"
        },
        "item": {
          "id": "be0ba04b-ea8c-480d-91bd-f6b1a1f9cf40",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "54a1931e-6299-4c66-99dc-3ee21c1df3ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be0ba04b-ea8c-480d-91bd-f6b1a1f9cf40",
        "cursor": {
          "ref": "b42dff9b-aa03-4504-a4bb-8388e8994840",
          "length": 63,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "ec9b8f01-c0aa-42a3-901a-a012768e9630"
        },
        "item": {
          "id": "be0ba04b-ea8c-480d-91bd-f6b1a1f9cf40",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "54a1931e-6299-4c66-99dc-3ee21c1df3ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1fef578-2a76-4d2c-86b5-633b30f21484",
        "cursor": {
          "ref": "3d58b315-73ab-44c7-9733-a65f851a0bc3",
          "length": 63,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "817595ac-8536-4a52-b6e7-f47f5c285441"
        },
        "item": {
          "id": "e1fef578-2a76-4d2c-86b5-633b30f21484",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "82df7270-d903-411d-8b4d-574c181234a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1fef578-2a76-4d2c-86b5-633b30f21484",
        "cursor": {
          "ref": "3d58b315-73ab-44c7-9733-a65f851a0bc3",
          "length": 63,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "817595ac-8536-4a52-b6e7-f47f5c285441"
        },
        "item": {
          "id": "e1fef578-2a76-4d2c-86b5-633b30f21484",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "82df7270-d903-411d-8b4d-574c181234a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7311b59-dbca-4372-a4ef-5e357b83112f",
        "cursor": {
          "ref": "ac07447e-21a0-4165-b9d0-74df74795a1b",
          "length": 63,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "a714a838-87f7-4d42-b718-7edd478f7573"
        },
        "item": {
          "id": "b7311b59-dbca-4372-a4ef-5e357b83112f",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "bb7f87e4-3402-4087-bc0d-306ee7210bea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 172,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7311b59-dbca-4372-a4ef-5e357b83112f",
        "cursor": {
          "ref": "ac07447e-21a0-4165-b9d0-74df74795a1b",
          "length": 63,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "a714a838-87f7-4d42-b718-7edd478f7573"
        },
        "item": {
          "id": "b7311b59-dbca-4372-a4ef-5e357b83112f",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "bb7f87e4-3402-4087-bc0d-306ee7210bea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 172,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "627b14a2-26e3-4cb0-b9cf-016010482995",
        "cursor": {
          "ref": "12c42274-01d8-48d2-b239-25afa84f4c50",
          "length": 63,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "a9696012-ae65-46db-a317-2c50bf87ab1c"
        },
        "item": {
          "id": "627b14a2-26e3-4cb0-b9cf-016010482995",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "010f5a9e-2116-4b9e-827f-3c821c4f8101",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "627b14a2-26e3-4cb0-b9cf-016010482995",
        "cursor": {
          "ref": "12c42274-01d8-48d2-b239-25afa84f4c50",
          "length": 63,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "a9696012-ae65-46db-a317-2c50bf87ab1c"
        },
        "item": {
          "id": "627b14a2-26e3-4cb0-b9cf-016010482995",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "010f5a9e-2116-4b9e-827f-3c821c4f8101",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6248c04-ff8e-4296-9363-011e9545dd9a",
        "cursor": {
          "ref": "f681407b-09de-42b5-ab54-017589697e69",
          "length": 63,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "27395620-4667-41ee-a2d5-ecf20c2a9330"
        },
        "item": {
          "id": "b6248c04-ff8e-4296-9363-011e9545dd9a",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "96a224e3-e6b0-437a-b961-a524099b05a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6248c04-ff8e-4296-9363-011e9545dd9a",
        "cursor": {
          "ref": "f681407b-09de-42b5-ab54-017589697e69",
          "length": 63,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "27395620-4667-41ee-a2d5-ecf20c2a9330"
        },
        "item": {
          "id": "b6248c04-ff8e-4296-9363-011e9545dd9a",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "96a224e3-e6b0-437a-b961-a524099b05a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "871288eb-28f6-45b5-afb5-e67ff2377229",
        "cursor": {
          "ref": "3f76e836-1b14-4d72-a988-7be5d1f483e0",
          "length": 63,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "7e5281ff-5f5c-40ce-9dc6-f0f95d7415c6"
        },
        "item": {
          "id": "871288eb-28f6-45b5-afb5-e67ff2377229",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "f7eeab3d-6fe3-4f5c-939c-a8cc68feb7c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "871288eb-28f6-45b5-afb5-e67ff2377229",
        "cursor": {
          "ref": "3f76e836-1b14-4d72-a988-7be5d1f483e0",
          "length": 63,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "7e5281ff-5f5c-40ce-9dc6-f0f95d7415c6"
        },
        "item": {
          "id": "871288eb-28f6-45b5-afb5-e67ff2377229",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "f7eeab3d-6fe3-4f5c-939c-a8cc68feb7c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e07b63dc-f961-4c6c-a8cb-9218d161e58f",
        "cursor": {
          "ref": "a7b15b55-0b60-45e8-bf9b-2d100e08aad9",
          "length": 63,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "bf609597-430e-4580-9ec7-8e15a2cf5464"
        },
        "item": {
          "id": "e07b63dc-f961-4c6c-a8cb-9218d161e58f",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "ba66726b-748e-4e00-ba28-53963ec94e07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e07b63dc-f961-4c6c-a8cb-9218d161e58f",
        "cursor": {
          "ref": "a7b15b55-0b60-45e8-bf9b-2d100e08aad9",
          "length": 63,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "bf609597-430e-4580-9ec7-8e15a2cf5464"
        },
        "item": {
          "id": "e07b63dc-f961-4c6c-a8cb-9218d161e58f",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "ba66726b-748e-4e00-ba28-53963ec94e07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b522aab8-cdef-4a0f-bb97-afc8b6d3cbcc",
        "cursor": {
          "ref": "598d743c-0797-4484-aa9c-26c213bb00d4",
          "length": 63,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "f000f8aa-7043-440c-896d-fbe8387a2504"
        },
        "item": {
          "id": "b522aab8-cdef-4a0f-bb97-afc8b6d3cbcc",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "fc2074b7-4ae8-470d-8314-0dd25ec1a02e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b522aab8-cdef-4a0f-bb97-afc8b6d3cbcc",
        "cursor": {
          "ref": "598d743c-0797-4484-aa9c-26c213bb00d4",
          "length": 63,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "f000f8aa-7043-440c-896d-fbe8387a2504"
        },
        "item": {
          "id": "b522aab8-cdef-4a0f-bb97-afc8b6d3cbcc",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "fc2074b7-4ae8-470d-8314-0dd25ec1a02e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f92af25e-796d-46b3-82a6-cdfc0d4259e4",
        "cursor": {
          "ref": "b1aff991-f35b-4381-aa97-5604484ed845",
          "length": 63,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "b6d3b626-6195-4807-9205-37607e8ea886"
        },
        "item": {
          "id": "f92af25e-796d-46b3-82a6-cdfc0d4259e4",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "5df43f97-63e0-4d2b-a5c9-b2f5e6ba4060",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f92af25e-796d-46b3-82a6-cdfc0d4259e4",
        "cursor": {
          "ref": "b1aff991-f35b-4381-aa97-5604484ed845",
          "length": 63,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "b6d3b626-6195-4807-9205-37607e8ea886"
        },
        "item": {
          "id": "f92af25e-796d-46b3-82a6-cdfc0d4259e4",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "5df43f97-63e0-4d2b-a5c9-b2f5e6ba4060",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efbd42fc-e59e-4338-999d-d53d0ee4c2c7",
        "cursor": {
          "ref": "0b7332ff-db74-4cff-8539-fe61d4d6f857",
          "length": 63,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "c21ea4ab-9851-45f0-a3b7-c3350e340ab0"
        },
        "item": {
          "id": "efbd42fc-e59e-4338-999d-d53d0ee4c2c7",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "1ae1477a-3acb-4b7c-a4a9-c6b74e69c872",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efbd42fc-e59e-4338-999d-d53d0ee4c2c7",
        "cursor": {
          "ref": "0b7332ff-db74-4cff-8539-fe61d4d6f857",
          "length": 63,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "c21ea4ab-9851-45f0-a3b7-c3350e340ab0"
        },
        "item": {
          "id": "efbd42fc-e59e-4338-999d-d53d0ee4c2c7",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "1ae1477a-3acb-4b7c-a4a9-c6b74e69c872",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d30f481-2247-4bc0-a6a7-33434b3ee6f8",
        "cursor": {
          "ref": "b78b1f54-aceb-4bdc-a481-8b44ea251b7e",
          "length": 63,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "62ca673a-d890-4188-a842-f5f3fc63803e"
        },
        "item": {
          "id": "1d30f481-2247-4bc0-a6a7-33434b3ee6f8",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "664ca38f-e35e-44e2-b728-0e9e0d1a2c2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d30f481-2247-4bc0-a6a7-33434b3ee6f8",
        "cursor": {
          "ref": "b78b1f54-aceb-4bdc-a481-8b44ea251b7e",
          "length": 63,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "62ca673a-d890-4188-a842-f5f3fc63803e"
        },
        "item": {
          "id": "1d30f481-2247-4bc0-a6a7-33434b3ee6f8",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "664ca38f-e35e-44e2-b728-0e9e0d1a2c2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdc72e83-ce9c-41d1-b494-b95f23e7cb38",
        "cursor": {
          "ref": "e19191df-c192-4d6c-911a-a08b53c8b37f",
          "length": 63,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "3f7a177e-4d6d-43e3-8446-af65133fb8e4"
        },
        "item": {
          "id": "fdc72e83-ce9c-41d1-b494-b95f23e7cb38",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "1159e9a4-c288-48d0-9c4c-df5cd4dd7075",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdc72e83-ce9c-41d1-b494-b95f23e7cb38",
        "cursor": {
          "ref": "e19191df-c192-4d6c-911a-a08b53c8b37f",
          "length": 63,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "3f7a177e-4d6d-43e3-8446-af65133fb8e4"
        },
        "item": {
          "id": "fdc72e83-ce9c-41d1-b494-b95f23e7cb38",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "1159e9a4-c288-48d0-9c4c-df5cd4dd7075",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edc175d4-811e-4107-8eb1-b038da7d3e3f",
        "cursor": {
          "ref": "120fc00a-564e-4577-826e-4aa187311937",
          "length": 63,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "4c4970b5-8e0c-482a-90c4-111a78e41d56"
        },
        "item": {
          "id": "edc175d4-811e-4107-8eb1-b038da7d3e3f",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "be3c2e97-ac79-4bc0-9ea2-20a03d084ecc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edc175d4-811e-4107-8eb1-b038da7d3e3f",
        "cursor": {
          "ref": "120fc00a-564e-4577-826e-4aa187311937",
          "length": 63,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "4c4970b5-8e0c-482a-90c4-111a78e41d56"
        },
        "item": {
          "id": "edc175d4-811e-4107-8eb1-b038da7d3e3f",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "be3c2e97-ac79-4bc0-9ea2-20a03d084ecc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e4d10fa-6a50-4fef-9802-012d2434168d",
        "cursor": {
          "ref": "3745e1a1-6e82-4be6-bb11-92f4fbb7d1da",
          "length": 63,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "9e31068d-faa6-4dba-8777-0e379835f99d"
        },
        "item": {
          "id": "4e4d10fa-6a50-4fef-9802-012d2434168d",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "af465ce4-73d6-41a6-9cf4-8465165fae02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 218,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e4d10fa-6a50-4fef-9802-012d2434168d",
        "cursor": {
          "ref": "3745e1a1-6e82-4be6-bb11-92f4fbb7d1da",
          "length": 63,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "9e31068d-faa6-4dba-8777-0e379835f99d"
        },
        "item": {
          "id": "4e4d10fa-6a50-4fef-9802-012d2434168d",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "af465ce4-73d6-41a6-9cf4-8465165fae02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 218,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fcb2ee0-8a95-4f9d-844b-e23c69e0c672",
        "cursor": {
          "ref": "101ba448-06b5-48a7-8d7b-3a0c04c56e29",
          "length": 63,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "12992701-c5d2-4387-b83e-717646bd2cac"
        },
        "item": {
          "id": "3fcb2ee0-8a95-4f9d-844b-e23c69e0c672",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "fca32939-a3b2-4f85-a3fe-f80b96608e92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fcb2ee0-8a95-4f9d-844b-e23c69e0c672",
        "cursor": {
          "ref": "101ba448-06b5-48a7-8d7b-3a0c04c56e29",
          "length": 63,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "12992701-c5d2-4387-b83e-717646bd2cac"
        },
        "item": {
          "id": "3fcb2ee0-8a95-4f9d-844b-e23c69e0c672",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "fca32939-a3b2-4f85-a3fe-f80b96608e92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c98593e6-4a6f-44c2-b90d-955af7283af8",
        "cursor": {
          "ref": "27e2bd2d-bf74-457f-bcb6-11619da80646",
          "length": 63,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "d8b5f7a1-e986-46ea-ac0d-d3bd752aadc9"
        },
        "item": {
          "id": "c98593e6-4a6f-44c2-b90d-955af7283af8",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "c8ce7fa9-81cb-4364-9631-ea0febe32f76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c98593e6-4a6f-44c2-b90d-955af7283af8",
        "cursor": {
          "ref": "27e2bd2d-bf74-457f-bcb6-11619da80646",
          "length": 63,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "d8b5f7a1-e986-46ea-ac0d-d3bd752aadc9"
        },
        "item": {
          "id": "c98593e6-4a6f-44c2-b90d-955af7283af8",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "c8ce7fa9-81cb-4364-9631-ea0febe32f76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30e9083f-4443-4e24-b08d-a8822d1b8d9c",
        "cursor": {
          "ref": "ef74537a-4b3b-4fad-bbc0-590596b20d0c",
          "length": 63,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "ea6e3134-db6a-4131-b1cc-ec944a11028f"
        },
        "item": {
          "id": "30e9083f-4443-4e24-b08d-a8822d1b8d9c",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "e14eb1d8-24ac-4b53-9b7d-5ae7d4251531",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30e9083f-4443-4e24-b08d-a8822d1b8d9c",
        "cursor": {
          "ref": "ef74537a-4b3b-4fad-bbc0-590596b20d0c",
          "length": 63,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "ea6e3134-db6a-4131-b1cc-ec944a11028f"
        },
        "item": {
          "id": "30e9083f-4443-4e24-b08d-a8822d1b8d9c",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "e14eb1d8-24ac-4b53-9b7d-5ae7d4251531",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3d98609-e5f0-4540-bfbb-f3164ab446cd",
        "cursor": {
          "ref": "80f7bf9e-4a49-4e6a-9a94-08123bb16eea",
          "length": 63,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "43f26bb6-966d-4eb3-b979-9b2f1b700dd0"
        },
        "item": {
          "id": "b3d98609-e5f0-4540-bfbb-f3164ab446cd",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "e63a952c-4d13-494a-80c6-025d2b9e1c81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3d98609-e5f0-4540-bfbb-f3164ab446cd",
        "cursor": {
          "ref": "80f7bf9e-4a49-4e6a-9a94-08123bb16eea",
          "length": 63,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "43f26bb6-966d-4eb3-b979-9b2f1b700dd0"
        },
        "item": {
          "id": "b3d98609-e5f0-4540-bfbb-f3164ab446cd",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "e63a952c-4d13-494a-80c6-025d2b9e1c81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1589d9fc-0378-488f-98d9-8ee963844cfe",
        "cursor": {
          "ref": "021eddaa-aaae-45e3-870e-c1e3e8a742ae",
          "length": 63,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "e301a8fb-795f-4896-8d13-b244f0c400ce"
        },
        "item": {
          "id": "1589d9fc-0378-488f-98d9-8ee963844cfe",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "0cc14b33-63c7-4d2a-8cc8-8ee0e3f77370",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1589d9fc-0378-488f-98d9-8ee963844cfe",
        "cursor": {
          "ref": "021eddaa-aaae-45e3-870e-c1e3e8a742ae",
          "length": 63,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "e301a8fb-795f-4896-8d13-b244f0c400ce"
        },
        "item": {
          "id": "1589d9fc-0378-488f-98d9-8ee963844cfe",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "0cc14b33-63c7-4d2a-8cc8-8ee0e3f77370",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ba3de6d-ce20-4e39-8a99-6937bb6d5e28",
        "cursor": {
          "ref": "2df6891f-1c53-4160-bb8d-eb565712b1b8",
          "length": 63,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "5fad7a84-4754-4060-8da9-f8d01de4bcf0"
        },
        "item": {
          "id": "5ba3de6d-ce20-4e39-8a99-6937bb6d5e28",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "a891956f-31b2-478c-a682-6c40ab813694",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 34,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ba3de6d-ce20-4e39-8a99-6937bb6d5e28",
        "cursor": {
          "ref": "2df6891f-1c53-4160-bb8d-eb565712b1b8",
          "length": 63,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "5fad7a84-4754-4060-8da9-f8d01de4bcf0"
        },
        "item": {
          "id": "5ba3de6d-ce20-4e39-8a99-6937bb6d5e28",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "a891956f-31b2-478c-a682-6c40ab813694",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 34,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db18c2e2-9e7d-4dbe-b11d-d55d01d900fb",
        "cursor": {
          "ref": "50329134-1a5c-488b-9264-ba1a73e579ec",
          "length": 63,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "5e3403fb-2fc2-4f78-b7c5-3e1691020aa3"
        },
        "item": {
          "id": "db18c2e2-9e7d-4dbe-b11d-d55d01d900fb",
          "name": "credentials_issue"
        },
        "response": {
          "id": "84543274-bf4b-4f9a-ab95-82374f3c8674",
          "status": "Created",
          "code": 201,
          "responseTime": 393,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "db18c2e2-9e7d-4dbe-b11d-d55d01d900fb",
        "cursor": {
          "ref": "50329134-1a5c-488b-9264-ba1a73e579ec",
          "length": 63,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "5e3403fb-2fc2-4f78-b7c5-3e1691020aa3"
        },
        "item": {
          "id": "db18c2e2-9e7d-4dbe-b11d-d55d01d900fb",
          "name": "credentials_issue"
        },
        "response": {
          "id": "84543274-bf4b-4f9a-ab95-82374f3c8674",
          "status": "Created",
          "code": 201,
          "responseTime": 393,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "442ec34a-801d-47f5-824b-d2e2687dc218",
        "cursor": {
          "ref": "79efc954-aa1a-48c2-9a3e-ccd97b9f485d",
          "length": 63,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "9c00c893-5f53-4a69-a94b-3c1d13c0b985"
        },
        "item": {
          "id": "442ec34a-801d-47f5-824b-d2e2687dc218",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "dd29c7b0-6de0-49a7-acdc-837ce90f2bb0",
          "status": "Created",
          "code": 201,
          "responseTime": 318,
          "responseSize": 607
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "442ec34a-801d-47f5-824b-d2e2687dc218",
        "cursor": {
          "ref": "79efc954-aa1a-48c2-9a3e-ccd97b9f485d",
          "length": 63,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "9c00c893-5f53-4a69-a94b-3c1d13c0b985"
        },
        "item": {
          "id": "442ec34a-801d-47f5-824b-d2e2687dc218",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "dd29c7b0-6de0-49a7-acdc-837ce90f2bb0",
          "status": "Created",
          "code": 201,
          "responseTime": 318,
          "responseSize": 607
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "862957a4-af80-4623-b563-bc16b07c6211",
        "cursor": {
          "ref": "706ac63e-8c9f-4cff-be6d-b941825986b2",
          "length": 63,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "ae2b7fde-1bb2-4d7e-8c62-67a155e6fe0a"
        },
        "item": {
          "id": "862957a4-af80-4623-b563-bc16b07c6211",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "174c9035-c345-4689-a8dc-930b546324c4",
          "status": "Created",
          "code": 201,
          "responseTime": 304,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "862957a4-af80-4623-b563-bc16b07c6211",
        "cursor": {
          "ref": "706ac63e-8c9f-4cff-be6d-b941825986b2",
          "length": 63,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "ae2b7fde-1bb2-4d7e-8c62-67a155e6fe0a"
        },
        "item": {
          "id": "862957a4-af80-4623-b563-bc16b07c6211",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "174c9035-c345-4689-a8dc-930b546324c4",
          "status": "Created",
          "code": 201,
          "responseTime": 304,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f1f205a-2dac-4e86-a6a2-607aed2a40bf",
        "cursor": {
          "ref": "31d87b3b-0725-4f03-a164-cb210accc076",
          "length": 63,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "a65ca915-29f2-45b8-852d-5817a20aec4e"
        },
        "item": {
          "id": "0f1f205a-2dac-4e86-a6a2-607aed2a40bf",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "5982ed81-b67a-478f-9846-e9632158a10f",
          "status": "Created",
          "code": 201,
          "responseTime": 294,
          "responseSize": 576
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f1f205a-2dac-4e86-a6a2-607aed2a40bf",
        "cursor": {
          "ref": "31d87b3b-0725-4f03-a164-cb210accc076",
          "length": 63,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "a65ca915-29f2-45b8-852d-5817a20aec4e"
        },
        "item": {
          "id": "0f1f205a-2dac-4e86-a6a2-607aed2a40bf",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "5982ed81-b67a-478f-9846-e9632158a10f",
          "status": "Created",
          "code": 201,
          "responseTime": 294,
          "responseSize": 576
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "801e1d44-4341-4f7d-8f60-d77ffe496818",
        "cursor": {
          "ref": "7c7417da-cc16-4923-9600-6c07f6506243",
          "length": 63,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "eba897cf-61ec-4645-bb46-a6ec9205b267"
        },
        "item": {
          "id": "801e1d44-4341-4f7d-8f60-d77ffe496818",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "a75a9769-1393-46ee-a659-1ad66afd8a68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "801e1d44-4341-4f7d-8f60-d77ffe496818",
        "cursor": {
          "ref": "7c7417da-cc16-4923-9600-6c07f6506243",
          "length": 63,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "eba897cf-61ec-4645-bb46-a6ec9205b267"
        },
        "item": {
          "id": "801e1d44-4341-4f7d-8f60-d77ffe496818",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "a75a9769-1393-46ee-a659-1ad66afd8a68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "157df4f7-3709-411a-9c72-2cbc42909c14",
        "cursor": {
          "ref": "1ec93cbe-e116-4b42-b698-d52a79493891",
          "length": 63,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "99709a36-e121-4165-9165-7dc13465157a"
        },
        "item": {
          "id": "157df4f7-3709-411a-9c72-2cbc42909c14",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "c10f642b-9a89-4cb6-8d01-958861cebc6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "157df4f7-3709-411a-9c72-2cbc42909c14",
        "cursor": {
          "ref": "1ec93cbe-e116-4b42-b698-d52a79493891",
          "length": 63,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "99709a36-e121-4165-9165-7dc13465157a"
        },
        "item": {
          "id": "157df4f7-3709-411a-9c72-2cbc42909c14",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "c10f642b-9a89-4cb6-8d01-958861cebc6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "13f72618-1fdc-4bd5-9461-91d9291856ca",
        "cursor": {
          "ref": "08e3d414-cfaa-4c8f-947f-4f4a40e20967",
          "length": 63,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "2a06410f-3455-42d4-9855-56a2e04828a7"
        },
        "item": {
          "id": "13f72618-1fdc-4bd5-9461-91d9291856ca",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "051c6d18-b7a7-48f4-b603-9b32035e4790",
          "status": "Created",
          "code": 201,
          "responseTime": 343,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13f72618-1fdc-4bd5-9461-91d9291856ca",
        "cursor": {
          "ref": "08e3d414-cfaa-4c8f-947f-4f4a40e20967",
          "length": 63,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "2a06410f-3455-42d4-9855-56a2e04828a7"
        },
        "item": {
          "id": "13f72618-1fdc-4bd5-9461-91d9291856ca",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "051c6d18-b7a7-48f4-b603-9b32035e4790",
          "status": "Created",
          "code": 201,
          "responseTime": 343,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af576e28-6439-4cd5-ac9a-8092c483d64a",
        "cursor": {
          "ref": "5ef1bfc3-5b7d-4979-8ebd-28e3630790c3",
          "length": 63,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "6c238a3b-dbe0-488a-b150-5fa6fe12812a"
        },
        "item": {
          "id": "af576e28-6439-4cd5-ac9a-8092c483d64a",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "1c71f033-ccf4-4ea5-bd53-6e28ac5061bc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af576e28-6439-4cd5-ac9a-8092c483d64a",
        "cursor": {
          "ref": "5ef1bfc3-5b7d-4979-8ebd-28e3630790c3",
          "length": 63,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "6c238a3b-dbe0-488a-b150-5fa6fe12812a"
        },
        "item": {
          "id": "af576e28-6439-4cd5-ac9a-8092c483d64a",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "1c71f033-ccf4-4ea5-bd53-6e28ac5061bc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "897d030e-c779-4158-be2d-5bd27a670dda",
        "cursor": {
          "ref": "a1481230-fec9-4716-9110-6f8c6af5bf35",
          "length": 63,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "8710b60a-8da3-4260-9d92-4ce5add1f750"
        },
        "item": {
          "id": "897d030e-c779-4158-be2d-5bd27a670dda",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "b9cdb2e4-29ad-4498-8813-a4be491e7d09",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 39,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2cd9b88-d7fe-426d-bcc9-8f27cf02e438",
        "cursor": {
          "ref": "7b00869a-8ee0-44e2-b031-ae65efa20123",
          "length": 63,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "d62d6ec2-985e-44a2-bba5-027bf653517c"
        },
        "item": {
          "id": "c2cd9b88-d7fe-426d-bcc9-8f27cf02e438",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "c0f6135e-9d64-41c7-a662-83a4d5509413",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 163,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2cd9b88-d7fe-426d-bcc9-8f27cf02e438",
        "cursor": {
          "ref": "7b00869a-8ee0-44e2-b031-ae65efa20123",
          "length": 63,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "d62d6ec2-985e-44a2-bba5-027bf653517c"
        },
        "item": {
          "id": "c2cd9b88-d7fe-426d-bcc9-8f27cf02e438",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "c0f6135e-9d64-41c7-a662-83a4d5509413",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 163,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9e06207-ab8f-4a77-a1e0-12582f4b7504",
        "cursor": {
          "ref": "8f7d0e56-ebf8-471c-85ae-57ff872b9dd3",
          "length": 63,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "e48e6018-4771-47ad-97a4-600744f45227"
        },
        "item": {
          "id": "c9e06207-ab8f-4a77-a1e0-12582f4b7504",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "3ef9375b-b95e-4d71-bdb4-9222c23ed560",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2a39f9e-39d2-4319-9359-7a0956320a88",
        "cursor": {
          "ref": "00318dd3-dee7-444f-bfd8-a1e38bf707b8",
          "length": 63,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "58717a56-3361-464d-8351-229861b57066"
        },
        "item": {
          "id": "f2a39f9e-39d2-4319-9359-7a0956320a88",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "8b5c0b06-f82d-4953-853b-8310161f8838",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 213,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "267d75b5-2a11-4d19-bf2f-1595641a2d0e",
        "cursor": {
          "ref": "c7860c30-dd10-43d9-9abe-0911b624a659",
          "length": 63,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "a54dbde2-d0e3-4d23-a8eb-07917acb224a"
        },
        "item": {
          "id": "267d75b5-2a11-4d19-bf2f-1595641a2d0e",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "634e7e0a-a996-4a78-9192-d162e6f687cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c276ac2-fa77-4fe1-a78e-fb785c086d0d",
        "cursor": {
          "ref": "d1ae52b4-9e9d-4a9f-ad08-81c45133f384",
          "length": 63,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "bdc21acb-7cf6-41d7-8874-dfde027ad135"
        },
        "item": {
          "id": "7c276ac2-fa77-4fe1-a78e-fb785c086d0d",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "6d4e14de-38a1-45a0-8eea-6702499e24f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72786523-7a10-47fc-b8ab-047829b9fc32",
        "cursor": {
          "ref": "0dfb952b-2437-4daf-ba7d-3e0d0dabb9dd",
          "length": 63,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "eca898c4-16a0-436e-824a-47a4dd3b48db"
        },
        "item": {
          "id": "72786523-7a10-47fc-b8ab-047829b9fc32",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "8566678b-7330-4cb4-8ba0-9354170e9a43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5e6ecd2-2979-4d2f-8e9f-47aa489cadfe",
        "cursor": {
          "ref": "7e927f55-ac77-470c-86d2-fd16563f1bcf",
          "length": 63,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "2a107974-857b-4efb-9169-da1586a097df"
        },
        "item": {
          "id": "b5e6ecd2-2979-4d2f-8e9f-47aa489cadfe",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "d804bb7e-0948-4ff3-9db8-fb8569ba3d56",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55ac6504-5d9d-4cbd-ad3e-64b6f84b5d14",
        "cursor": {
          "ref": "6fe5aaba-da22-45c4-a9cb-f890cc7d52ed",
          "length": 63,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "911ae801-cd98-4a96-8919-684c49ff2f73"
        },
        "item": {
          "id": "55ac6504-5d9d-4cbd-ad3e-64b6f84b5d14",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "7ff472a7-dcbb-4f54-ab1f-5d7b13dcc66f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 35,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8342fd79-b7d2-49db-a898-e3ce33572d62",
        "cursor": {
          "ref": "bc388286-ed37-40ca-aa6d-f3583fd887ed",
          "length": 63,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "0adeab09-d988-4f19-9e86-2ffe3bb4dc22"
        },
        "item": {
          "id": "8342fd79-b7d2-49db-a898-e3ce33572d62",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "9f6a0065-2ddc-46b9-97e1-315b859bfd24",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8342fd79-b7d2-49db-a898-e3ce33572d62",
        "cursor": {
          "ref": "bc388286-ed37-40ca-aa6d-f3583fd887ed",
          "length": 63,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "0adeab09-d988-4f19-9e86-2ffe3bb4dc22"
        },
        "item": {
          "id": "8342fd79-b7d2-49db-a898-e3ce33572d62",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "9f6a0065-2ddc-46b9-97e1-315b859bfd24",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c13e921c-c22b-4844-88ff-e2a42a3101e8",
        "cursor": {
          "ref": "4bfb0339-b6ae-4931-9b13-86e951a709c1",
          "length": 63,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "84c95eab-e594-45c7-8275-176c537db9b8"
        },
        "item": {
          "id": "c13e921c-c22b-4844-88ff-e2a42a3101e8",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "6b61d380-61c3-43f4-bb4e-9dd941fb5129",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 36,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb6087b4-254d-4168-b616-84758b32ff6f",
        "cursor": {
          "ref": "9f3e6fff-cc38-4850-9e0d-c1863b99d461",
          "length": 63,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "6cf2cc3e-5a29-4eeb-bb6c-99955728b4b0"
        },
        "item": {
          "id": "cb6087b4-254d-4168-b616-84758b32ff6f",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "582e6977-6d19-4ebb-81bc-2f20bcfe36c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "cb6087b4-254d-4168-b616-84758b32ff6f",
        "cursor": {
          "ref": "9f3e6fff-cc38-4850-9e0d-c1863b99d461",
          "length": 63,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "6cf2cc3e-5a29-4eeb-bb6c-99955728b4b0"
        },
        "item": {
          "id": "cb6087b4-254d-4168-b616-84758b32ff6f",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "582e6977-6d19-4ebb-81bc-2f20bcfe36c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "fe00040e-381e-4279-9af3-315554f74a2d",
        "cursor": {
          "ref": "1a68d997-46ae-465a-bee9-8f81f1daf21a",
          "length": 63,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "8bc69a02-4bc4-452e-8de1-5a3a4d1b0b5f"
        },
        "item": {
          "id": "fe00040e-381e-4279-9af3-315554f74a2d",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "80f2c461-7b09-487d-992d-d941f1bc2e0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 130,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "fa247682-5e1d-4eb9-b3ba-33c7c7934f2e",
        "cursor": {
          "ref": "676ebb7e-b6ba-4799-adf4-8da52dd79b09",
          "length": 63,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "21732798-84d5-4f8a-bea1-b2b21c2369d2"
        },
        "item": {
          "id": "fa247682-5e1d-4eb9-b3ba-33c7c7934f2e",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "20e75e78-1f4b-483d-82d9-3287db6014c4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa247682-5e1d-4eb9-b3ba-33c7c7934f2e",
        "cursor": {
          "ref": "676ebb7e-b6ba-4799-adf4-8da52dd79b09",
          "length": 63,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "21732798-84d5-4f8a-bea1-b2b21c2369d2"
        },
        "item": {
          "id": "fa247682-5e1d-4eb9-b3ba-33c7c7934f2e",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "20e75e78-1f4b-483d-82d9-3287db6014c4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c905b9c-28be-469d-b83e-edde1b25f45e",
        "cursor": {
          "ref": "5ba04517-95d3-49ad-952c-ca46d8ddde6e",
          "length": 63,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "f36ec021-65b2-4b82-b41a-5efc8c9696c6"
        },
        "item": {
          "id": "0c905b9c-28be-469d-b83e-edde1b25f45e",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "4386853d-855d-42e3-9e30-4bbf0b346407",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 34,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}