{
  "collection": {
    "info": {
      "_postman_id": "c0dd6065-5be1-42d7-a6b8-e5d34e22908f",
      "name": "Presentations Exchange Tutorial",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "9bf3ba0c-8242-4330-a9d4-65c1aaa174b8",
        "name": "Get Access Token (Issuer)",
        "request": {
          "url": {
            "host": [
              "{{ISSUER_TOKEN_ENDPOINT}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"audience\": \"{{ISSUER_TOKEN_AUDIENCE}}\",\n    \"client_id\": \"{{ISSUER_CLIENT_ID}}\",\n    \"client_secret\": \"{{ISSUER_CLIENT_SECRET}}\",\n    \"grant_type\": \"client_credentials\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "28629fa9-a139-4e52-be18-e38a678a663b",
              "type": "text/javascript",
              "exec": [
                "pm.test(\"must return `200 Success` status\", function() {",
                "    pm.response.to.have.status(200);",
                "})",
                "",
                "pm.test(\"response body must include non-empty access_token\", function () {",
                "    const { access_token } = pm.response.json()",
                "    pm.expect(access_token).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "pm.test(\"response body must represent `Bearer` token\", function() {",
                "    const { token_type } = pm.response.json()",
                "    pm.expect(token_type).to.equal(\"Bearer\");",
                "});",
                "",
                "pm.test(\"returned token must expire in the future\", function() {",
                "    const { expires_in } = pm.response.json()",
                "    pm.expect(expires_in).to.be.above(0);",
                "})",
                "",
                "// Access token must be made available to later requests",
                "pm.test(\"`access_token` persisted to collectionVariables\", function() {",
                "    const { access_token } = pm.response.json()",
                "    pm.collectionVariables.set(\"issuer_access_token\", access_token);",
                "})"
              ],
              "_lastExecutionId": "426366f7-2e7d-4434-a112-527d321936cc"
            }
          }
        ]
      },
      {
        "id": "2766fd7c-cbbc-4d44-956e-b754ae02bfe6",
        "name": "Get Access Token (Verifier)",
        "request": {
          "url": {
            "host": [
              "{{VERIFIER_TOKEN_ENDPOINT}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"audience\": \"{{VERIFIER_TOKEN_AUDIENCE}}\",\n    \"client_id\": \"{{VERIFIER_CLIENT_ID}}\",\n    \"client_secret\": \"{{VERIFIER_CLIENT_SECRET}}\",\n    \"grant_type\": \"client_credentials\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "886ddafb-c41e-42ba-9374-fe2ce3964243",
              "type": "text/javascript",
              "exec": [
                "pm.test(\"must return `200 Success` status\", function() {",
                "    pm.response.to.have.status(200);",
                "})",
                "",
                "pm.test(\"response body must include non-empty access_token\", function () {",
                "    const { access_token } = pm.response.json()",
                "    pm.expect(access_token).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "pm.test(\"response body must represent `Bearer` token\", function() {",
                "    const { token_type } = pm.response.json()",
                "    pm.expect(token_type).to.equal(\"Bearer\");",
                "});",
                "",
                "pm.test(\"returned token must expire in the future\", function() {",
                "    const { expires_in } = pm.response.json()",
                "    pm.expect(expires_in).to.be.above(0);",
                "})",
                "",
                "// Access token must be made available to later requests",
                "pm.test(\"`access_token` persisted to collectionVariables\", function() {",
                "    const { access_token } = pm.response.json()",
                "    pm.collectionVariables.set(\"verifier_access_token\", access_token);",
                "})"
              ],
              "_lastExecutionId": "d2813c37-b063-4aeb-8186-7c72d37df99c"
            }
          }
        ]
      },
      {
        "id": "5613928c-dc99-463b-937a-03ced3cb7288",
        "name": "Get Organization DIDs",
        "request": {
          "url": {
            "path": [
              "identifiers",
              "{{ISSUER_ORGANIZATION_DID_WEB}}"
            ],
            "host": [
              "{{ISSUER_API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{issuer_access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "6d389ef4-b042-4f3a-9e30-a2a2e4881cbd",
              "type": "text/javascript",
              "exec": [
                "// This endpoint is authenticated. This test will not prevent the request from",
                "// running when the `issuer_access_token` collection variable is missing, but it",
                "// will give an indication of why the request failed in that scenario.",
                "pm.test(\"`issuer_access_token` collection variable must be set\", function () {",
                "    const issuer_access_token = pm.collectionVariables.get(\"issuer_access_token\");",
                "    pm.expect(issuer_access_token).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "pm.test(\"Status code is 200\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test(\"must include valid JSON response body\", function() {",
                "    pm.response.json(); // will throw on parse failure",
                "});",
                "",
                "pm.test(\"didDocument must be present in response body\", function() {",
                "    const jsonData = pm.response.json();",
                "    pm.expect(jsonData).to.have.property('didDocument');",
                "});",
                "",
                "pm.test(\"alsoKnownAs MUST be present\", function () {",
                "    const { didDocument } = pm.response.json();",
                "    pm.expect(didDocument).to.have.property('alsoKnownAs');",
                "});",
                "",
                "pm.test(\"alsoKnownAs MUST be an array\", function() {",
                "    const { alsoKnownAs } = pm.response.json().didDocument;",
                "    pm.expect(alsoKnownAs).to.be.an('array');",
                "});",
                "",
                "pm.test(\"alsoKnownAs values MUST be unique\", function() {",
                "    const { alsoKnownAs } = pm.response.json().didDocument;",
                "    pm.expect(new Set(alsoKnownAs)).to.have.lengthOf(alsoKnownAs.length);",
                "});",
                "",
                "pm.test(\"alsoKnownAs[1] must be present\", function() {",
                "    const { alsoKnownAs } = pm.response.json().didDocument;",
                "    pm.expect(alsoKnownAs[1]).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "pm.test(\"verification method controller must match did subject\", function() {",
                "    const { didDocument } = pm.response.json();",
                "    const vm = didDocument.verificationMethod || [];",
                "    vm.forEach((m) => pm.expect(m.controller).to.equal(didDocument.id));",
                "});",
                "",
                "// Credential Issuer ID must be made available to later requests",
                "pm.test(\"`credential_issuer_id` persisted to collectionVariables\", function() {",
                "    const { alsoKnownAs } = pm.response.json().didDocument;",
                "    pm.collectionVariables.set(\"credential_issuer_id\", alsoKnownAs[1]);",
                "})",
                ""
              ],
              "_lastExecutionId": "d0be153b-a5a2-432f-8a90-351ae2de19c2"
            }
          }
        ],
        "protocolProfileBehavior": {
          "disabledSystemHeaders": {}
        }
      },
      {
        "id": "0bea4dd1-0ad4-464e-891f-5c5f515ae854",
        "name": "Issue Credential",
        "request": {
          "url": {
            "path": [
              "credentials",
              "issue"
            ],
            "host": [
              "{{ISSUER_API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"id\": \"urn:uuid:{{$randomUUID}}\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{credential_issuer_id}}\",\n        \"issuanceDate\": \"2010-01-01T19:23:24Z\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        }\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\",\n        \"created\": \"2020-04-02T18:48:36Z\"\n    }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{issuer_access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "021a1b81-f90d-4465-9800-4c21f473ed8a",
              "type": "text/javascript",
              "exec": [
                "// This endpoint is authenticated. This test will not prevent the request from",
                "// running when the `issuer_access_token` collection variable is missing, but it",
                "// will give an indication of why the request failed in that scenario.",
                "pm.test(\"`issuer_access_token` collection variable must be set\", function () {",
                "    const issuer_access_token = pm.collectionVariables.get(\"issuer_access_token\");",
                "    pm.expect(issuer_access_token).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "pm.test(\"`credential_issuer_id` collection variable must be set\", function () {",
                "    const credential_issuer_id = pm.collectionVariables.get(\"credential_issuer_id\");",
                "    pm.expect(credential_issuer_id).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "pm.test(\"must return `201 Created` status\", function () {",
                "    pm.response.to.have.status(201);",
                "});",
                "",
                "// Verifiable credential must be made available to later requests",
                "pm.test(\"`verifiable_credential` persisted to collectionVariables\", function() {",
                "    const verifiable_credential = JSON.stringify(pm.response.json());",
                "    pm.collectionVariables.set(\"verifiable_credential\", verifiable_credential);",
                "})"
              ],
              "_lastExecutionId": "952bd147-77e7-46c2-b243-799e9cafcb9f"
            }
          },
          {
            "listen": "prerequest",
            "script": {
              "id": "414684b8-0cb7-4a18-8554-e2f521c161eb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f1394e20-8a08-4e74-aa8c-e17eb78ce84b"
            }
          }
        ]
      },
      {
        "id": "812b6b02-6af0-4e25-b556-b7012914c341",
        "name": "Initiate Exchange",
        "request": {
          "url": {
            "path": [
              "presentations",
              "available"
            ],
            "host": [
              "{{VERIFIER_API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"query\": [\n    {\n      \"type\": \"QueryByExample\",\n      \"credentialQuery\": [\n        {\n          \"type\": [\n            \"VerifiableCredential\"\n          ],\n          \"reason\": \"We want to present credentials.\"\n        }\n      ]\n    }\n  ]\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{verifier_access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "f8104c89-8759-4593-972c-5da20f99a894",
              "type": "text/javascript",
              "exec": [
                "// This endpoint is authenticated. This test will not prevent the request from",
                "// running when the `verifier_access_token` collection variable is missing, but",
                "// it will give an indication of why the request failed in that scenario.",
                "pm.test(\"`verifier_access_token` collection variable must be set\", function () {",
                "    const verifier_access_token = pm.collectionVariables.get(\"verifier_access_token\");",
                "    pm.expect(verifier_access_token).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// The expected response code for a \"Presentations Available\" request is",
                "// `200 Success`.",
                "pm.test(\"must return `200 Success` status\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "// The response body must include a \"domain\" property.",
                "pm.test(\"response must include 'domain' property\", function() {",
                "    const { domain } = pm.response.json()",
                "    pm.expect(domain).to.be.a('string').that.is.not.empty;",
                "    // Domain must be made available to later requests",
                "    pm.collectionVariables.set(\"domain\", domain);",
                "});",
                "",
                "// The response body must include a \"challenge\" property.",
                "pm.test(\"response must include 'challenge' property\", function() {",
                "    const { challenge } = pm.response.json()",
                "    pm.expect(challenge).to.be.a('string').that.is.not.empty;",
                "    // Challenge must be made available to later requests",
                "    pm.collectionVariables.set(\"challenge\", challenge);",
                "});",
                ""
              ],
              "_lastExecutionId": "0c23e397-3892-4f95-93dc-34c75150cff2"
            }
          }
        ]
      },
      {
        "id": "04b1c585-56e8-4510-ab74-3a3395490734",
        "name": "Sign Presentation",
        "request": {
          "url": {
            "path": [
              "presentations",
              "prove"
            ],
            "host": [
              "{{ISSUER_API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"presentation\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"type\": [\n            \"VerifiablePresentation\"\n        ],\n        \"holder\": \"{{credential_issuer_id}}\",\n        \"verifiableCredential\": [\n            {{verifiable_credential}}\n        ]\n    },\n    \"options\": {\n        \"domain\": \"{{domain}}\",\n        \"challenge\": \"{{challenge}}\"\n    }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{issuer_access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "d5bd8b8f-d3fa-47a1-a1b7-5967ab4eb6f4",
              "type": "text/javascript",
              "exec": [
                "// This endpoint is authenticated. This test will not prevent the request from",
                "// running when the `issuer_access_token` collection variable is missing, but it",
                "// will give an indication of why the request failed in that scenario.",
                "pm.test(\"`issuer_access_token` collection variable must be set\", function () {",
                "    const issuer_access_token = pm.collectionVariables.get(\"issuer_access_token\");",
                "    pm.expect(issuer_access_token).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// Credential issuer id is a required element item used in the request body",
                "pm.test(\"`credential_issuer_id` collection variable must be set\", function () {",
                "    const credential_issuer_id = pm.collectionVariables.get(\"credential_issuer_id\");",
                "    pm.expect(credential_issuer_id).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// Verifiable credential is a required element item used in the request body",
                "pm.test(\"`verifiable_credential` collection variable must be set\", function () {",
                "    const verifiable_credential = pm.collectionVariables.get(\"verifiable_credential\");",
                "    pm.expect(verifiable_credential).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// Domain is a required element item used in the request body",
                "pm.test(\"`domain` collection variable must be set\", function () {",
                "    const domain = pm.collectionVariables.get(\"domain\");",
                "    pm.expect(domain).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// Challenge is a required element item used in the request body",
                "pm.test(\"`challenge` collection variable must be set\", function () {",
                "    const challenge = pm.collectionVariables.get(\"challenge\");",
                "    pm.expect(challenge).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// The expected response code for a \"Sign Presentation\" request is",
                "// `200 Success`.",
                "pm.test(\"must return `200 Success` status\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "// Verifiable presentation must be made available to later requests",
                "pm.test(\"`verifiable_presentation` persisted to collectionVariables\", function() {",
                "    const verifiable_presentation = JSON.stringify(pm.response.json());",
                "    pm.collectionVariables.set(\"verifiable_presentation\", verifiable_presentation);",
                "})"
              ],
              "_lastExecutionId": "26004af7-b4d7-4733-98be-f6ee7ef6ee41"
            }
          }
        ]
      },
      {
        "id": "172ac725-781d-447f-a8b7-0f37199b20a2",
        "name": "Complete Exchange",
        "request": {
          "url": {
            "path": [
              "presentations",
              "submissions"
            ],
            "host": [
              "{{VERIFIER_API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{{verifiable_presentation}}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{verifier_access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "236dedb5-83f7-4edb-ad14-9c45ff308e6c",
              "type": "text/javascript",
              "exec": [
                "// This endpoint is authenticated. This test will not prevent the request from",
                "// running when the `verifier_access_token` collection variable is missing, but",
                "// it will give an indication of why the request failed in that scenario.",
                "pm.test(\"`verifier_access_token` collection variable must be set\", function () {",
                "    const verifier_access_token = pm.collectionVariables.get(\"verifier_access_token\");",
                "    pm.expect(verifier_access_token).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// The expected response code for a \"Complete Exchange\" request is",
                "// `200 Success`.",
                "pm.test(\"must return `200 Success` status\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "// Response should confirm the submission is accepted.",
                "pm.test(\"verification response should be 'true'\", function() {",
                "    const { verified } = pm.response.json()",
                "    pm.expect(verified).to.be.true;",
                "});"
              ],
              "_lastExecutionId": "360c6267-6a58-46b5-a47f-773c1d87dc6e"
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 7,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 22,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 7,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 7,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 7,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 38,
        "pending": 0,
        "failed": 6
      },
      "testScripts": {
        "total": 14,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 8,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 342,
      "responseMin": 77,
      "responseMax": 698,
      "responseSd": 236.544770754774,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1649353721828,
      "completed": 1649353724507
    },
    "executions": [
      {
        "id": "9bf3ba0c-8242-4330-a9d4-65c1aaa174b8",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 7,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "927c311f-e244-4167-828d-2cd06704004e",
          "httpRequestId": "24042d49-555a-4197-bad9-26e619abab5f"
        },
        "item": {
          "id": "9bf3ba0c-8242-4330-a9d4-65c1aaa174b8",
          "name": "Get Access Token (Issuer)"
        },
        "response": {
          "id": "1155e2d1-1492-469f-8f32-dab5d072597a",
          "status": "OK",
          "code": 200,
          "responseTime": 498,
          "responseSize": 975
        },
        "assertions": [
          {
            "assertion": "must return `200 Success` status",
            "skipped": false
          },
          {
            "assertion": "response body must include non-empty access_token",
            "skipped": false
          },
          {
            "assertion": "response body must represent `Bearer` token",
            "skipped": false
          },
          {
            "assertion": "returned token must expire in the future",
            "skipped": false
          },
          {
            "assertion": "`access_token` persisted to collectionVariables",
            "skipped": false
          }
        ]
      },
      {
        "id": "2766fd7c-cbbc-4d44-956e-b754ae02bfe6",
        "cursor": {
          "ref": "125a0ea6-b089-49ca-85ea-077ffe538726",
          "length": 7,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "7e599f5a-8ff9-4bb1-a16d-b4d2027074a0"
        },
        "item": {
          "id": "2766fd7c-cbbc-4d44-956e-b754ae02bfe6",
          "name": "Get Access Token (Verifier)"
        },
        "response": {
          "id": "d73b6e8e-1c45-4126-aeff-338bfe3ec460",
          "status": "OK",
          "code": 200,
          "responseTime": 698,
          "responseSize": 807
        },
        "assertions": [
          {
            "assertion": "must return `200 Success` status",
            "skipped": false
          },
          {
            "assertion": "response body must include non-empty access_token",
            "skipped": false
          },
          {
            "assertion": "response body must represent `Bearer` token",
            "skipped": false
          },
          {
            "assertion": "returned token must expire in the future",
            "skipped": false
          },
          {
            "assertion": "`access_token` persisted to collectionVariables",
            "skipped": false
          }
        ]
      },
      {
        "id": "5613928c-dc99-463b-937a-03ced3cb7288",
        "cursor": {
          "ref": "76bee473-83d2-4e8a-a00e-e08c9de8f8c9",
          "length": 7,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "c14cb748-54f4-48f3-adf9-318b320bd7f2"
        },
        "item": {
          "id": "5613928c-dc99-463b-937a-03ced3cb7288",
          "name": "Get Organization DIDs"
        },
        "response": {
          "id": "072ef747-d5c3-4e53-8d30-5d81370c142e",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 680
        },
        "assertions": [
          {
            "assertion": "`issuer_access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "must include valid JSON response body",
            "skipped": false
          },
          {
            "assertion": "didDocument must be present in response body",
            "skipped": false
          },
          {
            "assertion": "alsoKnownAs MUST be present",
            "skipped": false
          },
          {
            "assertion": "alsoKnownAs MUST be an array",
            "skipped": false
          },
          {
            "assertion": "alsoKnownAs values MUST be unique",
            "skipped": false
          },
          {
            "assertion": "alsoKnownAs[1] must be present",
            "skipped": false
          },
          {
            "assertion": "verification method controller must match did subject",
            "skipped": false
          },
          {
            "assertion": "`credential_issuer_id` persisted to collectionVariables",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bea4dd1-0ad4-464e-891f-5c5f515ae854",
        "cursor": {
          "ref": "34e1e16f-da3e-400f-9a9a-b6990d64c701",
          "length": 7,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "57d827f6-95aa-46da-83be-29bd637401be"
        },
        "item": {
          "id": "0bea4dd1-0ad4-464e-891f-5c5f515ae854",
          "name": "Issue Credential"
        },
        "response": {
          "id": "097f6ddd-72da-45ef-a661-3cbe27525e9d",
          "status": "Created",
          "code": 201,
          "responseTime": 402,
          "responseSize": 679
        },
        "assertions": [
          {
            "assertion": "`issuer_access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "`credential_issuer_id` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "must return `201 Created` status",
            "skipped": false
          },
          {
            "assertion": "`verifiable_credential` persisted to collectionVariables",
            "skipped": false
          }
        ]
      },
      {
        "id": "812b6b02-6af0-4e25-b556-b7012914c341",
        "cursor": {
          "ref": "d334030b-1d04-4790-b002-ddbb782321db",
          "length": 7,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "50e9e3fc-6f6f-45c8-a880-30b9a327413c"
        },
        "item": {
          "id": "812b6b02-6af0-4e25-b556-b7012914c341",
          "name": "Initiate Exchange"
        },
        "response": {
          "id": "5c5b37e1-4efb-4b6a-97e8-202f1d2d9c2a",
          "status": "OK",
          "code": 200,
          "responseTime": 540,
          "responseSize": 3827
        },
        "assertions": [
          {
            "assertion": "`verifier_access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "must return `200 Success` status",
            "skipped": false
          },
          {
            "assertion": "response must include 'domain' property",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response must include 'domain' property",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:3:5)"
            }
          },
          {
            "assertion": "response must include 'challenge' property",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response must include 'challenge' property",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:4:5)"
            }
          }
        ]
      },
      {
        "id": "04b1c585-56e8-4510-ab74-3a3395490734",
        "cursor": {
          "ref": "c774b207-52b9-4608-a6f0-a53c6d63fce5",
          "length": 7,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "5e361821-a279-455a-8781-5a178414ed72"
        },
        "item": {
          "id": "04b1c585-56e8-4510-ab74-3a3395490734",
          "name": "Sign Presentation"
        },
        "response": {
          "id": "2dc4e54e-15f6-42ba-898a-c4edaf78f9d0",
          "status": "Not Found",
          "code": 404,
          "responseTime": 77,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "`issuer_access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "`credential_issuer_id` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "`verifiable_credential` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "`domain` collection variable must be set",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "`domain` collection variable must be set",
              "message": "expected '' not to be empty",
              "stack": "AssertionError: expected '' not to be empty\n   at Object.eval sandbox-script.js:4:6)"
            }
          },
          {
            "assertion": "`challenge` collection variable must be set",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 4,
              "test": "`challenge` collection variable must be set",
              "message": "expected '' not to be empty",
              "stack": "AssertionError: expected '' not to be empty\n   at Object.eval sandbox-script.js:5:6)"
            }
          },
          {
            "assertion": "must return `200 Success` status",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 5,
              "test": "must return `200 Success` status",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:6:6)"
            }
          },
          {
            "assertion": "`verifiable_presentation` persisted to collectionVariables",
            "skipped": false
          }
        ]
      },
      {
        "id": "172ac725-781d-447f-a8b7-0f37199b20a2",
        "cursor": {
          "ref": "6560e78f-8a97-4003-abbf-87162f9756da",
          "length": 7,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "8bf3346b-3a4b-4102-a014-71725cf431d3"
        },
        "item": {
          "id": "172ac725-781d-447f-a8b7-0f37199b20a2",
          "name": "Complete Exchange"
        },
        "response": {
          "id": "225e0cc1-1d40-4f89-87e6-181cf50d3e1e",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 3827
        },
        "assertions": [
          {
            "assertion": "`verifier_access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "must return `200 Success` status",
            "skipped": false
          },
          {
            "assertion": "verification response should be 'true'",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "verification response should be 'true'",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:3:7)"
            }
          }
        ]
      }
    ]
  }
}