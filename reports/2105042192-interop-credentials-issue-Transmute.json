{
  "collection": {
    "info": {
      "_postman_id": "a5159284-61bd-4327-aef6-c953ade4b078",
      "name": "Credentials Issue Tutorial",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "777a9dda-2772-44a5-8134-a40ba61579cb",
        "name": "Get Access Token",
        "request": {
          "url": {
            "host": [
              "{{TOKEN_ENDPOINT}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"audience\": \"{{TOKEN_AUDIENCE}}\",\n    \"client_id\": \"{{CLIENT_ID}}\",\n    \"client_secret\": \"{{CLIENT_SECRET}}\",\n    \"grant_type\": \"client_credentials\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "506b3ebe-aaa9-435c-9db4-71ee07c25733",
              "type": "text/javascript",
              "exec": [
                "pm.test(\"must return `200 Success` status\", function() {",
                "    pm.response.to.have.status(200);",
                "})",
                "",
                "pm.test(\"response body must include non-empty access_token\", function () {",
                "    const { access_token } = pm.response.json()",
                "    pm.expect(access_token).to.not.be.empty;",
                "});",
                "",
                "pm.test(\"response body must represent `Bearer` token\", function() {",
                "    const { token_type } = pm.response.json()",
                "    pm.expect(token_type).to.equal(\"Bearer\");",
                "});",
                "",
                "pm.test(\"returned token must expire in the future\", function() {",
                "    const { expires_in } = pm.response.json()",
                "    pm.expect(expires_in).to.be.above(0);",
                "})",
                "",
                "// Access token must be made available to later requests",
                "pm.test(\"`access_token` persisted to collectionVariables\", function() {",
                "    const { access_token } = pm.response.json()",
                "    pm.collectionVariables.set(\"access_token\", access_token);",
                "})"
              ],
              "_lastExecutionId": "a322196a-13d4-4390-990c-5c6c7c5fe3c8"
            }
          }
        ]
      },
      {
        "id": "9a4e16a2-2a7d-4c22-b84d-311d3f29efde",
        "name": "Get Organization DIDs",
        "request": {
          "url": {
            "path": [
              "identifiers",
              "{{ORGANIZATION_DID_WEB}}"
            ],
            "host": [
              "{{API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "babe0e83-35bf-4906-a1ad-e0f581cf6134",
              "type": "text/javascript",
              "exec": [
                "// Some tests are skipped unless prerequisite tests pass and",
                "// update these variables to `pm.test`.",
                "var whenHaveAccessToken = pm.test.skip;",
                "var whenResponseIsOk = pm.test.skip;",
                "var whenJsonIsValid = pm.test.skip;",
                "var whenDidDocumentIsPresent = pm.test.skip;",
                "var whenHasAlsoKnownAs = pm.test.skip;",
                "var whenAlsoKnownAsIsArray = pm.test.skip;",
                "",
                "pm.test(\"`access_token` collection variable must be set\", function () {",
                "    pm.expect(pm.collectionVariables.get(\"access_token\")).to.not.be.undefined;",
                "    whenHaveAccessToken = pm.test;",
                "});",
                "",
                "whenHaveAccessToken(\"Status code is 200\", function () {",
                "    pm.response.to.have.status(200);",
                "    whenResponseIsOk = pm.test;",
                "});",
                "",
                "whenResponseIsOk(\"must include valid JSON response body\", function() {",
                "    pm.response.json(); // will throw on parse failure",
                "    whenJsonIsValid = pm.test;",
                "});",
                "",
                "whenJsonIsValid(\"didDocument must be present in response body\", function() {",
                "    const jsonData = pm.response.json();",
                "    console.log(jsonData);",
                "    pm.expect(jsonData).to.have.property('didDocument');",
                "    whenDidDocumentIsPresent = pm.test;",
                "});",
                "",
                "whenDidDocumentIsPresent(\"alsoKnownAs MUST be present\", function () {",
                "    const { didDocument } = pm.response.json();",
                "    pm.expect(didDocument).to.have.property('alsoKnownAs');",
                "    whenHasAlsoKnownAs = pm.test;",
                "});",
                "",
                "whenHasAlsoKnownAs(\"alsoKnownAs MUST be an array\", function() {",
                "    const { alsoKnownAs } = pm.response.json().didDocument;",
                "    pm.expect(alsoKnownAs).to.be.an('array');",
                "    whenAlsoKnownAsIsArray = pm.test;",
                "});",
                "",
                "whenAlsoKnownAsIsArray(\"alsoKnownAs values MUST be unique\", function() {",
                "    const { alsoKnownAs } = pm.response.json().didDocument;",
                "    pm.expect(new Set(alsoKnownAs)).to.have.lengthOf(alsoKnownAs.length);",
                "});",
                "",
                "whenAlsoKnownAsIsArray(\"alsoKnownAs[0] must match API_BASE_URL\", function() {",
                "    const { alsoKnownAs } = pm.response.json().didDocument;",
                "    pm.expect(new Set(alsoKnownAs)).to.have.lengthOf(alsoKnownAs.length);",
                "});",
                "",
                "whenAlsoKnownAsIsArray(\"alsoKnownAs[1] must be present\", function() {",
                "    const { alsoKnownAs } = pm.response.json().didDocument;",
                "    pm.expect(new Set(alsoKnownAs)).to.have.lengthOf(alsoKnownAs.length);",
                "});",
                "",
                "whenDidDocumentIsPresent(\"verification method controller must match did subject\", function() {",
                "    const { didDocument } = pm.response.json();",
                "    const vm = didDocument.verificationMethod || [];",
                "    vm.forEach((m) => pm.expect(m.controller).to.equal(didDocument.id));",
                "});",
                "",
                "// Credential Issuer ID must be made available to later requests",
                "pm.test(\"`credential_issuer_id` persisted to collectionVariables\", function() {",
                "    const { alsoKnownAs } = pm.response.json().didDocument;",
                "    pm.collectionVariables.set(\"credential_issuer_id\", alsoKnownAs[1]);",
                "})",
                ""
              ],
              "_lastExecutionId": "e9db0359-c213-445c-8e44-870d5fb60316"
            }
          }
        ],
        "protocolProfileBehavior": {
          "disabledSystemHeaders": {}
        }
      },
      {
        "id": "eeb150f7-9601-4b04-a9fb-a04cd27640c2",
        "name": "Issue Credential",
        "request": {
          "url": {
            "path": [
              "credentials",
              "issue"
            ],
            "host": [
              "{{API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"id\": \"urn:uuid:{{$randomUUID}}\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{credential_issuer_id}}\",\n        \"issuanceDate\": \"2010-01-01T19:23:24Z\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        }\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\",\n        \"created\": \"2020-04-02T18:48:36Z\"\n    }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "f165214d-3b65-4cb5-9902-0d9a005302fd",
              "type": "text/javascript",
              "exec": [
                "pm.test(\"`access_token` collection variable must be set\", function () {",
                "    pm.expect(pm.collectionVariables.get(\"access_token\")).to.not.be.undefined;",
                "});",
                "",
                "pm.test(\"`credential_issuer_id` collection variable must be set\", function () {",
                "    pm.expect(pm.collectionVariables.get(\"credential_issuer_id\")).to.not.be.undefined;",
                "});",
                "",
                "pm.test(\"must return `201 Created` status\", function () {",
                "    pm.response.to.have.status(201);",
                "});"
              ],
              "_lastExecutionId": "8d253bf3-63c9-4035-9546-9b9c8715f11a"
            }
          },
          {
            "listen": "prerequest",
            "script": {
              "id": "aea9a5ce-408f-4ac5-9ee3-6f54c771967f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "28a7ec5b-b6d3-4c40-be13-4bb318e70d82"
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 4,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 19,
        "pending": 0,
        "failed": 3
      },
      "testScripts": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 6282.666666666667,
      "responseMin": 421,
      "responseMax": 17120,
      "responseSd": 7671.683619359936,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1649278505204,
      "completed": 1649278524169
    },
    "executions": [
      {
        "id": "777a9dda-2772-44a5-8134-a40ba61579cb",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 3,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "1cdf56bc-e64f-4f05-bdbc-d03fc6215451",
          "httpRequestId": "fc397108-e9e9-4833-b5b4-854eee072be7"
        },
        "item": {
          "id": "777a9dda-2772-44a5-8134-a40ba61579cb",
          "name": "Get Access Token"
        },
        "response": {
          "id": "8959c2e5-891c-48c3-9ce6-0d29d43b7038",
          "status": "OK",
          "code": 200,
          "responseTime": 421,
          "responseSize": 807
        },
        "assertions": [
          {
            "assertion": "must return `200 Success` status",
            "skipped": false
          },
          {
            "assertion": "response body must include non-empty access_token",
            "skipped": false
          },
          {
            "assertion": "response body must represent `Bearer` token",
            "skipped": false
          },
          {
            "assertion": "returned token must expire in the future",
            "skipped": false
          },
          {
            "assertion": "`access_token` persisted to collectionVariables",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a4e16a2-2a7d-4c22-b84d-311d3f29efde",
        "cursor": {
          "ref": "5c12ca56-79bb-4b1d-8c83-18f9ef128f6f",
          "length": 3,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "8f831db0-0c00-476a-8f57-19bbcbb0fc47"
        },
        "item": {
          "id": "9a4e16a2-2a7d-4c22-b84d-311d3f29efde",
          "name": "Get Organization DIDs"
        },
        "response": {
          "id": "77983045-e738-4e3a-9daf-eef950a578b1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 17120,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "`access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:2:2)"
            }
          },
          {
            "assertion": "must include valid JSON response body",
            "skipped": true
          },
          {
            "assertion": "didDocument must be present in response body",
            "skipped": true
          },
          {
            "assertion": "alsoKnownAs MUST be present",
            "skipped": true
          },
          {
            "assertion": "alsoKnownAs MUST be an array",
            "skipped": true
          },
          {
            "assertion": "alsoKnownAs values MUST be unique",
            "skipped": true
          },
          {
            "assertion": "alsoKnownAs[0] must match API_BASE_URL",
            "skipped": true
          },
          {
            "assertion": "alsoKnownAs[1] must be present",
            "skipped": true
          },
          {
            "assertion": "verification method controller must match did subject",
            "skipped": true
          },
          {
            "assertion": "`credential_issuer_id` persisted to collectionVariables",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 10,
              "test": "`credential_issuer_id` persisted to collectionVariables",
              "message": "Cannot destructure property 'alsoKnownAs' of 'pm.response.json(...).didDocument' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'alsoKnownAs' of 'pm.response.json(...).didDocument' as it is undefined.\n   at Object.eval sandbox-script.js:11:2)"
            }
          }
        ]
      },
      {
        "id": "eeb150f7-9601-4b04-a9fb-a04cd27640c2",
        "cursor": {
          "ref": "ac928d46-176b-47bc-b6c8-ffbec88d6816",
          "length": 3,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "26c4d168-754f-4c22-bdd5-b0d7c1b02dbd"
        },
        "item": {
          "id": "eeb150f7-9601-4b04-a9fb-a04cd27640c2",
          "name": "Issue Credential"
        },
        "response": {
          "id": "cfd4fb90-05f2-419e-86ce-54199d2e491e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1307,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "`access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "`credential_issuer_id` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "must return `201 Created` status",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "must return `201 Created` status",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:3:3)"
            }
          }
        ]
      }
    ]
  }
}