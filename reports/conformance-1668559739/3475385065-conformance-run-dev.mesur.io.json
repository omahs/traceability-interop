{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "1f23ac45-233b-478b-94a2-b19082a901b9",
        "name": "Clear Cache",
        "item": [
          {
            "id": "c5358f03-ac3a-4e39-81ec-8d741fa15245",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "97aa7add-b58d-425b-a898-aaa8dd75325c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "5932c135-4926-4b91-94b4-5f478f5ee234"
                }
              }
            ]
          },
          {
            "id": "8ebf008c-9f70-40a8-a9a4-2df0b04b8f4e",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "68650f54-3ef3-4138-9c15-1bb0db8ab7ba",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "160179e1-1528-4ac8-87a3-e7e93ef69ac2"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "1e6b8bf2-b325-44ec-86fe-2c4755ce712a",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "47691f06-30cd-4ae3-9bdc-8728337f1c84",
            "name": "Positive Testing",
            "item": [
              {
                "id": "da5ae420-f972-41fe-be25-53f7da403581",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "28a77798-caac-497b-9a30-121658456aef",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a44bc206-5845-4068-9198-ba72577a3fca"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "faa018e4-769b-458a-8c44-b3b1931b59be",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5641780e-102f-43f7-918b-c8eb4cd573f7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "837ec8bb-247f-4943-ab05-27d4afe9b6b3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "97f501ca-e064-4e2a-8b2a-a8d77ca5a7c3"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "83eb25c4-d237-4e77-bd18-fc4330bbb7ba",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "c808c5b1-aa6b-49ce-97e4-6dc464d94e4e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "021aa748-9165-49f9-8ec5-f4c88452e0db",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4e931dd5-8a7b-49cc-8042-20453b88eef8"
            }
          }
        ]
      },
      {
        "id": "12ef85c4-81c9-4b19-8f0c-b725f1138d54",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "ac44363f-df58-4173-ac40-593cc63139d9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bf0c9705-f365-4ae9-ab1d-d9bb8eb413ae",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4f2f4f39-e1a7-4170-b6e1-06ac7e3a9428",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1059134-165f-4ce1-84a9-a28918e2e5da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "86bcaa36-eb8e-4a1d-b4ad-edd9ebfae394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82c4fba1-d9a3-431d-a7b5-fe49563229d6",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e30bbe1-4ab4-4072-833a-099cef787a63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "749df6f8-b1d1-4aa5-9a74-edfc216642c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b599b28-6e2d-48af-98de-f516852f7310",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82c8269c-9bb8-428c-a48f-3c18e6fcad9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4f66a99b-21c7-451a-ad9a-c2568bea9d36"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "20d2d8b2-03f5-4b4d-9ea5-26b3b5684b7f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "66c5f6a4-9eba-4fe8-b573-5b464f3cd080",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "200b5737-b213-4bff-abad-7d1f63fdee4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ed33b7c8-3e97-463f-8051-2b9316bd0fd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "571beb56-2158-4ea0-95ec-3f43ed4ba63f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0d67d35-0192-41c4-a702-27c46d313c34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69465ba5-d25f-47f5-af45-8f7f0c26ec5a",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecbe9431-a297-4f3e-943d-46acd5a1ead4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bb5636ea-b8f7-4887-8b48-9a01f4717a64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56f80fe2-389a-4445-b8d0-c04b50fa8686",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "48d4d902-da1d-41b9-acd6-a4f57b0a8437"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b3824e7a-42e8-4427-92d6-d73858df259f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a88fa390-2f7b-4ccc-863a-bbf728c6a7b5",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2e56c3b3-af68-4c6b-b75b-5bafd7fe1fc2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "b72b37f7-b801-47ef-a6cd-8d0b86975b7e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "74840ebc-6670-4b74-bdac-e8557b2c8d79",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "58e6d449-afc3-4809-be59-ce0dff40259a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cad43c63-41be-4520-ba8c-0bfbf51bffde",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6d6ef17a-bcbe-4bf6-b8f4-5280955a8199"
            }
          }
        ]
      },
      {
        "id": "44d70829-067f-4b08-8bd2-f848594c1682",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "a19dacfc-d17a-4f1a-892c-5699e2c40a61",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f7b4d76a-a4dc-4a32-8a1a-ecc7bebd43b8",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "f74a7874-4e81-464b-bc59-abf1420cb10a",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe8faf3b-54fd-4784-8813-191d817f76bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1030857-17ba-4bae-8928-717e6d765481"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a49298af-fb44-4c04-8d6b-67a227137cb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b7ba6820-06a6-47f9-9877-16ebe8448c95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3131fc2-786f-45a8-a075-6539a9a3977b",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b30637f-b30d-4aa3-a38b-c393c21c0689",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb491718-f355-4cc5-b9c6-c7a0fa610f7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8b0e803-7fb6-4110-98f3-d471492f990a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "371cfbb7-0b46-4503-b524-b3df50bc4796"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ef4c6d4-16fa-440c-a739-c0d86d3c0217",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c120654-cfc4-4c5f-a0da-23979064d8e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcd58d43-1c8c-4666-a109-9cfd2cb21da8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "981149e9-72ae-4b4f-917a-79efad37120e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "931724fd-b404-466b-9dda-3d7e8a3494fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "607e5e01-a066-47ca-a7e3-f45222f439b7",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42367f75-f75d-440b-a011-b511850bb362",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a60bb135-e532-4032-a87a-730f5de631c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf9adda1-6612-4747-a825-08d258adaeff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "67ab2b40-14f6-4e77-8303-a51cb3c35800"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27652f3d-bde1-468b-8f4c-fd1d2f5e2109",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1912f84e-fdd5-4e99-a60f-7fef53a3f792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fd94d9a-d435-45ee-8bfd-429d5ef2eeff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cb25bd4-57d7-4a83-a83d-7b53206dfee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "28747b2f-8d9d-4c8b-919e-529bd522e8b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f985923-5ef7-4086-921f-25feae2f7a5b",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1abe9b90-2f99-4e55-b4dc-f04a111581b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3260a1dc-01dc-4bf9-a128-5872b97c65ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59f1a1df-2abb-425c-8c30-6e7cd0f74674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "09ee2d82-6c84-4bac-84e1-75ae6b2d304f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f7ecef5-4d80-46d8-b3fc-30c5d88e4232",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a298089-86f8-479b-b21c-0079254ecc25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ec02908-f52a-4aa4-b53d-50d6de5f7afe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a285a90-7336-4bea-8430-878a9e450bac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "12255281-6a74-4578-b746-480957f30195"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42a06625-0aff-47fb-9251-cedba6fcdfa1",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bafc2b7-4e6e-4633-a058-b38a90084509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e85254ba-2588-48a2-9dee-cd8599e18682"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ba2e7cb-a1f1-4b9b-aae8-3b7e99ee7401",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6ceb545e-5a07-4f26-b94b-9fd8c613e182"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbae40e1-de47-49df-8613-060bbcf556d2",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dbbbf14-9cb6-4cdf-afed-84781bb0b481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d9f4ca7-cf61-47af-8988-d73c0fa8b496"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c784818-fe0a-4753-8b42-5982c7a7f47f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "949e0394-0fcc-40b8-9118-9a56db883773"
                        }
                      }
                    ]
                  },
                  {
                    "id": "058c6258-8f04-4b73-a596-8f14f68eb104",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e837e5d-2d26-4654-8a98-bd441e2f17f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fddfe3b3-9caa-4e79-bf66-759b8c14e536"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2681066d-b2c8-4606-9293-28317a94ed6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aad67cc8-ea65-44c1-bbee-c29dfa380bb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ace86495-d771-4552-b41a-2ac9bcda7b5d",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46c981c9-9383-428b-8a4a-4aed6e6557bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d41e053c-48aa-4895-8bde-43ece4d5e9bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce724af8-b190-482d-9d52-1a9740bc11df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "078eda43-4375-4784-8485-8480baf728e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebad0d18-4462-460e-8dcf-74c229c7eba4",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4329e474-2588-4759-9c26-76ee0d1612ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68cc4226-1dab-4407-9471-a0575ef1792a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cf07224-bf6a-46f3-9ccf-0f9350020298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b92581c9-6a8e-4972-a7b0-626942a2cf8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94935206-f329-4f9a-855f-532bb886ffaa",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b80b3893-1499-4d67-99a6-e601ea89a196",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4eb7005b-07c2-4902-a954-84233c7dfde7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb6ce017-21eb-4ed2-90ed-6ded7e843962",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d3c3754d-d8dd-4fb3-a83e-48547311e2ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "086267d3-eaa5-4bfb-9414-9bdc8df9e8dd",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24f858d1-0f53-4f26-8a19-c2ccbfba4274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a56dd0d0-1ac2-4e11-a834-3f47ba3fb5de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7a7874c-6223-447b-9543-708d41694733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4cb7fec3-35f0-4851-badb-82155ac6f6f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b1dc553-0972-4890-aab9-1fb84bebace0",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22f56020-d48b-4f01-b64e-7d0cadcf7067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "048e5b9a-9d68-40b8-aff3-6266aed8e1ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb3ff43f-b653-422f-ad5c-cd18f8377d6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f5126d06-5f49-4f25-9cb6-ad59347d71b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb7c7d2c-d42d-4364-8a98-f7f804d59943",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d0217b1-3fbd-43bc-aabf-c52dc9d115c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc71903f-aee8-4828-938d-3acb94b1d6e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38b76a1e-64ee-4836-ad91-81bc204afb9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7aa867e0-5e43-4df1-8fd9-7c2744089b23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f6b6231-dcb9-42fb-98ce-23ee435d14f2",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9ac8f16-74fa-4e74-a240-27c49ffd68dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37b6005f-5f08-4bc5-b6d5-58d2934f048d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cf1e5c0-a700-4721-9948-81886c850392",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "92deb2c0-7c9f-4ec6-9a1f-b0d25ca36335"
                        }
                      }
                    ]
                  },
                  {
                    "id": "056de8bc-31a7-400f-b7c2-9ad32702dbba",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34817b3b-2d13-470c-83eb-598be6ca1e28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40e696f1-8019-46a2-b323-abf5202fad46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c007efd4-8e69-4000-bd81-ca51e7d75c42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ebe3f01-a8c7-450d-ba17-a18be54ac4e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4879183-d966-4432-a861-4a93cca25c24",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f274181-d16f-4974-aef4-3a57f70772fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36a6f710-cd00-42dd-a037-3baca426a17c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cdcd504-cce6-4509-a1fc-84d027dd3e0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5aeff88-fb96-4cd6-9468-6afd9619e92f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cb45364-ad4b-45ad-9a8d-3576cc4faaa6",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdb8306a-c5c0-4993-9b46-2c4b75fd6d95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "776db382-ebc5-4de7-a29f-01672fdb8cf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ee2d676-afcc-4d0b-8f1f-128205a0f56c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5670a94a-c8a4-4431-8324-429c438b43e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c43e8ebb-604e-4dac-a1e9-d10688d18d65",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fb094df-96d1-4824-91ca-6c3304bd9863",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21bae6a7-c754-4eae-a5cc-b174cc5ec3d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "546bdfc9-773f-4954-9936-2bcbe5142c2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e21af69e-d53c-43fd-9fc4-2077e9736d2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03f8ab31-a099-426c-8790-f4339007fc1b",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03085abe-7b42-4d61-9662-6b4a1883c8b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "062a0547-29c1-4021-9c49-cb26f5da3170"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41ed9357-848f-444d-aaf6-ac05f5fd874c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ef3f203a-34c3-4afb-9679-4258fb7ca6fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1d07f05-bca4-4e5a-a0eb-d04bda9af352",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddccee6e-ac9b-4a74-8cab-b7e9c51f9bf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "985eb832-20c3-4f2a-be16-7422f7afa936"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a20d7c8-20fd-4084-876b-64d3b2584da7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cf202187-299c-4453-ade8-8c6186073a87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97de0244-cadc-4c76-902a-8e471fdac0ee",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e89019a2-5e67-49f0-94f0-7c3175731eed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20bfb61a-9be2-4259-bde7-9b7812995e7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c17159c-71a7-4c7b-a9db-1bcd5528face",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "26272d5a-3264-4f5b-9cfe-6518d69cc99e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ee0baa1-ad53-4a7d-8141-f88a9949ada9",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22f35e12-4c40-497e-aca0-b28e67196f96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b25f5fae-ce55-464b-b06b-f114a705b5c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f938a2b0-9e51-41d1-be34-f75eab0da694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "819174ad-8b14-491c-8ce1-9f4e101b4e52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eb7884c-3a12-4fd9-af13-eefe1d469e6d",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ae4071b-377f-4c0e-8d7e-0768cf7d109c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03a1c62e-2990-4e1b-b501-865704b14a28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db529662-aad1-43a1-91e5-ab7d3626b437",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d150bf86-b738-4488-a318-465b8ca114f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59ac48f2-81b1-4ff6-83e3-70227591f9d2",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "115a995b-2560-4783-aa5f-9d49a8f39a7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7d485ca-89b8-4ae2-a2b6-596deea1d3b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb34c173-5b81-4101-ad7b-9cdd2e9acb04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d92f3ae-bf10-4cfc-84cd-fd93f54f76e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef4f97d5-52ba-4062-892f-4db141b23467",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3db8639b-86ed-4288-8947-56982065f3ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b52934f-0d71-4ee9-a0ba-2fd16e97ccd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c88e07c-1ada-4fad-aca7-3bbe7470cb91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bfd9222c-a7d0-40a2-a216-a5be5154072f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d5f0e29-0151-4fef-b86e-b49b83c95331",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "318ad109-a15a-421f-b328-7cd9a2a237d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "149ae0e4-57d5-4033-a7a2-46fc0cc17610"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a727f18f-e20f-4516-9395-1e170559ecc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4898be6-699c-4ec2-bee7-bd9496fb5cbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d734c45-221b-4956-b183-3d895141ab80",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2ebcf8c-3a58-4444-b769-01ede5e3b98e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b497042-2521-452b-b1d5-e18c205bf67e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6345c117-4445-49c0-8442-13a78343a9f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "210dae50-ecd3-469a-8dd5-9e0c36508777"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e0eb801-21ad-4653-acd8-0f47d71c8dc9",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41a61cf5-81db-448a-a739-db4bfb7257fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d31dc2e9-441b-4ff4-855f-bf5aca7097f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be3f6704-6a4f-44ed-90bf-4f89adc91aec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a91d5225-d8e0-43a3-b197-f0a8440e10e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69bc01d5-f8bf-43de-86dc-b4934106d67c",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a7f5481-c1ed-446c-a25a-c0fd1ab75e44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fb160e7-bbff-4812-91dc-c360939cce97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86609864-9a83-41fd-8b2b-7cd949c35d13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3932d442-5365-4683-8419-88228b648bdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70437880-4c10-4cf6-8e51-51c0ae182374",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efcc86fc-e9b4-46f0-9a66-b009159ad468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f32ea968-a631-4cdc-9d0d-d710be4e7429"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5de3c07-774a-4635-aaac-abd438bd5c53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dbd8f4e7-62af-49b9-8c86-20a577fe5f2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61081741-095f-4a37-90cc-f44b82ab7e0c",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ea47b2f-6377-4323-adb5-d1cf2d2ab9b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8af860e8-93d5-4b9d-921f-4b6f2b97f7ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "287a1046-403b-4dbd-9d49-72302b8765a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e12413ea-5717-4de6-953f-e221c11bece1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "421e685f-5c32-414f-adf5-22fcc4f0774d",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bde90889-f2e2-47c5-bd67-9435dd2edb53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a87c2db6-ff96-4b90-a3bc-6ad6344a804e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b315c48a-e363-4f4f-b110-d294ad67f4b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "2da2e0e8-12bb-45c7-9c41-7e32e22238a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4369a35-1b9f-4796-b74b-49754862f50d",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77f431f9-5762-4941-b995-814d3de37c88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7b089f1e-9895-492e-b447-af4e9613757f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fe76e51-6ce2-4941-a9f7-dffb7c18a998",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "33e8fafa-39e2-46bf-bb92-05b173df9625"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc0182a7-2a6c-4dbd-b3cb-f9bb7fb1895e",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da478995-dd0d-4866-9daf-85ab2fc1ffc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02c9a2ac-c817-47b9-9e94-09d58b806249"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2595c5a2-f979-4758-897c-c0d599a8ad30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ec3b41f4-cf9c-4691-b30e-52b67fc0837e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cf11280-8dcb-4656-846b-1cf8659a21e5",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f3cea42-0c12-45da-b350-66c7c279f3bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d5a609b-8052-4dd6-8782-88dfbd460e97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fce68239-09bd-4190-8dc6-640e0e01880a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "73446e3f-e6f6-445b-b698-18d3a5ac7aa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "debe89c0-9b5e-4879-ac94-3eea12a2aa89",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "930b90c4-d32d-484c-aaea-ccc0499da7f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "751af45c-7de4-43ec-9ba0-d23951d3fe24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d69ddc49-289a-4e4d-bbba-cfb576cedccd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "cf2bc933-8856-40c3-9f93-813434de50bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02923613-00d4-433d-8012-91ccc40ded2f",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd79d5ff-8557-437e-86c0-ab30c63e5c45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fc26c03-b68d-4d2d-a8f9-49b6cb70db64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40b92ff6-5bd1-4ad5-9bd1-6a77f6b27b33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "22861e7b-37e9-4e65-beb6-b90b7f3760a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e959014-4273-4da8-b51b-16fe76c27601",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63b63029-f8bb-41c6-ba89-a670e29faa6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3e01666-1bbf-4e04-853b-4d83a4edf1cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3d685ff-cb38-42f2-8ec9-eabbe5611b81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "84f10da7-0ac4-4676-8f9f-c6e1f0d83317"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bea0214b-b659-4c26-9d5f-05ce7bae2c84",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55dff117-c461-4927-be2e-df70ebdccac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fd97382-50a8-4fe1-8c0b-893bbb973b70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36211d6b-5360-4a26-b3f9-496fd7c3aa23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "16376bde-cda1-45a5-ad09-0ed933178b85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23e55717-f3e6-4efe-b2f8-78c2a0e32daf",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fb78694-4ef7-4838-b4e9-407b1f420e07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6f66297-fead-4092-97a6-69acb41ebe92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f75b0c5-549e-41eb-b7b3-c74061ae6283",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "a52c2b0b-f5f9-4bff-808b-17dc454540fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5092b05a-06b9-4ccb-89d6-1a08fc614516",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23b0f7cc-e2fe-412f-a557-5bf8105c8916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc4c763c-f4c3-4826-9b5e-415134c7d853"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc285a73-a825-4efa-a0b4-38045ba3cf71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "979200f0-b3d8-4238-a33f-7946e5f8d1b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99ca13d7-cf73-471b-ae75-9ab665bc1cef",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0902528c-5ea9-4cca-8cd2-1145f27f20c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c701ff8b-0348-4723-9618-8138fa779635"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "227a2879-a95b-4417-aafb-8f4b7a842d42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa136b87-5582-468c-be5a-3965f7721d79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f610467f-7548-4daa-b349-d703c8a756a6",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "705ab1f3-b6cf-42c1-a046-d14011207dc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2348ed3-3e26-4f57-a448-045870a0b02d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "667ac2c0-b1d6-4dbc-b62e-94d75c44c30d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "54631dcc-3e10-4c43-b4be-93a527e16d3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdcc1c5f-a6d3-4997-93f1-f3331fa90447",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb82d50f-55ea-4247-9c82-b54f74932c45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b9f6c2a-d7a2-4d95-9f66-d5be786a54a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "692b02b5-2cc6-4880-b15b-fdcadc9fb185",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d9510ba-f431-48a4-ae74-c67430ed5133"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe999a64-5a45-418b-b55c-9195aefa4799",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1b9e9d4-72b2-4f8e-9ff1-bfd47a47a174",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7b774f0-8d05-4010-9012-cc65a2486e51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "952380f7-a2d0-4a8f-a9c5-a336da24c606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e67b523b-980a-46c5-acfa-9ff0093efa56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87026448-3bf1-42d4-8a9e-4c4aa5a518dc",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6429a41c-ade6-4402-a54c-d2e53963edb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff3d10ff-e7c3-4b55-a5b9-5bc0319ace6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad303934-adf8-4782-878b-1fb2f6f333e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b08c0ab8-7df2-454d-b527-358d0ed8b273"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36411230-1836-457a-8465-563680b87ec7",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c86f0604-5348-49e1-a7a9-24ad7b9724d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62536694-aefe-40d6-9f48-24abe23bd77b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db4f954e-16ca-4895-8939-dbe1b1899d3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "19a7db2e-e3ac-4316-9c95-bc1e78565fc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4ccd2ee-cbe9-464a-984d-ec8e662b2690",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc550306-0781-4212-a460-a75091b1f149",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fdd8fb9-aa86-4854-8cff-2c94c3ad9b30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffd10c60-5733-4fcd-b351-7d094b106dd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "a85d2cc2-eb00-461e-bb36-7112de4027c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "259ded7e-7d49-47ed-8a75-6a0915ef9f05",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e71c98d3-a3b3-43ad-b0fa-60f52ce09920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fb2bd18-5f21-48e8-93a2-9a048759962f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6783f9d8-4979-47d2-8231-114aa6122ac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c5f43df-482b-43f7-ba8f-d0b17ab6909e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ee05ace-526c-4a65-ae33-e8416cd27b08",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a4dacee-4230-4aba-bb3b-5f67abf06f95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cec86ea-c09b-4324-b9f2-854f6ea56871"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5255a244-bf36-4496-b39c-f769813c8251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e98a551a-83da-4e5f-820e-8e4d720a9254"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc5f3d71-62b0-4246-bb92-657d27dab94c",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "066e4b91-20d6-4cc8-aa86-a612c4829221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4310a2e2-b7db-4c5d-9077-db130d584341"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88d7bf15-263e-4998-814e-fb5d97acfae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5daee277-fd10-48a8-93f9-e29ddd6b6f92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44fea8b2-6699-49ae-8b4b-513164817140",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6f83cf8-eb28-451c-b89a-eb8b1d96de42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1687c19e-465e-42d0-847e-325b611541b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dfb602c-2b04-4813-b541-2fd4341ee2af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce0f5afc-3b6f-45a6-956b-6d4ff4868e7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f928d68-4bfd-459b-b6b4-791b0488f86b",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a81f9caa-4f1f-4ae1-9f97-7d8a3969b37d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23610e53-7606-45e9-9ffa-c8fe29f96b4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f3f9b50-6843-4b87-ae17-670972942b36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "b27f8cbf-429d-4707-9a77-c0357aacbbd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dec3f493-38ad-4197-9d36-9c825af64561",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d07e3a24-95c7-4f98-936e-f70c030cc168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28e5947d-0b3d-4696-9d8e-2dfa797c04cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abf1534c-bcf8-41cc-8bad-390f950b0c1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1a5d86d6-8241-49c8-baf6-bfe92b7adc4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53e166a5-7ada-4c58-9f66-3a5494fc55de",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a329055-1af4-4118-a22e-4467e32828e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1becd238-bae8-411e-a387-3524cc5622ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c486cee-b3e0-4e27-a1fa-42a77f68afb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "96422270-1d9e-44b2-aeb0-405e2be5519b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ce72897-4b33-454e-9d68-6951a5d59814",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94b3fb37-d510-405f-9833-5c4eda1b026d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cbfcdd3-b1fb-49fa-9b99-8c4c1583424f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d5dfd00-d13c-49df-96f9-9d4c07b45d82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9a2fab9b-02ac-447b-93da-cfc451c4f131"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab18b63f-c7ee-4803-9bab-be0522f2aee7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f80234d5-a103-4dff-b821-0211195d7e8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7462505a-92a8-4cd9-891d-6fee42868d71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e51e6ec-3529-4e90-9ebd-547516ae13c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "46fe5774-8656-4811-89e1-822ce0d2ddbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3770d16-c064-4815-83db-021afc781f51",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d7d97bf-2af9-452c-b1ca-2935f15ef02b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec602ecd-f032-47e6-83c0-cccc0069373e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d34042b-1248-4c66-87c0-86ee2f7ddf9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "031c2387-68d7-434d-bacc-57c314d5a1a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e875313c-0568-41ed-92af-2e09b3ed638a",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffef7eb3-51af-40af-87ba-2a1fcb4d01b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdef8809-6beb-4e4a-8dad-91cae75bd8ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f39e5fd-179a-4a03-93b9-1beeafd91f2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "17f33050-76b8-4315-9c09-33f5ccdee24c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32ca87a2-30fa-4432-af0d-5930dd508ca3",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5786fa27-f401-45e8-a94c-a1215ed9cb6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "300a21b7-4f8e-4b19-96de-220ab1560500"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cabbaafd-492a-4541-b3e8-2f2405b878b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "11be24d8-af01-4390-adba-277b5bd0e022"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f71e9359-b347-47c6-924f-9346dc77577e",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fd78a54-3585-441e-8972-95f33d00b6b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12ab8aa7-2690-4f26-92c8-5ce3a3b16684"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1da2742-9815-47e3-a015-5dc9a35e8295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7eb46918-2649-40b3-8c72-b5ec0c5b3caa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfff526c-2219-48dc-9697-046feeb3e17c",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc1cd206-c36b-4f05-b6f2-86c744bbcce6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2eb1a3d0-dacf-444c-b514-c4f598e8328b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7f6d648-8814-474d-ab65-3f7c5065675b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "21f55915-b5c0-457a-b902-ed1998f49b2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf08d690-39ab-4bcc-b6f8-c9ed415a2691",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4368d457-66ef-4819-a71e-828a8a25c019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fab92683-250d-4d5a-bcbd-682cda0b6906"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a41926a1-0b8d-4bae-9742-9058cabc84bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d825e2b4-dd5a-49df-a155-af8089ad00a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e970e76a-7328-4b2a-a493-6d59cfe9dd58",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c72a1c78-a7ce-4466-a5de-dfa9a2b0d969",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4096de2e-593a-4bde-a480-11d92ac6f1f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03b1a2be-c0ad-48ad-8ec5-75cd1509045f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "205ec85c-db6a-4747-9a1f-7b2041db94dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "222d9e69-3c46-48bc-8ba2-ad4efcc47642",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "696c2eab-7096-484b-9046-a5456da9dd4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "135f6d55-068d-42b9-9c9e-706f60621692"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c1e0cd4-f5fe-4182-b90f-6fae12144e11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c359836d-bed8-4f1e-ba7f-39b952d2489a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42977226-6161-441f-8f2c-b607b1b0eaef",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17a3633c-c7ff-471d-9bee-f4abb39484eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fef34b0-1500-4761-bea2-5df7a0a11ff0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb689a9c-7de7-47a1-ae1c-4a1343f2493c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "44fe9714-99b4-41a2-833b-5ca3a1eae57a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e57e380-c1d1-402e-ae9f-1be7ab5d0239",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49da9675-8889-47b8-8eee-17c8f93e04d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f7b798b-1a9e-4252-b4af-101378708dd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c731b71-37a3-4449-8419-f86c1774a083",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "48aabcdd-7c1b-461b-a427-87f64070e03a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dee9cfe-73b4-452e-9fba-ad1610e73ef7",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf066882-d971-4ed8-afcc-043203901574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa5d9478-2504-4d25-b2b9-32c5a44f7fcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "050580a9-389b-41f4-a2d1-bedc938e417c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f332ccb3-4c0a-48af-b9fd-a3540b42b318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6afa4625-f71d-43ec-84a1-a396857283fd",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb5ade73-d212-4f5d-a680-95b2d0c618f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e78e638c-d175-4e16-b6b5-a17e562c4cb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c0966a5-eec6-4b1d-854a-de5945d48346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c5bea43-eef7-43a4-9e3e-b88f5104209f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a65768fb-8152-4480-931e-9194bd70478c",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95f47a73-355e-4ab5-a686-4bc6ac67d714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c385dbd3-5ea0-45a8-a7ea-12ec60288831"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19b656b7-f767-42fc-8fd9-de025eb186c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "71de98c8-729c-442a-9088-b8ec97c7aa07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94964e01-3dfb-45ed-9e3a-844c90b32ba0",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "715b0d11-34f9-4c59-818e-c59027e23bef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aca7ae49-b372-48d8-9064-2cb1e5e90593"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dbe20af-c534-4239-8766-ae3c8c49a0e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9ca5e564-8133-4e72-a566-9f9b8a57c027"
                        }
                      }
                    ]
                  },
                  {
                    "id": "337b7bf9-e13d-432c-819c-8a07f19af45d",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abf0787d-e12c-4f55-b03c-5dc701408095",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b88216f5-4807-45f5-8928-9809235741a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cec9d0d-bb41-445c-9a22-87149210fd73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "508923c5-483a-4064-9d24-53b95abfe990"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c1fb97e-5758-4384-a08f-a10721a5f20e",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a00b613b-eaf0-4bef-8896-42ceec61c97a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ad79e49-548c-4e3c-98d8-ce67ab57dedf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f652bbc9-0433-4445-95f9-66872ccd6f2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8c03923-90ad-4a48-b8a8-fcb1779f5774"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d655a9d5-3637-4eaa-9d36-e0c760f3192f",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dde4cff-3f04-43b6-ae01-a168f8b1622b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f164a6c6-a09a-4d3f-9479-2fcecb7f42ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db0219d9-4891-4b7a-846c-5b9539a09be3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ddf60105-3310-4340-82b2-78f47b101722"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e28fafc8-38f5-4943-8895-1d0f11400bf3",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "906192f7-c7dc-484f-9acf-c0b3afc423d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c910eaa2-124d-494c-8379-ea9b149a402c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41f29283-3566-462a-9621-68ae6f608da1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "34be1a9b-1a3f-4253-8e87-d9a9283c7ea6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a5d04f0-8832-4bbf-a344-15a972ec1d0c",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04e2ab22-21d0-49b0-a6b3-e1d34bbae652",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89f5b8a0-3930-4ab3-be0d-2962af09744b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6e4325d-d272-4369-8c8d-d97d3d03e66a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9eb71f82-d318-4547-a4a4-daf980f46103"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71739b8a-a4ec-4f01-be17-28c45eeea158",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7793d1ab-81f9-4be5-b94e-f724d0e35c4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41e5c29f-1da9-4adf-afcb-afb75e8c1531"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0ff9cd6-4116-4a3d-87b2-cb318e44b90e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d8f08028-2f97-4930-ae85-c210e5018fee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82914382-677e-4b01-8f43-7bf37a03a675",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4603e9d8-008f-422b-b566-0088f5174d4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8a4ab16-fd31-4db5-9b85-c3a3dc5eb74b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3244ba3-7ccf-454e-acf5-b36179662475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bbd2644a-4fd0-4000-8402-68fdac37cfb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef5ab5e9-b064-4c24-8fee-303cd4960f68",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e7290b3-c344-41f4-a735-9bb7b636d946",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58209806-1f19-4026-b201-0e4d19faa6da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22d0dfc4-338b-446f-ba17-8260c29ff379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2593a4ac-2c06-4e9f-ad1a-2027f4c65455"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff22956d-8354-4d71-b312-f9bb5a9ade3f",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b25f5fb-a1ed-4357-a416-81a629c90c3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e35ade0f-ecc6-4e5b-8245-ee1d8593145f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55e0c9de-2c93-4d9b-bfee-f0d1279a1a02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "71a307ea-58c7-45bb-a5d7-2cdb1d72decb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "546c43f7-1997-4269-bb80-d97c54af2d82",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de1ddde8-48ce-4333-a364-46fcac022b32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6c5416f-803e-4497-ab02-acc2bafe1d08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc92708f-295a-48b1-94aa-2dd914bab868",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "70ae0b42-cea8-43d0-8cb7-447f84a4bb1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "057345b6-3663-4c10-a4a9-f797f5694592",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d004ebe2-2589-4527-9d8a-5f6285a2ec0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04fc39fb-ac6e-48e1-a1d0-bfcdf4a2e130"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28bf233f-11a8-42b0-8c89-6115049a5f71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "44b4452d-2363-47b3-9cc3-08bfe02255a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ba3cfd3-e452-4897-bfad-afba6e6d395d",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7adf8ad5-f688-462e-8a7b-6a7da70449e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b31869ef-6962-4678-8575-87d224bdc9aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eaf1090-70a8-492d-8070-d4861c297e9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "658a966b-c115-4742-a6c3-e4916d09acdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8767a6bc-39c3-437b-b5bb-f3b356b97f98",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afd88e41-4d89-4487-a409-27fe2c8409f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bb91cec-b1de-4a28-8304-9adbc0e51e01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d48d01a-be53-41a8-98ca-06016f6100fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "88062e36-d29b-43d4-bfc7-29d27576f646"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e070d5af-1eb0-4c9d-9466-c47d1e9dfdb7",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d787b5f1-450d-4fee-bd6a-05512c5144b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a60e183b-b4a6-4da6-af7c-2ad6b82cddfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "820778ca-d9be-4fae-97ed-a3308615f0c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c72bccc7-85f6-4fee-9c10-81ecef091f55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1f56bea-7c5e-480f-bd34-d833bb1c4e0f",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53f384a2-3cc1-4a68-8505-bacd28df7887",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "099e8b83-f501-459d-aa8b-48899586902f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b33786b1-8df7-4ef8-8aad-d524af6fe24d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c6eb218f-c25d-447e-8960-d848e822a0d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66c8309b-4e9d-4ed2-a93d-fd3169e40771",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f5439c9-22cb-4a5a-97f9-47aea6487f7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "175e08d0-dc85-4e89-8aae-950a3445150d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "517045a6-2275-4c62-9492-f42a680270a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "53df60ba-0aa4-4f9f-9cb3-b1f24a38e145"
                        }
                      }
                    ]
                  },
                  {
                    "id": "456d0fb1-d0ef-43d2-84bd-bc3745fc9942",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63500e56-e4fd-4f38-b606-234509ac1185",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d30d6527-b499-4733-9e14-2ae1e50a553e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63d459b4-380c-4d35-bb38-c48fbbf60b4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "60818e4a-a198-417f-9cfb-eca6cd0a638f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "949c8b80-e4c1-4fa2-b155-b1fa4e69c604",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4f0300d-c940-4672-921a-e5a7737310c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "e7ea0259-10e4-4d5a-a69e-46ac2acfdead"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a30d500a-bb3e-4705-9aa8-f42777b7ff27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "938df1a2-ee52-4c15-a042-d347cd9fe3fe"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "fbe2b8e8-064a-4c6d-b08f-db7c4aed16f8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6c90dda7-6cb7-4577-8cfd-3464ae3b9a1e",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "672f682d-6824-4d89-a913-ec08b2eed60a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2ae54f4f-7180-4fdd-9de1-017a7553ec0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9498876f-8183-4cf2-aa19-82d9f77a104d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "8a74b2e9-2032-494f-9765-698811919b21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d869e72a-ba84-491b-9910-53a3bbb35ad6",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ca03975-9e3e-4b64-982f-79c1aef7cde7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7358b723-0a3f-4bd8-9ee0-8c4aa26bd77a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5df8b1a-70e1-42ce-990f-d6fbd8acdf16",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "0f740aac-8615-467e-8795-91ee359fa0f5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "105efd00-345c-4e3a-afe7-18f4bd751c5d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "91af7221-62d2-41b4-9448-f51fb319c2cf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9be5e2fe-15fb-486b-9a94-742405fa0e96",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "89ac9f00-895f-462b-9785-84d59c3b46d4"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5d854ef9-1f9a-487a-9e2c-334733e9a1d7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ac94477e-5323-490a-8653-d6da349b2a94"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bd040456-bf9a-4e47-b598-475c610476c6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1ccf5535-e063-43cf-afb8-88f25ea2107f"
                }
              }
            ]
          },
          {
            "id": "a6b9fa66-b7c2-448a-91b5-35090a19b8d1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "db27c0fa-58e0-4b1b-9245-81e031d46f4f",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "43533b0f-b69a-4569-867e-efaf9b78673a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0ffbb361-a2b4-43dd-873d-0f352850b8ef"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c27c61db-7e4a-4dda-b253-ab280f1d49ad",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e187e6ab-6b9e-4e34-b561-5f735499e50f"
                    }
                  }
                ]
              },
              {
                "id": "db70d24a-31d0-492f-aca6-e4a31bd203af",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "79c3b8a2-9089-4028-8a48-9f5a1dcaefc2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5a4e927d-32e3-4d0d-92cc-444c22c7be9d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "932fc793-99a3-4700-b84b-a8f6b2cf2e47",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3f0fa728-c3b3-4c26-bfed-35fae1b481ad"
                    }
                  }
                ]
              },
              {
                "id": "65b6d16a-62bc-4264-81c5-c7030e464ad8",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d6b4afa7-28a2-4963-b6f1-26f481cebbe1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "69cbe91a-7713-4318-b619-71475bd4f41c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c8a7f426-19d4-4bd3-b809-08f71d621903",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "be36ee3d-5cb6-495d-a225-7e5dc8e6e422"
                    }
                  }
                ]
              },
              {
                "id": "4cf6b199-f7e9-4b4f-94b3-76a4c161d576",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "90058077-6106-4025-a794-ee1de23e8a92",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a31582ea-a5d8-423e-a46c-bc2ff30c018b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9156af98-6b07-4a34-91b3-9c249508a5bb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "aad577de-533e-4ae9-812f-8ebd6b4990c4"
                    }
                  }
                ]
              },
              {
                "id": "9612f298-1856-4785-8918-53f9924eb4a7",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "efdc3423-3ed3-4e00-9858-8aa299d357b0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "74e2f987-1af0-4d8a-ab78-70384e6a84ee"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f4da4868-0a6d-4afb-8001-a71ddfbc358a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "80dcd4c8-656f-4643-82ff-c9ceb71f7918"
                    }
                  }
                ]
              },
              {
                "id": "c01170b6-b3bc-46a6-9adf-0afbfcea1390",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "76987106-6d3e-4e97-b91d-4d99f48f960e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "76100e12-1ba8-4306-b64e-5352731d2ef0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aebe3286-a050-41b3-bead-117fd9dc5acc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5cd71c33-eaf3-47c0-93a9-af8f694b362a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e34bbc4c-0737-4fdb-acd8-84f8575db5d0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "72ec02ec-51e0-4d94-ae05-d9abbf7d81cb"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1ad8aa57-467f-4060-b682-9dc7625146d2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7be79203-a7c2-4725-9ef9-0da45b9c972c"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a87f8741-cfef-412a-8303-d1a9dec497a0",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "9f2c3f1a-64e0-4864-9425-b288bb3297c5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5a0f10a5-fb91-4fbb-80b5-8a449849941e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "adc8d7a6-4e9f-4f4a-8eca-62d7fabc0bc0"
            }
          }
        ]
      },
      {
        "id": "e8592e5a-ac59-419c-ba34-6e87be02b33b",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "57bbfbf1-e7af-48f5-8b4c-3a0df01dd151",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4b6cccf2-78ea-4247-a95f-cca89dc82776",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "aa5f67d5-4980-47f4-906e-a4a2fdc92b5a",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "385556d2-7248-4d7a-b781-456cc5954a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f535e88a-0cf3-47d2-9f1e-9f48143db8f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "415bd5f7-1527-4778-8e8f-2329f855f514",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "34f2db14-5fd3-4a99-a0b6-6ff4add189c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be585528-3c33-46ae-a7da-56b14a30ef18",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c231cbd-12f2-49fa-b540-47691b1c6992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1e34532-d35e-40be-b85e-0e82982c2411"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b366495f-cc1a-4a9c-ba6c-ef4f12e4b945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "48a8dca2-4946-496a-b320-7e75b2d085f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ce034c2-28a2-4bfb-8f43-1e26d38eea67",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e741fefd-dd55-4bf7-9f0a-b1aa9fb71d42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97870e14-d635-4d71-adc9-bd669b99b419"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e47bd054-4855-4fe4-bf8f-8131f69d9630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "73967652-dd9e-4425-8835-04feddf3416a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfa7fa05-e64f-4dec-9ba1-5b05c9645602",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d2f5f22-baac-48a2-99f0-953dc873eb74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed69a142-0a72-4ffc-a7bb-252eaeb0743d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfcafe22-f5a8-4310-bc07-8f708d462a4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f76c8350-1b90-45d4-8e99-0a296ecbfd60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1a597c4-3fc9-4892-90d3-9c44c97144e0",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b183d1c9-9b8d-4099-a710-65329aba573b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb67906c-6a76-4baa-95af-9f669d86f69f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f1406f4-900e-457d-a554-b151341e3a6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b939c9e-cf8a-4825-b0a1-438ee1da8efc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b71b531-510c-484e-8dd9-5deed9b04cde",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cad6f442-7629-4649-a7b5-af7d4b6e9b02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5619017-d2b2-4b72-914c-48e635465ec6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78ad2511-aed2-40d9-92fb-d6c8293fbcd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9cf9bd2b-b851-425b-bd9c-0f69f2b0617e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b415dffc-09a8-4b88-b356-486ebef8cf21",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aac1d74-4ceb-41f8-ab3c-24fee5c38f4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46817b99-84e5-41c1-bd85-70d51032ee92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34759c06-4eed-4fb4-9616-324df5645947",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "e1b83870-39ee-49d2-9ca9-57997f540020"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c7e94c0-76e3-4004-b276-1cd7093ca7f8",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e78c9e4a-15fb-4170-b211-70328a43c9e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e92cef2d-1ba3-4cad-906d-71284fadff0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92f07e0f-4cff-4134-992f-4606b6251804",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "48149312-2680-41cf-897c-b22cccafac8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b54cec26-0a72-499a-ade0-6b1ffed36773",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16975e6f-9f7f-4b63-90da-dbaf7b1f6cf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00bcbc33-a0e8-40ff-8f8a-297e2fd2377a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59beecdd-556f-464b-a783-469039965edb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9ddc49a-1383-4fbe-bf35-11be4e450ac3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "616e1aba-ba2c-4f07-98e5-500306ef8362",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec81c6fc-48ff-439d-b6e4-f8a31d616905",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "944f00f7-580d-4e00-b220-b92479d13772"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75d4365d-a558-48fe-bfa0-57f7d374daaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa511f33-4c3d-4e45-8780-d8de29550e89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efd006f2-3849-4412-bc38-1e2ae3b3b2b9",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9ed8440-6a04-41e4-9066-163601718015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8be9e766-fedd-4220-8a6f-efe98d1fe72b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1863a34e-c04a-4254-88c1-7fba6672c0eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "8f7d7fa1-d6b3-41a7-ac70-2f02dfb7dc04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebeb7528-bdae-4ba8-8439-ec5bcb71d8a9",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26cf23dd-0658-4982-ba1c-0fe78d76b882",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d5d0f79-e789-4ae5-b1d3-edaa9c61b175"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ece13784-1f88-48e2-a717-22f859a360fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e09e139a-4e68-48d1-b073-06b5b08edb1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f67e900a-f340-4a6d-8dd8-295f5c59e490",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4daa4119-a5e5-4ea0-9f12-cd87acca2c4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f32f1422-90e1-402b-8494-0301e0587cf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed13b186-7c3a-4922-b4e1-6e907210a70c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce8d8fd4-a66d-4efa-904e-022e9fc4514d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d7d14c0-4cb0-4f93-a11b-0c48b214ed26",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3146a1e-5c2b-4399-80fb-c0926ba1ecdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4eb8f1a2-0a74-4918-af1b-a98744ba1013"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5c9a087-f742-4305-a9fb-1d937e2f67c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "4aafb891-e1c9-4be4-a9ff-25d922c7acba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0f9f9b7-334c-427a-82e8-3fbd6db67e75",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66f42e82-3d0d-4eb7-bd14-c09b45e57ff1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46edad7f-8036-45e7-af48-5cde4a3301f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95c9b30f-c408-403e-b75d-cd0d7f4d59fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "1dcaa4e8-1d82-4ffb-9f6c-99c960e292ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "736f0965-06a1-4777-868b-3dc994fa1de2",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "061e7ca1-3b76-4de6-94b4-fe84ead528a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3322037a-68b0-4cd0-a007-4728a6e82c0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7cd592b-b3a2-47f4-843e-332206d7e971",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "98882962-d5b2-4f08-afec-14dcafcb6ea3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c59ece2c-b620-4498-a42b-23094bc890fc",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf740365-b4fc-4121-b63c-a735983e0a52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d875954-681e-4b86-9ba5-50410361781f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "769689a3-4b2d-4d42-8db6-cd0cc2024499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "281253ec-7fdf-41be-8c58-04f8a50ff20a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f8afb12-02b2-41dd-94ca-c3deb1a69e92",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4bb21dc-db59-4702-8416-d6da1a04d266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1483ffb1-a086-4805-ba9e-c41596fd70a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e427c54a-7d29-4711-852a-02354984e752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff3415ee-5274-431b-8585-5eb6bdef4e03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5bdd873-dbd8-45e9-b6d3-c50c2547cf5b",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4da33b5d-88c6-4313-b632-ba2500f22395",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b10e085-5c5c-4f9e-89f0-0d285f3f729f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cacbf89-0d46-4cda-91aa-13a769468f25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "643682ef-9a51-4186-aeaf-9b2fe0a897ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fde2228b-331e-4a37-bfe8-22bb25b433ca",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4683f1ca-6513-449b-860d-3320ffa61419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2979f5d1-8204-4707-a923-fb1d1ec7f111"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cf10b64-90ac-4ed6-a7b8-9e54f2e81b5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d5501a6-2729-4204-872d-3128f5713cfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7353bf02-c9c1-43d7-80e0-74ef778a868e",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebabe17c-8327-408d-be5b-b495bc833ba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a19be2b-ed29-4ea0-af3a-305464777feb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82a7dca9-0362-45d0-804c-b6b22fd9e379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ce1c437-ce29-4552-914d-bc6f51f09c61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e45372b2-6723-4e59-840c-290899980da8",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7bd39af-c1cc-4924-8d7d-fa9bd39096fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21b4ed0f-d945-4299-976a-de5bd24710ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13dc76a9-4ecd-4f81-9210-6a556ed64e08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0c745f2-d8f8-43ec-a924-eaad1ad52af7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6505587-a7ba-4ad1-94a9-d07155ba5879",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f86d53f6-39b7-4337-b06b-c96cf7a5ec78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a867431-cb62-4e19-8cd4-2658901f4abb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "161f49a0-30b8-4307-af2d-9fd84293cc25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aaa36b8b-67b0-4f32-b5d8-f82fb03b1e0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02aef712-7f41-4fee-9b34-e962b35dea48",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75731294-6430-44fb-9dc3-7cd4055791e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae1925ed-852a-454e-a534-16b75de25ea6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80ca3749-19db-4c6f-9a84-15b9585af8c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c0129c8-fa1b-4938-8203-c209426e531d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74a71386-fc67-4183-a206-6895988eada6",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc82f9ef-fe93-4acd-b927-f143a96b335b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04e54cde-21c4-465f-b313-6149140c076d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c09ef8f8-8286-47af-b7cd-ce094bacf0db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d00d8ce6-2f66-4c27-af22-9c59963ffc79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52bde9e3-0932-4740-a5c4-fa83a13b46e1",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71be4c25-4764-4a1b-9ea7-aee249ebefc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecd93b08-ee0b-4969-b633-e80c0d0e180f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cd16045-f779-4e22-bef4-b75c39c25af5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8cc69c24-b0aa-4edb-b486-e9a1f8057ebd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d23ed2ed-4cf3-4501-b984-6b60896c8f5a",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1f51dc6-3906-4d9c-9a65-d66a41365f20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f622b724-872f-467e-9a24-e0b7735cbccb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5183f266-6d51-47aa-8f1d-9774912f0c78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "982287a4-8b05-4e48-9985-4248343f7f23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27abb3df-9d45-4309-8806-9dc7a5e9fc0d",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8251b0c1-fe0c-4779-9523-b81b4ed83fd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc55ed1b-6964-4f5a-b5ab-0be3a23d2cf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f516e41-4485-4342-a629-978977a77e5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "43e67741-f1ca-49dc-ae31-58fde067d768"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e86323de-82eb-4369-80ee-a22e2367eb0f",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e038df0-745f-4e94-bcbf-924e817e5ed0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20898c55-cc93-4bd2-9c19-bd26d5181088"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbe248b8-2278-4e78-8ab9-3aa5f5d6772a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef9cd90e-de80-43b5-b391-0ed264042900"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7364a30d-6084-4b35-b4f0-b6438e30dabe",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "123cb2cf-9f40-48af-9a0e-019ceaa16350",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "483b76c8-3e50-4533-9b2e-1d87c14660a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acc0d5d0-8453-4bb9-9e2a-c5fe4225e6d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "757d561a-782a-48a8-830a-1566cd9c5d24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71926e2e-ebf0-47fa-ba91-017fabea1c20",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "264824ec-d3f4-4939-a222-5b73a3be8d47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4efa957b-2c53-48ef-a32e-834d2a5b2a61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "748628e5-a4a1-4903-8a82-2945d6f06d8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f6137f5-60a9-4ed1-9939-7becab3ad156"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7a370b3-1e0b-4e79-b2bf-236bb5f3a553",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01901d47-9095-4587-957a-1841aa4603ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa9e5ddd-b1c9-4be9-b22a-f0446c1896e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b89d23c7-0a3c-46ee-8b2d-d5537ba0fcfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc98416f-116e-4789-a098-a57b990e3c82"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d0c374c4-8818-446f-a174-38611a61deb6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2854b7ea-bac0-4eb6-8f1e-3e2d1f6b50f7",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5dc2797-cac0-452b-b9c0-24e75ae35161",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4207f4a-216f-48a2-b116-575645a6d75b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "336fbc87-72a5-4c3e-b5bf-43838d6ac74c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1b2e6e3f-2cb1-48ec-b6af-62120342ba05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0adfbcae-63aa-4dbf-93c2-dbbed47ea075",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c25c43af-71bc-4819-9a4e-b28119a4296e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "08bdaa92-9568-4e3f-a977-2f82837ee816"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2655c04f-e627-4673-9dc9-7b62c43712d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a334bc6c-5a1d-4dd4-bfbe-05671ef16359"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b14cca01-fd2e-4411-b70b-e68312bad73c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5eb1c78b-d461-4ade-aa11-2b76f0d689e8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "17b4443f-873b-45eb-a44e-729c1922be96",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b0aa3802-774b-4410-8878-2cda99ddd6e7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "07fce57a-564a-49a8-9d2f-1bd822ea8e0a",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a4d650b6-f872-4bef-849b-a6a3eac8d8c0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a29664b8-c4e2-4a9d-8967-4dd5f41640a6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "12722dd4-17ae-4c81-b49b-c9f1ffc6373a"
            }
          }
        ]
      },
      {
        "id": "795cd63c-181c-4125-b282-136ccdeb4d9a",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "cbf68fe5-e080-4776-a7fd-05b121f6b88c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "84dcfe13-ea65-4b46-83f5-f98eee6175fe",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e43d1571-137d-4808-863e-f3e10737398b",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c8b981a-987d-4094-aa30-79904ee82d10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9654ed8-fd70-47de-841e-01408a3ef1a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b1cc3c2-7b75-425b-8ad5-2487f4a322f5",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2df8c67b-67db-4327-af9f-2575a5266f11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c64480f-d3a6-4b36-8e89-b7f11bdbd942"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b98efdfa-999d-49fc-a866-2bb5f5a9c50e",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b06be1f0-fa19-4ce5-a27a-f093ab455d5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a440a2c-e478-4c75-96fb-b17de3c8d8b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af2fee3d-352e-488f-9bbd-03143bf36925",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0ed4b13-2977-4775-be84-cf3ef7c10533",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26e93283-6d4d-4ee0-89b0-5b41c1f67bf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86f83272-361e-410f-8776-5b8991ad897d",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b62d850-c4b7-4712-960c-ffa1454cb977",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b850807-2100-4498-be79-5cfbdec017b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db2abeab-031b-47dc-993f-2cd515dbdebf",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19d92986-47e0-4537-946a-c9e68fccffa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0fc4f1b-a204-403b-95ee-e752cf2c7281"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89d5acd2-4f7a-46eb-bf6d-8686d7bbbef2",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "815d715e-dea5-4bf7-9aaf-01e0a919b7bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5bf1f92-fb8f-4961-9e17-8da7b66a6c1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fafaf45-3ad8-4945-8e7a-fb6252e62611",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4884b3ef-f6ab-4d8b-ad2f-af2642bd2002"
                        }
                      }
                    ]
                  },
                  {
                    "id": "034487a4-db40-4985-b3c0-8d076b4da4c3",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2be37f08-58a7-46cb-82ca-f53f185e6df9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "837ce314-9fb8-45cf-92f0-62f139c445fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d470d1f-731a-4f7a-8034-9af9a9d0441e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bec233c-a4ae-41b6-89e1-7b1d0a46538c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa45da34-02da-4f9b-aa73-dd2428bc64eb",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a112313-7158-482b-b659-7068e8efbbde",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5211d90-088e-4833-9198-b49debddb417"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "575ed317-a0ff-4b15-a148-a9ef0a40a915",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c822beb-ef2b-4a1a-8326-11e0a90d57c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08e0d16e-19c5-4ee1-bc50-d5ebf7748c49",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed9772fb-128b-4c7c-9d4b-d02a5fe74e6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed7c1365-1e7a-4280-8aba-347ab94066c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09c6057f-3abb-4637-a83d-3e7411524b7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ab949a4-2f50-470a-b2e7-b17d65e04140"
                        }
                      }
                    ]
                  },
                  {
                    "id": "679242ff-c271-4dff-ada3-637cd800504a",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dacf947-5c4c-4898-8821-3b5d39edc3ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e31e0612-2e5e-4a7f-9fb6-3b71e8c90c23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11e8c863-4367-40c4-81d5-81f21935e9c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ab21519-c916-48d4-b965-489a02c9d752"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1a7b499-a0a8-4275-b48e-abb1e3bb6ab5",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4461b845-b898-46f4-9552-c777e7129c0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7adc701-cbe4-4972-a826-862aa1ceaba4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9caea470-06b4-4e24-859d-eac602e3c6be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f0a6cd8-9a36-460b-99d4-218f8b68bb44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b1668dc-7f53-477e-acbe-1bc982fd7d1c",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db8c191b-251d-4456-948d-0d7a5a1fd313",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47477e58-2c7a-4685-b5ab-4ec030fabe55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab1d5f05-9118-4233-afcd-c8875ca5a80e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1712438-f5c5-482f-b1b4-30a06c2801cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f8ffec2-a55e-4d2b-b2c8-c754c96781b2",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2868b77-699f-45a1-8106-fd7e08db94f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2cc2309d-d09e-4d29-8a27-e187d4a0a6bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb8720c8-3dd8-449b-bc57-6278d3024d5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3fda56f-af8d-4a36-b8f4-301004205008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c85226f-90e7-41b0-8eef-55cf3644cd20",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38abe04e-e403-43d9-84a0-5c2a94f7b86a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "859cffe9-1f7b-4f4a-a719-1d4054eef2d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58b0f59b-e193-4bcf-800c-e2d0267473ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "530b3a63-4e6b-4eeb-a520-13c03fee5ab8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29e7ab60-87df-43da-9208-e37fd3dcc165",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d399b96c-bec5-40dd-8703-c451a6648dc3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd22f3b9-2071-4644-bb23-c60077bb77eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0289dd2-e181-4e26-acf0-edf69f3140c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "352aac63-e531-4f18-9cc7-94e1f096128e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1336101a-97ae-4c62-bb46-d0964efda139",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "126c4c8b-deef-4a3d-b30b-701beb7410a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c549a08b-ba61-466e-af6e-e84d3cb4315e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acd774cd-29e2-4bcf-bcb5-7b2319522884",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62ca6657-9146-48a2-84c4-89cdfaa97aa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f86f5fd4-aac1-4bcc-a3d9-eaa8db9d68be",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7225a03-9336-4395-80c5-6ba8e9ded77c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c057755b-3f8b-445a-9810-b6d980afec4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b368e498-92bf-49f2-b3cf-6b127b3b77ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ab99cb6-566e-47a8-a82d-f99402c392ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8a668fd-4c4b-4e42-a69f-8d33ed490b50",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a40d6cfc-2fd6-404c-8323-00a9c8078503",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "246d56c0-3cb0-4d44-b874-f184b30e8ef9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d61dfd60-1ee2-4da9-9d6b-a923444db0ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e66ee3a0-3cf2-4d77-8502-b01dac3c7094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae7864ee-46e1-418e-a0ef-fc5386750ff2",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c94c642-5191-4c77-857a-419097b90f36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52e71180-5538-4ac0-9d5d-d7b92db56973"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6f32492-e4aa-4ae1-b7e6-90e18988fc0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8bff942-2041-43f6-93f0-497d8f6a03fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf0654b8-1044-4888-bd88-d15514da3d94",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4eb5c45-0529-47f2-86e0-67740a958cbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c87414c-90fd-4fd2-83d9-7827672191f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d205dd9-bc0c-4bc3-afd9-3c5ee8820896",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9f26a93-bed7-4c78-8abb-216be9433dca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ab15109-8b0a-4277-a9cd-8cab8f11b900",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a80a8d4c-2056-427d-a791-98e343cc5e64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e3b94ed-3159-4431-b71b-66d9b3208511"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e8afc2b-f50c-4909-a025-25d5beae120d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fed8b76-dc7e-49e7-a34a-df48c8100455"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e5df9af-cc1e-4823-859e-110e55a68fef",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b09c5d6-5caf-442f-aaf8-b83a71f3a541",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "348ef1cf-5db0-4a14-8c17-8fa41b59c02f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0559f8b6-d8a5-4092-b1db-b78a4378b173",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b2eb385-b247-43d3-9481-f8f170a56348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec5d9298-5409-4ab7-bd7a-10fcfb29cbde",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bdbaf57-4427-415a-a31b-c9f7f089470d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3139cd78-92a0-4114-b9bb-fa63a5f87cbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca83145c-8713-49de-b69d-7563ea356160",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "815db3be-e486-4eb3-919f-907ebe4f2f87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bca2c812-cc23-44a7-b11f-7dd00a4e2388",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43ea0074-5562-4475-9681-2828e64092b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6123fcac-a6c1-4fc8-abdc-25316af2e383"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b626e963-614f-482b-944d-beea3e8194bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11c37675-0999-4113-8117-6984ee442447"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aa07569-6a35-4ee8-a7a9-3c771d91b8fe",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbc1ffce-b047-4ed8-a147-6a39123c2b2f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "893de674-1de1-4dc0-b00f-cee9628cdf03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9da38bfd-cd31-4de9-b424-9bf4e248b17f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f327812-2467-4535-9056-4bfe2d5a2973"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4cde9bd-0dd6-493c-906a-ed6b5eeb374a",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1630a58-f629-4845-8adc-2f0f6043fe16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26bec985-8f87-43c4-9914-f1bef5ee9519"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b9d1fcb-865e-4165-a0fa-fc9b6dc4e134",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a4b508f-ad46-4b7b-8a2d-b2e33b1f8306"
                        }
                      }
                    ]
                  },
                  {
                    "id": "140056a9-0aa1-47fc-91f2-8afed4cb3c2b",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92d66340-44e5-409e-a9a5-1b86db426a4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74cc4ff3-0581-4770-aea1-c508403bcf92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef70d9a8-91c3-48de-8749-14c2e1ab39f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc8518a8-a658-40d9-b86e-82d1c67481b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49c79e05-2978-46a2-b523-3c0eb0353218",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64f9c1a7-e1fb-40ed-b52d-a7382ec29e38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20593126-e21f-4765-b1ed-89d30cc72d45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32e2ba6d-b05a-49f3-bb93-b7d30cae2a45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db3cce75-b191-437a-88c4-06b3a32a3bd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c63148d-1ce4-4366-a7f0-9af9a275944b",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56c8767d-6129-4fbd-92b3-fcc2a4c60cfd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04cf1f67-e7f6-456f-bc0e-46db4d604b38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d472ccf-5af4-424c-b641-baffb5eef3ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3274e2d4-90db-4dbf-918b-60f46242aef8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43ab024c-09d4-49a6-bdc9-a9c770472082",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a023a723-0e0a-46d1-b0af-800506797d04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5fd4fd1f-38ae-4fdd-8c75-2829bfb8be52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "906a89c6-94b9-4979-8f8f-d6f8cf767926",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7197c422-14eb-461c-8a12-279842c2564d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8527416a-dbce-4da0-8a00-7ee97870b34b",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7252d16d-bca0-49c1-9555-237037c0cb38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81a6e601-f088-4cc4-a078-0d943fa4c849"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41d07f1d-e99e-4a10-81a6-bbf0cfaebdfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf657775-288e-47ff-812e-b4f302712179"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51906757-c6e1-4473-8e4b-b56ba063dcc9",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "710e9f31-8493-43f3-b8db-b097bd06d50d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8d4f3a5-e5a7-42d3-a31f-f95e40154d09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3c08b77-2ca6-494b-8770-3905e86857c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb1154d6-4b5e-4f5c-9d86-8a80cd72d00c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2769436d-85b0-4308-a68e-f0c0ab78280c",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47e0ca44-04cc-4cb6-bdeb-2136a4ec3a8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb3d4ff1-f02a-4e97-8af0-8b61719d89af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c429e87d-039a-439a-9045-9add1993f41c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b5cec54-4337-43d6-974b-0a392bfb563d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e704c59e-0664-41c1-8197-5d531c8abbec",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdecab84-063e-411b-9b69-b84e504c3ef7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d55bd4b-7024-4d0c-a5fb-f7d353e62365"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0db7e6a-fa77-487f-b78e-078ee7576bff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b43127a8-5d87-49e9-9008-5785944dd6be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2609772e-601c-4f65-abd3-0ec8bd45788d",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9738de7-63cd-4497-8423-dd487717e40c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2493ed1a-eb01-4c90-9bc1-6cf134aae86f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7acc84ae-9e29-4519-a50a-62588196ce28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2470990-fbb2-4236-ac9d-3312102804c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3d8d8e8-8fe5-48ac-b3f8-feef0094602f",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ff84a6a-6b44-4282-aec8-227678da2fae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4b42bd1-3584-4c0a-8f3a-7de91e86428a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e01fbc6-fa63-4aef-9860-b4e249e70ddd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13cc114b-39fa-4e4d-9749-df0c3e1ec2cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14566a12-22b7-4aa0-bd16-892d498b55f1",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eb84fa6-43c1-4d92-9c2e-fff05c810aa6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46746b8f-b531-4d06-b8c5-5257d2da5db4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "142a808f-62c1-422a-aa59-2f5009f3e431",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a010a53e-96b2-4865-ae21-5c92c8674d03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5277b051-4f72-422c-9a1c-743060262bbd",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90775fcb-6e2c-41de-86b8-ad858441498a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "361f65b0-1060-4df0-99b5-c0241d3e1ab5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68ad5fd4-77e9-41f3-8b37-8f2b100ba276",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd2f0f65-7e33-4618-9255-7a4c3d131f8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22d39364-cc5e-45ba-9278-ba891cea60c2",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50464675-d079-4baa-9386-5ffdb180cb2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8e22afe-c317-4611-b60d-d2f73f9ff3bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb1fb066-9523-4b90-bc7c-b79a79f0ea56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54aa6a06-9cf4-4edc-a559-148a2c9902df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34a05910-ea2d-4ec4-8074-4049af08467f",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82c06647-4767-4a2f-be86-2f32656d2b92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "494f6571-91f4-4b18-97b7-81853ade70a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d45e189-d70a-432d-9e9c-ea2b366c0b7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ff1fb1d-6ac7-46db-9985-d722afa3bfc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73cb0967-b9f8-4848-bcdf-cbb4b5700d73",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82f02b43-8cf7-4228-9468-50721bc6dac3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e81e9590-e8e9-4106-b303-c798e6216b3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53bc553d-2d61-46af-b8ea-e74f094bca09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6eb15201-4e57-4a56-b5ba-11bb133acbad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7173c11c-f818-42b5-a189-d40dee2c82b8",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b113d4e2-5c96-4515-80d2-e90f19874e0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0433e076-7dbe-4a17-a3a2-697093bf6882"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc50b517-9479-4013-baf5-3549b49e5983",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbb544f6-8e15-4182-b973-effb4abc66ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc42499a-700c-47f5-9e27-d855f753bdb0",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38faafb6-2229-406f-84ab-0728fa6b9105",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab990192-a477-4a82-9cf4-65d405cf613f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "beff4851-8cc2-4d7f-98d7-724acc4749aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6476b7f6-b366-49e7-be11-1158af1facfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b164c5cc-7408-4f22-8004-313456623cf2",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec598ee1-6e28-46b8-aecf-557ded3ddbbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ddc185b-2ee2-4f85-8058-70ea5956607f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efb2eeb8-b5a7-41f6-ac55-4acf1ad250df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "691defc0-de0a-4a3d-b9dc-3f52e77d8d38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c681f6da-c819-4092-91a4-df6e04f3c699",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c376175-ccaa-4677-a9de-0737f1f0cc17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26dabd56-40e0-4146-b383-25773f594aa6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fae7789b-e1db-4377-b1d1-6705a10e2860",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fee9f19e-aada-4012-8800-eec96174a1cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "162cf607-08ad-47df-9b0b-1dcc99e3a7af",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab6737f2-d2da-40f5-8027-329c70ff5327",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89939c50-4445-4d46-9c6c-78e30d51c438"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df0f0782-a196-4ab3-8ff4-e5dd171c6bd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c8c0916-e86e-4935-98d2-6648e6f24e09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6cfaca6-c70e-46c1-ba36-3e321caf858c",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deb0e9de-4be2-4550-a632-39f1f7cfe0a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21a00008-444f-4002-9f58-ab733fe64bfa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e05ee5f0-ad2f-4481-8a08-45b82c3e0b12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "713eec9a-bb40-4443-864c-31e98db2f3ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ed35ced-fbcb-4cad-b753-c086578c0f0d",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3e2bedb-383c-4848-8b7a-19e5c3252d89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23a0711e-5b7a-478c-9e8e-300c8155a303"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7a3494f-1f37-4c1b-a9a3-67877e957eee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c921df7a-72d8-45c7-8ab5-d9026dc0b140"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64340f01-f31b-4ff6-b0f3-62c9d7a3c019",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07a900cc-e13c-47b9-8193-1c7e8ce1fe15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d488ae5-5ed6-4396-b724-f7169146fe1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "999b2d5e-0b42-4f6b-abce-9cd5918dcdcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b11a0830-1a4d-428d-af9f-32988f85f8fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3dc66bc-5fdf-48d4-9ca9-e3392cfdcd4c",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fb4df38-af5f-480c-ac31-b0a91e2dbd3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "799b0bc6-0a6a-4068-af80-94c92c2b4a2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b81af969-104e-487d-8cd0-e024dfa17afc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f0ab5dc-01e7-4390-b560-37da64dc0615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10bedaeb-8c21-4512-bf42-9ba723671b28",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7008d8f2-4dbf-4318-a127-93eb565f7a21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0542352-9de3-4dda-b5a9-a45b4c77f813"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d3e0ba3-2a5e-4d1e-9b7b-bf747fd762d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3876dfeb-e47a-4793-b511-8ae177c9427f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0646ce92-984c-44e3-822b-8862cb5f57a1",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6682cead-977e-4be6-8adc-7fe1321364ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb521254-af5d-409f-800b-d96517f4b172"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ae20232-bab9-4230-94e4-ef7dddf98aa1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f88a8373-a4dd-4eae-a7ab-62497bf6348a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ce74bae-ee24-47e8-b5e3-c47b26f66455",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b768211a-a567-41a3-b792-a7beb7ad9a84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ade62aba-80a9-46b8-b835-557e18b02435"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "907dfaf2-edca-4f35-a113-52ae1cf21e28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b69c5f8e-6b89-4908-893f-5718b67be4c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77e4643c-c10a-4f2b-b5bb-5a4a0e374a6d",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8c6226b-5978-467c-8941-e91e0aae9052",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b0bcb7c-4250-4088-a791-eab31a6e4464"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49470525-8910-4483-8868-697294d5cf28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c18a6d2-3ad9-440a-a18b-2d5cbe5051e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4abd1cc-910b-4eb8-bf6c-97d32633ecd2",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9b4e22a-6a58-4ea3-9be9-8fdab64bcb74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7167d2f7-7766-4646-9c19-c93b6f0f7b18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "525eb4d2-d5fc-4390-b991-26c3fbe9a85b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccaa19ab-6d6f-4e27-9f04-139ed843c3d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d5ac8af-9500-430a-9fd7-bf8e442d4cf6",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1a90707-a7b7-4f2a-af6e-98f3c374cac7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daceb56e-32c8-43d8-8e17-4b338b268aad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a26d6b5-1bf6-435f-8f48-5deb6404b84e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c518fa9b-3164-459a-b949-42efa93b8ffc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88065e3e-55b8-4199-b985-5c432c7583b5",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db45f2ec-6c25-4d72-b5e6-8128a37eabf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61a67d70-359c-4410-b8c5-3e86350e70e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "789c050b-fc82-491c-99f2-3b0fe4a85309",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99697e99-f34c-429c-8427-221c43965d88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "720cf0f3-2bbb-4a4b-8d4c-4fe4a689c9f8",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4767abbd-41ff-4d10-955a-03d649563345",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b09ac11a-ff73-4977-b314-988052f2a464"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e01a077c-9657-44d5-8e2f-689bfd4c5fab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b6961f3-5150-4e01-b0b3-68c29ac4a772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43fca855-8219-4637-8e02-171ca267f6bf",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2ac48ad-3a46-4add-aec2-daa1261f1f18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68078601-0bea-42f8-9788-9b35d147f0cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5d3af57-9ea4-4a60-992b-33bcf822dba9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc4b573d-b629-4840-a64f-18a6c18fddb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "932b3991-d0b8-469b-bf17-397098ae0f5a",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25b554e7-cd48-4ecb-941a-404d6d2719bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c789fcb5-5bc1-49b6-b556-9ef067a47bc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e034cd86-84fc-401c-ab7b-63dabafe354d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cde82031-8ccf-4f8a-afad-3c296b2a5263"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58157370-0ac4-46cd-adeb-808c42b4d509",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf718cc9-3829-469f-86df-f3015c4745b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99622e59-31bb-488d-8c9d-4ef271241336"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99fb3c22-2eb4-45cf-930d-174f3eae32a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22ed90fb-d1f9-42df-8fe6-75cdd3011970"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bebd23b-8f56-4b79-8ce3-c56385a8d6a4",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e71f2aa-a1f6-40d6-a4ff-7adc16b4ce79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55a19ee3-1548-4a66-9c5d-7c9dd412bbe3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1f104eb-0276-43d8-90e5-6b9d1b84eba2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31e91c93-8a60-49b9-8f52-f922b0f9a159"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce10c10d-afa7-4643-90e7-06fab398cdd9",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "858caa6d-3400-4c1e-9b57-ccbb5d78862c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45f0e291-d376-4bbc-bdcf-a42320d68464"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f2013d8-fdf9-451f-9fe7-51842fad4f8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a96cb8b3-6195-48dd-a6c6-a698168f14d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5958e6f9-bca4-4076-bb86-8c72c6442364",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f1a356e-ab68-4b5b-9f7c-f96dc55eb733",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e70f2cc8-d1f1-4080-a1e4-5e4fdd22264f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6a48d2d-436d-4576-8a4d-4ad7bd732d22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1630ccfa-ce38-4b85-b414-4c733323399f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4a41bde-2028-4e4a-9205-a507459494e3",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19f659bc-2e6b-4dfd-8596-a35711f918a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8af013c-b3b8-4ecb-be3f-5aefecef51af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61d6a09e-5706-4f41-8009-98577f516d6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1361f357-bc7f-46c6-9fac-f361d239fc16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fefb50f5-ddc5-4990-b726-5fffbc76cae1",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8dd437a-b0e6-4333-b603-9c1967d50c8d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cec8f4c6-9285-467b-8579-579259c57e73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e8b4272-01ba-41d7-958c-97909a00df2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb0d8983-5763-4ee0-9553-704e2f0a8885"
                        }
                      }
                    ]
                  },
                  {
                    "id": "798b1eef-1458-4216-a531-cf980484c730",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "903b3906-41f4-4fef-aae5-8fea90c98c01",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a4cf7fe-5c95-4754-bcb8-885e90da6f57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f2ce33d-5fc3-4221-b6b3-751776022757",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef26157b-75d8-4061-a352-0b139a9c8ade"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1b00ff9-26a7-42c6-ba34-5d4aca26123d",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c20a26e-ba82-433e-a409-ce1aa2559398",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b4770cc-af7e-41e0-8a97-3605fef88ce8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38bcf6b5-02ed-4cb9-a459-2dd8fb85a2e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0169ab45-2794-4173-83b2-9b1f088286f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b22ea74-36aa-499a-8e92-2ab1bfb7d343",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87ef4834-c583-4e8f-b942-04281a07ff74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae811e0a-e7a4-4966-8a3d-4aa5af457ef1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "151dc9ce-72e7-4557-bd35-c1be23a9f045",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb325bad-abd8-482e-957a-e0437aa6a8be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4329eac0-0e34-478d-b83e-73dbe76fd047",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ea092a2-cf6f-4a1f-b5cd-607576312ee7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9e2a1cf-9d01-497f-920f-bfff848ec40f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ee666c8-11cd-4d3f-933f-6f4dac04e6fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "042b80f0-71bf-45b8-8a9a-85f6ccfe0484"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10ecafda-2025-4f70-827d-ef4b9b1db718",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e87f268f-f247-4598-91e6-3b756184393d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7b3d21b-44ab-4b04-a285-addc78eb5372"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6922c6b0-b569-4da7-a88a-e11538d6a889",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "666af007-f0c7-48a3-b99a-262447097a79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af240b68-0b6c-4f1d-87c0-8782cfdf1015",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1956579e-025b-4e12-aa43-4a833ac71333",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "809ef870-e2bc-46a5-a30e-f9f5e8c57326"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6f276dc-0d87-4367-a36e-b859638d6e74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bada7cc3-0c8f-4d27-b983-d4278c87731f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e8174d4-aa6d-4bfc-878a-a9c7b136ef76",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee779757-0b2e-4991-963e-b6a27e4328aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14d9a900-b235-41eb-8766-1a29fb6921a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5e6909a-f7cd-4771-a31f-19c9bf34a20a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81fafba4-8a32-42ab-b460-341fd0ef25ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "092dd76c-681c-40c5-9f56-5032cef21a4c",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9728d95e-0ad7-4d6f-84a3-ad2debc10eba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b9bc2d6-8bac-4e8a-b5bd-51e917caa0fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35d2ec13-c53c-42e0-be9a-77c0b36fa04e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a6fe94d-f9b1-4873-a7bf-67cc7f1426d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d6d45d0-a2df-4afd-93cd-bf4820f1be0f",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f3afb2a-1d9e-48e5-a5ab-822ddf281c7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f558255-8669-4d00-a8d1-70152e3a2ac7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9845074e-975f-4f24-aeb8-0c63262b89cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "000f63b1-03bf-47fc-bca5-7b9528154f27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7effda1-bfcd-477c-aa4d-68fcfca476c0",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3344c8f6-a378-4786-9fa1-b3203aed6afb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89c9480c-999d-4499-ba40-81f185c74c59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23ec01eb-98c8-4fa6-a067-bfd73f939e01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82b510b1-050d-4953-b77e-435fefa338e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbda6e35-457e-4693-99c2-c7c856c3fa70",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7eb100c-7080-49cb-82d6-623c53aea429",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c67cdfeb-e5e5-4b4f-aa74-233a88e54142"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "589b9ebd-aceb-4d29-9372-1fb533f9bbd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb6dae75-cfe7-42c1-8aa9-0623d2311e3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e08b1434-a038-40fa-94e2-2ce9177f8c4d",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfb0e9f2-bb30-443f-b4e3-235e0803772a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ffb0adc-f88f-4ce9-8069-173ada216c38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af65cc67-0404-455d-b831-926bab58116a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d34c38a-2490-41cb-9af8-62d1ff115ac2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3db2e285-750d-445b-9292-bcfbcacc405d",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f92f52db-b859-49da-875f-f597f930f9e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2dfabfe9-7fa7-42d1-8297-7641685e6e2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0785e9dc-da83-4ff6-92f7-3add6f11ba37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b96c01e-3f1c-45e5-8a17-ccf8b0c49c3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cedf334a-76df-4e03-9b11-8880cb48461d",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ad0dfdb-4553-4a06-90b5-e6e2f1952833",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "756d0a65-5c84-4ffd-9515-0e6077d3a2cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1838af27-4977-4a40-a511-4d503ad98ed9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e055d75c-4d63-411f-a722-1975ada6de9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a84a1cf-bd56-422b-86ed-139481dc74f0",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "660a3d68-f186-4ef4-9dcd-8c87e7b15c4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09eb2230-0a07-4e0a-9a24-3b018b51e46f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d633009d-6cfc-4387-b8cd-807f9832fce4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ee303cc-fe1a-421b-bd47-ce228307d8ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6cfc19e-92ef-4059-bffc-7e9db36c9f69",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc02c81c-43bd-408c-9939-32bf5cdc64a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7edea963-9a03-412d-a801-7efbd8006b5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce1cffb7-d371-4a3d-96aa-cda3c5e60178",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37b768b3-2c92-400f-8ebb-8e5861396f8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f2a75b4-2902-428c-9569-4a4f3667defa",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b835c2a4-f35a-4b79-865c-50322c3d552b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbd96942-f972-40dd-93c2-b4e5e629fbb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bdfe4b3-8567-4d1d-b529-59f80f4f3971",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2bb07e7-8b61-4bdf-a088-76afe3b048e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31904cd0-9072-49a8-9d76-d4dfb5150d0c",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92720746-332e-4f58-8e41-77af0171b208",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b0c3934-2948-46ed-a85a-65080464ea50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d96277b5-ad2e-4399-8899-c8e01ddb1692",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca45b95c-09f3-4297-9025-6e5eba3fa045"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26a424ab-d1f4-40f8-8d0d-d5532b0e988e",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86e648e5-7508-45ee-93f9-a9e3a6b46e8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae94ad5c-3aa8-4df4-83c0-8d85b3d3fbf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08eeed83-9fb0-425c-ab50-b320acc3ccc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b0dcc24-2ee8-4a2d-88e3-ba37d01c3f5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea2ebb70-0440-4ee4-8c38-20b9d701537d",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e998d352-05e4-4235-9805-712487cf3f16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bcc924b4-88da-49eb-a9f1-e7de794f7a71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a64f887-c674-4acc-91b0-9abc3d45dd23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32c9e9d2-767c-4d2d-b839-605a60c1b44e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e01b35de-f970-4cba-b077-20d85c70ad8b",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b4630e3-5ee5-4287-8b2a-fbfe3f7b7072",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0679eca0-2c96-4e28-bc8b-2d209c1d9db8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b86ec4f4-8bc8-4110-846c-829d7f569c3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9de07bf4-0325-455b-88fd-2d2a4c5d28f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f994ed77-f9db-461e-a799-0e2097abfc1a",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c26cf115-5fe6-4abc-9542-9ecedebe1a3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de66405b-0cae-4675-bde3-9e89541e7237"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "066fb51c-f42e-4470-a274-02f43918883f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e9a24e0-dcf6-4183-acc4-a2f886449245"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a3c1fff-3b66-465a-894f-12e754878ccf",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76a78abe-eb57-48c2-a686-81127caf94c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "289994b5-c89c-404d-af92-9209fe63d46d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3c97ff3-ba56-44ac-8eb6-7d0968c7d1e3",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1562f30d-5457-4876-ba8f-caf77a52bc80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4447bd85-5c41-4972-bf87-9da5b2e376a3",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e9e1dfe-da4b-48ec-aa11-1981f2b352ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e122c01-ae12-4ab2-82da-de982f2cff68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20cc6098-822e-4bc2-a891-8761f7882782",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2872a99-a80d-4d36-b923-1846128bfe66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67575081-4402-4339-8438-754a207187a2",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a7cc744-2772-4882-b91f-e1018250b8ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "428fd933-7ddb-4cbb-9e73-23181e9e9c03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ff0692a-0546-4cf6-8a64-47b49c55d636",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "060d57dd-5d87-4b8c-9742-26d497f77891"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e2ec831-5587-4b61-ab0c-c655738db34f",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab87ff6a-277c-47b7-ab3b-ed68d7342785",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a1fc70a-2b5f-4079-aed8-d404e8cc0e8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8532bed-55f6-459a-a695-96e70db52e86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e5db6c6-2435-4f86-a8ef-1dcad865c81d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9179906-1819-4712-94b2-526f39d806e7",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28af8a33-edb8-4dd5-b78c-172450559b0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a4cb0d5-7071-4be2-bce5-33711612217a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75ec105a-6c88-4906-8af7-7bc82a8a5a2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a0bcbfb-19dd-498a-894d-16038414914d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7719479-72f9-4bdb-8a88-730abb7f911b",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57125f53-befd-4bca-a774-cee0136b0527",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9869c3bb-39c3-4369-816f-2b7201d35987"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1b87451-3984-47da-9376-eaa3672178f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5af5b71e-9801-405b-b58b-85b7265a59b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67bf2f8e-378f-4b12-8b67-5e5e0008db16",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99a1c3b8-c680-4ffd-9027-7d0b7a52b088",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4b9299c-3e67-4187-b87e-ad91017b3f08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be34126f-8a21-415c-93ea-0f6744031069",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "914a1342-bf97-47fc-9e75-80172d99ab7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d7d7959-0ab1-4d76-a0e2-d2c735383f43",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d26e933-fab2-43d6-9e24-4dd524a49abb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ddb9f77-9380-4597-bc3d-24fd60f02198"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b6c49d0-13b4-4c2b-8c9b-8bc1f28de448",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84c06597-3221-4206-8537-86bcf66a1308"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7361f3c3-3f44-4fc1-9b2e-c5493ac50260",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "22b8bd5e-60c2-4d57-958b-1e5b7e5f5795"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d203b92a-a52a-4dc3-a655-40f695f94f44",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f0a52955-c6af-4502-8734-5062e4e7ff89"
                    }
                  }
                ]
              },
              {
                "id": "06e5dffa-f658-4b55-9fa8-d61336bab8ee",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a2bd8413-89a3-4615-997a-a37b220b1319",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "887b4252-bf85-4b69-9e0f-284dfd070927",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "d54dc68f-f783-4399-9d9f-a0cb4efb03b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc69f08d-5186-4080-bd9e-342c9014742e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "08ef8c65-0d7d-49e6-a31c-3fd561706c86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d913deb-dff4-4073-ba51-3229d702fe87",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24ee0671-29e1-4993-a1e1-389022801c44",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "d3a3e503-be8e-46bb-8b28-c60dcf24edf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f338f616-5508-4f1e-bc3a-b09c83f7f47e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "81abadb8-445a-414f-9e5a-1bc19899ef08"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "03852f49-2f52-4c7e-a255-9d346efef0a0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1bc4a16b-8b93-4fce-887c-73acbc8b811a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "809b1415-5138-44e3-a778-076bd16d6bbc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3f6a162a-3220-4874-8a6f-2c44ceca6b44"
                    }
                  }
                ]
              },
              {
                "id": "6ce2b69b-97b4-4377-a262-d6414c683d22",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "c5e78c9a-f92e-429d-8f98-96df16c8a8c4",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77d21234-fd9f-4fd4-abf0-3a078b3cca7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "a395e9ff-dd35-46d4-b70f-020e9c8c5954"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cf47fae-b08b-44c1-a82a-78eb9b3c39ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d339bc84-36d4-4020-a07d-7fa74ff85a58"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c3167288-56c2-4e96-9a73-724aa2d8b345",
            "name": "Positive Testing",
            "item": [
              {
                "id": "73337a73-90f6-4403-b6e2-732bd8e8cc15",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "66ef92e7-27a9-46d2-bcc2-4272b4f018a7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "712f78f8-fda9-4860-be5e-0a6e797a8cf4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6e64b653-6d6b-46de-b13e-67da8e8e333a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "abe3750e-da95-4e6f-aabb-9ba597bac8c7"
                    }
                  }
                ]
              },
              {
                "id": "64f751fa-cfda-45ca-bf8f-58d21e961f0f",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b4038831-5d35-450b-bc52-70f5db512cc8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "e49f86a1-ed8e-4b7d-95dd-6d4aee0aa1ff"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ffaf6a1e-1c87-4d2e-b812-9eb95b349442",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c58aa3a9-49b9-4177-b539-42464e3a591e"
                    }
                  }
                ]
              },
              {
                "id": "8df08c31-f49a-4974-a9c6-e8b2a779c408",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8a372151-c53c-427f-8a92-8eeb912a86a2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "97c6292e-56b1-4fc6-9dba-7e1661b5adff"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bafcf954-2013-41ad-b183-77272189a334",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "797924be-f7a1-4c16-a068-b0697f2d5419"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3a855a76-7baf-43c0-8e8a-dbe11d27db85",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "72a96fe8-511f-455e-8412-0dfbaf95b987"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0388a435-982e-4ba6-952d-4d57bf88a867",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dbaba9fa-8a60-4317-8479-75ee1610ee29"
            }
          }
        ]
      },
      {
        "id": "113d78b0-17b1-4c94-9e72-3d44abab3675",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "f9ae054b-e52d-4e74-a0f7-d418b3442cb7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "677602c7-f788-4b9a-aeb8-fa9dbffd6dc5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "660aeafb-f0e6-447b-b516-c7bce32d8cc6",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2483ed96-3c5d-4bbe-af88-880f3a0ba47a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a784c557-8358-479f-9c61-2b94cf8cdf32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4d1f925-ffea-45c9-9674-082ac78d79f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cbe349e2-b08d-43c8-a27b-c8094fc6c62d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50b4d150-fac4-41ba-b68f-c0514760b885",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fd67791-c7f0-457a-8810-1adbeb5d5a2a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "38118d12-adfe-4793-ae9b-06ad230d27c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d130a3a5-00c7-4518-9be8-9c332d2b2d19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dc7c6328-675b-47cb-8d0b-3ef5f9336b9a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "16db3b41-d50a-4a17-a988-13446f5cc9bd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3cbc0e0e-273b-4880-8187-f1b59b29f345"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a55944d0-6e34-4e2b-b085-9a7380354beb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f91d9c06-5d62-474e-b743-ec94827e9d1e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d60418aa-d9c9-4d9e-8898-04c7474537af",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "8a8c08c6-11ce-4ffd-bfd1-76248c29970b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "40be37fd-0431-41f6-819b-c1679a2b0198",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6a147cae-6567-4f11-bd0d-a422502bf23b"
            }
          }
        ]
      },
      {
        "id": "4c2236f3-7dae-46db-ae0e-152718f8099c",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "6d35b172-d9a5-41e0-96e6-aa911f1ff434",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f32aa225-3e8a-40cc-be05-a698c992751b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6df862c7-e582-4a04-88b9-ee766ee7423d",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdb60050-c99e-453a-84eb-216a31379798",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "2fce35a8-3194-4f01-a9ae-98efe4bea23e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d66c8be-be7c-4a9a-996b-b43eafeb6444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "06af4f90-4148-4a5d-8c10-5f7f00b65bfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cb5919a-74db-48e1-b2f2-6b59197d093e",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d527ef2-38db-4e37-832a-ff32291c8d02",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "86ee1f6f-686f-45fb-8a2f-1c8f3cd312aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2622f311-cf22-4916-9d42-6051c119df9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d89339cf-24a7-49e3-b906-06a8613647c9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "29e86382-8e3a-4f79-b55c-3f0dd46514ed",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "26fd8f4c-c202-4fba-942a-668a59e1a055"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3ed49146-5c98-467c-87ae-6af7ab16d4ab",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e4536606-5776-4889-8f4d-25f9b2fc547f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "21d2ec74-13e2-4ee2-b164-13b084819229",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "5ad37f4b-9632-4ca5-88bc-edbc6ff32b27"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "58100057-924c-41b0-9c70-f3ceacc59317",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2d461277-0bfa-41f0-9365-886c96d09170"
            }
          }
        ]
      },
      {
        "id": "401d80c5-2330-4d05-a7c1-86c3fde6bf08",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "7b68affb-fe58-4bf5-b05f-46137026dad5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2e72771c-7372-4034-aea7-eb2e2e82c779",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9139e682-8500-45c1-8636-9ee4e5afaed8",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc21b16e-bfde-4f17-abdd-6b73e1215c14",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "61c40836-11dc-4bc9-9af2-444cf3151a1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ed75e3a-166a-4f8b-abff-6f3a9dd040bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "04e34c43-fdb8-473d-9abb-c3f0efcb0d9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64abebc0-99fd-460a-8381-c835caefe97f",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95b262a1-3563-4eb0-b15f-732d361f0b16",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0e71a395-2c68-43d0-92d8-63c3475d503c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac42c5fc-1262-4942-b83e-fa5dbb65c109",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "66b1d81a-288b-4f93-bcda-8aa2e1d1b40a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fd3cce5f-ce0b-4c68-9e3a-9279c3964249",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e117824f-7934-4a08-a64d-68f88a09ddd0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0a015a2c-b3b0-4f94-a9ef-cf9c4aea9d0e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dda39589-4760-4a06-801d-54612502c0ac"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "44056e36-7ccb-484c-96e8-d8e0992e50a6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "b707abf6-4ce4-47a6-a99f-45306c29ab18"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bb2935ab-8970-44f1-95b2-08917f3bd4fd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e15b828d-982f-46dd-85a4-23014637b898"
            }
          }
        ]
      },
      {
        "id": "335d0cc1-4ce5-4829-bef6-4682a4f31593",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3b276580-bb9e-4756-b9e2-dd8151dbb40d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2061699f-868a-465f-926c-a02b397f9440",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "2b9990d0-7e2d-4b04-9ed6-cebb9807c955",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "04b48a7b-fe15-4c61-868d-0e73baa969ac",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6cd68121-604b-43d3-8570-9b061360fe9e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1915,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 261,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 92
      },
      "testScripts": {
        "total": 962,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 953,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 124.25670498084288,
      "responseMin": 14,
      "responseMax": 4785,
      "responseSd": 334.30892750084854,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1668559509086,
      "completed": 1668559555272
    },
    "executions": [
      {
        "id": "c5358f03-ac3a-4e39-81ec-8d741fa15245",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 252,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "a4345ccb-241c-4069-8dd9-502932bf5e90",
          "httpRequestId": "705c022d-d0f2-45f3-bad4-6f333f6fb4ab"
        },
        "item": {
          "id": "c5358f03-ac3a-4e39-81ec-8d741fa15245",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "81290877-31de-42d0-962d-aae479149fb1",
          "status": "OK",
          "code": 200,
          "responseTime": 107,
          "responseSize": 0
        }
      },
      {
        "id": "8ebf008c-9f70-40a8-a9a4-2df0b04b8f4e",
        "cursor": {
          "ref": "a4d29e69-8e31-4b5e-b982-7bb690ef3987",
          "length": 252,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "f4970d25-0fa1-4c75-b0e6-98ff5c220371"
        },
        "item": {
          "id": "8ebf008c-9f70-40a8-a9a4-2df0b04b8f4e",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "1c26c966-1479-498c-9f01-86e27283eaac",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 0
        }
      },
      {
        "id": "da5ae420-f972-41fe-be25-53f7da403581",
        "cursor": {
          "ref": "2a095fd0-738a-4e6e-8291-62e2ec33ffa2",
          "length": 252,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "03d5feb8-9364-4fe1-89d1-3ef8708a6aba"
        },
        "item": {
          "id": "da5ae420-f972-41fe-be25-53f7da403581",
          "name": "did_json"
        },
        "response": {
          "id": "85f00c87-44b1-47ee-842a-ed00b6cae3a9",
          "status": "OK",
          "code": 200,
          "responseTime": 251,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f2f4f39-e1a7-4170-b6e1-06ac7e3a9428",
        "cursor": {
          "ref": "d056023e-0e8f-4706-adec-5901e57b8857",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c6d6b512-30af-4454-bcf2-31ecdcca6fee"
        },
        "item": {
          "id": "4f2f4f39-e1a7-4170-b6e1-06ac7e3a9428",
          "name": "did:invalid"
        },
        "response": {
          "id": "65d579f6-0f74-4373-a40a-1e1df5818f3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f2f4f39-e1a7-4170-b6e1-06ac7e3a9428",
        "cursor": {
          "ref": "d056023e-0e8f-4706-adec-5901e57b8857",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c6d6b512-30af-4454-bcf2-31ecdcca6fee"
        },
        "item": {
          "id": "4f2f4f39-e1a7-4170-b6e1-06ac7e3a9428",
          "name": "did:invalid"
        },
        "response": {
          "id": "65d579f6-0f74-4373-a40a-1e1df5818f3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82c4fba1-d9a3-431d-a7b5-fe49563229d6",
        "cursor": {
          "ref": "ae726d47-a6e3-4f4a-840b-68134ef4b940",
          "length": 252,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ca9fc7ca-7016-40ee-87ef-7e5a2b8ccaa4"
        },
        "item": {
          "id": "82c4fba1-d9a3-431d-a7b5-fe49563229d6",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "1de3b09a-be52-4b24-b3f5-38be0c0c4675",
          "status": "Not Found",
          "code": 404,
          "responseTime": 160,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b599b28-6e2d-48af-98de-f516852f7310",
        "cursor": {
          "ref": "2b1befc8-3558-4970-b1bf-aa6c6cb47e44",
          "length": 252,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "64961e6b-d1da-4e85-8731-c649de455f29"
        },
        "item": {
          "id": "6b599b28-6e2d-48af-98de-f516852f7310",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "6798e772-4959-499b-8e4f-dd526a4b5fe1",
          "status": "Not Found",
          "code": 404,
          "responseTime": 34,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66c5f6a4-9eba-4fe8-b573-5b464f3cd080",
        "cursor": {
          "ref": "88c05a3d-8c11-4710-8c05-1a1419af093d",
          "length": 252,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "3af955b8-4b96-4850-ab14-3b5c9390b5aa"
        },
        "item": {
          "id": "66c5f6a4-9eba-4fe8-b573-5b464f3cd080",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "2880c187-0887-40c7-9772-6f180a0de01a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69465ba5-d25f-47f5-af45-8f7f0c26ec5a",
        "cursor": {
          "ref": "bf6f6d75-0295-4a17-b0c7-1181faaa6043",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "0e7f55f9-187d-4c79-8206-9e1f58f23032"
        },
        "item": {
          "id": "69465ba5-d25f-47f5-af45-8f7f0c26ec5a",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "d6c73079-4a41-4e74-ac7c-bea978cd25c1",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 33,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69465ba5-d25f-47f5-af45-8f7f0c26ec5a",
        "cursor": {
          "ref": "bf6f6d75-0295-4a17-b0c7-1181faaa6043",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "0e7f55f9-187d-4c79-8206-9e1f58f23032"
        },
        "item": {
          "id": "69465ba5-d25f-47f5-af45-8f7f0c26ec5a",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "d6c73079-4a41-4e74-ac7c-bea978cd25c1",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 33,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a88fa390-2f7b-4ccc-863a-bbf728c6a7b5",
        "cursor": {
          "ref": "cfb9d22c-3bf2-4104-9375-6199f7ef73d8",
          "length": 252,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c7c650f7-ad50-449f-a506-5fee764ecf7a"
        },
        "item": {
          "id": "a88fa390-2f7b-4ccc-863a-bbf728c6a7b5",
          "name": "identifiers"
        },
        "response": {
          "id": "6d99246d-13e2-46d8-829d-63ba2f0f6e11",
          "status": "OK",
          "code": 200,
          "responseTime": 190,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f74a7874-4e81-464b-bc59-abf1420cb10a",
        "cursor": {
          "ref": "a31e53df-5c2b-4215-8ae5-99d03f4450c3",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "0a5a3ff3-4905-4746-9cc9-055d582f9119"
        },
        "item": {
          "id": "f74a7874-4e81-464b-bc59-abf1420cb10a",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "1ab0888d-90d1-4251-bd42-18872bc93964",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f74a7874-4e81-464b-bc59-abf1420cb10a",
        "cursor": {
          "ref": "a31e53df-5c2b-4215-8ae5-99d03f4450c3",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "0a5a3ff3-4905-4746-9cc9-055d582f9119"
        },
        "item": {
          "id": "f74a7874-4e81-464b-bc59-abf1420cb10a",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "1ab0888d-90d1-4251-bd42-18872bc93964",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3131fc2-786f-45a8-a075-6539a9a3977b",
        "cursor": {
          "ref": "3a6d5880-cc8a-4d97-93c7-cb721c5e3663",
          "length": 252,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "f79350dc-b654-4128-97b9-a8718f52c7c4"
        },
        "item": {
          "id": "e3131fc2-786f-45a8-a075-6539a9a3977b",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "4d8d2177-4b08-47b8-94de-e1a37a7713d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ef4c6d4-16fa-440c-a739-c0d86d3c0217",
        "cursor": {
          "ref": "a4f2318d-2acf-4c74-96dc-9e139df80330",
          "length": 252,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "4f0e3f30-8880-4d34-9b8e-bf09a2b3dc54"
        },
        "item": {
          "id": "3ef4c6d4-16fa-440c-a739-c0d86d3c0217",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "fc0178b5-eaf8-4f30-a531-aca36d32f139",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "607e5e01-a066-47ca-a7e3-f45222f439b7",
        "cursor": {
          "ref": "ec73ddd0-13d1-4aef-87e6-3591d9968878",
          "length": 252,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "4ba34700-1e4a-4df2-a1b6-022fba16bdef"
        },
        "item": {
          "id": "607e5e01-a066-47ca-a7e3-f45222f439b7",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "3c3f36bf-fc7b-4d93-afce-51fb8642318b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27652f3d-bde1-468b-8f4c-fd1d2f5e2109",
        "cursor": {
          "ref": "652b64c5-d5ef-43fd-b479-09b12c4398bd",
          "length": 252,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "01e2b824-ec48-4d90-805b-fef408ea4f2e"
        },
        "item": {
          "id": "27652f3d-bde1-468b-8f4c-fd1d2f5e2109",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "18ed4a8d-b32f-4cd8-9193-e3f0bf9f147e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f985923-5ef7-4086-921f-25feae2f7a5b",
        "cursor": {
          "ref": "5882d2e9-8eda-4e83-bfaf-4021430e8c40",
          "length": 252,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "09e2d152-75c0-4766-9f9b-8bf0ed837f96"
        },
        "item": {
          "id": "1f985923-5ef7-4086-921f-25feae2f7a5b",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "eac77e4e-319b-4c5a-9e05-4447ae66f664",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f7ecef5-4d80-46d8-b3fc-30c5d88e4232",
        "cursor": {
          "ref": "766b43be-a5e5-4d18-b430-32307de7021a",
          "length": 252,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "0bd2d136-96ef-412d-b167-c582a4b7a77e"
        },
        "item": {
          "id": "4f7ecef5-4d80-46d8-b3fc-30c5d88e4232",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "246d9ff1-8a2d-4d8d-8634-6827037cbac4",
          "status": "Created",
          "code": 201,
          "responseTime": 530,
          "responseSize": 563
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "42a06625-0aff-47fb-9251-cedba6fcdfa1",
        "cursor": {
          "ref": "b304b294-5804-49af-8f46-35cc7dec61f6",
          "length": 252,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "51508fab-50fe-4826-a8eb-e552c4c4155b"
        },
        "item": {
          "id": "42a06625-0aff-47fb-9251-cedba6fcdfa1",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "4e7019cd-346a-46e7-ae7a-2d816f0e9736",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbae40e1-de47-49df-8613-060bbcf556d2",
        "cursor": {
          "ref": "8ced4340-c839-4ae5-b518-aafd0ce1d98c",
          "length": 252,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "e0dddcbf-7eb3-4201-9629-9e1efd598d03"
        },
        "item": {
          "id": "cbae40e1-de47-49df-8613-060bbcf556d2",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "799bca5b-ea48-498c-91cb-8fd58b475fd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "058c6258-8f04-4b73-a596-8f14f68eb104",
        "cursor": {
          "ref": "ab322c04-6fcb-4e8c-97b4-d279a9c2217f",
          "length": 252,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "4a0558db-d075-4010-9600-76eda200043d"
        },
        "item": {
          "id": "058c6258-8f04-4b73-a596-8f14f68eb104",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "9d0904b7-b30f-4e4f-b1c6-182c87c164ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ace86495-d771-4552-b41a-2ac9bcda7b5d",
        "cursor": {
          "ref": "6801b6e6-1558-48de-8618-c407a683808a",
          "length": 252,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "caa15b47-9358-46be-aec9-685f81fa484b"
        },
        "item": {
          "id": "ace86495-d771-4552-b41a-2ac9bcda7b5d",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "c5c98722-dc31-415d-98bd-5a540f204c25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebad0d18-4462-460e-8dcf-74c229c7eba4",
        "cursor": {
          "ref": "1490d449-4f4d-41e1-8cae-a766261c78d3",
          "length": 252,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "a74cb0ee-de97-456b-b1e0-11071e192916"
        },
        "item": {
          "id": "ebad0d18-4462-460e-8dcf-74c229c7eba4",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "c1b42eaa-fb39-4178-8851-e732326e1960",
          "status": "Created",
          "code": 201,
          "responseTime": 338,
          "responseSize": 608
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "94935206-f329-4f9a-855f-532bb886ffaa",
        "cursor": {
          "ref": "c302bc63-a5f6-4090-94e6-fd62371d545e",
          "length": 252,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "dc8236a4-00cc-4fb3-a2a5-9bc0fce51b30"
        },
        "item": {
          "id": "94935206-f329-4f9a-855f-532bb886ffaa",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "8fdd289f-95f1-435a-a2e9-a25d5ef00249",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "086267d3-eaa5-4bfb-9414-9bdc8df9e8dd",
        "cursor": {
          "ref": "21d47ddf-0060-42b5-b752-ff2d48fe4f57",
          "length": 252,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "5be86345-373e-417b-b2ea-0db38af27c37"
        },
        "item": {
          "id": "086267d3-eaa5-4bfb-9414-9bdc8df9e8dd",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "2e7d87ce-f9d8-4dc9-adb2-73ad1cae6661",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b1dc553-0972-4890-aab9-1fb84bebace0",
        "cursor": {
          "ref": "25bf36bb-477a-46d5-ab76-6a5b1665504e",
          "length": 252,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "0fb47e60-573c-4e64-a172-bbe72c81a79f"
        },
        "item": {
          "id": "4b1dc553-0972-4890-aab9-1fb84bebace0",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "e23f9396-d1db-4e40-abc4-ea946e36aa2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb7c7d2c-d42d-4364-8a98-f7f804d59943",
        "cursor": {
          "ref": "8ec1aa00-ed13-4aa4-9015-d2e9f065dc81",
          "length": 252,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "456bcfe9-c252-4a0b-85bc-4637ad1001dc"
        },
        "item": {
          "id": "cb7c7d2c-d42d-4364-8a98-f7f804d59943",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "c2d888fc-e7dc-4ada-b814-652be759eba8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f6b6231-dcb9-42fb-98ce-23ee435d14f2",
        "cursor": {
          "ref": "9a4f2259-2ca6-48ac-9982-2786707a818a",
          "length": 252,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "040793a4-466e-4b56-a76f-59215f016d71"
        },
        "item": {
          "id": "3f6b6231-dcb9-42fb-98ce-23ee435d14f2",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "3f81188f-c263-4009-8337-ca92bf199934",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "056de8bc-31a7-400f-b7c2-9ad32702dbba",
        "cursor": {
          "ref": "89ba1d40-9ec0-4487-8e6a-ebe6b69455f1",
          "length": 252,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "cbf49345-21ac-44dc-afc0-b2a468a56a24"
        },
        "item": {
          "id": "056de8bc-31a7-400f-b7c2-9ad32702dbba",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "cd768b84-7953-4730-8364-50e941e21a71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4879183-d966-4432-a861-4a93cca25c24",
        "cursor": {
          "ref": "946b6975-96c9-4786-84ab-116034177bd6",
          "length": 252,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "38f20aad-4c57-4655-a53d-e34a9534c11f"
        },
        "item": {
          "id": "f4879183-d966-4432-a861-4a93cca25c24",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "0a87351f-bc29-4ac2-a67a-8ac2f7e87bdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cb45364-ad4b-45ad-9a8d-3576cc4faaa6",
        "cursor": {
          "ref": "36b55b5a-4cc4-4717-99d8-99d2e40d0ee4",
          "length": 252,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "358ce43b-71ad-4105-a400-98f24b30add7"
        },
        "item": {
          "id": "8cb45364-ad4b-45ad-9a8d-3576cc4faaa6",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "c17c2a27-147e-443c-8969-60f2b49545e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c43e8ebb-604e-4dac-a1e9-d10688d18d65",
        "cursor": {
          "ref": "692e71b4-bed9-430e-bbb2-bbad04e0833a",
          "length": 252,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "ddd8ee35-d4d6-49f7-9a66-96fb4542f8e4"
        },
        "item": {
          "id": "c43e8ebb-604e-4dac-a1e9-d10688d18d65",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "49ceea32-000b-42c7-a420-3a0f7d05def2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03f8ab31-a099-426c-8790-f4339007fc1b",
        "cursor": {
          "ref": "f2621377-6717-4cb2-b5b8-a4a80e81e12f",
          "length": 252,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "90af63db-1e83-4f0d-916a-40b8db0ec324"
        },
        "item": {
          "id": "03f8ab31-a099-426c-8790-f4339007fc1b",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "73fa4fea-2725-4bf4-be98-a05536724c0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1d07f05-bca4-4e5a-a0eb-d04bda9af352",
        "cursor": {
          "ref": "06a7d5d2-fc79-4aec-876e-7b29e1bb6092",
          "length": 252,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "abd6e636-9cff-4cf6-ae4f-10dbb46577a8"
        },
        "item": {
          "id": "b1d07f05-bca4-4e5a-a0eb-d04bda9af352",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "5c33d412-d0fa-42b6-90e9-3a86ae2fd67a",
          "status": "Created",
          "code": 201,
          "responseTime": 457,
          "responseSize": 563
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "97de0244-cadc-4c76-902a-8e471fdac0ee",
        "cursor": {
          "ref": "93fd01b8-f4d6-490d-b9d4-65dda60f9491",
          "length": 252,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "d5edfa2c-dcfe-4453-8744-9ba31bac234f"
        },
        "item": {
          "id": "97de0244-cadc-4c76-902a-8e471fdac0ee",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "eb3ec3e8-2c49-413a-99a1-3cb445e22eb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ee0baa1-ad53-4a7d-8141-f88a9949ada9",
        "cursor": {
          "ref": "05f3e05a-ff84-4c44-882c-e8ff195cf093",
          "length": 252,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "c174834c-fe1c-4853-b932-edb6a5fcc236"
        },
        "item": {
          "id": "4ee0baa1-ad53-4a7d-8141-f88a9949ada9",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "bf334280-68d9-4dde-8e85-f00e150f56cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eb7884c-3a12-4fd9-af13-eefe1d469e6d",
        "cursor": {
          "ref": "c9ecb1fb-4372-4716-aa68-5fe8e7bde25c",
          "length": 252,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "9e2ab05a-fa8a-4ecd-a54e-c4347204e247"
        },
        "item": {
          "id": "8eb7884c-3a12-4fd9-af13-eefe1d469e6d",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "d73b2247-eae8-4f8b-84e2-b3a2b918de6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59ac48f2-81b1-4ff6-83e3-70227591f9d2",
        "cursor": {
          "ref": "b9552e90-f82b-49d1-a378-0496d2f4d30b",
          "length": 252,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "74febd5f-3278-441d-8010-5d6f4064367e"
        },
        "item": {
          "id": "59ac48f2-81b1-4ff6-83e3-70227591f9d2",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "359272a0-b06e-4af7-ae1d-9edc7e1d46e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef4f97d5-52ba-4062-892f-4db141b23467",
        "cursor": {
          "ref": "f51e1a47-6757-4d2b-bc4f-9a72693126db",
          "length": 252,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "55402746-97fb-4e70-a560-541ebe348be5"
        },
        "item": {
          "id": "ef4f97d5-52ba-4062-892f-4db141b23467",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "f0dda5e6-3634-44ee-81b5-4d40e8d39439",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d5f0e29-0151-4fef-b86e-b49b83c95331",
        "cursor": {
          "ref": "5c2561a9-ab70-408d-bc46-4dc9682eb99b",
          "length": 252,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "c141a50c-0eaa-4a2f-a0fb-0d0a4feba267"
        },
        "item": {
          "id": "5d5f0e29-0151-4fef-b86e-b49b83c95331",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "baf29c99-743e-477c-896a-b4051385cc3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d734c45-221b-4956-b183-3d895141ab80",
        "cursor": {
          "ref": "5349c1cf-4518-4809-a71c-e63e827c147a",
          "length": 252,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "4c7807a1-5afc-4b3e-84cb-ba92266ded12"
        },
        "item": {
          "id": "4d734c45-221b-4956-b183-3d895141ab80",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "f973ee88-a2a6-48b9-a4cf-ca79071f5be4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e0eb801-21ad-4653-acd8-0f47d71c8dc9",
        "cursor": {
          "ref": "092faf94-6923-4174-8661-2955b36429cb",
          "length": 252,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "3118cc56-73c4-4d2d-b775-142ab25c1a85"
        },
        "item": {
          "id": "6e0eb801-21ad-4653-acd8-0f47d71c8dc9",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "06fe2b8e-a32d-40c4-a2d0-7cfc42233ead",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69bc01d5-f8bf-43de-86dc-b4934106d67c",
        "cursor": {
          "ref": "08efd6c4-883d-4ed4-a0a2-c501ff6a4cc0",
          "length": 252,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "da994577-96e7-4b26-ac71-bb8b6a5216ba"
        },
        "item": {
          "id": "69bc01d5-f8bf-43de-86dc-b4934106d67c",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "0b2414bf-ef7d-4d5a-be1e-382230f80727",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70437880-4c10-4cf6-8e51-51c0ae182374",
        "cursor": {
          "ref": "209711a4-5e0e-4085-8d70-ef29e4de1d03",
          "length": 252,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "a9f9e65a-2404-49a4-a2a4-4832481525c8"
        },
        "item": {
          "id": "70437880-4c10-4cf6-8e51-51c0ae182374",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "be6e7041-b53a-4652-ae74-7891db88b252",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61081741-095f-4a37-90cc-f44b82ab7e0c",
        "cursor": {
          "ref": "f157d654-fed2-47b5-a292-d3135be23e11",
          "length": 252,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "80380034-d150-449e-9351-cea9cba1a111"
        },
        "item": {
          "id": "61081741-095f-4a37-90cc-f44b82ab7e0c",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "20e65438-4336-4d09-b191-f1138ef684c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "421e685f-5c32-414f-adf5-22fcc4f0774d",
        "cursor": {
          "ref": "ec4f53d9-5c07-48e4-99d7-8a703b2ea4e3",
          "length": 252,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "2e5f86a1-a41c-4fce-9b93-52df0ecead96"
        },
        "item": {
          "id": "421e685f-5c32-414f-adf5-22fcc4f0774d",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "baa2f2be-843c-485e-aa49-7225163377c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4369a35-1b9f-4796-b74b-49754862f50d",
        "cursor": {
          "ref": "5f52c7d2-d41d-4a69-9d71-669e66bc4091",
          "length": 252,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "08335cd2-d830-4c60-996e-a5e5ca5971ae"
        },
        "item": {
          "id": "a4369a35-1b9f-4796-b74b-49754862f50d",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "d30d1c43-9b32-4680-a453-1005e368f673",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 371,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "bc0182a7-2a6c-4dbd-b3cb-f9bb7fb1895e",
        "cursor": {
          "ref": "5c63cea9-22fb-47f2-b17d-6500731010fe",
          "length": 252,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "afd1b045-f757-470e-aa2a-5561eccc05b9"
        },
        "item": {
          "id": "bc0182a7-2a6c-4dbd-b3cb-f9bb7fb1895e",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "6bd97e62-2015-4d4f-a69a-cbe9692821ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cf11280-8dcb-4656-846b-1cf8659a21e5",
        "cursor": {
          "ref": "cdbd94fd-bfca-479d-8174-8e0b56af759f",
          "length": 252,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "8bff514f-563a-44b7-9a61-b726826dd535"
        },
        "item": {
          "id": "4cf11280-8dcb-4656-846b-1cf8659a21e5",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "41e14ae2-ec89-492c-8cdd-aa48931d2d6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "debe89c0-9b5e-4879-ac94-3eea12a2aa89",
        "cursor": {
          "ref": "10987d61-f9fb-4815-a378-95bd5e761919",
          "length": 252,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "c38c46e0-09f3-40e8-b264-d629b27bac18"
        },
        "item": {
          "id": "debe89c0-9b5e-4879-ac94-3eea12a2aa89",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "d2cebf15-d1e6-4284-b24d-c8a657f4c065",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02923613-00d4-433d-8012-91ccc40ded2f",
        "cursor": {
          "ref": "a2693507-3b51-4999-af0b-42af769e1180",
          "length": 252,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "33c7f366-1694-4870-ba97-27803eeae5d5"
        },
        "item": {
          "id": "02923613-00d4-433d-8012-91ccc40ded2f",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "7f39228b-489d-4625-83fb-1ba32bbd0f15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e959014-4273-4da8-b51b-16fe76c27601",
        "cursor": {
          "ref": "33a313ea-5824-44aa-bd3a-b30330cf6b51",
          "length": 252,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "e0c9909f-4518-449c-a757-b4d2332fdf58"
        },
        "item": {
          "id": "8e959014-4273-4da8-b51b-16fe76c27601",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "9fb1517b-d83c-4a13-9310-7718ded20c4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bea0214b-b659-4c26-9d5f-05ce7bae2c84",
        "cursor": {
          "ref": "6f3941d3-6101-4216-ad77-89cc3f3e868d",
          "length": 252,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "946ad602-8c14-4dd3-8d91-dce8af77bb79"
        },
        "item": {
          "id": "bea0214b-b659-4c26-9d5f-05ce7bae2c84",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "bd519adc-022f-42a4-93fd-fc32fbd9668d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23e55717-f3e6-4efe-b2f8-78c2a0e32daf",
        "cursor": {
          "ref": "505684f0-0fde-4a52-a59a-2c224c924243",
          "length": 252,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "2081da7c-56f7-44be-bf35-8c8c562ed3a9"
        },
        "item": {
          "id": "23e55717-f3e6-4efe-b2f8-78c2a0e32daf",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "79a042ab-75dd-4bc3-a459-5fa9e2a4afe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4785,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "5092b05a-06b9-4ccb-89d6-1a08fc614516",
        "cursor": {
          "ref": "3392eb59-31d3-4b38-8bb4-579adb056acc",
          "length": 252,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "fbe3d54d-ed76-4b3e-a882-43aa515c6d95"
        },
        "item": {
          "id": "5092b05a-06b9-4ccb-89d6-1a08fc614516",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "96417426-c585-4e1f-8e6a-d2cbc0aa4491",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99ca13d7-cf73-471b-ae75-9ab665bc1cef",
        "cursor": {
          "ref": "e6313647-e4c6-4f95-935e-613d9d85a63e",
          "length": 252,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "5f8fc883-6d4d-4b98-92eb-c602b8cb30c5"
        },
        "item": {
          "id": "99ca13d7-cf73-471b-ae75-9ab665bc1cef",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "b56eb424-f407-4a7c-b24d-e07acd653bf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f610467f-7548-4daa-b349-d703c8a756a6",
        "cursor": {
          "ref": "9993c837-a9dd-4b20-97d6-4d2a8060deca",
          "length": 252,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "f3c648fa-a14d-4e1d-9325-1861826d85f4"
        },
        "item": {
          "id": "f610467f-7548-4daa-b349-d703c8a756a6",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "fa540f1b-211a-4708-a69d-4cf9c9383748",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdcc1c5f-a6d3-4997-93f1-f3331fa90447",
        "cursor": {
          "ref": "53a828f9-7b6f-4a80-952c-48b07dec9127",
          "length": 252,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "5b1e0d87-70cc-499d-9666-dbe1e2ab6a27"
        },
        "item": {
          "id": "cdcc1c5f-a6d3-4997-93f1-f3331fa90447",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "8a4e8975-d798-48e5-9d0f-4f418e569ede",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe999a64-5a45-418b-b55c-9195aefa4799",
        "cursor": {
          "ref": "b055b7c5-9081-4fbc-80be-0292d902a656",
          "length": 252,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "e3b6f571-09f0-4060-bb60-ced43347ba5c"
        },
        "item": {
          "id": "fe999a64-5a45-418b-b55c-9195aefa4799",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "aa2791a9-e664-405e-b6e5-53cad0c17659",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87026448-3bf1-42d4-8a9e-4c4aa5a518dc",
        "cursor": {
          "ref": "044c35c7-c7d8-4e42-98c7-76ad1fa58fbd",
          "length": 252,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "29497400-733c-4d2f-8ae7-0950f7e8c7d8"
        },
        "item": {
          "id": "87026448-3bf1-42d4-8a9e-4c4aa5a518dc",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "30a629ad-36b8-4438-b157-91cefe30a124",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36411230-1836-457a-8465-563680b87ec7",
        "cursor": {
          "ref": "7f2edd24-020b-406e-acc9-83f1f4d8783b",
          "length": 252,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "06867b30-ca9f-4fe5-8583-2e9a39436791"
        },
        "item": {
          "id": "36411230-1836-457a-8465-563680b87ec7",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "1ccc732c-0ae0-4802-b7b1-e23308b8bcba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4ccd2ee-cbe9-464a-984d-ec8e662b2690",
        "cursor": {
          "ref": "22bbc447-a1bc-4a4a-b77d-c189f0da7e06",
          "length": 252,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "f88d8862-b3bb-43cd-bace-e03adcbc8630"
        },
        "item": {
          "id": "f4ccd2ee-cbe9-464a-984d-ec8e662b2690",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "bbd53483-dd5d-4c06-a51c-8a7e871b354b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "259ded7e-7d49-47ed-8a75-6a0915ef9f05",
        "cursor": {
          "ref": "f20f6f61-77f6-469c-938c-0592b93f4a09",
          "length": 252,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "ce9f2a3a-c3d0-4ef4-8037-3294dd945563"
        },
        "item": {
          "id": "259ded7e-7d49-47ed-8a75-6a0915ef9f05",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "4caf1d59-aad8-4191-bcef-175dce81644b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ee05ace-526c-4a65-ae33-e8416cd27b08",
        "cursor": {
          "ref": "0e6819cf-f972-40f9-a9cf-64d9f783751c",
          "length": 252,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "b5aca797-801a-41c7-9521-5e2230dc07dc"
        },
        "item": {
          "id": "6ee05ace-526c-4a65-ae33-e8416cd27b08",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "d4fc8441-7ef7-4a2a-9ca7-c2d216f16c74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc5f3d71-62b0-4246-bb92-657d27dab94c",
        "cursor": {
          "ref": "bac1a6ca-7245-4d69-92ad-69d00b77b58f",
          "length": 252,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "d43ea130-9535-4d7b-80c0-84384cc081a5"
        },
        "item": {
          "id": "fc5f3d71-62b0-4246-bb92-657d27dab94c",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "0236663d-a964-484c-b722-de71966436c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44fea8b2-6699-49ae-8b4b-513164817140",
        "cursor": {
          "ref": "332687dc-6094-468d-b42d-275592c33ba2",
          "length": 252,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "856f535a-5aca-4c7e-89fb-5b11ad49b68e"
        },
        "item": {
          "id": "44fea8b2-6699-49ae-8b4b-513164817140",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "4690b270-228e-4fa2-a0a1-27b84abd0936",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f928d68-4bfd-459b-b6b4-791b0488f86b",
        "cursor": {
          "ref": "8d745016-acd2-4de1-aebd-f7ed7e31640c",
          "length": 252,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "0d3ba4df-b61c-4c49-a2e7-9a4e27068155"
        },
        "item": {
          "id": "4f928d68-4bfd-459b-b6b4-791b0488f86b",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "e6e5e43f-525d-44ec-b9f8-e92a38798911",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dec3f493-38ad-4197-9d36-9c825af64561",
        "cursor": {
          "ref": "7d8370fb-52b0-4f98-8a05-61c674550a85",
          "length": 252,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "a2755146-05fe-424f-b5c7-659d40016c0f"
        },
        "item": {
          "id": "dec3f493-38ad-4197-9d36-9c825af64561",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "f03daf8b-892e-420c-bdd2-dde08598b629",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53e166a5-7ada-4c58-9f66-3a5494fc55de",
        "cursor": {
          "ref": "ce295624-f656-4efb-a961-3e0b79413c71",
          "length": 252,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "d953ab34-0034-4a7b-a2ee-f5438ce898fc"
        },
        "item": {
          "id": "53e166a5-7ada-4c58-9f66-3a5494fc55de",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "10e98f59-165e-452d-9fec-cb64542ce03d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ce72897-4b33-454e-9d68-6951a5d59814",
        "cursor": {
          "ref": "f0073852-2bad-4c2d-83cf-e208542437be",
          "length": 252,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "5dc8b72f-ea4b-42a0-95bf-6c282072859a"
        },
        "item": {
          "id": "0ce72897-4b33-454e-9d68-6951a5d59814",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "0e5825bb-5cdb-45a4-8461-905fe7338434",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab18b63f-c7ee-4803-9bab-be0522f2aee7",
        "cursor": {
          "ref": "cd530ac5-65b3-48a1-b0ff-e8bddf73993b",
          "length": 252,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "6fc13dfb-ff1f-4342-9cb8-afb74e19199c"
        },
        "item": {
          "id": "ab18b63f-c7ee-4803-9bab-be0522f2aee7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "fa9a48db-7250-41ca-9e60-c0f7b769e8fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 237,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3770d16-c064-4815-83db-021afc781f51",
        "cursor": {
          "ref": "3c444eaf-4400-4334-a954-147a24d87efa",
          "length": 252,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "3006334f-e249-4182-a2fe-696ae434fe37"
        },
        "item": {
          "id": "e3770d16-c064-4815-83db-021afc781f51",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "32821f46-67b4-4d38-8dc9-e976a22a5132",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e875313c-0568-41ed-92af-2e09b3ed638a",
        "cursor": {
          "ref": "2ab9a74e-70ab-463d-b79e-c9cf657f9213",
          "length": 252,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "a1944c2f-faa2-4422-8314-e0d227711bb7"
        },
        "item": {
          "id": "e875313c-0568-41ed-92af-2e09b3ed638a",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "95fbde62-8e5c-4933-a2e4-f8a36e3dc32a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32ca87a2-30fa-4432-af0d-5930dd508ca3",
        "cursor": {
          "ref": "8c4a25e2-4e58-454e-8bb8-d7b4070c9207",
          "length": 252,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "efef7781-7211-412c-a66e-3a13b4b5a081"
        },
        "item": {
          "id": "32ca87a2-30fa-4432-af0d-5930dd508ca3",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "ec638760-d56b-4e20-82e7-bd6a1adefa5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f71e9359-b347-47c6-924f-9346dc77577e",
        "cursor": {
          "ref": "8f105f61-19a5-4c55-95dc-e40a3c263ce7",
          "length": 252,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "e80448ac-1053-468d-b2fe-f89b8e0b2ff5"
        },
        "item": {
          "id": "f71e9359-b347-47c6-924f-9346dc77577e",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "d7705075-ac90-47fa-8d5a-1a0c73d51b9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfff526c-2219-48dc-9697-046feeb3e17c",
        "cursor": {
          "ref": "0467bb74-3d57-4444-9b50-8c5e32ce04fc",
          "length": 252,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "7b3f55b4-4d23-4087-81f8-c41ff24f768f"
        },
        "item": {
          "id": "dfff526c-2219-48dc-9697-046feeb3e17c",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "fcada7a4-d0aa-49f1-b367-bd2144f58b53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf08d690-39ab-4bcc-b6f8-c9ed415a2691",
        "cursor": {
          "ref": "222b7b3e-1951-4e2c-862a-e88947ac57ee",
          "length": 252,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "001fd147-afb7-4cdf-a1bf-a585ccbfed99"
        },
        "item": {
          "id": "cf08d690-39ab-4bcc-b6f8-c9ed415a2691",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "1802044f-5acb-4086-ae61-bd085838100b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e970e76a-7328-4b2a-a493-6d59cfe9dd58",
        "cursor": {
          "ref": "baed6bb4-8bbf-49dd-b004-a0716c1013ac",
          "length": 252,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "22fcae13-8d88-44a0-b3b6-02b1ceecbc53"
        },
        "item": {
          "id": "e970e76a-7328-4b2a-a493-6d59cfe9dd58",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "1fdc446e-ec6c-4321-b609-21d5e2b59c81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "222d9e69-3c46-48bc-8ba2-ad4efcc47642",
        "cursor": {
          "ref": "a20c5fb8-fe66-4425-8512-8fcb7390bc6c",
          "length": 252,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "1df98b2e-36db-4b1b-8205-668bce1d44d8"
        },
        "item": {
          "id": "222d9e69-3c46-48bc-8ba2-ad4efcc47642",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "5698008a-f46c-49c6-954b-dd209673b070",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42977226-6161-441f-8f2c-b607b1b0eaef",
        "cursor": {
          "ref": "5c85e52f-e11d-491e-86ad-d8f9368736e0",
          "length": 252,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "57cd1217-a41f-48ea-bb9d-64887ac010fb"
        },
        "item": {
          "id": "42977226-6161-441f-8f2c-b607b1b0eaef",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "ba505fd3-ab2c-435e-b6f8-ff9c9e856a4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e57e380-c1d1-402e-ae9f-1be7ab5d0239",
        "cursor": {
          "ref": "99d55f64-8f16-4a43-a8a8-46442f8f5971",
          "length": 252,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "728b30ee-a7f7-4a8e-8e0b-7506086b0b8d"
        },
        "item": {
          "id": "9e57e380-c1d1-402e-ae9f-1be7ab5d0239",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "c1e821e2-7613-44e9-bd9c-0356e5cfb999",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dee9cfe-73b4-452e-9fba-ad1610e73ef7",
        "cursor": {
          "ref": "d8bfc4a5-0244-4e02-8c34-f53ddefbaad5",
          "length": 252,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "c7e6ba22-3f4c-4b25-b4ce-a3bb15b35588"
        },
        "item": {
          "id": "4dee9cfe-73b4-452e-9fba-ad1610e73ef7",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "bfb5342d-13c8-4333-9253-f913e5db70ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6afa4625-f71d-43ec-84a1-a396857283fd",
        "cursor": {
          "ref": "5ff297ec-79f6-4d0d-9557-067b87a86067",
          "length": 252,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "47360394-b5b7-4ff3-ac2e-66d7745ab845"
        },
        "item": {
          "id": "6afa4625-f71d-43ec-84a1-a396857283fd",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "8d048941-43b6-4d58-8863-f2746d4322a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a65768fb-8152-4480-931e-9194bd70478c",
        "cursor": {
          "ref": "ac19400b-9680-47b1-99e0-36c5791f9a71",
          "length": 252,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "72de7b14-3ee0-4a7f-ac7a-80b9f2debfbe"
        },
        "item": {
          "id": "a65768fb-8152-4480-931e-9194bd70478c",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "bdea3067-deca-45bc-8d26-9f89958be8dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94964e01-3dfb-45ed-9e3a-844c90b32ba0",
        "cursor": {
          "ref": "0f40a848-9314-4c31-9ed3-46e622e3af0f",
          "length": 252,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "2d6519cb-1cb3-4534-9efd-2b28d05ab420"
        },
        "item": {
          "id": "94964e01-3dfb-45ed-9e3a-844c90b32ba0",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "1c91fd6f-02c3-4e27-afde-84d72b53c22a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 294,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "337b7bf9-e13d-432c-819c-8a07f19af45d",
        "cursor": {
          "ref": "bfd861f9-519a-4cec-8188-7d58cdc0fee9",
          "length": 252,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "0db2dd21-1f25-4f63-b1b7-0d82511a2959"
        },
        "item": {
          "id": "337b7bf9-e13d-432c-819c-8a07f19af45d",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "0fcf5527-b63a-476d-9fa6-a985cf667d39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c1fb97e-5758-4384-a08f-a10721a5f20e",
        "cursor": {
          "ref": "29d0ed98-ea66-48ed-a127-6dcc71386326",
          "length": 252,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "5454092d-d59b-4031-a8ab-821406217bda"
        },
        "item": {
          "id": "8c1fb97e-5758-4384-a08f-a10721a5f20e",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "6ba8cae9-fca3-49de-814a-4e0bd2d2368d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d655a9d5-3637-4eaa-9d36-e0c760f3192f",
        "cursor": {
          "ref": "246b5a0d-9710-4774-8721-a92d834376c1",
          "length": 252,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "f5dce70f-737c-4669-a0d4-235252327161"
        },
        "item": {
          "id": "d655a9d5-3637-4eaa-9d36-e0c760f3192f",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "8f239f72-0f53-47e0-81da-e096c78d628a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e28fafc8-38f5-4943-8895-1d0f11400bf3",
        "cursor": {
          "ref": "2bae22c7-51eb-4ba4-a3e5-23c82be26871",
          "length": 252,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "7df579e7-fd46-4d7e-a32a-27ecf3e29c2d"
        },
        "item": {
          "id": "e28fafc8-38f5-4943-8895-1d0f11400bf3",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "5c734aba-d0ab-4524-a4a5-4bf2a3252099",
          "status": "Created",
          "code": 201,
          "responseTime": 432,
          "responseSize": 563
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "8a5d04f0-8832-4bbf-a344-15a972ec1d0c",
        "cursor": {
          "ref": "74064c09-11a2-45b7-87c8-c353a505fe02",
          "length": 252,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "f0ca9fb0-6cb9-45bc-a867-ef2eaba8648d"
        },
        "item": {
          "id": "8a5d04f0-8832-4bbf-a344-15a972ec1d0c",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "4da8489d-4b08-4ee8-ad7f-c76f55ad6248",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71739b8a-a4ec-4f01-be17-28c45eeea158",
        "cursor": {
          "ref": "e9a0c666-8023-4f34-9163-21c81db10cc9",
          "length": 252,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "f8ad7da0-38fe-445f-aab1-22605a62a6ea"
        },
        "item": {
          "id": "71739b8a-a4ec-4f01-be17-28c45eeea158",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "d57566cd-d5f5-4e9e-8fb4-ac24c768cec0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82914382-677e-4b01-8f43-7bf37a03a675",
        "cursor": {
          "ref": "63d84565-3b06-454d-a1c7-fda927d7c018",
          "length": 252,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "3945d3ef-2e74-4786-8ad5-04239a487587"
        },
        "item": {
          "id": "82914382-677e-4b01-8f43-7bf37a03a675",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "9c748c80-6b4c-4b1c-b867-850e9f3ef6d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef5ab5e9-b064-4c24-8fee-303cd4960f68",
        "cursor": {
          "ref": "5b653908-be79-446c-8bad-b633903d47be",
          "length": 252,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "02b2f6f5-cf44-45ca-9e63-88cbe66ead87"
        },
        "item": {
          "id": "ef5ab5e9-b064-4c24-8fee-303cd4960f68",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "9466cb56-ae0d-47d6-8795-a2d0cdaf615c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff22956d-8354-4d71-b312-f9bb5a9ade3f",
        "cursor": {
          "ref": "49cd557c-f19a-467c-9095-a25c55476277",
          "length": 252,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "be3d0bcd-8000-4369-8814-4855ffd03195"
        },
        "item": {
          "id": "ff22956d-8354-4d71-b312-f9bb5a9ade3f",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "6ffaf0cf-715c-48de-ad12-3340f22f5de9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "546c43f7-1997-4269-bb80-d97c54af2d82",
        "cursor": {
          "ref": "cee4aa08-bca7-40d3-a8c4-3b0bfa3709b6",
          "length": 252,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "aaa059f4-ac5b-4c44-b4b2-9ca6363e0c9c"
        },
        "item": {
          "id": "546c43f7-1997-4269-bb80-d97c54af2d82",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "f5cdfa28-b3ac-4d6b-bc16-3513e1d14908",
          "status": "Created",
          "code": 201,
          "responseTime": 379,
          "responseSize": 563
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "057345b6-3663-4c10-a4a9-f797f5694592",
        "cursor": {
          "ref": "fe57cfa1-d150-43d4-b9b7-f28bcb634c70",
          "length": 252,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "7446b2c7-33aa-4de5-9266-e7d25c53a283"
        },
        "item": {
          "id": "057345b6-3663-4c10-a4a9-f797f5694592",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "39208ad6-aaad-4f74-98cf-3002b6370ac8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ba3cfd3-e452-4897-bfad-afba6e6d395d",
        "cursor": {
          "ref": "461dcc86-e71e-4d8b-99f7-e8f326e87b4b",
          "length": 252,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "6ef884a3-6699-40dd-bd44-a7062db6afdd"
        },
        "item": {
          "id": "4ba3cfd3-e452-4897-bfad-afba6e6d395d",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "30c95fc7-f021-4da1-a429-20d2b0d92542",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8767a6bc-39c3-437b-b5bb-f3b356b97f98",
        "cursor": {
          "ref": "be3461ea-6906-4880-b97d-ab71ecf78238",
          "length": 252,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "874eee86-4e69-448e-b2d1-be845a5278fd"
        },
        "item": {
          "id": "8767a6bc-39c3-437b-b5bb-f3b356b97f98",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "89ff70a4-dc02-4a42-8b63-62cb92a59991",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e070d5af-1eb0-4c9d-9466-c47d1e9dfdb7",
        "cursor": {
          "ref": "c815e568-1dff-442e-adf9-a5e8300c6cd7",
          "length": 252,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "f1c52654-8b87-4e7f-884e-88554d49a419"
        },
        "item": {
          "id": "e070d5af-1eb0-4c9d-9466-c47d1e9dfdb7",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "8ed9027c-28ee-46f3-ba7d-9b8c4e6699f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1f56bea-7c5e-480f-bd34-d833bb1c4e0f",
        "cursor": {
          "ref": "c7faf59a-60da-428c-8fe4-876bd22390ea",
          "length": 252,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "cae98833-4922-40f3-8c22-43f32f673011"
        },
        "item": {
          "id": "d1f56bea-7c5e-480f-bd34-d833bb1c4e0f",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "4fd127cd-a222-4d31-83cf-d885de2b8176",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66c8309b-4e9d-4ed2-a93d-fd3169e40771",
        "cursor": {
          "ref": "c20fe59c-4ae5-4de1-8c83-5275643f61a6",
          "length": 252,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "01cdca57-9eec-4307-84a2-84caf117a547"
        },
        "item": {
          "id": "66c8309b-4e9d-4ed2-a93d-fd3169e40771",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "a75f1927-1c59-47db-8b62-6131a9cdcd60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "456d0fb1-d0ef-43d2-84bd-bc3745fc9942",
        "cursor": {
          "ref": "40ce051e-e660-41a1-886c-6f9dec2cc633",
          "length": 252,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "9c655ed6-2404-4030-afc1-7de79bd0d87b"
        },
        "item": {
          "id": "456d0fb1-d0ef-43d2-84bd-bc3745fc9942",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "44ebacb0-c5af-443c-ac4b-1fdca02e5c8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "949c8b80-e4c1-4fa2-b155-b1fa4e69c604",
        "cursor": {
          "ref": "aa5b95a0-e68e-4645-a4d7-2d4212e68070",
          "length": 252,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "cb458af7-0bc4-493a-b69d-53defb2bc6f6"
        },
        "item": {
          "id": "949c8b80-e4c1-4fa2-b155-b1fa4e69c604",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "201fd0a0-6c0d-4f26-9922-ee10c021d261",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c90dda7-6cb7-4577-8cfd-3464ae3b9a1e",
        "cursor": {
          "ref": "c50f8740-3227-43ad-9512-8656e0d0b715",
          "length": 252,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "e1380c18-1ee8-4c9b-a00c-8fea8593d0cb"
        },
        "item": {
          "id": "6c90dda7-6cb7-4577-8cfd-3464ae3b9a1e",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "3c16607d-ef33-4776-861c-f15208779b81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "d869e72a-ba84-491b-9910-53a3bbb35ad6",
        "cursor": {
          "ref": "b6b438fa-1f74-4d93-b398-e5dc58a4ebd2",
          "length": 252,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "e782709e-c088-49e8-9c9c-24b19d391785"
        },
        "item": {
          "id": "d869e72a-ba84-491b-9910-53a3bbb35ad6",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "7f9c3f91-4f67-4d39-ad1a-2c3c42e0cda4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 177,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "db27c0fa-58e0-4b1b-9245-81e031d46f4f",
        "cursor": {
          "ref": "7dae346b-cdc5-482a-8ae8-ad400c30ec44",
          "length": 252,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "bfa99683-3f62-466c-bb2a-f607923629cf"
        },
        "item": {
          "id": "db27c0fa-58e0-4b1b-9245-81e031d46f4f",
          "name": "credentials_issue"
        },
        "response": {
          "id": "944b103b-9403-4aaf-8e87-54a5651e2d8d",
          "status": "Created",
          "code": 201,
          "responseTime": 481,
          "responseSize": 563
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "db70d24a-31d0-492f-aca6-e4a31bd203af",
        "cursor": {
          "ref": "3dcccd0f-239b-45fc-9435-eab76d175988",
          "length": 252,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "8f293dc9-f194-4e30-a403-084e0f8314e6"
        },
        "item": {
          "id": "db70d24a-31d0-492f-aca6-e4a31bd203af",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "62dcb816-854e-49c4-95e8-51606537bba2",
          "status": "Created",
          "code": 201,
          "responseTime": 344,
          "responseSize": 615
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65b6d16a-62bc-4264-81c5-c7030e464ad8",
        "cursor": {
          "ref": "0c4c38eb-b4e8-45db-a9e2-7f7cefabcd71",
          "length": 252,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "fc49ace0-f9b8-475a-8d34-b6ba0daf2256"
        },
        "item": {
          "id": "65b6d16a-62bc-4264-81c5-c7030e464ad8",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "3234ddc6-dd71-425e-82b9-85ba71911926",
          "status": "Created",
          "code": 201,
          "responseTime": 329,
          "responseSize": 562
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cf6b199-f7e9-4b4f-94b3-76a4c161d576",
        "cursor": {
          "ref": "c6363a0c-02a1-4db8-970d-07eec26984a2",
          "length": 252,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "d7ec01e8-157c-4e52-aea7-22c647199803"
        },
        "item": {
          "id": "4cf6b199-f7e9-4b4f-94b3-76a4c161d576",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "5a8dfbae-f7cd-4ba9-b998-ac0162f63007",
          "status": "Created",
          "code": 201,
          "responseTime": 306,
          "responseSize": 585
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "9612f298-1856-4785-8918-53f9924eb4a7",
        "cursor": {
          "ref": "a4588ab5-fa1e-4431-b6cf-83fefd586f6b",
          "length": 252,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "bc0a79de-bbde-407b-ae60-619f1079995d"
        },
        "item": {
          "id": "9612f298-1856-4785-8918-53f9924eb4a7",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "2b35c9f0-f3d5-46e5-844f-d1f5c4e7f455",
          "status": "Created",
          "code": 201,
          "responseTime": 442,
          "responseSize": 553
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "c01170b6-b3bc-46a6-9adf-0afbfcea1390",
        "cursor": {
          "ref": "47b691c9-114c-420b-bfc7-a84929b02f7e",
          "length": 252,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "62cc5f37-6182-424b-8849-55d674e7b876"
        },
        "item": {
          "id": "c01170b6-b3bc-46a6-9adf-0afbfcea1390",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "31331ac0-bf4f-4c8a-baa8-9dc83be7a31c",
          "status": "Created",
          "code": 201,
          "responseTime": 331,
          "responseSize": 563
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa5f67d5-4980-47f4-906e-a4a2fdc92b5a",
        "cursor": {
          "ref": "33dba7b4-cfed-4bbc-bd28-c131df934fe3",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "8b3cbb38-24cc-4985-b955-80e84886dd75"
        },
        "item": {
          "id": "aa5f67d5-4980-47f4-906e-a4a2fdc92b5a",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "120674fe-910e-4f20-8afc-9010263b49f8",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "aa5f67d5-4980-47f4-906e-a4a2fdc92b5a",
        "cursor": {
          "ref": "33dba7b4-cfed-4bbc-bd28-c131df934fe3",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "8b3cbb38-24cc-4985-b955-80e84886dd75"
        },
        "item": {
          "id": "aa5f67d5-4980-47f4-906e-a4a2fdc92b5a",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "120674fe-910e-4f20-8afc-9010263b49f8",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "be585528-3c33-46ae-a7da-56b14a30ef18",
        "cursor": {
          "ref": "078493ea-f1ae-4bcd-95c8-013935707b7e",
          "length": 252,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "784da8c4-f996-47e2-9f55-feb4674d69ec"
        },
        "item": {
          "id": "be585528-3c33-46ae-a7da-56b14a30ef18",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "cafdebb7-3772-466e-bf6e-7bfa49c75411",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "7ce034c2-28a2-4bfb-8f43-1e26d38eea67",
        "cursor": {
          "ref": "8ee94386-e2fb-4f6e-97dc-52a149faacb8",
          "length": 252,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "999b4aa1-9a00-416e-b1e1-60d1f3ca5682"
        },
        "item": {
          "id": "7ce034c2-28a2-4bfb-8f43-1e26d38eea67",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "964f1449-afef-4c14-acf6-2e71a1fda39a",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "cfa7fa05-e64f-4dec-9ba1-5b05c9645602",
        "cursor": {
          "ref": "f120b475-f398-42a1-aaf1-5911a2d3eadf",
          "length": 252,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "a4aefcb8-d08f-4ef8-96e7-7f4122b18964"
        },
        "item": {
          "id": "cfa7fa05-e64f-4dec-9ba1-5b05c9645602",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "548aef13-ba6c-4e3d-baf6-7ef19adea1cf",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "c1a597c4-3fc9-4892-90d3-9c44c97144e0",
        "cursor": {
          "ref": "c4f96e1b-2539-4888-8ca2-8c20915a2f60",
          "length": 252,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "afe581e7-ae45-4a01-83a3-3d441960976c"
        },
        "item": {
          "id": "c1a597c4-3fc9-4892-90d3-9c44c97144e0",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "0165e195-a98e-45e3-b33b-e1845928e713",
          "status": "OK",
          "code": 200,
          "responseTime": 47,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "6b71b531-510c-484e-8dd9-5deed9b04cde",
        "cursor": {
          "ref": "3c910fe8-f533-4c68-8f25-ad0fab119a4c",
          "length": 252,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "5f1d4c33-1290-43ad-a8b7-3deabbc401e8"
        },
        "item": {
          "id": "6b71b531-510c-484e-8dd9-5deed9b04cde",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "faa0f6bb-b297-4fff-a2cd-6e871cc75651",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "b415dffc-09a8-4b88-b356-486ebef8cf21",
        "cursor": {
          "ref": "75bc732c-4d96-49a1-9752-06dbbc016076",
          "length": 252,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "deed5d02-85da-4ef0-b6dd-d3382306ac93"
        },
        "item": {
          "id": "b415dffc-09a8-4b88-b356-486ebef8cf21",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "cf0f9a02-8109-4c38-bf97-7e5064451676",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "1c7e94c0-76e3-4004-b276-1cd7093ca7f8",
        "cursor": {
          "ref": "073330b0-8779-4b9e-99b4-b57298bd9c6e",
          "length": 252,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "88728512-284b-4d14-b70b-0861964e2166"
        },
        "item": {
          "id": "1c7e94c0-76e3-4004-b276-1cd7093ca7f8",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "99e43da8-0200-4479-b582-caed24fd2194",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "b54cec26-0a72-499a-ade0-6b1ffed36773",
        "cursor": {
          "ref": "26a5f18e-ce47-44f7-a93d-a0c88e0b7d03",
          "length": 252,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "695911e9-c58f-4c93-97b6-41e187f44a6c"
        },
        "item": {
          "id": "b54cec26-0a72-499a-ade0-6b1ffed36773",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "36ed930a-8626-4536-98c9-6b8a363136b6",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "616e1aba-ba2c-4f07-98e5-500306ef8362",
        "cursor": {
          "ref": "ad279026-c07a-498a-b1a8-0739491954b0",
          "length": 252,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "5c1c479e-7ac2-4a9e-8acd-0ce30da503e1"
        },
        "item": {
          "id": "616e1aba-ba2c-4f07-98e5-500306ef8362",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "063ff25c-285f-4703-9d83-44f56b62a596",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "efd006f2-3849-4412-bc38-1e2ae3b3b2b9",
        "cursor": {
          "ref": "baece723-0216-497b-899d-f68637ad6df1",
          "length": 252,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "d512b994-e543-4052-8e94-74308d29f7d9"
        },
        "item": {
          "id": "efd006f2-3849-4412-bc38-1e2ae3b3b2b9",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "6e2db4e1-4117-4f6f-80ca-bdad1463733f",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "ebeb7528-bdae-4ba8-8439-ec5bcb71d8a9",
        "cursor": {
          "ref": "bd08a9af-2c45-467e-8bb9-dacc36b712c1",
          "length": 252,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "7c2b6124-71c4-4fbf-b2fc-e24d5b9a6624"
        },
        "item": {
          "id": "ebeb7528-bdae-4ba8-8439-ec5bcb71d8a9",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "b67ae739-d542-46ae-b5a6-5b785176e9c9",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "f67e900a-f340-4a6d-8dd8-295f5c59e490",
        "cursor": {
          "ref": "2a91070a-78ee-41c0-aaa7-5f53139e1c48",
          "length": 252,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "a70f4f95-162b-4cb7-80ed-cb259ac43353"
        },
        "item": {
          "id": "f67e900a-f340-4a6d-8dd8-295f5c59e490",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "800bab2b-be98-4952-956c-8fcf6c8e7789",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "9d7d14c0-4cb0-4f93-a11b-0c48b214ed26",
        "cursor": {
          "ref": "7c901267-040e-4068-b285-f0c19071cdbe",
          "length": 252,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "5c84c83b-5ddd-47b3-befc-733a342d6a8a"
        },
        "item": {
          "id": "9d7d14c0-4cb0-4f93-a11b-0c48b214ed26",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "360e22ec-5390-4007-85ce-8df1a5ccdd4b",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "a0f9f9b7-334c-427a-82e8-3fbd6db67e75",
        "cursor": {
          "ref": "4a76a57f-e3bb-46e3-95d4-c56c48d5f102",
          "length": 252,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "e281f4fd-8d47-49f9-ba8c-ae227d828eef"
        },
        "item": {
          "id": "a0f9f9b7-334c-427a-82e8-3fbd6db67e75",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "d7479f46-c012-4965-92f1-2399d86c483c",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "736f0965-06a1-4777-868b-3dc994fa1de2",
        "cursor": {
          "ref": "477daca5-3c32-4b30-a671-e41acb4f53aa",
          "length": 252,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "9b9b0d89-cf35-4a43-b7e9-0ddc3d3c94c5"
        },
        "item": {
          "id": "736f0965-06a1-4777-868b-3dc994fa1de2",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "47fef6f8-b6f6-4ce7-91b8-8aec1e927a06",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "c59ece2c-b620-4498-a42b-23094bc890fc",
        "cursor": {
          "ref": "33a4056b-bb1d-4147-8674-e42625682ece",
          "length": 252,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "5ce98847-41ea-4cc0-982a-50238e56eae4"
        },
        "item": {
          "id": "c59ece2c-b620-4498-a42b-23094bc890fc",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "0e372ea4-f76f-45e5-82a7-ed84671693b0",
          "status": "OK",
          "code": 200,
          "responseTime": 47,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "3f8afb12-02b2-41dd-94ca-c3deb1a69e92",
        "cursor": {
          "ref": "84d054bb-c279-4c54-a269-73079317f899",
          "length": 252,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "8d18f8ca-ee84-4649-a719-d36a48c2eed5"
        },
        "item": {
          "id": "3f8afb12-02b2-41dd-94ca-c3deb1a69e92",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "638e9ccc-5c92-49bc-a83a-55a3be646165",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "f5bdd873-dbd8-45e9-b6d3-c50c2547cf5b",
        "cursor": {
          "ref": "c557ecc0-b309-4159-9473-8f984c235128",
          "length": 252,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "6e8644cb-a792-4c7b-8cd6-ab7063cc9cfa"
        },
        "item": {
          "id": "f5bdd873-dbd8-45e9-b6d3-c50c2547cf5b",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "8e77279b-9858-436e-85ab-fe68c9ba3e48",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "fde2228b-331e-4a37-bfe8-22bb25b433ca",
        "cursor": {
          "ref": "cad2faf6-194e-4202-831b-8a0beaf52fb9",
          "length": 252,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "67ce25ae-1c57-4b1c-857c-e77ec4fc1c0a"
        },
        "item": {
          "id": "fde2228b-331e-4a37-bfe8-22bb25b433ca",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "c30d31e2-37ae-4faa-91cb-7cf5a97e51c9",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "7353bf02-c9c1-43d7-80e0-74ef778a868e",
        "cursor": {
          "ref": "b6f80fb8-d3b4-4235-b1bb-538e33ee02b8",
          "length": 252,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "f6af2b97-6a4a-4aa1-96b7-4c7289b0a195"
        },
        "item": {
          "id": "7353bf02-c9c1-43d7-80e0-74ef778a868e",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "e550f7e2-ee98-4ce4-8191-449d3aa6c846",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "e45372b2-6723-4e59-840c-290899980da8",
        "cursor": {
          "ref": "a8feb7cb-4a48-4ceb-9921-cf2201ad932a",
          "length": 252,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "685ff954-8afa-42bc-9743-5da2af034d2e"
        },
        "item": {
          "id": "e45372b2-6723-4e59-840c-290899980da8",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "db4c5487-9ca2-4476-b810-e55b10fd7404",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "f6505587-a7ba-4ad1-94a9-d07155ba5879",
        "cursor": {
          "ref": "3c9d1ed2-69c1-4143-b5c2-70d602a6c79d",
          "length": 252,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "20208f6f-6a5c-4a5e-a026-70bab90ffd2d"
        },
        "item": {
          "id": "f6505587-a7ba-4ad1-94a9-d07155ba5879",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "eeb10979-1185-4abd-b4ba-a8175a90e467",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "02aef712-7f41-4fee-9b34-e962b35dea48",
        "cursor": {
          "ref": "4f7e17bc-757c-40a8-b2fd-b158adce8088",
          "length": 252,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "d87d96c4-4568-4cda-b137-f9f4d8f6f16e"
        },
        "item": {
          "id": "02aef712-7f41-4fee-9b34-e962b35dea48",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "48f36442-9a6a-4e8b-ac04-655e21ff0331",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "74a71386-fc67-4183-a206-6895988eada6",
        "cursor": {
          "ref": "70734184-6e47-429e-9620-77f4c38e3cd0",
          "length": 252,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "17eb76d5-62f6-4483-927a-dbcfd886f6c9"
        },
        "item": {
          "id": "74a71386-fc67-4183-a206-6895988eada6",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "033843da-d70f-4fa3-b190-84ace0d6203c",
          "status": "OK",
          "code": 200,
          "responseTime": 46,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "52bde9e3-0932-4740-a5c4-fa83a13b46e1",
        "cursor": {
          "ref": "8eacedb5-adc3-4da5-a58e-cefe19b8b913",
          "length": 252,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "046478b3-f2ee-4bcf-a59d-d835c5f701f5"
        },
        "item": {
          "id": "52bde9e3-0932-4740-a5c4-fa83a13b46e1",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "2ca04eb8-b406-4d34-b2fb-49a78bfbd499",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "d23ed2ed-4cf3-4501-b984-6b60896c8f5a",
        "cursor": {
          "ref": "b1b980ac-faaf-4d95-af36-6afde716f42b",
          "length": 252,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "f0bd3a35-8e1e-487a-b6b2-087f97c097cf"
        },
        "item": {
          "id": "d23ed2ed-4cf3-4501-b984-6b60896c8f5a",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "02cd470f-0088-4705-ae05-b4f5934a3562",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "27abb3df-9d45-4309-8806-9dc7a5e9fc0d",
        "cursor": {
          "ref": "1c12acf5-6ef7-4d78-b71a-3cc62aa94b8c",
          "length": 252,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "bdd4980a-4228-44f4-ad5e-9c33f22b2368"
        },
        "item": {
          "id": "27abb3df-9d45-4309-8806-9dc7a5e9fc0d",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "17511a4c-6c1c-468a-a5a8-cc1d386d49b8",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "e86323de-82eb-4369-80ee-a22e2367eb0f",
        "cursor": {
          "ref": "fbcab1e7-5a12-45e0-834d-713f1c72d074",
          "length": 252,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "94325cd2-9553-4c43-8788-cc6766f25384"
        },
        "item": {
          "id": "e86323de-82eb-4369-80ee-a22e2367eb0f",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "631745e4-5d22-4e10-b07c-f296655cbf17",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "7364a30d-6084-4b35-b4f0-b6438e30dabe",
        "cursor": {
          "ref": "ef71a397-bec0-4443-8403-bf510fc84884",
          "length": 252,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "74bcb845-af4a-4f47-bb95-e9abecb1a4a5"
        },
        "item": {
          "id": "7364a30d-6084-4b35-b4f0-b6438e30dabe",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "84eef6a3-11e9-402f-9f2d-55bde9d9ebb6",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "71926e2e-ebf0-47fa-ba91-017fabea1c20",
        "cursor": {
          "ref": "9ec9e367-5b31-489e-ad9d-102a154d6647",
          "length": 252,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "0ebab86f-f369-4065-9e00-dfa7d29acd57"
        },
        "item": {
          "id": "71926e2e-ebf0-47fa-ba91-017fabea1c20",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "9a04b762-c831-4014-a1e2-d6a0df443294",
          "status": "OK",
          "code": 200,
          "responseTime": 50,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "f7a370b3-1e0b-4e79-b2bf-236bb5f3a553",
        "cursor": {
          "ref": "a41e87a0-032f-48c1-8597-3527d59f8b5a",
          "length": 252,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "6fec6210-f89b-4f6e-994c-6ab435884eb5"
        },
        "item": {
          "id": "f7a370b3-1e0b-4e79-b2bf-236bb5f3a553",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "ab9e4b11-5612-423a-9c13-55ef6e41f8df",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "2854b7ea-bac0-4eb6-8f1e-3e2d1f6b50f7",
        "cursor": {
          "ref": "9753c651-9044-4034-8129-023841ee2e9a",
          "length": 252,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "eed12cd2-b0a7-477d-b59d-3427dde47f62"
        },
        "item": {
          "id": "2854b7ea-bac0-4eb6-8f1e-3e2d1f6b50f7",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "32c2b6d7-39ca-440c-b425-5823db2a8756",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0adfbcae-63aa-4dbf-93c2-dbbed47ea075",
        "cursor": {
          "ref": "085bb9cd-c67d-45ce-bdb4-b43b6248062a",
          "length": 252,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "d3fb0a88-5eeb-44e9-9c7b-b41b5dfbb8fb"
        },
        "item": {
          "id": "0adfbcae-63aa-4dbf-93c2-dbbed47ea075",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "09c766cf-0e84-49ee-8ea8-709e12f46ad0",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 48,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e43d1571-137d-4808-863e-f3e10737398b",
        "cursor": {
          "ref": "66e2af6a-70f3-487f-825a-7ad3d4da6218",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "810d01fa-dffa-4734-9c6a-a73323fee0e7"
        },
        "item": {
          "id": "e43d1571-137d-4808-863e-f3e10737398b",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "d962935d-55c8-4825-800e-2b3fbd4b42d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e43d1571-137d-4808-863e-f3e10737398b",
        "cursor": {
          "ref": "66e2af6a-70f3-487f-825a-7ad3d4da6218",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "810d01fa-dffa-4734-9c6a-a73323fee0e7"
        },
        "item": {
          "id": "e43d1571-137d-4808-863e-f3e10737398b",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "d962935d-55c8-4825-800e-2b3fbd4b42d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b1cc3c2-7b75-425b-8ad5-2487f4a322f5",
        "cursor": {
          "ref": "0f3817e2-b915-4f4a-9641-af9f0b6dd652",
          "length": 252,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "e4aa97f7-47c5-4134-bb37-72f4d89b8cc2"
        },
        "item": {
          "id": "7b1cc3c2-7b75-425b-8ad5-2487f4a322f5",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "eaa78c8f-4f4c-42b3-b0da-5893fdc5726e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b98efdfa-999d-49fc-a866-2bb5f5a9c50e",
        "cursor": {
          "ref": "962f207d-08b0-47d0-ad7f-6f81415b530d",
          "length": 252,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "de987c18-4a18-423e-b5ba-55a9bbba8743"
        },
        "item": {
          "id": "b98efdfa-999d-49fc-a866-2bb5f5a9c50e",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "e7aaece1-d007-4471-abb7-7231a87c8810",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af2fee3d-352e-488f-9bbd-03143bf36925",
        "cursor": {
          "ref": "f9f47e09-743f-4221-9d3e-9c2c7f1422ef",
          "length": 252,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "2a089eba-7849-4720-8398-7a0e2eb51d55"
        },
        "item": {
          "id": "af2fee3d-352e-488f-9bbd-03143bf36925",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "1a31f4da-95eb-434c-a7fd-17e67139e57c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86f83272-361e-410f-8776-5b8991ad897d",
        "cursor": {
          "ref": "8247844d-ec12-4f01-b9fd-50927fbc7199",
          "length": 252,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "a2fee540-44b0-4ae1-8eee-0e261c306a64"
        },
        "item": {
          "id": "86f83272-361e-410f-8776-5b8991ad897d",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "2c55bc95-0fc9-4bd4-9b44-05cf9002238d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db2abeab-031b-47dc-993f-2cd515dbdebf",
        "cursor": {
          "ref": "81fd38dd-dbf6-4335-b26e-d32117a685e6",
          "length": 252,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "e7d12602-e31d-4bb8-a895-02d71b64a918"
        },
        "item": {
          "id": "db2abeab-031b-47dc-993f-2cd515dbdebf",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "fc52401e-f5ab-4a31-9f98-0b2a1922ee51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89d5acd2-4f7a-46eb-bf6d-8686d7bbbef2",
        "cursor": {
          "ref": "5cac3180-d73a-43f2-b676-e7a5c5d046cb",
          "length": 252,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "8c274cdb-bc1c-46ee-b6d0-2b4ce7d3f831"
        },
        "item": {
          "id": "89d5acd2-4f7a-46eb-bf6d-8686d7bbbef2",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "e248a7c8-4e9e-4c26-804c-7e986a86345f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 740,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "034487a4-db40-4985-b3c0-8d076b4da4c3",
        "cursor": {
          "ref": "f7669db6-2275-4a1f-b3f1-8d382b7a3a92",
          "length": 252,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "7f4b7ad7-d93c-4b77-8d50-27f972c5f6e5"
        },
        "item": {
          "id": "034487a4-db40-4985-b3c0-8d076b4da4c3",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "2280dd4d-6e35-4d5b-80f7-edf5f7c4a1a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa45da34-02da-4f9b-aa73-dd2428bc64eb",
        "cursor": {
          "ref": "d32cf2cb-fe71-441c-b2cc-27b091cfa479",
          "length": 252,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "03787f6e-abf9-4990-9383-cd8b3cf808ea"
        },
        "item": {
          "id": "fa45da34-02da-4f9b-aa73-dd2428bc64eb",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "c3145abf-44fa-48e6-aef0-241c4ee0abac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08e0d16e-19c5-4ee1-bc50-d5ebf7748c49",
        "cursor": {
          "ref": "a3e0af61-9014-4450-bd0c-52947a600d51",
          "length": 252,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "de136abf-8026-4076-abfe-f273e81dae12"
        },
        "item": {
          "id": "08e0d16e-19c5-4ee1-bc50-d5ebf7748c49",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "410ba1d1-32b8-4606-92de-b78488f47063",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "679242ff-c271-4dff-ada3-637cd800504a",
        "cursor": {
          "ref": "8c6f1c50-b538-4b1b-b18f-f055d9c7bec3",
          "length": 252,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "ab00bcb2-870e-4b12-bfcb-427750fdc165"
        },
        "item": {
          "id": "679242ff-c271-4dff-ada3-637cd800504a",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "042d75cd-4c21-469c-aaf6-141fb2dceb75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1a7b499-a0a8-4275-b48e-abb1e3bb6ab5",
        "cursor": {
          "ref": "43eb0d74-c8a8-4172-bb5e-8c571f487578",
          "length": 252,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "1971f993-e235-41cd-bf19-51f36f6ee275"
        },
        "item": {
          "id": "e1a7b499-a0a8-4275-b48e-abb1e3bb6ab5",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "050472b6-c012-485b-8c2d-e19ea358d051",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b1668dc-7f53-477e-acbe-1bc982fd7d1c",
        "cursor": {
          "ref": "6587f40e-9243-4df2-9994-c355de09d387",
          "length": 252,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "f05b72c2-8738-479f-a2dc-c067b047e7e0"
        },
        "item": {
          "id": "3b1668dc-7f53-477e-acbe-1bc982fd7d1c",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "31f3c94e-d0bc-494c-8859-91ad67df9e0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f8ffec2-a55e-4d2b-b2c8-c754c96781b2",
        "cursor": {
          "ref": "fd1fb49c-0717-4e59-8428-7a66ed1bd08d",
          "length": 252,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "f1531855-a578-4756-a730-021b1bf2c536"
        },
        "item": {
          "id": "4f8ffec2-a55e-4d2b-b2c8-c754c96781b2",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "25b05165-c1c7-4b5e-aa06-dcbefe9dcae7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c85226f-90e7-41b0-8eef-55cf3644cd20",
        "cursor": {
          "ref": "28cc74f8-2baa-4aec-b49c-d357c5c47820",
          "length": 252,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "81f5645e-0d3b-4c75-9038-8d81ab935e53"
        },
        "item": {
          "id": "9c85226f-90e7-41b0-8eef-55cf3644cd20",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "9baf0718-d59c-4856-8b42-bd5e3f605b42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29e7ab60-87df-43da-9208-e37fd3dcc165",
        "cursor": {
          "ref": "ae577994-f442-49d6-b952-481ca62874ad",
          "length": 252,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "8400c1f1-50a8-40db-a041-b996c238927e"
        },
        "item": {
          "id": "29e7ab60-87df-43da-9208-e37fd3dcc165",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "9e222ca7-8905-47fe-9809-fa2b4e478e2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1336101a-97ae-4c62-bb46-d0964efda139",
        "cursor": {
          "ref": "aa4883b8-84a7-4850-a118-be7a7034a9d4",
          "length": 252,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "1d464722-02a3-42af-9da1-a4ee08ef2334"
        },
        "item": {
          "id": "1336101a-97ae-4c62-bb46-d0964efda139",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "bb9062c0-9462-4a56-99ca-6a2b10c3bd45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f86f5fd4-aac1-4bcc-a3d9-eaa8db9d68be",
        "cursor": {
          "ref": "aa3a7688-802f-4e62-a6fd-e974916f2d38",
          "length": 252,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "c8c31681-5e39-42ff-bd40-f1dd56dd13ad"
        },
        "item": {
          "id": "f86f5fd4-aac1-4bcc-a3d9-eaa8db9d68be",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "44205fb0-7af9-4571-a1cc-673f4e52eb0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 311,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8a668fd-4c4b-4e42-a69f-8d33ed490b50",
        "cursor": {
          "ref": "759ac1c2-7504-4407-b2de-ba40a8cd951d",
          "length": 252,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "f3349761-ec9c-47df-9fb6-ca733df69ca3"
        },
        "item": {
          "id": "b8a668fd-4c4b-4e42-a69f-8d33ed490b50",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "f35c47d6-bf4c-4868-b9bc-0456e4c232d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 211,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae7864ee-46e1-418e-a0ef-fc5386750ff2",
        "cursor": {
          "ref": "5247581e-9d66-4128-94d0-3189b83069e9",
          "length": 252,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "07cb4403-22ef-4dd9-86b5-9cf1ba2531e9"
        },
        "item": {
          "id": "ae7864ee-46e1-418e-a0ef-fc5386750ff2",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "62620f0e-161b-4938-837d-5670637524e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 209,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf0654b8-1044-4888-bd88-d15514da3d94",
        "cursor": {
          "ref": "d6b833b9-4295-4b99-9d23-c326db40bead",
          "length": 252,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "1dd93e69-a67b-4dc5-bcf1-7ae58db5ac38"
        },
        "item": {
          "id": "bf0654b8-1044-4888-bd88-d15514da3d94",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "63b1e153-9fc2-4033-ac9d-863bdf606681",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 217,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ab15109-8b0a-4277-a9cd-8cab8f11b900",
        "cursor": {
          "ref": "7d39bda6-6498-4633-9410-34da9fba1109",
          "length": 252,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "6dd47c94-18ef-4c7c-9baf-c273c738200b"
        },
        "item": {
          "id": "8ab15109-8b0a-4277-a9cd-8cab8f11b900",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "adb5bbb2-b76e-47e3-9377-12b47755281b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 250,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e5df9af-cc1e-4823-859e-110e55a68fef",
        "cursor": {
          "ref": "5c9161db-e050-47c1-9864-8c8f79061830",
          "length": 252,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "57d0f692-407a-43fa-844a-71d5b2c6923d"
        },
        "item": {
          "id": "0e5df9af-cc1e-4823-859e-110e55a68fef",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "cd77342a-81f5-4a1f-ae2c-80c43f2934c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 212,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec5d9298-5409-4ab7-bd7a-10fcfb29cbde",
        "cursor": {
          "ref": "df4cdabb-6d84-44ae-86ac-d0a66c1bb2d7",
          "length": 252,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "9a9f282c-d40b-4dea-a262-80a916eb761f"
        },
        "item": {
          "id": "ec5d9298-5409-4ab7-bd7a-10fcfb29cbde",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "737a3bac-4ebd-461e-b73a-32c446c1d2ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bca2c812-cc23-44a7-b11f-7dd00a4e2388",
        "cursor": {
          "ref": "378a775e-4fb6-43e1-8d24-e56da9972cf9",
          "length": 252,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "aec132ce-b4df-4612-9383-082ced6a6cf6"
        },
        "item": {
          "id": "bca2c812-cc23-44a7-b11f-7dd00a4e2388",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "47912965-2e3b-4519-9a63-8241de8d3cf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aa07569-6a35-4ee8-a7a9-3c771d91b8fe",
        "cursor": {
          "ref": "f47ad4d1-3e51-4d89-abdd-0aa6b9105e94",
          "length": 252,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "669dd195-2320-41de-86a3-4fb84c4105c4"
        },
        "item": {
          "id": "3aa07569-6a35-4ee8-a7a9-3c771d91b8fe",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "e09cb037-42b6-4eac-acc2-2a3b76f092ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 224,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4cde9bd-0dd6-493c-906a-ed6b5eeb374a",
        "cursor": {
          "ref": "042c0151-e22a-446c-b45a-ec66ccabe76a",
          "length": 252,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "3dad24d2-635d-4a05-924d-97aea922738d"
        },
        "item": {
          "id": "a4cde9bd-0dd6-493c-906a-ed6b5eeb374a",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "c49bf70e-f71f-45f6-b81c-eb13d6ad2bad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "140056a9-0aa1-47fc-91f2-8afed4cb3c2b",
        "cursor": {
          "ref": "66371459-d417-46c7-bc96-b0600588ef0d",
          "length": 252,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "32e6b184-9ad5-4404-87f9-7c8c36c884c1"
        },
        "item": {
          "id": "140056a9-0aa1-47fc-91f2-8afed4cb3c2b",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "b64aa771-fea5-461b-a244-e0de369f0f09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49c79e05-2978-46a2-b523-3c0eb0353218",
        "cursor": {
          "ref": "c6e7b6b3-37cc-4f3c-a0a4-d474897d9bd5",
          "length": 252,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "af787463-fa99-46e0-ab19-2a0dd99f7de2"
        },
        "item": {
          "id": "49c79e05-2978-46a2-b523-3c0eb0353218",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "a452ebfe-f4cf-4eb0-8325-629d22e54f5a",
          "status": "OK",
          "code": 200,
          "responseTime": 217,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "6c63148d-1ce4-4366-a7f0-9af9a275944b",
        "cursor": {
          "ref": "fc39480b-a15f-43b9-84f7-e4700a55f760",
          "length": 252,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "e79e8471-1708-4a2a-93a8-6960affa289f"
        },
        "item": {
          "id": "6c63148d-1ce4-4366-a7f0-9af9a275944b",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "c2aa90b5-2b0f-4075-b7a3-e742453fcb88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43ab024c-09d4-49a6-bdc9-a9c770472082",
        "cursor": {
          "ref": "ec0dbe25-111b-4db3-ae6b-36608c3aca2a",
          "length": 252,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "9a01c26a-80cd-47f0-9fb1-60551c1bd70d"
        },
        "item": {
          "id": "43ab024c-09d4-49a6-bdc9-a9c770472082",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "33ee39b3-433d-414e-9189-73dc5dfbdbba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8527416a-dbce-4da0-8a00-7ee97870b34b",
        "cursor": {
          "ref": "072c8a6d-4f96-4ff2-aa99-2c176cbfede5",
          "length": 252,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "c6a644ab-0e34-4797-b8a7-c5636a51d993"
        },
        "item": {
          "id": "8527416a-dbce-4da0-8a00-7ee97870b34b",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "ccda93ae-b208-4e5b-9b54-956f838cb16d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51906757-c6e1-4473-8e4b-b56ba063dcc9",
        "cursor": {
          "ref": "3e7b656b-2ba9-49c4-bae8-3cae819fa51f",
          "length": 252,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "00e75177-3086-450c-bd98-539c6eb9c230"
        },
        "item": {
          "id": "51906757-c6e1-4473-8e4b-b56ba063dcc9",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "bff3cfb5-22ab-4f09-b1e9-1c68af0cee67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 222,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2769436d-85b0-4308-a68e-f0c0ab78280c",
        "cursor": {
          "ref": "9e3f4eaf-77d4-4058-82b1-155c71d7f713",
          "length": 252,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "2305deac-ac92-4d9e-98e7-d1ab363a7440"
        },
        "item": {
          "id": "2769436d-85b0-4308-a68e-f0c0ab78280c",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "0538e904-b417-4813-9b68-aea18fa43e35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e704c59e-0664-41c1-8197-5d531c8abbec",
        "cursor": {
          "ref": "2942b485-91e6-4ce4-a4d2-ee539c09ff8a",
          "length": 252,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "90ce0119-0b2e-4447-b2c8-e9f4086997f9"
        },
        "item": {
          "id": "e704c59e-0664-41c1-8197-5d531c8abbec",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "e7f4c47b-5e28-4756-b744-278228ef614a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 203,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2609772e-601c-4f65-abd3-0ec8bd45788d",
        "cursor": {
          "ref": "eb082bcc-c900-4a68-bbad-00d0fe79abc2",
          "length": 252,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "e5ad285e-89ac-4b3a-9131-7b23a00c72bb"
        },
        "item": {
          "id": "2609772e-601c-4f65-abd3-0ec8bd45788d",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "dac1f777-2caa-4063-94d0-f3b98f34e485",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 265,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3d8d8e8-8fe5-48ac-b3f8-feef0094602f",
        "cursor": {
          "ref": "959a0eca-ec90-4dce-840c-2ee58ae0c353",
          "length": 252,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "303e4b84-a5d3-46d6-8d20-ff5abeefe97e"
        },
        "item": {
          "id": "a3d8d8e8-8fe5-48ac-b3f8-feef0094602f",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "bb415520-7d29-492e-827f-af19bb4fa3b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 515,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14566a12-22b7-4aa0-bd16-892d498b55f1",
        "cursor": {
          "ref": "4fe48118-4ca3-4bac-b5f4-626bf71c2f6a",
          "length": 252,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "1489dd38-491f-4acd-8b21-e6173dadb134"
        },
        "item": {
          "id": "14566a12-22b7-4aa0-bd16-892d498b55f1",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "77319a7d-c5e8-4d89-99d9-9c1ad3a43582",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 199,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5277b051-4f72-422c-9a1c-743060262bbd",
        "cursor": {
          "ref": "7d0a4791-d086-4b51-b267-d855b9ae32d8",
          "length": 252,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "f13da76f-3d52-4142-b8c6-e37bbd9f6b8b"
        },
        "item": {
          "id": "5277b051-4f72-422c-9a1c-743060262bbd",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "41200129-8e33-4397-937d-274d85f7835c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 220,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22d39364-cc5e-45ba-9278-ba891cea60c2",
        "cursor": {
          "ref": "b65ad3c3-fc52-43f9-a96d-81e0a8221f59",
          "length": 252,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "20b83629-715e-4925-b92c-711ed5271cb4"
        },
        "item": {
          "id": "22d39364-cc5e-45ba-9278-ba891cea60c2",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "df1be850-0f59-47fd-8c94-857a50828438",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 572,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34a05910-ea2d-4ec4-8074-4049af08467f",
        "cursor": {
          "ref": "b8095d75-f4c9-47b7-99a0-0188a0631478",
          "length": 252,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "02a72b0e-bc7b-481f-9f4c-bde390b94740"
        },
        "item": {
          "id": "34a05910-ea2d-4ec4-8074-4049af08467f",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "4bcd33b9-1e45-44f0-9b0d-52587b015b28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 203,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73cb0967-b9f8-4848-bcdf-cbb4b5700d73",
        "cursor": {
          "ref": "7302d4d4-a7a3-4974-ab2d-30f546baaa1a",
          "length": 252,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "f4e6d53d-05e0-4a43-99d3-74cc96e7726c"
        },
        "item": {
          "id": "73cb0967-b9f8-4848-bcdf-cbb4b5700d73",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "b7363da7-6777-415d-8a6b-bbc346b7542e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 248,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7173c11c-f818-42b5-a189-d40dee2c82b8",
        "cursor": {
          "ref": "5983fd9d-f10c-4bc4-8e6d-065ee476c33a",
          "length": 252,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "3a4ed05f-1e89-4ba0-a4c0-cf60b55ae4fc"
        },
        "item": {
          "id": "7173c11c-f818-42b5-a189-d40dee2c82b8",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "6dc9c73f-50fb-4839-9edc-a6cf484f1fcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 230,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc42499a-700c-47f5-9e27-d855f753bdb0",
        "cursor": {
          "ref": "f49027e4-6119-445e-a897-49446a6d30c2",
          "length": 252,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "45a8522e-677e-431d-9f54-1b91f0733d64"
        },
        "item": {
          "id": "dc42499a-700c-47f5-9e27-d855f753bdb0",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "5636819a-3bb9-4f75-a122-e5fdbf07107a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 379,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b164c5cc-7408-4f22-8004-313456623cf2",
        "cursor": {
          "ref": "38b42e94-e357-46f6-8d3e-7ee66e113a8c",
          "length": 252,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "c360d120-2b5c-4b0d-abdb-e3fea1e07c0c"
        },
        "item": {
          "id": "b164c5cc-7408-4f22-8004-313456623cf2",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "4e110c70-f30b-47cc-9e07-1241196638dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 209,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c681f6da-c819-4092-91a4-df6e04f3c699",
        "cursor": {
          "ref": "8baa4ce0-62bf-4507-9b02-3fa81e6f71f1",
          "length": 252,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "4f7c387c-ff35-416c-a2b4-e8338800df3f"
        },
        "item": {
          "id": "c681f6da-c819-4092-91a4-df6e04f3c699",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "94396f92-b534-41a9-9355-62f022d2a875",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 205,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "162cf607-08ad-47df-9b0b-1dcc99e3a7af",
        "cursor": {
          "ref": "9400471a-186d-463b-9eaf-77667aad3204",
          "length": 252,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "ed17ab0e-80bb-40a1-90a7-bd36a020872f"
        },
        "item": {
          "id": "162cf607-08ad-47df-9b0b-1dcc99e3a7af",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "ac453239-f2bf-4aef-a868-f5c0d4ea2421",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 226,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6cfaca6-c70e-46c1-ba36-3e321caf858c",
        "cursor": {
          "ref": "5f19f0dc-33d0-469a-a3c6-5de8280d706a",
          "length": 252,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "fa192c62-eb3f-4830-9775-d6aac6d64c83"
        },
        "item": {
          "id": "c6cfaca6-c70e-46c1-ba36-3e321caf858c",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "c67e3aa2-ef54-40e0-8c51-ad2f1ab32913",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 198,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ed35ced-fbcb-4cad-b753-c086578c0f0d",
        "cursor": {
          "ref": "faa1176a-3eca-4813-a1a8-64a171cda29d",
          "length": 252,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "7e7222e3-84fe-4184-8d54-b8a24e732f45"
        },
        "item": {
          "id": "3ed35ced-fbcb-4cad-b753-c086578c0f0d",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "74fd865f-7c6f-4475-8ba5-907bc8cde304",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 229,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64340f01-f31b-4ff6-b0f3-62c9d7a3c019",
        "cursor": {
          "ref": "9446c289-67d5-4f91-8e6d-0115c1819729",
          "length": 252,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "6053a45a-f16e-4673-972f-9fc2941aca33"
        },
        "item": {
          "id": "64340f01-f31b-4ff6-b0f3-62c9d7a3c019",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "7b0ee0f7-bfc2-4907-b6b7-1d892135481e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 220,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3dc66bc-5fdf-48d4-9ca9-e3392cfdcd4c",
        "cursor": {
          "ref": "e7781867-15e9-44fb-b14e-4ff96fab0745",
          "length": 252,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "a5e9bc04-4a7a-438f-8de0-f890af690d9b"
        },
        "item": {
          "id": "d3dc66bc-5fdf-48d4-9ca9-e3392cfdcd4c",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "b86d7dbf-88dd-4750-8c65-d776ee031b9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 210,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10bedaeb-8c21-4512-bf42-9ba723671b28",
        "cursor": {
          "ref": "c99d8b4f-fa92-4c77-bfb4-4edad49cc616",
          "length": 252,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "99ea7a26-60df-408f-9a19-a217313844f1"
        },
        "item": {
          "id": "10bedaeb-8c21-4512-bf42-9ba723671b28",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "ef000acb-b796-47bb-95a2-607e65d755a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1688,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0646ce92-984c-44e3-822b-8862cb5f57a1",
        "cursor": {
          "ref": "f44ee917-cb2b-41fd-991d-96da523845a4",
          "length": 252,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "dde5751d-9905-415d-9abb-2ce013dd7417"
        },
        "item": {
          "id": "0646ce92-984c-44e3-822b-8862cb5f57a1",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "716f93b5-d5cf-4682-a157-c8ec99d02ff3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1082,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ce74bae-ee24-47e8-b5e3-c47b26f66455",
        "cursor": {
          "ref": "e4015b6c-1358-42ee-8a98-d43ded652c7d",
          "length": 252,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "bc428017-df91-484e-a671-1f298785a37d"
        },
        "item": {
          "id": "3ce74bae-ee24-47e8-b5e3-c47b26f66455",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "32ae8414-0cda-458e-b934-9ef3a8a7a637",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77e4643c-c10a-4f2b-b5bb-5a4a0e374a6d",
        "cursor": {
          "ref": "567d4a44-d46c-4147-9537-0a685744e46c",
          "length": 252,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "5350be79-afc8-45e8-ab82-808d25705fd3"
        },
        "item": {
          "id": "77e4643c-c10a-4f2b-b5bb-5a4a0e374a6d",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "dd327f23-23fa-4e8a-83af-e71c27b70bd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4abd1cc-910b-4eb8-bf6c-97d32633ecd2",
        "cursor": {
          "ref": "075b0be4-ba0c-4036-a5b6-91d4923e1b75",
          "length": 252,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "b4bf14e2-11b2-4b88-98f6-c1b7771cd1a6"
        },
        "item": {
          "id": "a4abd1cc-910b-4eb8-bf6c-97d32633ecd2",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "0ed728eb-9cce-4a6f-9c66-c0adfb0ec7c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d5ac8af-9500-430a-9fd7-bf8e442d4cf6",
        "cursor": {
          "ref": "c9149a1c-c88e-417b-bdb1-377653dc41cc",
          "length": 252,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "949a7c15-27ac-4fa1-a20a-26192d6da84e"
        },
        "item": {
          "id": "8d5ac8af-9500-430a-9fd7-bf8e442d4cf6",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "848d823c-6aff-4e63-8451-7f78c2069410",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 216,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88065e3e-55b8-4199-b985-5c432c7583b5",
        "cursor": {
          "ref": "dfeb4a07-d78c-4875-8497-bd2dc3e62540",
          "length": 252,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "1f36d60f-5ceb-432d-8a1a-76ce41506307"
        },
        "item": {
          "id": "88065e3e-55b8-4199-b985-5c432c7583b5",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "12b1e94f-40f6-43e3-a13e-04467747b32b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "720cf0f3-2bbb-4a4b-8d4c-4fe4a689c9f8",
        "cursor": {
          "ref": "f9862358-45a0-488e-9db6-a5b92a9541e2",
          "length": 252,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "ae6e552f-bd7c-49a7-bc8b-6da1fafd6663"
        },
        "item": {
          "id": "720cf0f3-2bbb-4a4b-8d4c-4fe4a689c9f8",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "cfc19d23-2af3-4aa5-9f51-5235df9c49fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43fca855-8219-4637-8e02-171ca267f6bf",
        "cursor": {
          "ref": "4c69a942-4eb0-4999-88c1-88870d4aafa7",
          "length": 252,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "2b2b7a51-5b88-4026-badc-02cfd581de6b"
        },
        "item": {
          "id": "43fca855-8219-4637-8e02-171ca267f6bf",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "8ee9a462-b729-4003-b1e8-047ab48fad53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 148,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "932b3991-d0b8-469b-bf17-397098ae0f5a",
        "cursor": {
          "ref": "9bdb9daf-7468-4bb8-9f8f-651f2ee37159",
          "length": 252,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "3373ce74-bb20-43c2-8fa2-052b8aa0935c"
        },
        "item": {
          "id": "932b3991-d0b8-469b-bf17-397098ae0f5a",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "9cfc0675-58d5-4853-908e-500e46fea254",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58157370-0ac4-46cd-adeb-808c42b4d509",
        "cursor": {
          "ref": "a3a4cc7e-d525-4f26-ac3a-841d146ab34a",
          "length": 252,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "96cbcd76-935f-4afc-814e-faac0d789603"
        },
        "item": {
          "id": "58157370-0ac4-46cd-adeb-808c42b4d509",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "bc96190e-982a-4ec7-a2cc-0bf26e28a9f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 197,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bebd23b-8f56-4b79-8ce3-c56385a8d6a4",
        "cursor": {
          "ref": "8dba878c-79a3-494a-9986-3377e870f34d",
          "length": 252,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "cd92e8ac-7752-420a-9d26-c833ff1e8b50"
        },
        "item": {
          "id": "4bebd23b-8f56-4b79-8ce3-c56385a8d6a4",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "f4d7d3e7-3f43-4476-8518-d9fe4ed9ae08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce10c10d-afa7-4643-90e7-06fab398cdd9",
        "cursor": {
          "ref": "9d6d89c9-6fc6-4e2e-9860-f1d16dffe861",
          "length": 252,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "eed7d015-d993-4bf8-ac89-a7dc504c7a9e"
        },
        "item": {
          "id": "ce10c10d-afa7-4643-90e7-06fab398cdd9",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "d4976a3b-3c17-49d5-b7a2-61462a9a8eda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5958e6f9-bca4-4076-bb86-8c72c6442364",
        "cursor": {
          "ref": "7b269ad5-6cb7-4ffc-82af-9fb5942f278b",
          "length": 252,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "9ae5517a-b83b-4f9a-bfab-5ed5a62789fa"
        },
        "item": {
          "id": "5958e6f9-bca4-4076-bb86-8c72c6442364",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "775abefe-a4f8-40ea-b863-9dc2cba06239",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4a41bde-2028-4e4a-9205-a507459494e3",
        "cursor": {
          "ref": "3a3b2818-7dab-46c7-b619-afa89445b39b",
          "length": 252,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "ac0eb0c9-d65c-4b32-b334-197454a31989"
        },
        "item": {
          "id": "d4a41bde-2028-4e4a-9205-a507459494e3",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "65f97f55-9cf1-4b5f-9f2a-7b9316184fa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fefb50f5-ddc5-4990-b726-5fffbc76cae1",
        "cursor": {
          "ref": "fd6ef045-42e2-476d-8deb-d86a17ac58ce",
          "length": 252,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "192882b2-c010-4fe8-a7b4-a22b5f56f436"
        },
        "item": {
          "id": "fefb50f5-ddc5-4990-b726-5fffbc76cae1",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "495b460e-b020-4c47-8d3a-eaefe1f04a62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "798b1eef-1458-4216-a531-cf980484c730",
        "cursor": {
          "ref": "fadbb033-44da-4bab-96f9-3f0ad82d5008",
          "length": 252,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "1e96d93c-93be-4020-a3cc-33ed6b33ee88"
        },
        "item": {
          "id": "798b1eef-1458-4216-a531-cf980484c730",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "26dd9b77-e8c3-42a8-a731-abccde1cd200",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1b00ff9-26a7-42c6-ba34-5d4aca26123d",
        "cursor": {
          "ref": "be9b577b-840e-4543-82d3-132b0209fbde",
          "length": 252,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "2b2f6e10-b44a-426e-b89e-9bd508c81256"
        },
        "item": {
          "id": "f1b00ff9-26a7-42c6-ba34-5d4aca26123d",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "dfa6dc3f-a212-4289-9099-dd6a8d0f410d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b22ea74-36aa-499a-8e92-2ab1bfb7d343",
        "cursor": {
          "ref": "d0f85d5f-3b4d-4ea9-a2e1-74804ca7069f",
          "length": 252,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "89755b04-a424-43ff-bdc4-2a84d9ce2edf"
        },
        "item": {
          "id": "3b22ea74-36aa-499a-8e92-2ab1bfb7d343",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "82bc4e1e-7f61-429d-a688-3499230a8710",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4329eac0-0e34-478d-b83e-73dbe76fd047",
        "cursor": {
          "ref": "93b6daba-8121-4888-820a-27e1b6663921",
          "length": 252,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "60d9c534-ec33-4e58-a21d-9b376e5bdff9"
        },
        "item": {
          "id": "4329eac0-0e34-478d-b83e-73dbe76fd047",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "ba2584de-77ff-45fb-9ad4-f1383577c461",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10ecafda-2025-4f70-827d-ef4b9b1db718",
        "cursor": {
          "ref": "4d479347-4930-430b-bd31-0566f1ced666",
          "length": 252,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "56f42094-011b-4212-bef4-6f530018be19"
        },
        "item": {
          "id": "10ecafda-2025-4f70-827d-ef4b9b1db718",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "996d54c1-acfe-4f46-96a9-967806f53966",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af240b68-0b6c-4f1d-87c0-8782cfdf1015",
        "cursor": {
          "ref": "df8fe02c-2ca0-49f7-b24c-fd16e8740a79",
          "length": 252,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "0fa08f51-5e02-4ded-8ac3-01f9cb5a7b5a"
        },
        "item": {
          "id": "af240b68-0b6c-4f1d-87c0-8782cfdf1015",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "94737121-141e-4a05-a3aa-d8ed481f06ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e8174d4-aa6d-4bfc-878a-a9c7b136ef76",
        "cursor": {
          "ref": "ed28870f-f66d-466c-b18f-817da10b8571",
          "length": 252,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "c83d1a42-d747-46b9-ba75-b16a24c29fb6"
        },
        "item": {
          "id": "5e8174d4-aa6d-4bfc-878a-a9c7b136ef76",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "c528941d-c2bb-4750-8f41-1d5db078b8e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "092dd76c-681c-40c5-9f56-5032cef21a4c",
        "cursor": {
          "ref": "712476da-e900-4688-b9fd-a315924c09fa",
          "length": 252,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "e0adbe35-6f30-4112-9ce9-aeba930c8fa3"
        },
        "item": {
          "id": "092dd76c-681c-40c5-9f56-5032cef21a4c",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "55b13843-901e-436c-9bda-b8739f29f4a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d6d45d0-a2df-4afd-93cd-bf4820f1be0f",
        "cursor": {
          "ref": "876f73a7-178d-4094-9a13-f77318a370b0",
          "length": 252,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "a75cd56d-e0fe-468b-b550-35d9cac0ed6f"
        },
        "item": {
          "id": "8d6d45d0-a2df-4afd-93cd-bf4820f1be0f",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "3113f8e1-9340-4c8f-92f8-237b903dd7c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7effda1-bfcd-477c-aa4d-68fcfca476c0",
        "cursor": {
          "ref": "84f7c369-c94d-458b-8356-8b6f6ec5164b",
          "length": 252,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "2c694697-5e85-4a5d-bb56-cbe435231607"
        },
        "item": {
          "id": "a7effda1-bfcd-477c-aa4d-68fcfca476c0",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "08500ca6-8909-4149-8623-8db91c6e99ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbda6e35-457e-4693-99c2-c7c856c3fa70",
        "cursor": {
          "ref": "9a228391-e5d4-4664-8d48-41df640aac02",
          "length": 252,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "921002ef-ff55-4f6f-bb0f-ade3c57b9a86"
        },
        "item": {
          "id": "fbda6e35-457e-4693-99c2-c7c856c3fa70",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "14f7ef12-b18c-49eb-ab2a-23af4fa87880",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e08b1434-a038-40fa-94e2-2ce9177f8c4d",
        "cursor": {
          "ref": "6affd907-cf14-4677-af95-80f863cec0f0",
          "length": 252,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "a71d9c13-e5a6-42d6-bda7-fe867aa00cff"
        },
        "item": {
          "id": "e08b1434-a038-40fa-94e2-2ce9177f8c4d",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "e524dd6f-1cde-400e-8099-7366dcffbc66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3db2e285-750d-445b-9292-bcfbcacc405d",
        "cursor": {
          "ref": "508049ab-9c41-4e84-a23e-f067e51b4466",
          "length": 252,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "add21aa8-e426-4a7c-afae-96e5168d596f"
        },
        "item": {
          "id": "3db2e285-750d-445b-9292-bcfbcacc405d",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "9cb75472-638e-4066-aa5c-89f6d7275402",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cedf334a-76df-4e03-9b11-8880cb48461d",
        "cursor": {
          "ref": "41e5b949-a89e-44ce-a969-c9f8b6120a07",
          "length": 252,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "f8030ab2-ba7f-4738-ac26-0d724a6f6f30"
        },
        "item": {
          "id": "cedf334a-76df-4e03-9b11-8880cb48461d",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "1fae41ec-4e40-4973-b914-523cd167d934",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a84a1cf-bd56-422b-86ed-139481dc74f0",
        "cursor": {
          "ref": "56884246-0e06-434c-91e8-fc16b3f780c0",
          "length": 252,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "c524d129-dd83-4163-9d62-55f7ae7af18a"
        },
        "item": {
          "id": "5a84a1cf-bd56-422b-86ed-139481dc74f0",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "7eaf677a-5282-4156-b254-93a3d211122a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6cfc19e-92ef-4059-bffc-7e9db36c9f69",
        "cursor": {
          "ref": "6b7c27b4-70ca-49ba-9651-f6aeaa40e70d",
          "length": 252,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "87de26b8-d508-403d-b33b-e535d1f51750"
        },
        "item": {
          "id": "b6cfc19e-92ef-4059-bffc-7e9db36c9f69",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "a4e1af3c-4fdd-4345-b824-1b958ed4d1ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f2a75b4-2902-428c-9569-4a4f3667defa",
        "cursor": {
          "ref": "baeb7d8e-8ca0-4880-a35c-988bb4dc0a48",
          "length": 252,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "356f364e-bda9-4d70-92ac-11bcaf0a7076"
        },
        "item": {
          "id": "9f2a75b4-2902-428c-9569-4a4f3667defa",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "e352c8d8-4816-44fa-8442-079dbe4a4821",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31904cd0-9072-49a8-9d76-d4dfb5150d0c",
        "cursor": {
          "ref": "7b92c8dc-58a7-4f62-9461-57a352280977",
          "length": 252,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "eefbcb7a-611f-4caf-afa3-9c832f707967"
        },
        "item": {
          "id": "31904cd0-9072-49a8-9d76-d4dfb5150d0c",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "5e367949-429e-4236-b960-a0cfb1a00773",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26a424ab-d1f4-40f8-8d0d-d5532b0e988e",
        "cursor": {
          "ref": "c0eaf36a-8f18-4273-87de-b0014ec82940",
          "length": 252,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "f95da198-a32f-4123-b40d-aad9b5b17e81"
        },
        "item": {
          "id": "26a424ab-d1f4-40f8-8d0d-d5532b0e988e",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "38b22331-7570-46b8-b1f6-9dc861e58636",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea2ebb70-0440-4ee4-8c38-20b9d701537d",
        "cursor": {
          "ref": "530680de-ebe6-4e95-b98a-6f35f13e37bc",
          "length": 252,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "5bc8d079-53a3-485b-b444-46761bec0b30"
        },
        "item": {
          "id": "ea2ebb70-0440-4ee4-8c38-20b9d701537d",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "2a0ec6ab-41b1-4e55-864e-caed8d2eadef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e01b35de-f970-4cba-b077-20d85c70ad8b",
        "cursor": {
          "ref": "d2c7fc1a-10ea-45bb-82a2-11d2f625d0d0",
          "length": 252,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "68e100a8-a671-4d61-9e81-3b95cbf588be"
        },
        "item": {
          "id": "e01b35de-f970-4cba-b077-20d85c70ad8b",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "fa77d979-ffd7-4ca7-a4f1-f3ca74833890",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f994ed77-f9db-461e-a799-0e2097abfc1a",
        "cursor": {
          "ref": "548c1b0a-e09a-4d87-b5a6-6d793008513c",
          "length": 252,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "1843f0ba-d301-4e05-ac78-ab4ef879a22a"
        },
        "item": {
          "id": "f994ed77-f9db-461e-a799-0e2097abfc1a",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "8ae214b1-1057-4cc8-a32d-45e639bed17f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a3c1fff-3b66-465a-894f-12e754878ccf",
        "cursor": {
          "ref": "a144bbc7-24a1-476b-af54-2cd56cadf297",
          "length": 252,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "e4816d1c-3401-4c17-9e09-f7dc8a76978d"
        },
        "item": {
          "id": "9a3c1fff-3b66-465a-894f-12e754878ccf",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "9dc201c6-1d48-428a-b047-0ea6aaaacc05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4447bd85-5c41-4972-bf87-9da5b2e376a3",
        "cursor": {
          "ref": "45fdcd9c-3570-4189-95cc-06056dc4838e",
          "length": 252,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "a8ff0f0b-d296-4cad-ba68-e2106f4eb7a8"
        },
        "item": {
          "id": "4447bd85-5c41-4972-bf87-9da5b2e376a3",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "8cbfd888-a6d8-4f4b-b793-972534a51241",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67575081-4402-4339-8438-754a207187a2",
        "cursor": {
          "ref": "bd61f36a-5645-4096-b6ee-c72b1edd4815",
          "length": 252,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "86c68645-4600-4f6d-a06a-6c35c6a8c05f"
        },
        "item": {
          "id": "67575081-4402-4339-8438-754a207187a2",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "4c4a0045-af97-4da6-9e6e-d74bc68ffc79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e2ec831-5587-4b61-ab0c-c655738db34f",
        "cursor": {
          "ref": "89505d3a-03a5-4365-9972-92aea64a84b4",
          "length": 252,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "b7a645fb-412f-45e7-a8f5-0462fae8e46b"
        },
        "item": {
          "id": "1e2ec831-5587-4b61-ab0c-c655738db34f",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "f3539565-8bef-4de4-b651-5e683f576ff2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9179906-1819-4712-94b2-526f39d806e7",
        "cursor": {
          "ref": "bd5b6dee-25ef-4b8e-89a2-158943541ab7",
          "length": 252,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "837219ff-4ac4-4e74-b4cb-994957442f1f"
        },
        "item": {
          "id": "e9179906-1819-4712-94b2-526f39d806e7",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "470a710a-9887-4956-94ec-f8484ea23045",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7719479-72f9-4bdb-8a88-730abb7f911b",
        "cursor": {
          "ref": "6fd3c314-4033-4906-a59c-100fd89598b3",
          "length": 252,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "0cd64164-4da5-483f-9cba-dc92be632f15"
        },
        "item": {
          "id": "e7719479-72f9-4bdb-8a88-730abb7f911b",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "a97a8918-60ef-4614-83e5-141bc4b5b191",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67bf2f8e-378f-4b12-8b67-5e5e0008db16",
        "cursor": {
          "ref": "a281cbaf-f36b-4fee-b38c-3b1697d3cbac",
          "length": 252,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "ec792578-d8a1-4bc7-b05b-56e3f882a4d7"
        },
        "item": {
          "id": "67bf2f8e-378f-4b12-8b67-5e5e0008db16",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "ac885565-abff-4ec9-ba1e-b575a7efc349",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d7d7959-0ab1-4d76-a0e2-d2c735383f43",
        "cursor": {
          "ref": "13d4d351-7fb2-41b7-ab24-cebc754f9ce0",
          "length": 252,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "2817af9a-8164-4ba5-801e-0dbbbbf7ff11"
        },
        "item": {
          "id": "9d7d7959-0ab1-4d76-a0e2-d2c735383f43",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "059b8787-0c89-4080-ad69-ec84ffe22944",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2bd8413-89a3-4615-997a-a37b220b1319",
        "cursor": {
          "ref": "3345ca54-9c4f-453d-a386-7ef1ef968146",
          "length": 252,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "2ea17673-cd83-4686-ba03-39f0bf88c78b"
        },
        "item": {
          "id": "a2bd8413-89a3-4615-997a-a37b220b1319",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "3d23d9d2-2a61-4f5b-82b6-c670cd8200e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d913deb-dff4-4073-ba51-3229d702fe87",
        "cursor": {
          "ref": "95e7dfec-8bc6-4b9e-8387-b1f77c277955",
          "length": 252,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "9fe83116-71ca-4595-b6a1-8310ad28b263"
        },
        "item": {
          "id": "4d913deb-dff4-4073-ba51-3229d702fe87",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "6dbca9a4-cf5c-4362-acc6-aeb346256031",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 34,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5e78c9a-f92e-429d-8f98-96df16c8a8c4",
        "cursor": {
          "ref": "68a02267-a38c-4ef9-83e7-6db5ac0209ec",
          "length": 252,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "61e8279e-a6bd-4313-86a1-cd3a4a1ed387"
        },
        "item": {
          "id": "c5e78c9a-f92e-429d-8f98-96df16c8a8c4",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "771999bd-14b2-4a5d-b1bf-562c06ec552b",
          "status": "OK",
          "code": 200,
          "responseTime": 313,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "73337a73-90f6-4403-b6e2-732bd8e8cc15",
        "cursor": {
          "ref": "2030122f-ac0a-407c-8d7c-5a348a1d6c42",
          "length": 252,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "75af2de8-5e5f-4e90-895c-3fd9d5b55189"
        },
        "item": {
          "id": "73337a73-90f6-4403-b6e2-732bd8e8cc15",
          "name": "credentials_verify"
        },
        "response": {
          "id": "5ab56cd5-9310-407a-9cc7-159ba283685b",
          "status": "OK",
          "code": 200,
          "responseTime": 326,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "64f751fa-cfda-45ca-bf8f-58d21e961f0f",
        "cursor": {
          "ref": "c28d1a29-def1-4293-9b29-2724dabc8974",
          "length": 252,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "c724106d-8c2b-49bb-993a-561c311419f0"
        },
        "item": {
          "id": "64f751fa-cfda-45ca-bf8f-58d21e961f0f",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "292dd14a-6e69-4b6d-bafb-9bddb5055a1f",
          "status": "OK",
          "code": 200,
          "responseTime": 585,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "8df08c31-f49a-4974-a9c6-e8b2a779c408",
        "cursor": {
          "ref": "733d4912-3338-4d60-99d6-a38760c02472",
          "length": 252,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "7ecb48d0-97bc-4fff-b0bd-a1a0272c5d25"
        },
        "item": {
          "id": "8df08c31-f49a-4974-a9c6-e8b2a779c408",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "0fd97e3f-b425-462d-94a6-76284afdb9cc",
          "status": "OK",
          "code": 200,
          "responseTime": 454,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "660aeafb-f0e6-447b-b516-c7bce32d8cc6",
        "cursor": {
          "ref": "fa256c6e-9527-47ba-b50a-f102d8c13bce",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "b0eb698a-fd39-4407-a025-bd38a18e797f"
        },
        "item": {
          "id": "660aeafb-f0e6-447b-b516-c7bce32d8cc6",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1c7d2f65-80d1-427b-a2b6-2e84514d443a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "660aeafb-f0e6-447b-b516-c7bce32d8cc6",
        "cursor": {
          "ref": "fa256c6e-9527-47ba-b50a-f102d8c13bce",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "b0eb698a-fd39-4407-a025-bd38a18e797f"
        },
        "item": {
          "id": "660aeafb-f0e6-447b-b516-c7bce32d8cc6",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1c7d2f65-80d1-427b-a2b6-2e84514d443a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "660aeafb-f0e6-447b-b516-c7bce32d8cc6",
        "cursor": {
          "ref": "fa256c6e-9527-47ba-b50a-f102d8c13bce",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "b0eb698a-fd39-4407-a025-bd38a18e797f"
        },
        "item": {
          "id": "660aeafb-f0e6-447b-b516-c7bce32d8cc6",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1c7d2f65-80d1-427b-a2b6-2e84514d443a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50b4d150-fac4-41ba-b68f-c0514760b885",
        "cursor": {
          "ref": "22f5f1a5-9936-41d9-ae0c-7fc91c0dbb9b",
          "length": 252,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "ddb87bd8-1495-4f6e-b7c5-24ca8c329e32"
        },
        "item": {
          "id": "50b4d150-fac4-41ba-b68f-c0514760b885",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "1704d519-0743-444a-baa4-f4515ad01b5a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 39,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6df862c7-e582-4a04-88b9-ee766ee7423d",
        "cursor": {
          "ref": "80a1ad0e-f6c0-40b1-95a7-aa52560fe3fb",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "6d125544-3079-4dd3-b4a7-948ef23fd21f"
        },
        "item": {
          "id": "6df862c7-e582-4a04-88b9-ee766ee7423d",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "c8f7b7d9-c831-4378-b94e-a1df769420e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "6df862c7-e582-4a04-88b9-ee766ee7423d",
        "cursor": {
          "ref": "80a1ad0e-f6c0-40b1-95a7-aa52560fe3fb",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "6d125544-3079-4dd3-b4a7-948ef23fd21f"
        },
        "item": {
          "id": "6df862c7-e582-4a04-88b9-ee766ee7423d",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "c8f7b7d9-c831-4378-b94e-a1df769420e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "6cb5919a-74db-48e1-b2f2-6b59197d093e",
        "cursor": {
          "ref": "1aac297f-074d-4fb8-ab0f-a838ddcba91c",
          "length": 252,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "66ed5d06-5365-4a48-954e-b8f1a513acce"
        },
        "item": {
          "id": "6cb5919a-74db-48e1-b2f2-6b59197d093e",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "ce16bfe3-2b24-4444-aa2a-92758c4cb719",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "9139e682-8500-45c1-8636-9ee4e5afaed8",
        "cursor": {
          "ref": "9dc802db-e107-4deb-a0a8-f1b1eda33732",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "5a3be6f8-fa19-4883-9312-3f9575e15389"
        },
        "item": {
          "id": "9139e682-8500-45c1-8636-9ee4e5afaed8",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "c1cce95a-3423-4238-b7b6-ad5823997af6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "9139e682-8500-45c1-8636-9ee4e5afaed8",
        "cursor": {
          "ref": "9dc802db-e107-4deb-a0a8-f1b1eda33732",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "5a3be6f8-fa19-4883-9312-3f9575e15389"
        },
        "item": {
          "id": "9139e682-8500-45c1-8636-9ee4e5afaed8",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "c1cce95a-3423-4238-b7b6-ad5823997af6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "64abebc0-99fd-460a-8381-c835caefe97f",
        "cursor": {
          "ref": "cbdd59ad-6359-45f2-8843-75388a044097",
          "length": 252,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "e118c4af-89a6-4e72-9fa9-740f422f413c"
        },
        "item": {
          "id": "64abebc0-99fd-460a-8381-c835caefe97f",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "ca05012d-d630-45cf-871a-43af8539d659",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      }
    ]
  }
}