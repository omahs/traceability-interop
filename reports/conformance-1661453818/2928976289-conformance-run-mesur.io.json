{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "7bb41f97-10ef-4d99-bcf1-11be12278041",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "da70fa92-e157-4d26-957f-48f6c59dca20",
            "name": "Positive Testing",
            "item": [
              {
                "id": "987bd5de-48a0-4726-a0e0-8793513cd17b",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6e70bc7b-bf90-4765-a226-cea30292b546",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5203b18f-3148-4217-8ec0-bf09f629e569"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "0f5b8fdf-1df4-4af6-9d05-5014aed185c6",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "879b8169-c2ec-483c-8857-3a19c7c36ccb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8e00b431-b271-4b6f-bc72-c59ae79fc8b1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "fb4efab4-3c4d-4dcf-a573-a50004192074",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "504086b4-6377-4299-a68c-eb526dd39afc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ec3b59a6-62c8-4775-9639-48cfc9c50523"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96df73fe-1030-4caf-9ed5-db4960f650fb",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97ba6c64-c0b1-48af-9937-4e8b3a3dcd8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8a003f3c-e0aa-4afb-b2cb-a85cdb752a0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d498c3a5-9e34-48a9-9e23-2c6aa2961975",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7241785f-7e57-4b0a-a449-8e3d4f6ca67d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ebd18cb5-2d3b-479b-983a-5ceadc7cad4e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "94a55270-0262-49aa-976f-9427aac43ee2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ebd00905-14fb-4fde-8292-c759eff7cf4b",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27395556-234f-478f-a25a-ed4846d327c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aca29476-1b6d-4235-8553-f16e63969d14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c114e5e4-3ed2-4c88-bf04-9096eae4131e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec1d7b88-e21c-4aa2-866b-aafe9d6dd1ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6e3cf1f-49b4-4976-b366-fef7dacc3acf",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b2f0f0a-c4d7-4dc4-be6b-9920dc7fbb9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "03c3cf23-1d63-49fc-a568-b1f8bfa6faaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2bb3247-987d-4f1b-b769-fce776ff5fd3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "0dad2c2f-f2bf-489f-89b0-88801b792c58"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "1f054bb5-fb09-4d98-92f3-0f6cca8216c1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9557d985-ba50-49d9-8e88-be1cb91af02b",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2e2c1aef-f1ea-4930-ac70-339722f19d4d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "fa495350-11b3-4cf7-b767-9b3a5215aa70"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "85c54374-ee91-4c55-b8c3-46c6158d679a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "980243be-d4a9-445f-9cb7-8db5210453f9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7357d6da-e83d-471d-82d7-76801cc85bcb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d26c7f5e-9b24-4b69-b0cd-ddc2b802e7bb"
            }
          }
        ]
      },
      {
        "id": "cc13cb83-a7bb-449f-b035-6226c4ae68fc",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "8d8191f9-30ba-40d6-82cb-e2346245b1c7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4151e0b3-50d1-4d33-99a7-927444c37bec",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "140dcef4-26e1-4a10-8ca2-156c2b74e49d",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12632516-ea1e-4e91-abd3-92c80c74c81f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e98a3152-7060-420c-86b7-aef23b0d8da0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2fc588e-965e-4b36-a307-50c43b467c9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a44eb85-1ee9-4694-8c97-b6b39af5fe6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adba1c51-bf60-4ca8-a00c-6a960d1e19c1",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a682bfa8-e5f9-43cc-addb-1c34a6541647",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "215df1aa-41f4-447f-a77b-fa5bf28aa85d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4d8c267-b855-411a-82ba-355462d7b581",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c80574ec-91fe-4580-994b-fe55a1a2ef4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "354757f4-66d3-48a4-9922-0d38a3dbca13",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dbeaf98-f0c2-4b1f-ba5c-76f4c4f333bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04b7a9d8-0d3f-4b1b-a0f0-16d78fd6d25f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96a560b7-7f95-425f-89c4-daf5befd0496",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "570be69b-7e70-4de1-90f2-31bb27c8755e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3c198d2-c287-4006-b71a-cb0ece2a7c59",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f229ea02-55bf-46c1-b5dd-a5819c4f2d02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0b42861-f717-45c2-a7bc-b04f2c86e60b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8639561e-09fd-474c-aa17-192bea00be40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cef36c29-03b6-4daa-ad3e-4ac7422383c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "642240e2-cddc-472d-998d-c53750d3cc5d",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70600bbe-5d0b-47ca-8ca1-9c5e10932e94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ffab4a1-351e-43e3-a777-f8848897db04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eafe991-64aa-4243-bee8-9938aa381641",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac1563c0-f360-42f4-96cb-f40ea0919a67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d29a0588-50eb-449c-8317-8ba3fe42f555",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3bc3fbf-2aa5-43d2-b592-16fac73c1a03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9a27a71-3870-45f6-9937-d6b9e23c9d4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f5b1dc4-9f82-4817-b735-97fa7f9fcffc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30696860-4d56-40b1-8261-85a018de6fe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3b0a5d0-6d1a-4267-9ebd-35443c740a8e",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a8576bc-65c6-429c-9577-a63b03a7b721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25efeb90-ab32-4b1f-b299-e9e46ec6c2dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "683ac47b-0829-44e6-a82f-a2ebbcea3646",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bbcbc6dc-b601-447a-9821-bb98e3a57b95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6af911c6-3656-4c21-86b5-b2147cd790f8",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f98e23f8-7646-45ee-86a3-52a63c9b2717",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baaffec6-447e-4f84-b394-a707dd91f3e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00cb1828-13fa-420f-8ce4-5687d5215547",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed15c85d-63ec-4de4-98de-07262a6cd519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "581f610c-9cb0-4650-b551-0ba11dcbee01",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57f5277a-3f3a-42af-a597-4b4c8221f9f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a519d043-71db-41f1-90f3-e66efdda4f42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6777da8-173f-4949-9905-140c0867c226",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a7509c2-bac9-46c1-bacf-8ba2057ee173"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf4ac71f-576e-46a9-ab56-95d2cab10edd",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1d52bd7-017c-4289-a317-2373ae32ec95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57e1651c-5411-4c80-a4b9-139386927849"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e74bb396-ec23-4f9a-8353-20d74612cfaa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51d00e2c-77b3-434d-85df-1010c27d145e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d369b6b3-1bff-47b4-8f90-e63ce50421af",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e919b14-a7e6-47e1-aba6-75ae9c2010ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcca7c12-efb4-4131-b91d-dbda8565c15a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b66eb526-87f1-4241-8874-6b2acad60020",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "5aede564-a4e0-4c7d-b31b-9fe71a50daf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c842487f-3f7a-4f52-b842-f4c5f6863a21",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76e8086e-87c3-4322-835e-6b309f69b4cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c4adbff-e71d-4507-b6a2-5db302d6ffa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "811af434-1d80-40da-a909-1ffb01964388",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "cdd833e9-ba61-48e2-b698-3dff2e60af92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b43547f-c130-49e9-9425-c73fc0a06b1d",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69c0c1aa-a046-4536-b4de-6b946b2db0b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39f777e6-0b6f-48c9-97a7-f45314d3c7d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc82571a-f82d-4727-85b2-2eae32836279",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e6ece2a-bae2-47c9-beef-1f372d887363"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf7e4fe5-f97c-457c-a028-f79466dd4773",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc8d8a24-827f-4b9a-a6ae-9e37f39767c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f147d808-4261-4059-86b5-7917e9491f07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df403e77-1277-4f1d-b8c1-3c0923bf9d66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32e1b36e-7faa-46e0-8dc2-175221e96f4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a70413dc-01e4-4140-86c7-4c1d30ef720b",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eea18f7e-0633-4ff2-81b8-bc94bad6729d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9eb8dd7d-a4c9-45a0-b411-7e1fb3ab1188"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "851ae0e2-3ffb-4238-9445-63a6aafbde6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "620ca859-bc90-4fbb-9aa9-04d3ba11f69f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0299625b-2f1a-40ac-a921-474b707d1df7",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "324eae9f-0113-4613-9253-d7608a96f3e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89c67858-91d1-4720-9591-a6bcc2be8b04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62d6bf63-2016-4f8f-bccd-ccc755faccde",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "a2c7ba85-1e2d-40de-8d2c-c76f16cee95b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf4c0257-dc99-4e7d-8621-189541898a98",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac22aac8-e010-450c-b955-a4e659dca700",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c96967e1-0007-45b9-988e-dd598178c6a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a12c6a3-4dff-4b43-8ad3-7f6901fcc61e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60f03a4b-57c5-4523-91c3-ca32aae4685e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91d9f4d7-e75e-4ca7-bfb0-2bffd025721d",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c3ec0ef-9730-4df4-8413-c5517c663f03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2718682-2599-4cec-9d1d-6528cbc0d9c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4070726f-6975-4d61-9b3a-8b6de5aee4fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14f8f953-c18a-402c-bdba-14b29548a53a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "684d2b14-813a-4a1f-be66-689d1b05b5fa",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bc34998-3719-4006-a0b8-780a68a26b05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e3936af-c7f8-4838-a16e-dbc73bdfff6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4c83b1a-29c8-479f-ad01-77d3b861f433",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c76e6d2-e993-44e4-b10a-f25978011bd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce30bf7e-a98a-42e0-a9fc-89cc84b476d7",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f89e6404-f9f9-4dcf-95dd-fc7eadd90882",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50486d40-dad1-4409-b18b-fe63c43b207f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "548cfcc5-3244-4f39-9e12-91f566a39abb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a026cba-c8ee-4e94-9f33-6115312abee7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89f4f7a6-fab7-4b21-8439-af09ca926df6",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0873569e-549f-4b17-a703-93aecd5f112f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afbdb54d-9fe8-4b0d-ac85-1d8f7ec6d841"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b548f70-e9ba-449b-95ab-288ea948cda2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be a string or an object",
                            "rawBody.credential.credentialSubject = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8ca1b78-29b2-41df-95c0-e9c3c6e9e319"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e14762c-fb8d-4451-b6bb-5af4eadf830c",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b999cd7a-7161-4325-a7db-9cca6a6b9f0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59380af9-c16c-48ea-93fd-187f1d693225"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02e12738-a8c4-4540-b5a5-620a157a7cb1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8fdf5973-e4d3-42aa-ab57-2f3a3d56e602"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a28d3457-0747-4360-b92a-affb83bd0569",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6421cea5-d607-40c3-9609-97026e4659ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78818c85-a9c5-4d5c-b38f-4669a9d8119b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b431ead-2e06-4845-95f6-e040bc447311",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "382ec5d2-181e-4c6d-af51-001e92e8663a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a7f5b00-541e-4e2b-9018-c556f99477e3",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b370339-a5da-4d29-94c0-dc8e469a1c70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11a53d6a-8b0e-47aa-bad3-088db2812cd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "517545d9-5e01-40ac-95c5-0687ca23c155",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51ab43a5-589e-4b66-a81e-fbc3c62f9516"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12e97058-6d1a-42f6-a869-b4a029c6ed05",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ea4c13a-1142-47c4-9547-e9052fefb7bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca568339-ecd6-420e-924b-07a0f324e456"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c00515d-f596-4465-8aef-0e0ae313268e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d48c3f27-000d-4cab-998f-0e80237e0ff7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bf7255d-4ebf-4b66-af46-2b299ff31c20",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3b31027-fef7-4639-944e-ada4cc7f8123",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c66eee2-1e1e-4472-89e9-af042e03567e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f743da1-c513-44a4-9c17-2e7663d67d65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0339262-6c69-4cec-ae84-467390f43b78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73b2b93f-792d-4fab-adfb-1b5fb148e39f",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51b8a07f-09d2-4547-810a-faef62e46e3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9c03710-34fc-474b-b3f3-6478f9484c48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cbcf736-fa06-4ab5-b71a-d6eb0d22cce0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1a47957-49c9-47d4-9079-33a9d4a919f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d60542d3-1af1-467e-bc32-02009acfa792",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d21c9b1-6e8a-43f6-8c4d-949c701aee10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b131e25-4fe7-40b7-81b7-20ad7f6bd5cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2230378-5042-46b8-b950-dc2254725312",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6183e08-f9b3-42c5-a1aa-cb3f46520351"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f3a56ff-b56a-46b1-a0c9-2f38e9e96953",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c53f0e8-aa30-44c9-8c55-832d75a54e5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bab7850c-8965-4be0-b64a-3440d7541940"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71a0468c-bc63-47d8-8213-5fd12bf0501f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27a3f9e2-d9ff-436f-87f6-fba389767065"
                        }
                      }
                    ]
                  },
                  {
                    "id": "728537ad-3374-404c-8155-d9e60813ea1a",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "549fcfd9-eb5c-4fe3-af1b-6e2527f0133a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0ccd21b-609c-4b8f-8825-ab80ba44bb9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "331f754a-c57d-4b17-b4bc-9e0f7134002c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6808fa2f-8182-4954-afb3-a95187af6e8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a82cd612-702c-42e5-8799-0dda098f51ac",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3918591-63b5-4e98-a159-9d312b0ccab9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "02d56a70-0c1b-41f2-9765-e052a6a43617"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5f0fd34-2b5f-489f-bbc0-22e220ec166c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79b5115b-a4ba-4836-bd58-2e2a3114395c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "89331a68-30d0-4add-b401-dc8cecfc1603",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d568f411-88c4-493a-b5e1-56eeccce14e2",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f7162d7-e236-4874-a033-bfdb688d0304",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4fda204c-006f-4cf7-891e-918af4bc6302"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21799c82-512b-4e8d-b573-05571c2a8aca",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "5182c1db-7825-4584-b569-4a457438643f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eaa3b3f-3ff8-4199-b6a4-3aa981ce08b7",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0c7858e-1b7a-474e-bad1-27eb8dd674bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a066f90e-3b27-4d26-a1f8-96e74e259a8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f108230c-e2f4-4425-b48d-a1530a249df8",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "f6fc8a12-206c-4ea0-8ad3-6f47da7fa96b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "910b8479-dff8-473d-aca3-f31cf2b10439",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e7e68a4d-4814-4454-a473-8ce2321c4114"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f9e59f56-1a69-4c44-bcea-dab548cbeabb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "37368cef-5b93-442e-9cdc-4a72c4ada136"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a03f97c4-1061-4dc4-ae48-8639f5eab6a0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "49ad490b-e153-470d-8799-f819df039ac5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d6e9bd9d-bf1e-4d12-9d0b-8c5bb49e5005",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e30dc07f-3afc-4193-9325-2decacdf84ab"
                }
              }
            ]
          },
          {
            "id": "2280a755-3a76-4d2d-960d-614bf9973a8f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0a4bf959-8d06-4cb0-a63d-2ab113946a37",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b145ea18-e921-4adb-a870-b5e0d93be1dd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f02c62fc-fb26-4494-8236-0b15462785f8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fc3205b8-5541-4c2f-9361-0d9a0b1bf1ac",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "2999c1c5-422e-47d7-bd45-e48bac63a971"
                    }
                  }
                ]
              },
              {
                "id": "25359356-0536-414b-99c9-bce0597ed3d5",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2c8e9fdd-260a-49f0-8257-161c758a5937",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ee979580-c313-444f-8316-eb1e3f59a2b4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "86f48242-4e81-435c-8f39-231b0bc27afd",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "caa28c6b-31e8-42d8-bad8-46acb4db664a"
                    }
                  }
                ]
              },
              {
                "id": "e1aaa802-4773-4728-acb8-9a5f1f6bb2db",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b06bc328-9995-4b31-8446-ef217543b38d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fd6b3831-d3e1-4d4f-965f-19f07038f21c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "70961a1a-577a-4fa6-a11e-f0f0f926ec22",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "306f8299-74d7-423f-a984-8053ed3df236"
                    }
                  }
                ]
              },
              {
                "id": "cec8b22a-8aaa-4872-8a60-484e692d5538",
                "name": "credentials_issue:credential:alt.credentialSubject.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1b727d20-2c6d-40dd-89d7-4112d44052a1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "82e6dc7a-d7ee-43e9-944a-cfccaae8c2e3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "858928a3-afde-4db2-8f2e-2bbfb401ae12",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element.",
                        "rawBody.credential.credentialSubject = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "f22d0865-7c23-4911-9aaa-3198c7bd7e5b"
                    }
                  }
                ]
              },
              {
                "id": "3f828c8d-e94f-4c5d-86cd-d7f6bb336de1",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d61ab480-191c-437b-afaa-64c808fde47f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof credentialSubject === 'string') {",
                        "  pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        " } else {",
                        "  pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        " }",
                        "});"
                      ],
                      "_lastExecutionId": "f5ac63d8-0063-4d9e-af90-5737aef13a86"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8d1966bd-d39d-4fc1-8e26-482af37f35a9",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "306b7a85-2594-450b-9720-31468a753523"
                    }
                  }
                ]
              },
              {
                "id": "6119be99-45b5-4a52-96de-8cc91ef59b6a",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "45ff8291-f5c9-4806-9672-e3920206964e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a9f6d88f-87d4-4010-9a96-6e649c1fb627"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3d36dbd3-f37e-4366-a5dd-29a097f71e5c",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "831cd11b-ebe0-4659-b2fe-6f0935cd0d95"
                    }
                  }
                ]
              },
              {
                "id": "9c35f580-231c-4285-9db7-7dfef50638aa",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dc70f53c-79c9-4816-ba74-a284be0f64bf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5cf52344-274b-4855-9f9c-7a0fbc2787e6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d76a0a86-6a4a-4010-b2a8-33a5cb9fad36",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "d885a8d3-e424-4827-a5ac-d4724a36b548"
                    }
                  }
                ]
              },
              {
                "id": "b8d10104-1efc-4c6a-8163-b0f6a355ad7f",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "43ee5f2a-47cf-420e-9a26-274e66a20993",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0e6728eb-1b4c-41ef-b411-afa76913f3e5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "89d1a57c-f125-4478-9c13-e36ce9935429",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "37f17efa-33d5-4f64-9e03-57c4a581cd65"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3a4e3c0f-41b3-4449-827c-b05fc0260f7f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b752b049-6763-45b5-b7a2-448e488fcf3b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "40583f6e-2bf3-4cf9-84cc-f8437f1cd77b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4f038e4e-9f47-4356-b7a1-9ca244be2ec4"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "44212f57-13f0-41ae-9fc9-c4b6b34f2b37",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": \"{{credential_subject}}\"",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "8e005565-22aa-45fb-851b-444cd9fa3589"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "67549048-b5b0-42de-827c-b8390557cbf1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3e70cfed-afd9-452f-a5d9-7c02f6b6f9ae"
            }
          }
        ]
      },
      {
        "id": "6ad73da7-5cc4-438d-9ca8-79489dde8a35",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "759bff78-31bd-4231-89e5-45e578958d90",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f2efe483-5a2e-42de-b833-59ff8f33a2f0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a9c4c031-ccd4-4859-9e96-2350d93c420d",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e97ebe4-3901-406f-abae-328397bf4f69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b3aebdf-37f2-442b-a666-fb34f4f010f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10c01688-fff8-4029-98b3-26219bf84f97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "560d21f7-7017-4685-ae64-b0f87e945d83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e99d961f-9083-4afd-bf62-e63dd420b15c",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e938fd1-2316-4d7b-b6fb-4e45f8a2abb0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "2ecd05ff-4e9c-471b-b051-fcd8ea045f50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34c19364-3e51-431d-985f-bdb54bf57e8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "825fe9db-f586-435f-b27d-9b297ce1be8e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b7fe6311-7629-47c1-8c23-09e971325da5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "714da188-e6ee-41d3-a742-4585dc82b329"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3b95f7c9-fab9-402d-bbcf-6198a7ae57b6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ca45b838-5b38-494f-ad15-b7f983d6ca98"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9b817487-58b7-4ab8-b6c2-8aeda6b9d961",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "6d5a3032-0b86-4db5-b0fd-c1a7ec9b8154"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b84e4d2f-8d5b-4ddb-93a6-c0e4d383bfaf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1259c780-ad79-4826-862c-918ff21b8a71"
            }
          }
        ]
      },
      {
        "id": "1eeb822b-2b6a-4aae-b820-7f6e35acd253",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "b600d872-dcf2-465e-b929-ecc8bec073c9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b8c86c1d-ac3f-4150-a463-921f4c83a52a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8775ab0a-6143-44f8-bde7-ba513366b330",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e124fac-6734-4067-a438-ba501b7deba1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "965724b1-60ad-4d9f-beac-bd2b9eb4267b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1979f35-9d78-429d-99f7-2e2b68f24daf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "adf2a6d2-2c7b-4c43-8f0c-d0ca78615bed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f72bb379-60c6-4d2d-8b60-79572f2686c0",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3abe477f-d969-4096-a92b-54b086153b6b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "985de92f-497d-4307-ad69-440ede660e3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a63de5d-f796-4763-aaa7-f66b4a2269b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4d0bcf63-ad8c-44b0-9b25-1f20b3736aa9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5507aa28-8ad2-4a66-b137-3db05409b0bf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e8040c78-9a8c-464c-8b59-119f8e44f018"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "729c4837-3ece-4cfa-832f-b8781bb490c5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e9770481-8267-4889-a2f9-4528eab92c72"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5400dd62-c7a4-4a1a-bf13-f3318d39784c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"dummyVC\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": \"did:example:123\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "261f09f3-f706-49af-918f-8bc5c3683667"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a138bc40-f913-4806-a642-c4068aeab22a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ecfc487f-1a85-41a7-a8f4-9b4e3ee97819"
            }
          }
        ]
      },
      {
        "id": "03787ed8-68c1-417b-bc7d-76f423909474",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "aabe4b13-218a-42eb-b223-4a3f54bd79c9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c13c660c-2bfe-4de8-b8fa-21df5bf87188",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4f9a028d-e1c8-4133-88dd-30c8a8429fae",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d8c903a-1fcb-42a0-b8b0-163663ea2089",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a78ee26-dd85-443e-b1e8-e375269ad7fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e9dc848-eafb-4af4-98ac-c27d3c5cb659",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e51ce3c3-7857-4a0b-a91b-4631a759ec2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ea57f67-af2d-4676-9eb5-1dd7182cb736",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "340e8a89-1589-4282-8ece-6fd0bba03106",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "c6107233-a21b-4e2e-b093-1e085a334d0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c27ea67b-2a01-4ce0-aa31-565d1b048dc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d1e38b7b-3eff-42e9-b298-f0f97a266cb0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "292c82c2-299e-42da-bed3-90f523da5be0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "676eae3a-574a-4e5b-a024-73cc5f86adc2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8738e3ed-c8a1-408c-b872-c71246eaf6d5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8bf324f9-6abc-4730-81eb-ea38de0bfdc6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9c92fff3-c911-42a8-bd51-e7d257068a32",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "b8899cb8-35eb-42bb-af2e-99c01add3656"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f6d6c3b5-6f74-42f9-9ed6-d32a99ca488d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "532572c6-6822-4aad-afdb-afee6ce8d675"
            }
          }
        ]
      },
      {
        "id": "0c905f2b-e811-4891-9b14-6a06631b0a26",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "de21cd18-b84d-44c1-8dbd-25016de611b6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "731f2ee6-b52d-49a9-924b-18638b6fb343",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c6de5b32-5af3-49cf-ab7f-ed528babd746",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a40419c1-3c6e-4f33-88ed-533029f147e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0275b12-08b6-4375-a2a7-6f0744295856"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3de77aa5-cbf3-45f2-92ba-25a8ff1b8691",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "be7dc9c1-91f7-4305-a24d-4245da019b4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aa8255e-494d-476a-b7a1-c90d6ed2ae5a",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b66444b-6307-412a-8619-df66b087b2f2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "c940460d-b6ea-46fc-9144-c9b3ffcb845e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9c9bd5f-a7ee-4f6c-bfe4-d3531e83b0df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "75c37dc9-c2a3-48c7-bf8d-d409b4e28652"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f51e7040-26e7-46e8-b965-ce1de248e9da",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d2167f2b-163b-488d-8b2b-f10e25af47a2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9050f09b-732a-47d8-aa3b-6b3f1f7a2a62",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aff488cd-3d00-4780-8a34-10abfb9d0db9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "05b54b65-f24b-438b-bb8f-76b67a290a3e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "940da8c3-5d4b-4e0c-84cb-7b4d846f9e18"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e27b1fa4-76b9-4cd2-9d74-539be4c1b4af",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5e2cbb8c-ee7c-4ca1-b38a-8258e7d5b76f"
            }
          }
        ]
      },
      {
        "id": "d53ad213-1458-4332-862a-35e2d25016a2",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "398614e6-5527-4238-bc48-8768bc2cc435",
            "name": "Negative Testing",
            "item": [
              {
                "id": "06dffdf6-87d4-4656-b6c1-8ee5598d121a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "af712fa6-e84a-4fad-90cf-5180000eec1c",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf73345e-4aac-46b5-81c9-203a0e32896f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2be3c339-9c33-49aa-a0a6-17c3842df7be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "addfee71-7cd2-48ba-b5e3-bdfd1914f861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0ca1ff71-485f-4db8-a46d-1b74937d7ce4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d11d3ae2-201b-49bd-a0bd-8ec8c3a02fbd",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db1170a8-50c3-4be7-be7e-ad99f674e499",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "b4cebf65-6441-4623-b5ee-47dff73687d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac7cc43c-087b-4689-9798-dcb4ee4d82af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "09359092-f3da-424c-aa92-f6a25e60807e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5833c68d-b142-4101-a66f-ed9babe4fc7c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6a3edbd6-4c07-477b-993d-0f06272a5110"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "148acb87-35ad-42cf-a6d7-d67f4eb36247",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bff1a8f8-d433-417b-baf1-f12286b38b54"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "174c2c50-eed9-4c75-9a52-443fee7ce95c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "f79e906b-9165-4a4e-bfe1-fc6d46c1127f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "82f4aa22-219e-4496-acaf-233b7575ac4b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "86f28f15-6b6a-424b-9d2c-089d8b8f8c70"
            }
          }
        ]
      },
      {
        "id": "65c0da19-8d60-45be-b154-6bffeb134e0d",
        "name": "Presentations - Notify",
        "item": [],
        "event": []
      },
      {
        "id": "6e8e082e-ff2e-4e3a-b4bb-03154adbc063",
        "name": "Presentations - Submit",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 447,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 107,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 121,
        "pending": 0,
        "failed": 98
      },
      "testScripts": {
        "total": 226,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 221,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 72.46728971962617,
      "responseMin": 32,
      "responseMax": 334,
      "responseSd": 60.384796897834306,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1661453695255,
      "completed": 1661453706999
    },
    "executions": [
      {
        "id": "987bd5de-48a0-4726-a0e0-8793513cd17b",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 58,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "70cd564e-9e62-452a-91ed-45d4f2432570",
          "httpRequestId": "59688825-7d2a-4c69-b1c7-efb846491b39"
        },
        "item": {
          "id": "987bd5de-48a0-4726-a0e0-8793513cd17b",
          "name": "did_json"
        },
        "response": {
          "id": "2d55228e-f041-4ac5-b3ef-b7e1238f6f9c",
          "status": "OK",
          "code": 200,
          "responseTime": 334,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb4efab4-3c4d-4dcf-a573-a50004192074",
        "cursor": {
          "ref": "488a7103-b1a4-48d2-ae7d-3e0c0a06aec7",
          "length": 58,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "2f47807c-3f2d-4736-80b8-6daad4bde469"
        },
        "item": {
          "id": "fb4efab4-3c4d-4dcf-a573-a50004192074",
          "name": "did:invalid"
        },
        "response": {
          "id": "b0bcd9e0-a908-439e-ac7c-a13040e42c71",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 100
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb4efab4-3c4d-4dcf-a573-a50004192074",
        "cursor": {
          "ref": "488a7103-b1a4-48d2-ae7d-3e0c0a06aec7",
          "length": 58,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "2f47807c-3f2d-4736-80b8-6daad4bde469"
        },
        "item": {
          "id": "fb4efab4-3c4d-4dcf-a573-a50004192074",
          "name": "did:invalid"
        },
        "response": {
          "id": "b0bcd9e0-a908-439e-ac7c-a13040e42c71",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 100
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96df73fe-1030-4caf-9ed5-db4960f650fb",
        "cursor": {
          "ref": "86e23cec-3406-43bc-ac37-7922726909c2",
          "length": 58,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "5d8e097b-afef-4a2c-8de9-df042c1a53f6"
        },
        "item": {
          "id": "96df73fe-1030-4caf-9ed5-db4960f650fb",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "ec9794bb-e946-48d7-b12f-4851787e9d8d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 135,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 500",
              "stack": "AssertionError: expected response to have status code 404 but got 500\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "d498c3a5-9e34-48a9-9e23-2c6aa2961975",
        "cursor": {
          "ref": "1cda9816-79fb-4855-a25d-daa5e10307d5",
          "length": 58,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "79e1b4c9-5510-4344-861c-b6378049fba3"
        },
        "item": {
          "id": "d498c3a5-9e34-48a9-9e23-2c6aa2961975",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "777d17f0-643b-4d22-80f3-133b607ff4df",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 200",
              "stack": "AssertionError: expected response to have status code 404 but got 200\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "ebd00905-14fb-4fde-8292-c759eff7cf4b",
        "cursor": {
          "ref": "e730f357-298b-4d63-a132-3c67106bab80",
          "length": 58,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "4d64a1bd-c8d4-4d55-86ca-aea7fb490fa2"
        },
        "item": {
          "id": "ebd00905-14fb-4fde-8292-c759eff7cf4b",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "9cee70a2-532e-4c05-8b8e-c34ede178461",
          "status": "OK",
          "code": 200,
          "responseTime": 109,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "c6e3cf1f-49b4-4976-b366-fef7dacc3acf",
        "cursor": {
          "ref": "0514b1f2-c870-4ebe-8f7a-44e4501debf6",
          "length": 58,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "29eb15c6-3c38-4a5f-b2bf-3834e85b6448"
        },
        "item": {
          "id": "c6e3cf1f-49b4-4976-b366-fef7dacc3acf",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "9b42870e-3789-46f4-8652-d3449f6f4f57",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "c6e3cf1f-49b4-4976-b366-fef7dacc3acf",
        "cursor": {
          "ref": "0514b1f2-c870-4ebe-8f7a-44e4501debf6",
          "length": 58,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "29eb15c6-3c38-4a5f-b2bf-3834e85b6448"
        },
        "item": {
          "id": "c6e3cf1f-49b4-4976-b366-fef7dacc3acf",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "9b42870e-3789-46f4-8652-d3449f6f4f57",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "9557d985-ba50-49d9-8e88-be1cb91af02b",
        "cursor": {
          "ref": "9de9d0aa-4e4f-4f1c-8a85-9364fd1af388",
          "length": 58,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "b0ac8bb2-d85b-487a-a505-591e2e2e6c2e"
        },
        "item": {
          "id": "9557d985-ba50-49d9-8e88-be1cb91af02b",
          "name": "identifiers"
        },
        "response": {
          "id": "09e12d7a-fb33-4a7c-91fa-4c9edfc31d2f",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "140dcef4-26e1-4a10-8ca2-156c2b74e49d",
        "cursor": {
          "ref": "e7197cc3-7933-4a19-871d-f9461292f493",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e8ac0fb1-1dd0-4c14-b124-49994fc8a3fc"
        },
        "item": {
          "id": "140dcef4-26e1-4a10-8ca2-156c2b74e49d",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "85942db8-4560-4477-8dcc-42690417e716",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 321,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "140dcef4-26e1-4a10-8ca2-156c2b74e49d",
        "cursor": {
          "ref": "e7197cc3-7933-4a19-871d-f9461292f493",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e8ac0fb1-1dd0-4c14-b124-49994fc8a3fc"
        },
        "item": {
          "id": "140dcef4-26e1-4a10-8ca2-156c2b74e49d",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "85942db8-4560-4477-8dcc-42690417e716",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 321,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "140dcef4-26e1-4a10-8ca2-156c2b74e49d",
        "cursor": {
          "ref": "e7197cc3-7933-4a19-871d-f9461292f493",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e8ac0fb1-1dd0-4c14-b124-49994fc8a3fc"
        },
        "item": {
          "id": "140dcef4-26e1-4a10-8ca2-156c2b74e49d",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "85942db8-4560-4477-8dcc-42690417e716",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 321,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "adba1c51-bf60-4ca8-a00c-6a960d1e19c1",
        "cursor": {
          "ref": "88dbbdf7-b735-434d-a98f-b731e30c56b9",
          "length": 58,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "2a58aee5-982d-43d9-9f7c-a8aef2f35e1f"
        },
        "item": {
          "id": "adba1c51-bf60-4ca8-a00c-6a960d1e19c1",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "151b7495-4e61-42d7-9753-1c5d16c7d542",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "adba1c51-bf60-4ca8-a00c-6a960d1e19c1",
        "cursor": {
          "ref": "88dbbdf7-b735-434d-a98f-b731e30c56b9",
          "length": 58,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "2a58aee5-982d-43d9-9f7c-a8aef2f35e1f"
        },
        "item": {
          "id": "adba1c51-bf60-4ca8-a00c-6a960d1e19c1",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "151b7495-4e61-42d7-9753-1c5d16c7d542",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "354757f4-66d3-48a4-9922-0d38a3dbca13",
        "cursor": {
          "ref": "d36d76ae-e39a-43c3-9170-c88b9e0a09d1",
          "length": 58,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "8db678c4-f164-496c-b8d7-e44cb0e2ff45"
        },
        "item": {
          "id": "354757f4-66d3-48a4-9922-0d38a3dbca13",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "5048e212-e2a7-46a0-b63b-1ccae2874454",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "354757f4-66d3-48a4-9922-0d38a3dbca13",
        "cursor": {
          "ref": "d36d76ae-e39a-43c3-9170-c88b9e0a09d1",
          "length": 58,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "8db678c4-f164-496c-b8d7-e44cb0e2ff45"
        },
        "item": {
          "id": "354757f4-66d3-48a4-9922-0d38a3dbca13",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "5048e212-e2a7-46a0-b63b-1ccae2874454",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "b3c198d2-c287-4006-b71a-cb0ece2a7c59",
        "cursor": {
          "ref": "fc0ba4ac-92a7-443b-9aaf-3a5a6fe7366a",
          "length": 58,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "df7fc8c6-8243-4103-ad26-d330d6067e92"
        },
        "item": {
          "id": "b3c198d2-c287-4006-b71a-cb0ece2a7c59",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "99b05be7-3f08-4ff8-b49d-537690cf5615",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "b3c198d2-c287-4006-b71a-cb0ece2a7c59",
        "cursor": {
          "ref": "fc0ba4ac-92a7-443b-9aaf-3a5a6fe7366a",
          "length": 58,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "df7fc8c6-8243-4103-ad26-d330d6067e92"
        },
        "item": {
          "id": "b3c198d2-c287-4006-b71a-cb0ece2a7c59",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "99b05be7-3f08-4ff8-b49d-537690cf5615",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "642240e2-cddc-472d-998d-c53750d3cc5d",
        "cursor": {
          "ref": "c8aece38-4bea-40a0-95be-e62a4b423f85",
          "length": 58,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c4266edd-4886-440a-a617-2db02a61d25c"
        },
        "item": {
          "id": "642240e2-cddc-472d-998d-c53750d3cc5d",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "09282929-e944-4f33-aa1f-9c1c262ba406",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "642240e2-cddc-472d-998d-c53750d3cc5d",
        "cursor": {
          "ref": "c8aece38-4bea-40a0-95be-e62a4b423f85",
          "length": 58,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c4266edd-4886-440a-a617-2db02a61d25c"
        },
        "item": {
          "id": "642240e2-cddc-472d-998d-c53750d3cc5d",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "09282929-e944-4f33-aa1f-9c1c262ba406",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "d29a0588-50eb-449c-8317-8ba3fe42f555",
        "cursor": {
          "ref": "782d85a0-e979-4115-a471-75e0365c2824",
          "length": 58,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "33cc156b-91ee-45cf-8364-87642c6725fb"
        },
        "item": {
          "id": "d29a0588-50eb-449c-8317-8ba3fe42f555",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "1c7814b3-911e-49df-b7ef-1ca65060f450",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "d29a0588-50eb-449c-8317-8ba3fe42f555",
        "cursor": {
          "ref": "782d85a0-e979-4115-a471-75e0365c2824",
          "length": 58,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "33cc156b-91ee-45cf-8364-87642c6725fb"
        },
        "item": {
          "id": "d29a0588-50eb-449c-8317-8ba3fe42f555",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "1c7814b3-911e-49df-b7ef-1ca65060f450",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "b3b0a5d0-6d1a-4267-9ebd-35443c740a8e",
        "cursor": {
          "ref": "7f2dc55b-9a87-4371-aa9b-18da59e950d6",
          "length": 58,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "d4858d61-cf25-4afa-88e6-7039fb0d275b"
        },
        "item": {
          "id": "b3b0a5d0-6d1a-4267-9ebd-35443c740a8e",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "7a1c0ddf-3ea3-45a4-9ee7-70f62c8c9d68",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 72,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "b3b0a5d0-6d1a-4267-9ebd-35443c740a8e",
        "cursor": {
          "ref": "7f2dc55b-9a87-4371-aa9b-18da59e950d6",
          "length": 58,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "d4858d61-cf25-4afa-88e6-7039fb0d275b"
        },
        "item": {
          "id": "b3b0a5d0-6d1a-4267-9ebd-35443c740a8e",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "7a1c0ddf-3ea3-45a4-9ee7-70f62c8c9d68",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 72,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "6af911c6-3656-4c21-86b5-b2147cd790f8",
        "cursor": {
          "ref": "64cc7872-a306-4027-b794-49c8fc677f2d",
          "length": 58,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "033c6fd0-e7da-4480-8070-e41c9465f8ba"
        },
        "item": {
          "id": "6af911c6-3656-4c21-86b5-b2147cd790f8",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "adf2dabd-69c7-42b2-abda-b8ccd31f2857",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "6af911c6-3656-4c21-86b5-b2147cd790f8",
        "cursor": {
          "ref": "64cc7872-a306-4027-b794-49c8fc677f2d",
          "length": 58,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "033c6fd0-e7da-4480-8070-e41c9465f8ba"
        },
        "item": {
          "id": "6af911c6-3656-4c21-86b5-b2147cd790f8",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "adf2dabd-69c7-42b2-abda-b8ccd31f2857",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "581f610c-9cb0-4650-b551-0ba11dcbee01",
        "cursor": {
          "ref": "b8a2749f-c3c2-4a02-9758-d8bba4537958",
          "length": 58,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "c709e1ec-8d40-4cfc-b920-c9b044a43160"
        },
        "item": {
          "id": "581f610c-9cb0-4650-b551-0ba11dcbee01",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "4075169b-8e52-4959-9179-6f8fcb7803f2",
          "status": "Created",
          "code": 201,
          "responseTime": 60,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "581f610c-9cb0-4650-b551-0ba11dcbee01",
        "cursor": {
          "ref": "b8a2749f-c3c2-4a02-9758-d8bba4537958",
          "length": 58,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "c709e1ec-8d40-4cfc-b920-c9b044a43160"
        },
        "item": {
          "id": "581f610c-9cb0-4650-b551-0ba11dcbee01",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "4075169b-8e52-4959-9179-6f8fcb7803f2",
          "status": "Created",
          "code": 201,
          "responseTime": 60,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "bf4ac71f-576e-46a9-ab56-95d2cab10edd",
        "cursor": {
          "ref": "af1bd48b-5857-4d8a-b055-80a476479889",
          "length": 58,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "e5d9b919-aa91-4354-b9e5-993520f130f9"
        },
        "item": {
          "id": "bf4ac71f-576e-46a9-ab56-95d2cab10edd",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "1e1a308c-5386-4f0b-96a7-74f33681e622",
          "status": "Created",
          "code": 201,
          "responseTime": 77,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "bf4ac71f-576e-46a9-ab56-95d2cab10edd",
        "cursor": {
          "ref": "af1bd48b-5857-4d8a-b055-80a476479889",
          "length": 58,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "e5d9b919-aa91-4354-b9e5-993520f130f9"
        },
        "item": {
          "id": "bf4ac71f-576e-46a9-ab56-95d2cab10edd",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "1e1a308c-5386-4f0b-96a7-74f33681e622",
          "status": "Created",
          "code": 201,
          "responseTime": 77,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "d369b6b3-1bff-47b4-8f90-e63ce50421af",
        "cursor": {
          "ref": "77c3e88c-157c-427f-9976-64d5380aee14",
          "length": 58,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "0e3ab07a-9862-47d2-941f-e70a40911354"
        },
        "item": {
          "id": "d369b6b3-1bff-47b4-8f90-e63ce50421af",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "1e769a64-d4c8-4e51-8ef7-531cb56318ca",
          "status": "Created",
          "code": 201,
          "responseTime": 61,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "d369b6b3-1bff-47b4-8f90-e63ce50421af",
        "cursor": {
          "ref": "77c3e88c-157c-427f-9976-64d5380aee14",
          "length": 58,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "0e3ab07a-9862-47d2-941f-e70a40911354"
        },
        "item": {
          "id": "d369b6b3-1bff-47b4-8f90-e63ce50421af",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "1e769a64-d4c8-4e51-8ef7-531cb56318ca",
          "status": "Created",
          "code": 201,
          "responseTime": 61,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "c842487f-3f7a-4f52-b842-f4c5f6863a21",
        "cursor": {
          "ref": "a2fd13a0-d989-49c4-8978-1b8976d5b372",
          "length": 58,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "2c5906d2-8ab5-48a6-8098-f4b5cd21665d"
        },
        "item": {
          "id": "c842487f-3f7a-4f52-b842-f4c5f6863a21",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "d24ba94a-fae1-454a-974f-ca1d29af4d90",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "c842487f-3f7a-4f52-b842-f4c5f6863a21",
        "cursor": {
          "ref": "a2fd13a0-d989-49c4-8978-1b8976d5b372",
          "length": 58,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "2c5906d2-8ab5-48a6-8098-f4b5cd21665d"
        },
        "item": {
          "id": "c842487f-3f7a-4f52-b842-f4c5f6863a21",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "d24ba94a-fae1-454a-974f-ca1d29af4d90",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "5b43547f-c130-49e9-9425-c73fc0a06b1d",
        "cursor": {
          "ref": "70d207b0-dae3-42bb-b6ff-b488d59a939b",
          "length": 58,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "f09db533-3eba-4755-97ba-c1df0b750256"
        },
        "item": {
          "id": "5b43547f-c130-49e9-9425-c73fc0a06b1d",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "d3e46a49-0004-4e9d-8d76-756e78e9cdbb",
          "status": "Created",
          "code": 201,
          "responseTime": 68,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "5b43547f-c130-49e9-9425-c73fc0a06b1d",
        "cursor": {
          "ref": "70d207b0-dae3-42bb-b6ff-b488d59a939b",
          "length": 58,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "f09db533-3eba-4755-97ba-c1df0b750256"
        },
        "item": {
          "id": "5b43547f-c130-49e9-9425-c73fc0a06b1d",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "d3e46a49-0004-4e9d-8d76-756e78e9cdbb",
          "status": "Created",
          "code": 201,
          "responseTime": 68,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "bf7e4fe5-f97c-457c-a028-f79466dd4773",
        "cursor": {
          "ref": "eeb675f7-515e-4d49-81d2-33a37e1f2253",
          "length": 58,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "1a7bb014-c9f0-476f-ae75-d8ab1eafbe97"
        },
        "item": {
          "id": "bf7e4fe5-f97c-457c-a028-f79466dd4773",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "d9a4ddb9-0ad4-46cd-812d-b3be1adbaaf4",
          "status": "Created",
          "code": 201,
          "responseTime": 122,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "bf7e4fe5-f97c-457c-a028-f79466dd4773",
        "cursor": {
          "ref": "eeb675f7-515e-4d49-81d2-33a37e1f2253",
          "length": 58,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "1a7bb014-c9f0-476f-ae75-d8ab1eafbe97"
        },
        "item": {
          "id": "bf7e4fe5-f97c-457c-a028-f79466dd4773",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "d9a4ddb9-0ad4-46cd-812d-b3be1adbaaf4",
          "status": "Created",
          "code": 201,
          "responseTime": 122,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "a70413dc-01e4-4140-86c7-4c1d30ef720b",
        "cursor": {
          "ref": "f32b81f8-1734-47e4-a3f4-eb8a59bb8bfa",
          "length": 58,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "8e0249be-2f66-4f42-b8b6-ac1e1e6539c2"
        },
        "item": {
          "id": "a70413dc-01e4-4140-86c7-4c1d30ef720b",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "b99a8b50-f4cd-43e6-84a0-7aaa82b4d06e",
          "status": "Created",
          "code": 201,
          "responseTime": 66,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "a70413dc-01e4-4140-86c7-4c1d30ef720b",
        "cursor": {
          "ref": "f32b81f8-1734-47e4-a3f4-eb8a59bb8bfa",
          "length": 58,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "8e0249be-2f66-4f42-b8b6-ac1e1e6539c2"
        },
        "item": {
          "id": "a70413dc-01e4-4140-86c7-4c1d30ef720b",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "b99a8b50-f4cd-43e6-84a0-7aaa82b4d06e",
          "status": "Created",
          "code": 201,
          "responseTime": 66,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "0299625b-2f1a-40ac-a921-474b707d1df7",
        "cursor": {
          "ref": "f8db89fd-7f2c-47b7-8911-28f214623ec3",
          "length": 58,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "c6246e87-1ad0-4513-bea3-5d353f22d695"
        },
        "item": {
          "id": "0299625b-2f1a-40ac-a921-474b707d1df7",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "ef7b3740-770a-4f1b-991d-9be24a274981",
          "status": "Created",
          "code": 201,
          "responseTime": 83,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "0299625b-2f1a-40ac-a921-474b707d1df7",
        "cursor": {
          "ref": "f8db89fd-7f2c-47b7-8911-28f214623ec3",
          "length": 58,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "c6246e87-1ad0-4513-bea3-5d353f22d695"
        },
        "item": {
          "id": "0299625b-2f1a-40ac-a921-474b707d1df7",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "ef7b3740-770a-4f1b-991d-9be24a274981",
          "status": "Created",
          "code": 201,
          "responseTime": 83,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "cf4c0257-dc99-4e7d-8621-189541898a98",
        "cursor": {
          "ref": "292ddc6c-7db5-4fe7-b4a5-35385649b692",
          "length": 58,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "0489039f-1135-44ea-a4a2-5ad34689ddb0"
        },
        "item": {
          "id": "cf4c0257-dc99-4e7d-8621-189541898a98",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "6dd14e48-d47b-43b6-9abd-cfabf4436c76",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "cf4c0257-dc99-4e7d-8621-189541898a98",
        "cursor": {
          "ref": "292ddc6c-7db5-4fe7-b4a5-35385649b692",
          "length": 58,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "0489039f-1135-44ea-a4a2-5ad34689ddb0"
        },
        "item": {
          "id": "cf4c0257-dc99-4e7d-8621-189541898a98",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "6dd14e48-d47b-43b6-9abd-cfabf4436c76",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "91d9f4d7-e75e-4ca7-bfb0-2bffd025721d",
        "cursor": {
          "ref": "81f893f1-9210-4b39-8d4c-7808379264db",
          "length": 58,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "a5e4d460-4606-45f5-9ab0-626fb2b7cf32"
        },
        "item": {
          "id": "91d9f4d7-e75e-4ca7-bfb0-2bffd025721d",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "b89a062c-3e4c-4e91-a060-b15de99c3079",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "91d9f4d7-e75e-4ca7-bfb0-2bffd025721d",
        "cursor": {
          "ref": "81f893f1-9210-4b39-8d4c-7808379264db",
          "length": 58,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "a5e4d460-4606-45f5-9ab0-626fb2b7cf32"
        },
        "item": {
          "id": "91d9f4d7-e75e-4ca7-bfb0-2bffd025721d",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "b89a062c-3e4c-4e91-a060-b15de99c3079",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "684d2b14-813a-4a1f-be66-689d1b05b5fa",
        "cursor": {
          "ref": "70f9e949-bfe6-4883-af92-3e9250b708ae",
          "length": 58,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "d567c965-9642-4f0c-91c8-9c80223894b0"
        },
        "item": {
          "id": "684d2b14-813a-4a1f-be66-689d1b05b5fa",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "9dbaad6c-ff5c-4591-b048-7d6cd632ebd7",
          "status": "Created",
          "code": 201,
          "responseTime": 60,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "684d2b14-813a-4a1f-be66-689d1b05b5fa",
        "cursor": {
          "ref": "70f9e949-bfe6-4883-af92-3e9250b708ae",
          "length": 58,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "d567c965-9642-4f0c-91c8-9c80223894b0"
        },
        "item": {
          "id": "684d2b14-813a-4a1f-be66-689d1b05b5fa",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "9dbaad6c-ff5c-4591-b048-7d6cd632ebd7",
          "status": "Created",
          "code": 201,
          "responseTime": 60,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "ce30bf7e-a98a-42e0-a9fc-89cc84b476d7",
        "cursor": {
          "ref": "94e3d48e-8ca7-4331-8aa0-1538cc708140",
          "length": 58,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "6c4ab643-315a-46dc-be6e-8cf3b2a46624"
        },
        "item": {
          "id": "ce30bf7e-a98a-42e0-a9fc-89cc84b476d7",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "d41d1cd2-fed9-4374-92dc-4d6fe000bf23",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "ce30bf7e-a98a-42e0-a9fc-89cc84b476d7",
        "cursor": {
          "ref": "94e3d48e-8ca7-4331-8aa0-1538cc708140",
          "length": 58,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "6c4ab643-315a-46dc-be6e-8cf3b2a46624"
        },
        "item": {
          "id": "ce30bf7e-a98a-42e0-a9fc-89cc84b476d7",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "d41d1cd2-fed9-4374-92dc-4d6fe000bf23",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "89f4f7a6-fab7-4b21-8439-af09ca926df6",
        "cursor": {
          "ref": "91e998b1-5531-49ad-a932-e8902349f786",
          "length": 58,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "db6c88e4-a73c-4ccc-8625-580e08ccb9a1"
        },
        "item": {
          "id": "89f4f7a6-fab7-4b21-8439-af09ca926df6",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "bffd0c7c-9cf9-45ae-bd65-b38e126f72e1",
          "status": "Created",
          "code": 201,
          "responseTime": 70,
          "responseSize": 624
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "89f4f7a6-fab7-4b21-8439-af09ca926df6",
        "cursor": {
          "ref": "91e998b1-5531-49ad-a932-e8902349f786",
          "length": 58,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "db6c88e4-a73c-4ccc-8625-580e08ccb9a1"
        },
        "item": {
          "id": "89f4f7a6-fab7-4b21-8439-af09ca926df6",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "bffd0c7c-9cf9-45ae-bd65-b38e126f72e1",
          "status": "Created",
          "code": 201,
          "responseTime": 70,
          "responseSize": 624
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "5e14762c-fb8d-4451-b6bb-5af4eadf830c",
        "cursor": {
          "ref": "952f0f67-b4ca-46a2-b8bd-ee079d395596",
          "length": 58,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "6863dee7-f179-4bd5-a147-1cd01af92bdb"
        },
        "item": {
          "id": "5e14762c-fb8d-4451-b6bb-5af4eadf830c",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "1dfa475e-7c88-4b0e-8b34-ed2e697da6cf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "5e14762c-fb8d-4451-b6bb-5af4eadf830c",
        "cursor": {
          "ref": "952f0f67-b4ca-46a2-b8bd-ee079d395596",
          "length": 58,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "6863dee7-f179-4bd5-a147-1cd01af92bdb"
        },
        "item": {
          "id": "5e14762c-fb8d-4451-b6bb-5af4eadf830c",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "1dfa475e-7c88-4b0e-8b34-ed2e697da6cf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "a28d3457-0747-4360-b92a-affb83bd0569",
        "cursor": {
          "ref": "abf04900-1745-4d4d-8d81-d321cbfa0c8c",
          "length": 58,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "069c9f59-b1fe-4871-847e-6240a78631da"
        },
        "item": {
          "id": "a28d3457-0747-4360-b92a-affb83bd0569",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "6d219763-45b5-4bb0-9e2f-ee9bfc719fe4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "a28d3457-0747-4360-b92a-affb83bd0569",
        "cursor": {
          "ref": "abf04900-1745-4d4d-8d81-d321cbfa0c8c",
          "length": 58,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "069c9f59-b1fe-4871-847e-6240a78631da"
        },
        "item": {
          "id": "a28d3457-0747-4360-b92a-affb83bd0569",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "6d219763-45b5-4bb0-9e2f-ee9bfc719fe4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "3a7f5b00-541e-4e2b-9018-c556f99477e3",
        "cursor": {
          "ref": "b43ca937-c45e-4abe-92ed-d96bf655a923",
          "length": 58,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "037868ba-4b1d-4d46-892c-8a4f9dee05d0"
        },
        "item": {
          "id": "3a7f5b00-541e-4e2b-9018-c556f99477e3",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "6e4af0fa-83ec-4b37-b415-8efc38654e19",
          "status": "Created",
          "code": 201,
          "responseTime": 61,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "3a7f5b00-541e-4e2b-9018-c556f99477e3",
        "cursor": {
          "ref": "b43ca937-c45e-4abe-92ed-d96bf655a923",
          "length": 58,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "037868ba-4b1d-4d46-892c-8a4f9dee05d0"
        },
        "item": {
          "id": "3a7f5b00-541e-4e2b-9018-c556f99477e3",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "6e4af0fa-83ec-4b37-b415-8efc38654e19",
          "status": "Created",
          "code": 201,
          "responseTime": 61,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "12e97058-6d1a-42f6-a869-b4a029c6ed05",
        "cursor": {
          "ref": "1633767b-c672-4ef4-92b0-c2bee73e5521",
          "length": 58,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "8d5503b5-c277-46f4-8dd5-1b8b3fbf9b23"
        },
        "item": {
          "id": "12e97058-6d1a-42f6-a869-b4a029c6ed05",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "598bb10f-715a-40ef-bc55-c5d8d7a07dbf",
          "status": "Created",
          "code": 201,
          "responseTime": 84,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "12e97058-6d1a-42f6-a869-b4a029c6ed05",
        "cursor": {
          "ref": "1633767b-c672-4ef4-92b0-c2bee73e5521",
          "length": 58,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "8d5503b5-c277-46f4-8dd5-1b8b3fbf9b23"
        },
        "item": {
          "id": "12e97058-6d1a-42f6-a869-b4a029c6ed05",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "598bb10f-715a-40ef-bc55-c5d8d7a07dbf",
          "status": "Created",
          "code": 201,
          "responseTime": 84,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "7bf7255d-4ebf-4b66-af46-2b299ff31c20",
        "cursor": {
          "ref": "260db020-b724-4efa-a5d6-bdea36492831",
          "length": 58,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "1518439f-c0ec-43ec-b267-da35d4db7261"
        },
        "item": {
          "id": "7bf7255d-4ebf-4b66-af46-2b299ff31c20",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "37e00e04-0605-4454-86ad-296abe1e1733",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "7bf7255d-4ebf-4b66-af46-2b299ff31c20",
        "cursor": {
          "ref": "260db020-b724-4efa-a5d6-bdea36492831",
          "length": 58,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "1518439f-c0ec-43ec-b267-da35d4db7261"
        },
        "item": {
          "id": "7bf7255d-4ebf-4b66-af46-2b299ff31c20",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "37e00e04-0605-4454-86ad-296abe1e1733",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "73b2b93f-792d-4fab-adfb-1b5fb148e39f",
        "cursor": {
          "ref": "01a8597d-45d3-4093-85a9-3560c65680b9",
          "length": 58,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "c1f70cea-6ae9-445b-8c28-695ed020bada"
        },
        "item": {
          "id": "73b2b93f-792d-4fab-adfb-1b5fb148e39f",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "30f247b0-3767-4a79-8906-cebf7fce6781",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "73b2b93f-792d-4fab-adfb-1b5fb148e39f",
        "cursor": {
          "ref": "01a8597d-45d3-4093-85a9-3560c65680b9",
          "length": 58,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "c1f70cea-6ae9-445b-8c28-695ed020bada"
        },
        "item": {
          "id": "73b2b93f-792d-4fab-adfb-1b5fb148e39f",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "30f247b0-3767-4a79-8906-cebf7fce6781",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "d60542d3-1af1-467e-bc32-02009acfa792",
        "cursor": {
          "ref": "0e114e80-c247-428a-9958-6f6d46bf3f26",
          "length": 58,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "c8f9b904-022f-41af-b79d-cee3b8de69e4"
        },
        "item": {
          "id": "d60542d3-1af1-467e-bc32-02009acfa792",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "5896043d-35bb-453b-8335-ff56909639be",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "d60542d3-1af1-467e-bc32-02009acfa792",
        "cursor": {
          "ref": "0e114e80-c247-428a-9958-6f6d46bf3f26",
          "length": 58,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "c8f9b904-022f-41af-b79d-cee3b8de69e4"
        },
        "item": {
          "id": "d60542d3-1af1-467e-bc32-02009acfa792",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "5896043d-35bb-453b-8335-ff56909639be",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "1f3a56ff-b56a-46b1-a0c9-2f38e9e96953",
        "cursor": {
          "ref": "8a1cced9-4fa8-436a-8b52-12ee7f7975ce",
          "length": 58,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "d38e117e-7611-4edd-bb2e-06c36757cdcd"
        },
        "item": {
          "id": "1f3a56ff-b56a-46b1-a0c9-2f38e9e96953",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "71e8a99c-3556-4ff8-8ea7-6607068a2d5b",
          "status": "Created",
          "code": 201,
          "responseTime": 60,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "1f3a56ff-b56a-46b1-a0c9-2f38e9e96953",
        "cursor": {
          "ref": "8a1cced9-4fa8-436a-8b52-12ee7f7975ce",
          "length": 58,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "d38e117e-7611-4edd-bb2e-06c36757cdcd"
        },
        "item": {
          "id": "1f3a56ff-b56a-46b1-a0c9-2f38e9e96953",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "71e8a99c-3556-4ff8-8ea7-6607068a2d5b",
          "status": "Created",
          "code": 201,
          "responseTime": 60,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "728537ad-3374-404c-8155-d9e60813ea1a",
        "cursor": {
          "ref": "d101ba97-1657-481c-b274-fe77d1a064b5",
          "length": 58,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "f125c400-7dc1-4b4c-a733-05a1b925be7c"
        },
        "item": {
          "id": "728537ad-3374-404c-8155-d9e60813ea1a",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "d9503075-869b-4044-86bb-14614c526e27",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "728537ad-3374-404c-8155-d9e60813ea1a",
        "cursor": {
          "ref": "d101ba97-1657-481c-b274-fe77d1a064b5",
          "length": 58,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "f125c400-7dc1-4b4c-a733-05a1b925be7c"
        },
        "item": {
          "id": "728537ad-3374-404c-8155-d9e60813ea1a",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "d9503075-869b-4044-86bb-14614c526e27",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "a82cd612-702c-42e5-8799-0dda098f51ac",
        "cursor": {
          "ref": "1ef19b08-9f82-4aee-a097-edec771b6eab",
          "length": 58,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "319dcd9e-6a5a-48c7-84fb-85ad6f50433f"
        },
        "item": {
          "id": "a82cd612-702c-42e5-8799-0dda098f51ac",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "6829a688-634f-45e9-b1cf-1288416624de",
          "status": "Created",
          "code": 201,
          "responseTime": 59,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "a82cd612-702c-42e5-8799-0dda098f51ac",
        "cursor": {
          "ref": "1ef19b08-9f82-4aee-a097-edec771b6eab",
          "length": 58,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "319dcd9e-6a5a-48c7-84fb-85ad6f50433f"
        },
        "item": {
          "id": "a82cd612-702c-42e5-8799-0dda098f51ac",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "6829a688-634f-45e9-b1cf-1288416624de",
          "status": "Created",
          "code": 201,
          "responseTime": 59,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "d568f411-88c4-493a-b5e1-56eeccce14e2",
        "cursor": {
          "ref": "11fc4e0c-01f5-4f14-95c3-ace2930956f4",
          "length": 58,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "065e4fa9-febf-44b3-8cf8-7c959fc6cafe"
        },
        "item": {
          "id": "d568f411-88c4-493a-b5e1-56eeccce14e2",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "6f093db4-7ee1-4018-b627-67eb89c22213",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "d568f411-88c4-493a-b5e1-56eeccce14e2",
        "cursor": {
          "ref": "11fc4e0c-01f5-4f14-95c3-ace2930956f4",
          "length": 58,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "065e4fa9-febf-44b3-8cf8-7c959fc6cafe"
        },
        "item": {
          "id": "d568f411-88c4-493a-b5e1-56eeccce14e2",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "6f093db4-7ee1-4018-b627-67eb89c22213",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "6eaa3b3f-3ff8-4199-b6a4-3aa981ce08b7",
        "cursor": {
          "ref": "cdd3ca9f-6c1b-441f-94d8-3e9a0a8aba65",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "ae927efb-79f4-405d-a717-490a1f834543"
        },
        "item": {
          "id": "6eaa3b3f-3ff8-4199-b6a4-3aa981ce08b7",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "19595ce8-2173-4e68-9609-d68c7f3b4c48",
          "status": "Created",
          "code": 201,
          "responseTime": 62,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "6eaa3b3f-3ff8-4199-b6a4-3aa981ce08b7",
        "cursor": {
          "ref": "cdd3ca9f-6c1b-441f-94d8-3e9a0a8aba65",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "ae927efb-79f4-405d-a717-490a1f834543"
        },
        "item": {
          "id": "6eaa3b3f-3ff8-4199-b6a4-3aa981ce08b7",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "19595ce8-2173-4e68-9609-d68c7f3b4c48",
          "status": "Created",
          "code": 201,
          "responseTime": 62,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "0a4bf959-8d06-4cb0-a63d-2ab113946a37",
        "cursor": {
          "ref": "3e896e8b-6563-402f-a198-da12f820db61",
          "length": 58,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "d63c3622-6465-4245-9958-b7b14434962f"
        },
        "item": {
          "id": "0a4bf959-8d06-4cb0-a63d-2ab113946a37",
          "name": "credentials_issue"
        },
        "response": {
          "id": "c50c22e7-4ee9-4102-8806-3f5a679340d1",
          "status": "Created",
          "code": 201,
          "responseTime": 59,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a4bf959-8d06-4cb0-a63d-2ab113946a37",
        "cursor": {
          "ref": "3e896e8b-6563-402f-a198-da12f820db61",
          "length": 58,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "d63c3622-6465-4245-9958-b7b14434962f"
        },
        "item": {
          "id": "0a4bf959-8d06-4cb0-a63d-2ab113946a37",
          "name": "credentials_issue"
        },
        "response": {
          "id": "c50c22e7-4ee9-4102-8806-3f5a679340d1",
          "status": "Created",
          "code": 201,
          "responseTime": 59,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "25359356-0536-414b-99c9-bce0597ed3d5",
        "cursor": {
          "ref": "b7240114-0f24-4ecf-8bd8-6926d63897b0",
          "length": 58,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "0f566e0c-86e3-4ad3-b6fc-2c0ac92388f4"
        },
        "item": {
          "id": "25359356-0536-414b-99c9-bce0597ed3d5",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "ddc42351-f598-4e70-8bff-89b93a05fb35",
          "status": "Created",
          "code": 201,
          "responseTime": 57,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "25359356-0536-414b-99c9-bce0597ed3d5",
        "cursor": {
          "ref": "b7240114-0f24-4ecf-8bd8-6926d63897b0",
          "length": 58,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "0f566e0c-86e3-4ad3-b6fc-2c0ac92388f4"
        },
        "item": {
          "id": "25359356-0536-414b-99c9-bce0597ed3d5",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "ddc42351-f598-4e70-8bff-89b93a05fb35",
          "status": "Created",
          "code": 201,
          "responseTime": 57,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "e1aaa802-4773-4728-acb8-9a5f1f6bb2db",
        "cursor": {
          "ref": "d36beafb-ec0d-4edf-bf31-5c80b7d987d5",
          "length": 58,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "d8e134d2-14b7-488b-84b2-22f78f3ba53f"
        },
        "item": {
          "id": "e1aaa802-4773-4728-acb8-9a5f1f6bb2db",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "a481ca06-b168-4777-8c58-344cf80df13b",
          "status": "Created",
          "code": 201,
          "responseTime": 59,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1aaa802-4773-4728-acb8-9a5f1f6bb2db",
        "cursor": {
          "ref": "d36beafb-ec0d-4edf-bf31-5c80b7d987d5",
          "length": 58,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "d8e134d2-14b7-488b-84b2-22f78f3ba53f"
        },
        "item": {
          "id": "e1aaa802-4773-4728-acb8-9a5f1f6bb2db",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "a481ca06-b168-4777-8c58-344cf80df13b",
          "status": "Created",
          "code": 201,
          "responseTime": 59,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "cec8b22a-8aaa-4872-8a60-484e692d5538",
        "cursor": {
          "ref": "891401e6-0547-4be2-91ee-e6649adea696",
          "length": 58,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "78ce5fbd-59d3-4597-acc2-c2d1b34da3a6"
        },
        "item": {
          "id": "cec8b22a-8aaa-4872-8a60-484e692d5538",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "fd0f7502-c0b7-4c56-92f5-d3a8b22afdfe",
          "status": "Created",
          "code": 201,
          "responseTime": 60,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "cec8b22a-8aaa-4872-8a60-484e692d5538",
        "cursor": {
          "ref": "891401e6-0547-4be2-91ee-e6649adea696",
          "length": 58,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "78ce5fbd-59d3-4597-acc2-c2d1b34da3a6"
        },
        "item": {
          "id": "cec8b22a-8aaa-4872-8a60-484e692d5538",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "fd0f7502-c0b7-4c56-92f5-d3a8b22afdfe",
          "status": "Created",
          "code": 201,
          "responseTime": 60,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "3f828c8d-e94f-4c5d-86cd-d7f6bb336de1",
        "cursor": {
          "ref": "6bfec42f-7600-41e4-b15d-706c9f3f540e",
          "length": 58,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "aa088617-8244-41fc-a39c-f5938412dff9"
        },
        "item": {
          "id": "3f828c8d-e94f-4c5d-86cd-d7f6bb336de1",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "d054d5d0-5577-41b3-9d31-1de3aa78b5aa",
          "status": "Created",
          "code": 201,
          "responseTime": 73,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f828c8d-e94f-4c5d-86cd-d7f6bb336de1",
        "cursor": {
          "ref": "6bfec42f-7600-41e4-b15d-706c9f3f540e",
          "length": 58,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "aa088617-8244-41fc-a39c-f5938412dff9"
        },
        "item": {
          "id": "3f828c8d-e94f-4c5d-86cd-d7f6bb336de1",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "d054d5d0-5577-41b3-9d31-1de3aa78b5aa",
          "status": "Created",
          "code": 201,
          "responseTime": 73,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6119be99-45b5-4a52-96de-8cc91ef59b6a",
        "cursor": {
          "ref": "dbbec2d5-058c-45c2-9030-85925599957c",
          "length": 58,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "c22b8b6c-a71e-4d6e-935f-b6b8a2715d23"
        },
        "item": {
          "id": "6119be99-45b5-4a52-96de-8cc91ef59b6a",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "3aae7281-2281-4609-9af5-e0d64109e943",
          "status": "Created",
          "code": 201,
          "responseTime": 60,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "6119be99-45b5-4a52-96de-8cc91ef59b6a",
        "cursor": {
          "ref": "dbbec2d5-058c-45c2-9030-85925599957c",
          "length": 58,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "c22b8b6c-a71e-4d6e-935f-b6b8a2715d23"
        },
        "item": {
          "id": "6119be99-45b5-4a52-96de-8cc91ef59b6a",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "3aae7281-2281-4609-9af5-e0d64109e943",
          "status": "Created",
          "code": 201,
          "responseTime": 60,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "9c35f580-231c-4285-9db7-7dfef50638aa",
        "cursor": {
          "ref": "1f5cef6e-1b8b-4b22-b590-5030d80c882b",
          "length": 58,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "775ed185-50c6-47a3-97f7-16e4f2b9cd7e"
        },
        "item": {
          "id": "9c35f580-231c-4285-9db7-7dfef50638aa",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "884f98f3-07be-4cdf-9b94-d8622f46ea4b",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "9c35f580-231c-4285-9db7-7dfef50638aa",
        "cursor": {
          "ref": "1f5cef6e-1b8b-4b22-b590-5030d80c882b",
          "length": 58,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "775ed185-50c6-47a3-97f7-16e4f2b9cd7e"
        },
        "item": {
          "id": "9c35f580-231c-4285-9db7-7dfef50638aa",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "884f98f3-07be-4cdf-9b94-d8622f46ea4b",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "b8d10104-1efc-4c6a-8163-b0f6a355ad7f",
        "cursor": {
          "ref": "d1099420-5698-484c-87c6-ef45f8c98442",
          "length": 58,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "7a861bbb-f06f-4e8b-9f65-7d4f4a06e6d9"
        },
        "item": {
          "id": "b8d10104-1efc-4c6a-8163-b0f6a355ad7f",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "33d22aef-f0a9-4bd9-89d8-e4ded8e50add",
          "status": "Created",
          "code": 201,
          "responseTime": 57,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "b8d10104-1efc-4c6a-8163-b0f6a355ad7f",
        "cursor": {
          "ref": "d1099420-5698-484c-87c6-ef45f8c98442",
          "length": 58,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "7a861bbb-f06f-4e8b-9f65-7d4f4a06e6d9"
        },
        "item": {
          "id": "b8d10104-1efc-4c6a-8163-b0f6a355ad7f",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "33d22aef-f0a9-4bd9-89d8-e4ded8e50add",
          "status": "Created",
          "code": 201,
          "responseTime": 57,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "a9c4c031-ccd4-4859-9e96-2350d93c420d",
        "cursor": {
          "ref": "dc050775-c509-46bd-a586-6c5ea6226f74",
          "length": 58,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "513e8ee8-0e24-4275-9629-802c6680b63e"
        },
        "item": {
          "id": "a9c4c031-ccd4-4859-9e96-2350d93c420d",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "4facdde3-874b-44cb-baab-b2bcfd29d56c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "a9c4c031-ccd4-4859-9e96-2350d93c420d",
        "cursor": {
          "ref": "dc050775-c509-46bd-a586-6c5ea6226f74",
          "length": 58,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "513e8ee8-0e24-4275-9629-802c6680b63e"
        },
        "item": {
          "id": "a9c4c031-ccd4-4859-9e96-2350d93c420d",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "4facdde3-874b-44cb-baab-b2bcfd29d56c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "e99d961f-9083-4afd-bf62-e63dd420b15c",
        "cursor": {
          "ref": "58cc0a73-a80e-403b-85d0-b0b03c8b9bb0",
          "length": 58,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "08e7026b-6cc3-4ccf-86a3-7f2bf18354cd"
        },
        "item": {
          "id": "e99d961f-9083-4afd-bf62-e63dd420b15c",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "2ba409d8-4f3d-4cb3-8f0f-52ae556314aa",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 34,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 501",
              "stack": "AssertionError: expected response to have status code 403 but got 501\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "8775ab0a-6143-44f8-bde7-ba513366b330",
        "cursor": {
          "ref": "ecab4f0e-a219-4a03-8e04-cea0bc1947b9",
          "length": 58,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "d92b2cb8-d0ff-4cda-abdc-6de80c277872"
        },
        "item": {
          "id": "8775ab0a-6143-44f8-bde7-ba513366b330",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "8e38e697-2651-49c4-859a-b71c94fb53b7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "8775ab0a-6143-44f8-bde7-ba513366b330",
        "cursor": {
          "ref": "ecab4f0e-a219-4a03-8e04-cea0bc1947b9",
          "length": 58,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "d92b2cb8-d0ff-4cda-abdc-6de80c277872"
        },
        "item": {
          "id": "8775ab0a-6143-44f8-bde7-ba513366b330",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "8e38e697-2651-49c4-859a-b71c94fb53b7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "f72bb379-60c6-4d2d-8b60-79572f2686c0",
        "cursor": {
          "ref": "62e412f7-0f23-429a-8d68-3511a62eb8b8",
          "length": 58,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "cb4e6cf9-c3f8-421c-bf56-7d9d101d5945"
        },
        "item": {
          "id": "f72bb379-60c6-4d2d-8b60-79572f2686c0",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "7475cf15-4b87-4dd1-8149-95a8d841d40b",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "4f9a028d-e1c8-4133-88dd-30c8a8429fae",
        "cursor": {
          "ref": "a3ae0efb-8a88-49ad-958d-91b534c72501",
          "length": 58,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "58697c2b-e801-43a5-bc38-e12a69febd0f"
        },
        "item": {
          "id": "4f9a028d-e1c8-4133-88dd-30c8a8429fae",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "7f8dd951-ee60-402d-afe6-ad28afe936d8",
          "status": "Not Found",
          "code": 404,
          "responseTime": 36,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "4f9a028d-e1c8-4133-88dd-30c8a8429fae",
        "cursor": {
          "ref": "a3ae0efb-8a88-49ad-958d-91b534c72501",
          "length": 58,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "58697c2b-e801-43a5-bc38-e12a69febd0f"
        },
        "item": {
          "id": "4f9a028d-e1c8-4133-88dd-30c8a8429fae",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "7f8dd951-ee60-402d-afe6-ad28afe936d8",
          "status": "Not Found",
          "code": 404,
          "responseTime": 36,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "5ea57f67-af2d-4676-9eb5-1dd7182cb736",
        "cursor": {
          "ref": "8fd5ca41-a404-46c1-8520-82e1d2b4ee8d",
          "length": 58,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "d6bddf3e-b19a-45ff-8aef-e5bee9d5d0d9"
        },
        "item": {
          "id": "5ea57f67-af2d-4676-9eb5-1dd7182cb736",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "925829da-c295-4390-8229-dc05d1c6298e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 35,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 404",
              "stack": "AssertionError: expected response to have status code 403 but got 404\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "c6de5b32-5af3-49cf-ab7f-ed528babd746",
        "cursor": {
          "ref": "395916cf-5982-43ec-a4bd-e2c176308960",
          "length": 58,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "8b057444-4db1-4363-88c6-d99552304a82"
        },
        "item": {
          "id": "c6de5b32-5af3-49cf-ab7f-ed528babd746",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "ebe0b263-981f-4889-af1a-71447398a165",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "c6de5b32-5af3-49cf-ab7f-ed528babd746",
        "cursor": {
          "ref": "395916cf-5982-43ec-a4bd-e2c176308960",
          "length": 58,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "8b057444-4db1-4363-88c6-d99552304a82"
        },
        "item": {
          "id": "c6de5b32-5af3-49cf-ab7f-ed528babd746",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "ebe0b263-981f-4889-af1a-71447398a165",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "1aa8255e-494d-476a-b7a1-c90d6ed2ae5a",
        "cursor": {
          "ref": "fe3ddd14-e741-4c30-8672-f8dc3f57f929",
          "length": 58,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "364829ec-f8d8-4b0b-b241-f976a642cd3e"
        },
        "item": {
          "id": "1aa8255e-494d-476a-b7a1-c90d6ed2ae5a",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "6181ea8b-cc5f-4c74-abbd-193d10109120",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "af712fa6-e84a-4fad-90cf-5180000eec1c",
        "cursor": {
          "ref": "7b7fc589-5f22-4eef-8f5c-a91ed182145b",
          "length": 58,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "e3f5603d-2eb1-4ef0-a15a-ff634d649f11"
        },
        "item": {
          "id": "af712fa6-e84a-4fad-90cf-5180000eec1c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "afd58392-f278-4572-980b-34200e421953",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "af712fa6-e84a-4fad-90cf-5180000eec1c",
        "cursor": {
          "ref": "7b7fc589-5f22-4eef-8f5c-a91ed182145b",
          "length": 58,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "e3f5603d-2eb1-4ef0-a15a-ff634d649f11"
        },
        "item": {
          "id": "af712fa6-e84a-4fad-90cf-5180000eec1c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "afd58392-f278-4572-980b-34200e421953",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "d11d3ae2-201b-49bd-a0bd-8ec8c3a02fbd",
        "cursor": {
          "ref": "404f1a26-63f2-4483-84c6-44ec16e7112d",
          "length": 58,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "02aa57ca-c909-4de7-b5e2-e12a0050d723"
        },
        "item": {
          "id": "d11d3ae2-201b-49bd-a0bd-8ec8c3a02fbd",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "02f4dd87-6349-412f-8ca6-b3bec04b67c8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      }
    ]
  }
}