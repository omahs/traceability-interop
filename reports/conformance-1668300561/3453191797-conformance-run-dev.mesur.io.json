{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "53d876e6-3588-4726-a807-a8c6a3e5efab",
        "name": "Clear Cache",
        "item": [
          {
            "id": "efd57c58-19c6-4cb7-88f3-6445d21c7d29",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c7567079-866c-4efe-952e-39df9ee6f092",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c978930d-58a8-4ee8-82da-d48629c77978"
                }
              }
            ]
          },
          {
            "id": "88c09880-7160-4171-8326-8abb60f790c1",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "917c48e9-c29a-4610-b294-3e878a0b1274",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "94fda19c-3d4d-4774-8c31-1a61775aff33"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "bca4b1b8-01e1-4b87-bce4-37f70b314cab",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "0a12dfcf-5678-4919-b753-5fcc9fc94ee3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f4796105-2e58-4597-a530-33616065575f",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c7b90436-113c-460f-869b-14c560519d8e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "489f178d-49ac-4d13-8ba1-82c03c3ea24e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bd698ff0-356f-4c9b-8950-b32a3e0f0830",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f6d4f57a-6193-4edf-9cc2-aca6135c9543"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f5066b39-0a38-4a4b-aec8-0a7b4f8e86a8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1025da54-817c-46cd-8de9-b0ca13526b09"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4ceb4dd8-9236-4eb7-a187-8e384e99157b",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "30aac3f5-be67-42f4-9fbb-133d9e41bc5f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "569504e6-9fdc-45da-b041-2affb034566c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "68873f47-06f9-4277-b20f-16c269f3e0bf"
            }
          }
        ]
      },
      {
        "id": "1a3faafc-f020-42cf-9e13-437270f13cdf",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "31c25fb8-d6e3-4f7f-9632-2b3fffce23dd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1fd0d6ca-cf4e-4c79-847c-69d542feec25",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ed5e9ed5-59f6-4898-9aad-a6d3c16de7a4",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d04e19c-63e4-40fd-b4f5-cf131d87a7a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8cb14d82-beab-40e4-98cb-c77a59db4825"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b381e34-ab62-4146-9bec-789c80a97564",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87034500-9c79-467d-8828-9f5226f61ee7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "46cc3731-6451-4d2c-adaa-539d5249ebe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "341346e1-2e1a-417d-a567-a76bd52663b3",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19e60053-44bd-4e3e-9bfd-ef628a048de8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fa8cdc47-4d91-46bc-93af-959f3e89acb1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "44411ed7-96b3-4d11-8af6-db8300c39091",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "51d567e9-ad96-453b-a5d3-982dc67cf3d6",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2469fa4d-3a77-4f58-a634-48ae7bf2e3cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8f479c15-da4b-44b9-bdae-98bc51bed483"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36dc14ca-f00a-431c-bcab-6e4b5bbb8b60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e67a570e-608b-40ed-8be6-bc546693fce3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "553a003d-43e8-4a2f-9a02-74aee5fca61f",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ece7071-d452-4f22-b736-eceff98622db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1e3ce80f-87c8-49ca-91cf-fb06df8442c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb26425c-d607-4638-9823-ab85651a21bb",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "43cdc5e9-8266-4349-8b87-93d2eff09eef"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e8fc7ff8-90c1-4d36-b4a1-582631450100",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2cbd3161-9cf9-4d12-aa35-e645ac7741a1",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0bc2a5c4-b954-45ec-ba96-222b1b55a0e4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "d3fa4bfd-c2f9-4cd5-b430-710c22238a45"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "32236a16-c259-41dc-87ef-bd91f44db532",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "115adb97-82a6-40f4-9d96-5b019cbaeedd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0ea24ccb-785f-4ac5-8a92-dd8b0d852ab2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7fc7f51a-29cb-4e1a-b259-74b91bafd9c1"
            }
          }
        ]
      },
      {
        "id": "7a3c9174-82f8-443f-8855-540c2af0d92a",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "fcdafe3a-7a3e-460a-9996-cccee4159219",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2d8d840e-2b00-44ca-bd3a-54c5297737fd",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "8e156483-b638-4bed-b1c4-49328e4c20c3",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7ddd3a5-933c-4c28-8abf-687f229a2986",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03138d9c-a811-4054-9cbf-278a3b96910b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7604d4bf-0520-4319-8b48-37a5da449b80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5e81aeed-a88d-4631-b9f6-5c1c25b0f3f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33955d2c-8bd8-4a77-821e-bf683040b220",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9c36406-e787-4257-8bc9-73d4c9cdf9cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35112520-2305-4b5f-8ce5-711fc3849502"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e610e2c-a562-4b8f-ab90-580d87553d0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ed8070c4-3372-4c09-8223-175fe94e1332"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68a2ee31-cad2-42b2-89af-a9c0d797e134",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d28f6f2c-ff8e-4e45-8c88-5d862a511bb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "367d30cc-1ba0-4740-8e58-b4008f18cffd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "805e6bec-f90d-46c4-9844-9ea40616a95d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b024e936-3388-46c1-9e53-2353ea898137"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08bf28ea-fb0f-455c-b1be-cf2956976101",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19f980d0-6aad-4dfe-ab56-a6d36e64610e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41a1977b-6f74-4a92-af73-d01939831f64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6df7c69b-933e-472b-acb5-d546eb1cffea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d13263e6-2b8a-4ae3-ac03-ba029a453f3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e86b909-64c2-41ff-a99c-bddccf147374",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31be0057-63bf-4833-b35e-822f35b87770",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a507b466-b2ef-4844-857a-2784a0131014"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bf20523-47ce-4411-95cc-c3f091ddd2c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "46a09031-3f7f-4ce4-8c54-026052a6a6ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "261c3358-0250-47b3-b347-d0e93a8b1b46",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc7d7817-a3be-4cfe-a22b-039c8654f012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e09a8601-1dc4-4f74-9923-11bf90bb98b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb12d1f3-aaa3-459a-a830-c68e92e135d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1d4c2bb8-39a1-4ae2-8e12-d80d8ebfe239"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed3a1656-49ef-400c-bc2c-41fc8b8820e6",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47430452-1f19-4f63-a91b-9c2723d406de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f528cfb7-8b3f-4c0a-a69a-825bd07304af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a798b982-4725-4cb8-9ade-92b459b938cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d60dd789-59d0-46e1-8681-2b1203911536"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8c452c9-7f86-4b01-a20c-ea2058b26293",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4f1e7d7-14cc-47d2-9ff1-fa578b56554a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d1e18ab-8e8c-4413-835d-000559360b3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d0bd4e6-5076-4897-8403-f4e02df437d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "73e6bf7b-abd2-4896-a927-bbbcf18af116"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8b17eb8-ae58-41d2-9a3c-30355a9161a9",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0697f78d-db1b-444e-b4a5-7017ab7fee29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35554f27-0b1b-4604-9fe4-482509f41c93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8140a5fe-560a-4866-ade2-a053ed3791f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b3ef5067-3eec-4c54-ab7d-d75af7d9d340"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bae6472f-279d-4af9-94eb-6e3f72704d53",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21560ff9-488f-4b69-93cc-68cfe1ccb35f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d0ef30a-9116-405d-803a-750f21003fb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ee30147-554e-42c1-8962-40f9ff11dc7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e4ffe92e-0cee-481a-8da1-7c711b948a3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b874079-996a-4b42-a848-3a5e3503764d",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf41d722-7d2d-4b02-8065-09c456f909d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ee9b2d4-4883-4427-ba8b-50adb90590fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "492e985f-f5e0-4111-8c9c-9200bc5e7de0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "24f9576d-fe12-4bac-8f88-d10c261c5959"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc656ed2-c9ed-4ecc-a975-6f2856b38d85",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccba55bc-3ecc-4d97-b10d-969b4cf22bce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb391f83-2c2d-4fd7-9016-66600d8261cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46db07c2-03ad-4af0-a071-8e2b35fb2e42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e9f69c06-7fcd-4ebc-81d1-b6ef1e11ee8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c996648-f496-44ca-a68f-8cb3ee2b3d56",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eadc652f-ea0f-4757-bd44-0a15ca1fb6b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7520e2c-073a-415a-9314-d43fc8a90ef7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffdbb530-6d75-40c6-9180-578727cfb3bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8a8ed9a0-2ebf-4455-9a0a-c2bf523c119a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37987a45-7675-447f-aed4-767110cd26da",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3d3fb4e-fb76-47b4-88bb-80d19cd814e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aab723da-feff-4c7a-8f9d-3369fa08b583"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9947aff-dfc6-4635-b6cb-f37f6c9efb04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d81de0ac-7410-4ff6-b17e-780e407162e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e3b8272-b3c6-430f-95c6-622a3289691e",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d0b1c53-8ca8-4c46-94df-c0daf364fed3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc4caf20-96e8-465c-ae71-f411fb67c091"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fccb686-01df-4cf2-a5ce-7c5f9a07265d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f47c475a-df25-4d03-8cab-941ef94222af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c01cc49-7a32-4266-9e76-e454895f9a74",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec712963-b816-4c53-a200-0617b121e47f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4765af6-359d-41c4-a430-5ad0520ef49b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b70383fd-a0a7-4bb7-82f3-cdfe4f3ff164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1e2983a5-6cb4-462f-b9e3-f53fb9561ce1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac1df789-37c1-41d5-9864-9752533e16f9",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22a3bd70-d08c-44f3-8a87-db0ba4df9359",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "feacb309-1f19-4d91-87cd-7112148c8263"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf2ab955-be9a-4593-a5ca-03fc5fe96b0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9abe86f3-8ab8-406d-aa34-27f4828f06fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e1aa0de-8bc5-4926-8f0c-f46eb4f54d32",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5bd7825-7f57-4d2b-92de-2fdd100929c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2c67b0b-1d97-481e-a7e6-6eee5f9da966"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f372d393-a45c-4907-a99a-8cb89d812572",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "29ef2d5a-4e24-4836-9d1a-b59157501358"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fea0e03-5e12-470a-a538-211f79b60d41",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a20b6c0-7219-4640-be04-b6733e13797b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d8457d2-fa9d-4ea7-9bd1-200af92a83f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ac0a295-7cc6-45b2-b3eb-a292cfb024c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a3a43af-c750-4073-a5fc-cc9eceb33a02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fdff453-a32a-44e1-9580-025fd8730b71",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e17c1ca-4c31-423b-9f0a-ecd8d6ba850d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aec0595f-0263-4d55-9ebc-f2e02523fe64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1f96a5e-22ae-4ce0-aa90-01c47a7ceb35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f07442cc-19f4-4aad-9b97-dfcc67b5fc68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7156504f-56d8-4287-9e13-ccdbfd1efa16",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3637c7f8-c58c-4cfc-865d-82c5f296e72f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e7ce97e-546b-480d-ab5a-365b8820f2da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f37853bc-251b-4e8a-aad0-84a6759db850",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "658953cd-8083-415a-abd8-63b11a480537"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2d6fdae-c1c3-4830-b929-0ce81b88a503",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbc64115-acd9-491b-ba31-6812d3d6cb20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a70fbed9-480a-4abb-aa7f-1daf65f88c45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67256fa9-de1a-4d1a-85cf-2ea8e92a8222",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "94e32f41-867c-428a-a675-3d52c8237661"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb7b1a40-d7ae-4dcd-9c56-2ef02d2b8b4f",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f766dc67-8867-46f0-8298-4a4860698585",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "253373d5-f15a-47e0-a029-aab3d76056fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1c2da70-3e0b-412b-99de-22deb5aa5fa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a00373bc-eff4-4398-9ea3-8462d0ce3f31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4e3ed47-4307-433d-ae4a-19f971549992",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43ae8414-e7b1-4c09-9123-ee9a28b965c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "920345e8-6ad9-4909-9eb3-9de4dad52106"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3d35d00-ff78-4387-b5b0-0886f9582741",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "96747333-9a0c-41ec-a3b4-568259cab6eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39c2fd46-01a2-47b6-a6ff-3934660b0dba",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff9abe5b-86ad-40fa-a312-86a6910984e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b95a7f5-29fa-4922-9a0c-2cb39a0950b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08968ead-ea97-46d0-abff-3dcd88fdbdaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f9c56c0-7cc6-4f23-9c43-7b71e79188d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09892a3e-543f-4494-acea-32499d68e6f2",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "086564b9-b696-4fa8-b6b6-d7634d9f9cff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ec5ffaf-2bb4-4a41-b2e4-7a900f100a89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cdc9672-3e0f-48e5-a9a9-113926ed58d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2cfcd41-2dc1-441f-a149-08db2791a7a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10cbe1b3-9552-45d4-8180-de9f0903356b",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "763ad321-c801-4e9e-8609-8303efd1b749",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6975814-d205-4cc3-8c47-5ab2364311a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eac4186e-b5b5-4a5a-a074-56e4125b3046",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f45dfb01-95d9-427d-9078-c51ca4cbb2ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6136e308-48e5-4b2f-ad81-51836d2723cc",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7f9f199-b34a-47a0-8c59-d057fb7fc568",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e288abe1-c493-4072-89df-4d70bb038e21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f81c367-5626-425b-b5f1-e5671583fa6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0362043d-5b2f-4e9b-b24b-92c817a6d69f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "496c1003-c33f-464c-8cb1-5f43e0e774aa",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b0339da-0471-479e-8aeb-bcb79eee5591",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed055264-881e-4054-90ad-1de5be55398d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daf8019e-0b3d-4940-97c9-599a264faf5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a8429c8-cd08-4665-9ab6-37a562e1fc8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df16dd6e-143a-415d-bdfe-b77a562302b4",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5be36094-5216-435c-8664-273187ef387a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb535ac5-ab6f-4b53-819e-f7a762dd580c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4adcae97-4afe-436e-956e-eb1a85e93310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "b393e4ef-9382-4929-bdbf-49aa21d3f87a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf90dc80-cac1-4147-b7b2-2fe38a4b5446",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4927d01d-ad86-4fd6-ade0-bd70f7cca573",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06b0d36f-e588-4b8c-bbbc-68cccb652561"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbfcdeb1-ee53-4cba-adac-5e22dc510884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2880b001-ec1b-4507-a4f8-e4d2e5f59ab1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3eaddaf-04ba-409c-9887-39b2144825a4",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "773fef03-c956-42d6-b35c-93e85e07f950",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f2602d0-25f3-4558-a9f9-fb59a12b70e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44acbae0-f40b-4115-ba11-bd30e206a91d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad7dfc84-7c64-4004-931c-6c559c81dd06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbbc5819-d09b-4910-a92e-5346dd44f515",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9742f6cd-9078-452e-a351-bc8ab4b035fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dae6b29d-d2d5-4d22-af83-a209f49b395c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed90e095-6ae0-4a75-b7ac-a75f8347d3c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "42873319-8c69-4f9c-8046-352816c6bdf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a2d2d88-82c0-4c47-a20f-6e8aaeeb97d0",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54c622af-dfeb-41d5-93c0-98022a94f9ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff10cc08-eeb9-4361-bd57-9793e2bcca05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f22e42cd-3d41-4dc7-936d-fec1eed91192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "48a48f64-9bb8-431e-bb9f-5da83f393f52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f57e7949-37f6-49f5-aaac-24f37134d24b",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d257858-1920-4a20-89e7-1cbf6a1eb53d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5856b71-2157-4e19-a4b2-a724bb891afb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb4f3716-5141-4ff6-8807-f460565b2201",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "9b8dbc01-8d21-4d50-9f32-e10a51ba06fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d3e7d54-e293-418e-a1b0-5bcab7666400",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80616af9-a699-44a6-8998-f0fc84e7bc37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e3f9498d-3a4f-4d2e-bfa5-8394f5dadc67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a64d786-78a0-4b44-ab50-09eefd914389",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "64f31b4d-531c-4580-8028-3be33a810815"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdc6f742-0d3c-498f-a821-8410621de73b",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b473840a-61b1-408c-9eb6-edef058d3e34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dbff3fa-dd48-415b-b9d4-d4040939aa99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4234c25e-a88d-4750-a5da-c6c5ab5e6aaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0c303fb7-7212-4837-a776-8f5dacaf348d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "087cb954-5cde-4526-971a-ad79fa1400e8",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28518652-69ad-42d6-9b9a-84278adf5d7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c0d1a75-20c9-42b0-b5e1-dfcfd2a74170"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02bbd2f2-2d38-41e9-9c3f-c4bb9dec4b5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "959cdf0f-1f15-42bc-9284-2f924ef6f99e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28b157f7-fe1d-441a-a1f2-730d5aad9800",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f769ae0-e08e-4a07-8149-f1ed70f695c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0a0c680-702c-4702-9b52-9edd7b9fc786"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f06f50c2-7393-4451-9cde-356d83dc3a40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "cba4265b-35b6-4675-afe8-908b3790f4a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b829b2e-0969-47da-a6b0-edf7a56d2a83",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa131c6c-b236-4cb5-9e4c-d1380bf7b534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e204719-ddbd-40fb-a873-bd721e5866fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f68740fc-0bba-41b1-bd59-8de9a034acc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ce6b6782-cb75-41af-8fbe-3fd4bc32f2f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c04234d2-749a-49a1-8996-2d78523deb7f",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32be3ba9-42a1-431b-b5b3-517e20ae44a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b958cc2-9e77-45e3-93de-a13939dfabf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6978982-307c-4c10-947b-19176d37aba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "07bd3eb5-9103-4463-9837-45e9f836b3ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "929ebab7-3925-4463-8bed-8e1fde84ddc0",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbbe8705-9ec1-4c81-b580-de276c6df9a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5087f56-227b-4164-882b-46b948fcde29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cf2ae0a-e97c-4638-8f30-fb02a5c6280c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "7c9d3f40-92f6-4947-a3ce-2e21fe5cf1be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7928ef20-4dc6-45fc-8ac0-b22f07447345",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31772fde-deb2-4f06-9b35-59b527fb67d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27fc64f3-3456-4584-9ab2-dc34129c2b4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8c1b044-00e8-41f9-bffc-41053d6beb5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "a0c142fe-7ff7-45b7-b0e3-f541d124e207"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b45dbf2d-c986-45a3-a5c9-ab1a36710c87",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96a7353a-e9a2-4b8c-98b1-8dc63dd987e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99e60303-1bb5-4fd7-9cc1-9b2e29f6670b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63c3f9e8-ca9b-4692-b9fd-15cb68133096",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "8417089a-4b6d-4ac6-82fb-258683ae67cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c906535b-667a-482f-84a9-78f3fb4e9550",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0feb9769-7262-4a39-932c-f665739c50cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba598677-ede9-457a-8541-47a1bec9b9d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a24721a-e09f-4551-806c-5577388244b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "253bb764-1d1b-4869-8d64-bdcd7395f73e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca2c3018-3b4d-44ed-a9cc-bb72bb33b5b2",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83802e7d-3b65-4d78-ab86-d2515008fdba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d89f6c0-d751-4a9d-b383-8978822e2dad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad411293-c0bc-4be7-a9f9-11c54319e54c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a925052-ac7e-448a-b26b-ebd30f0c1f46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ae1b56a-c595-400a-b1de-d7e8c7e143e6",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14d1b5f5-8ca1-4a39-bc6d-030099e8fa62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d188992-a9d1-416b-8228-ccbca2c2831a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2820e09b-d03e-4664-9183-321da41b8991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "658eccd2-54a0-4073-a009-4ef12ab87f62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8da3531d-16f9-4121-89fa-42376e453229",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7103dd1c-87e8-4903-8c31-43b7b901a3d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc453725-e27a-4f59-a4e6-e20d5176f4a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d72eb675-c993-4801-a7eb-9da0c259128a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a911062e-4f66-494c-be52-e883da73ed9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc89f4b8-79da-47a3-93b8-6c70109e91e4",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45cae7d4-dc29-4f13-8f1e-732fc92e1e4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b216af2c-e651-4401-acf2-e42917677346"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a34fa9ac-4bc4-473c-a0fe-7a55c56a5e42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "22499048-7e62-4c96-af52-567a9370bbb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cdf3bc8-64bb-422d-b87e-3cff1eb3908a",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40ed602c-0aec-4903-ac50-4102fe2efc08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37245448-1c55-4022-b816-ed6a8b6a30d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbada220-e547-452a-b82c-50bc58c00c1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "16ab2b2a-1c3b-4609-94a3-0979d44f4e8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30553131-a211-4fe1-bb6d-e7d4fff2ee09",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23ea70b1-951a-4247-b8c1-1a59db766027",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97bb4315-d02b-4dd3-8350-af5b72d9c00b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03b0f0e2-7088-4b70-869e-e662b3ea4d6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7c30b09-fb6a-4ffa-84c2-411c7bdd8d4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "284c34f2-e869-428b-9ece-882e2b011d17",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e538a44f-1c43-4d6e-9938-904cf52924da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfdcb5da-b4a0-4b08-87ab-3d772b82aa7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "728e99b7-8f1d-4725-8bbf-7240db0a12bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b959fd4-5ef3-4e19-9998-3d70e752ce72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dce4c3a7-82fb-4f85-a6b9-3c88189b647a",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49ec4f21-e158-4804-86bf-bfd9e9c27395",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80690c39-b241-4607-abfc-ebd8df8197b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ed9e8ea-1696-46b5-9e73-796f05f2f463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "615d513b-629a-46ba-b33b-c217e5de62ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3a3d52e-a156-4d2d-9155-be03d7221b84",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53709983-c4f0-4d51-8260-7cdaf4a9e4d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54592df0-feb0-45fe-8437-87d451c4557e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a01c6534-8ff0-4cc8-90f1-9c05ba8961a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c47a9f9d-1199-471d-a9db-3c3cefa47013"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cbc1221-5d7c-4428-b005-297b3de3e048",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd75855b-4b0e-4ff1-99e7-3a9eac051be9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc0529c3-f2af-4af3-bcd4-dfe2b2d8140c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca06004e-c45f-4d5f-9d9f-1ec0f8f6c04f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bcaf26cb-b991-4a72-8644-5e99de7936a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c042381f-c26d-4972-8c2d-97787a98f398",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e86c2b7b-0428-43ae-8255-7be1718d2634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de8ac677-e51a-47d7-a52c-db87e49be1c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccbbc1f5-2d43-40a6-a691-e21d8e814145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "af9028d6-1314-40c9-9471-20be21b80fc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae3aad60-3df2-4756-a285-a879678d158b",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f535346-d15d-4508-86e3-5ad0f1c1c884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cbc56dd-f74e-4d1b-8e3b-f4fab9884df0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dad42de1-0ad6-412b-b426-eddfb268e875",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2ff94d90-3ceb-4e45-8875-dc8cf15a41ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6153508d-f13e-4058-bf27-9d89118c5bc2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4854e2b9-1bc6-4c48-8990-92189164d421",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aca02094-e7c4-40fd-88d1-3fd08499d13b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "851ecec0-fa1a-4df8-87d4-ae2981026458",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9eba1f7f-0b11-41d9-bf9f-42922d4cd60f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ced15a98-3b7b-4162-85fc-d14d96bf5fbf",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac514257-97e0-4c27-9f52-aa167602c744",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9abd924b-1290-45c4-bb57-238cccd453e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d69bc1a-e386-4a64-9b6b-74e621af583c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a2f12af1-7333-4ad0-9d51-e280142af33c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac6129b1-e112-47e2-ab32-09e3ac5bf726",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8abfb373-91e4-4171-aaff-ee02e1bbcd6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34e9f359-0903-49b2-aa8c-1220fdddaeea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04cc2a27-1c40-4b9e-a581-541e1d1eb1ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "25a440e5-3df7-4fbc-ae29-3b7040b43239"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5946113-d6dc-4a3f-b5fa-c439b5e26900",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dab15f6f-6605-45ff-8f2e-a53f5c2154d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97d2f158-bbb5-4e9e-87a5-7af7a9cb16f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "214780ee-4d07-483c-9fba-9dcc06539462",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "8f6f304e-9539-4b44-82a6-16e22874038c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e32d49fe-c6f8-4193-a323-b6d280572760",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de69f0de-b38e-4889-a30e-7db60b4ff259",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df356fd0-1d58-4b33-9830-5b060767435a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ed13e16-2111-44ac-b68d-53b4543d4951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "40e7a4f2-63d7-4543-b339-d7fe43781a4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38a0c55d-16b2-489a-86ef-99caa03fd1d1",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60064391-1152-4d66-a078-d74e787b93f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf1e72e5-8f4b-4757-9e05-5390cb1422e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35acfcfc-569f-4653-9a89-66a212eb48df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7654ebd-d941-477d-9b24-304471d31ccc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cbe1868-3b49-4428-855f-90df7e03fced",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b6e77ff-cc2b-4b40-8325-9bda51bb431b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea5d2afe-59a4-49df-8eca-16b3079a1ff9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec8078fc-d2da-4b86-9284-28a9ab8e018a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb2cd4d9-1035-4b74-91f7-196c47f83a1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06bd6d84-0864-4cb6-9191-8ef1b969cb07",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d2763fe-461d-47ae-b26c-c4ca28498426",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf4ab43c-b58f-447b-9fc7-6f4292da3602"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ace3933-7fbc-41e8-a6fa-54aeb63cadff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e37a1d4-3d22-40e1-a7ed-38fdbbe8d4de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93b8414d-fa1b-4b21-9d5b-17154b24d5be",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "348e847b-354c-4e0f-a30c-d728483d3eca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60fd8815-c0bc-4702-bb66-adba739a1da6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bd7c7f8-220a-4109-9984-d707b8e98e25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "839a4849-5f04-4dc9-896b-ca139c63dd3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2185bfe-1be6-4aaf-aa44-7cf9bbf02a16",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b50c8176-b912-495e-b06c-7ca7cfc3e93f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "561a233a-f045-4500-aabe-aa36fca73e89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e692240e-125c-479b-ab7e-ab8ad2710d1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "60937170-6c34-4696-a5be-dde90633f8eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd1512c8-cbe4-4429-a612-68bacb8edd79",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fd09f55-bbbc-4730-94a2-de27b9cb3683",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7696b28a-99f4-4ce5-bde5-3c92ef4b4183"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "610e1b9d-8200-4962-ae75-55eb41afe6a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "30747028-9721-4c80-9e99-b8a0308d7846"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad8e93d9-f1b2-4390-a2e0-7d59d279eba4",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d7ed1ca-404c-4b76-b360-c0aa6894154f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a568bc71-7fed-4875-bb31-25eb418f4dee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c540c2da-a577-4a10-950e-0d7e615574d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f2e8a8d-0837-4e74-aea1-ebe9ce886227"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ad5f289-1fb3-420e-847e-826acb83b6af",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08f87c00-beab-4cf4-89fc-c5b68c64d416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7a7c12a-ab42-457c-b883-1f391f41220b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4520a2f-7569-4b3a-be51-9bb5887ac9be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9655dc9f-7d37-4da8-841d-6ca53c7feb08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "739252e6-cb3b-47f9-ba88-d765bb424471",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dc7b79a-852c-467d-a93d-b0df0caedacc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bea8ce37-e59c-4364-84e9-57f5245d659e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a37e49e4-d17f-4a5f-862b-0ef9158ca133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dca46383-d3bb-483c-9443-0337b4a3af2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fed6a57-651b-4e1d-a14c-bcd4a8b3cf8c",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "531e9566-8eda-4292-86cf-6ddb4742b064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32f85423-8390-407b-ae71-89ae0819ca9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f6f0415-8d85-4bf6-b0c3-77aa462fd851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7dfb8169-701c-4aa0-9b7c-3888af55c4b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d527dc8-c423-48f8-83ce-4a7a2cc04881",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7c7813a-8a34-4528-9e9d-477897d40114",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c9534b4-a1dc-4c34-a24f-b8d4ae4c5620"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f895034-9882-4857-9d32-dbb7bcf1285d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ac998a40-91ee-4686-829c-44444ad1dab7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05bfe4bb-0881-49bc-b2ea-3d74ce620807",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4e2d64c-cb9a-4037-a611-64cedbd824b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11f608b7-08fc-48d3-a51a-e040fdbca2d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d81f707-dac8-4f00-aba2-27bb70f0849c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2c715426-e909-4b45-91e4-916180887671"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dfeef37-b269-453b-bac1-8db20e270575",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09be284e-c1d2-4606-8d83-8f90e64dff78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "523f02e7-1dca-41b1-9f54-e07349e23ac1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "457096fe-840e-4688-9310-171eab2f89f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "43394f50-a5f8-4453-9e76-8ebdcb5ea0de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d8a1c5a-1b87-44ae-abc6-3ca75b1d7df2",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d80a049a-8ece-4e87-83d5-6cffa73432b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "974a8833-b1f3-41d7-8fba-44ac2c308fd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "853b88ab-8dfa-4f45-99c2-b91da0f479af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3574dfcb-f262-4d55-850a-4ea168b36d7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e25258d6-d439-4971-aa6c-dc9b70941558",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8eb7c6d-5dc0-46cd-8766-bb407186803d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3826efc-87d3-4036-94e6-ee76b24908c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5d5aa3b-253f-4f67-9c09-08661ae7b5bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b79acb8c-7b9d-46e3-bdcb-55c6179a323b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5657030-178b-4b91-acc1-8b9289439a3a",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cef3d3b-60f7-419b-9e6f-18db018b9d58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d9f239a-e201-46b7-9d57-b27c28a1e997"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4e60863-9cf1-436b-81d4-1884b3450ceb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b7d365e-1609-4914-a6f0-4e161479c7c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3169f7f2-273d-4650-b6f3-bd1334b41b07",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92d60321-60e8-4ae5-bdc6-9cc9d11971cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfe28f73-c5a4-4b7b-b3d6-751cc6de1fe7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdf00fd8-290c-4db3-9b05-b99c112bbaab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7cc58a8f-1d58-40a0-99a1-f7bdab01f55a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35b68f45-ecb6-44a3-930e-01d90c3bbe1f",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a7ff50f-51ee-407c-91fe-b7b7c4413dac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f74e68b-1910-42c3-b0d4-14c8c7461649"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8191a2ab-b2a7-4f63-b0e1-66be1870c880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9630f01b-6796-470d-9f50-c7b969c45f12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ed3a56b-18b2-4bef-ae9c-a3fdb58d7073",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97e2b963-e72e-4855-9169-2ee2ad3965a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95af3fb6-d313-4960-b317-1e8d9fe5574f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96665ca9-af74-4cf9-a57d-0095ab0a376a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "513bcf8f-3067-4e70-b5ca-17a684193912"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7ebc6e5-3d15-45b2-8256-75dc8236c91f",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10aa01c2-f44e-4bd2-bc7a-1a8dbfdcfcdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffaaddaa-9331-4110-b326-f0b086ab05c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba197566-8b03-4fa0-8de0-bfa3a857d785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0817fb7-fa60-4c45-8d95-ebd6de95ce9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfd99bee-48c9-4a2b-b9b4-8066a62ae791",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aefc6f27-b4bd-4caf-864e-6c039b107297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeb73c1c-78fa-423a-884e-477aba1e8f3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4920d0e-4d7a-4bb0-a934-a6c74c966137",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "96911545-db13-4276-88fc-99f22059046f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad5d9a0a-a89f-41af-ae61-2f52d2f7470f",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9c78b4b-97c8-490e-a638-b3ce7f57597c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70787107-f51d-41f8-913e-0221a0459937"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9da93407-fc33-4750-aa37-fbdde8def27a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e155b346-56e5-4823-992d-ac133a4f3613"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af42de9d-48c5-4bb5-b34c-6efba921262d",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d92f19e6-4d6d-4b4c-8fa1-647dc06916fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b7f8d9b-38e3-44b8-9aa7-6a173d8016ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c86c5876-590a-429c-84e9-4034def57032",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6fd5dc54-077e-4310-9852-766d11816505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79fc2e9e-c238-4a5f-a08e-94c6858c9cbd",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc3f1af8-c70d-4716-a674-5632c3860f6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87346bd0-2b0e-4126-aa5d-b15f5986d003"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f6baba2-4bf2-40ab-8024-6d8ade1791f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5ab18c31-73db-423f-8b7c-108a64d68462"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd63f5d4-6eba-4291-9842-b03df1a34a1d",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da96e742-8801-4f34-972e-edddfa772511",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32c22b0e-655f-4aad-9d6f-519b2dbb79ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6af756a1-41ac-4598-935d-681d14cae8ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "96d2ab0a-9cca-44d7-8324-e0685d2c7656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46868531-fb85-42e4-a629-956170753da9",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c566f254-6fea-4f80-bbcf-4042a1bb54b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42df7e5b-9194-4df8-989f-4e80cedb6618"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4c96151-bcdc-416d-a818-a82525944e46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6e38d2cd-c2da-4dac-8a40-eeca9ca2cf39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc8b59c8-2aa2-45fc-84ad-ca80eafabe84",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2b307f0-2492-4dfc-8b71-53a80f5280df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "813b083d-83a6-48ba-b390-3212f5310abc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01058516-47d8-48b1-8132-e168d0b50971",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e80bcb04-8ab5-4023-84e7-4a4a8dc17d70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95026eaa-54f2-4a27-a7af-7eaeaf872e80",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cccd3c9-6b54-4486-b98b-c9043b6e3e64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac8bcb6d-72cb-49e4-a556-f2a12498b545"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e07e7bba-057d-41b9-ace7-6f2b88193d46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3b0426bf-0066-4349-8cb4-a1e73ef2ea60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed7976cf-84d7-4d8e-a07d-a2e61c60f504",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9817218-8365-4f7e-81e7-a54e65602475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47e48735-1562-46c8-925b-0acb26714914"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ce60595-97af-48ae-a090-577310a1e2f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "52fd5039-63a4-41cd-9ee0-8cfbac0014c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae2c04bc-3394-49d7-9f90-e6ad3dca7200",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f635b7d8-2d88-41de-ba71-18efc17f1ca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "70581e47-fded-4eb0-b1a4-4bfb10dd6105"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec6a252a-784e-4131-804d-7f9a54154abd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "02ba66bc-9b26-4a18-8a09-b2a7f8bb7323"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "27f7aabd-5a4f-4f57-843b-f6c00a7c2b7a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e1528677-76c3-45f4-8c54-a7d3632adaeb",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d8d3e5d-7752-4d6a-b929-a2c4ab91ae40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8862443c-3e12-40b9-ab6b-b493131fb445"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8137f557-00e5-41bd-87f6-4d8971d535c3",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "6b3323cf-2f48-43f9-bc0e-b99afd00e2f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c50b952-81cc-4e41-b472-42f5b8630b4c",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9fa3760-0657-4875-acf8-413c95f57630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8578f77e-9c84-431f-832c-7bf4a8cb3089"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4091a8b7-9c32-4491-b9f4-9258faf2fe5e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "d4f73c65-b9f8-44e5-9af6-0a110d408070"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8fefe9a2-cb1c-444b-9138-09694941ec12",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1ca37e74-b2b6-4f0e-826e-00c1456fd5ef"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ee1118d1-ad34-4e27-99f3-c812e31dcf32",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5f0aa930-6199-47ed-9444-514dff8d1f35"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9ab927eb-1edb-44c7-9d47-c736a5729289",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b4e89861-1374-452c-93c7-109478530955"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "328f489e-8073-42a4-9ab5-4a69439566d6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4686cebe-a14d-4947-8a8f-31b3941f334e"
                }
              }
            ]
          },
          {
            "id": "ddcab1f8-abd6-4fa5-8f2a-5daeb7e0cd96",
            "name": "Positive Testing",
            "item": [
              {
                "id": "54b0d531-d2e8-4b79-ac36-07327989517e",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b522f5f2-c3d5-4703-a775-be352e5ead37",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json();",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2823fe4c-4902-450a-b202-486d7fe7d63d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a4f8984d-7d02-475d-aacb-8cb1eb781c7e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6a657e86-ebc0-4693-90df-b79b2f60f44b"
                    }
                  }
                ]
              },
              {
                "id": "cbe9a1f3-401c-4ff1-853f-95fab113c504",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b4efa89d-b401-47d2-9ada-1244c1c996cd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cbebe8bd-1f04-497e-a9f3-e7367f1dcc35"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9cadf2f9-0e14-4e0a-b9c2-baacf7bfb09e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "59d3e632-2168-42e5-89cf-0dbd42fd096c"
                    }
                  }
                ]
              },
              {
                "id": "66c978d0-c7a8-4ab6-8961-7509e957e6b4",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "21d5f5a3-959f-4fbd-b7d8-98f118ad6e5a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dbac6283-2bf1-41ac-9032-e6c2d90bbecc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2caec32a-8b1d-41b2-846c-76925a489e80",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ce893512-b398-40f3-bb2d-9bb378645de3"
                    }
                  }
                ]
              },
              {
                "id": "4a3868a8-65ad-4997-93c3-524a7b0a34df",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fbbaac7b-6337-4c6a-ad27-bec04d484715",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3b1a2dae-75c4-4804-aab7-a07c2d7b83b0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3172e8c4-5ce5-4bae-a2e3-babe2da5aab4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "ba6c74d0-e619-4d5d-87e5-9a6c98b1030f"
                    }
                  }
                ]
              },
              {
                "id": "22ec71be-e27a-427f-b193-31201f9f941d",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f31c9a86-cd2b-4d7b-a83d-a0d9e7eae04d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "aa6d54ea-1029-4500-8568-ba39e0d218c4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "128ba109-2af8-494f-8622-e61333abe06f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "d6ba9eb6-03b6-423a-8ea4-0e78c90c1dfb"
                    }
                  }
                ]
              },
              {
                "id": "a776e92d-9b37-41e8-a279-22b6eaa434ea",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ef5723d2-e40e-4098-b0a6-589a0a151719",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "789efdb7-1b50-4e25-8439-0ff682a5ade4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "04d7fdde-e52b-4cd1-8cad-892f6646365a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f9a4dec4-f4d3-4c04-8f7b-89ccce6cc800"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6f9f567d-e62e-4df5-a8e1-542700e0a911",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6a93c2a6-85a8-4bc6-87d7-56258cead4a0"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a9d870c6-1322-4b02-8ec7-2f7447fb73bb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c6f5742a-76b4-4c6d-9322-402342208cd8"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e788017a-f40a-4947-bf50-ea4d91dc6bc0",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "1dde9076-f8d4-4bb8-8290-b9788e03e431"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a7424cd1-94cf-4059-acca-009ce19b0ba1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ad3de0ec-4a4a-443f-b3da-ed963d53cbba"
            }
          }
        ]
      },
      {
        "id": "e325aded-a5eb-453e-a789-4b797f53b042",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "21f4380c-a248-4342-94a5-cd336b81ae15",
            "name": "Negative Testing",
            "item": [
              {
                "id": "449e71b6-1fc8-45af-b7cd-ef87e311bd40",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b8639f80-a58d-4c53-87ac-40fe5e418c22",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1cb37ca-ad7b-450f-bb44-b0775f25e0a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfad4ad6-97ee-431d-9051-6b9146c2ebf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "674a5360-fe7f-4f5f-995e-10c39c491d12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "a77225ab-d6a1-4940-93f4-5dffc97f7a52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d92d88d-f40d-486c-9dae-09ce23a41898",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7c56f92-e813-4111-a8bd-cf624ae85dee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa656a32-4bad-43b0-8a2a-dbcba70feec6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "778813cc-d999-488e-836f-c0c1349a7bd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "02a38c78-5c02-46c5-beae-5d2ab1546edc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1394d05e-2eaa-4675-9a3b-98b115a5a3f7",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28ea55c2-53f5-4626-90a6-d2070a5656fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55583cb5-a79c-4273-89f7-52a4c7648901"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5350eaec-47d7-40cc-80c0-c62209dd8c9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "23162ced-c40a-4904-b221-c1bd6e61cecc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc58a931-928c-4008-80ee-b1e9902f956c",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fb5cf39-e21c-45d8-b2f5-32056d435b0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "211906d3-9388-468c-8111-4100a205330a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e834f67-6fa8-4036-b4f2-dc67ad97876d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6202720d-dbcc-4181-b0d6-285ad2d173d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "488f0326-d2a3-4660-a2c2-825f4c24aae0",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dbc00e7-130a-4fbe-96a6-d7fdc533bedb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5513d968-51b6-4b45-8f13-f87952d8dcec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f03f942-6fb6-4386-962a-fdf13d21cf4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf08989f-e8c5-4136-b3c5-7b7ff9a37eb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f79c78e-ad18-49fc-a2f1-a9c257177b5f",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a286b6d-a39d-4be7-a7aa-f6497689eaa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4c0d116-6ea3-4506-b3f2-da25dd0e0d40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f4033ee-6bfb-4335-89c8-167dff0e47e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "de25dafd-d757-4f0a-85cc-603bfaa8c4b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "870f0e7d-ffd9-4fa6-946d-49f3aece2947",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc8d4c0b-ff84-4ba7-823c-0b5ac24307d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87fcaaaf-1604-4f7f-8c94-ee0658a1c317"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c46f1547-5057-41cf-9b46-d1ae14f61fe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "48a9af71-99c6-414f-8ae9-f1db0b439ebe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f191ae15-edd4-452f-8b02-f5ed9d5a9135",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "186cefc3-6548-4c7b-b8eb-638220a783f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f28b9468-0b6d-4b73-a9c0-392ed5cde40c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40a8bb53-1446-4352-8e7d-d14a68733d84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d485d59-84d9-45ca-bb92-877866c7ada6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "398f965c-7aeb-427f-9562-b0019cb86457",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b90dda46-5016-4b77-8af8-9f2336e1aa10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66266615-dbcb-4e4c-8213-5310904a54cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5900c32-fef7-425a-8ca2-6a0b6d963845",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee906f62-69d3-4935-a24b-6ed61c828aa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41a5a0a8-cfff-4188-b8e8-d65c777d1afc",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "571e8a86-34a6-42b8-8e21-8efb9108fee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6acab2b2-4049-4082-993b-93a2c2c9a3c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f611d536-ae9e-4e60-a1c7-5f8b48dc520c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "23d81e66-48fb-4860-95f6-c432f7874754"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62de194b-ef74-4d9f-b2f6-87fd07fefcc2",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efd1d3c7-9264-44e6-8194-a2513908459a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72a673ca-57ef-4ed2-9670-c85026390115"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b291f26a-fe34-43a1-b43e-ae65eb5a03b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "9b99edac-3fed-4bab-acba-1a0a2488d448"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c08dc370-07de-454a-a1df-b111d8cbc223",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5684e72-a371-427f-b0ef-4403a554040c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c5ddecb-48ee-4134-bb2f-dd97066d2650"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf39a5fa-3139-4b3a-983b-bd17b645b7af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0f3627d1-b2ee-4ea3-91fc-5de8aebc51b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c818288b-3028-414c-a3c8-12b052c7dab6",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1fd5ff4-f718-4ecb-9a53-5f005c0d10fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "272adb0f-7f82-4764-ae08-51a98629baac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af014566-76ad-450f-a620-fefc69b09321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a26c1970-2b29-418b-9720-e6de21f4188c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab38488e-9975-4992-9725-e9af0d89d388",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16284977-eea8-4b61-b3b9-fcb42bddb87e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "438361fc-46b7-4e41-8ce5-43daf2e987a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bd83312-8c6a-4436-b082-cd102ab523ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "e79af0dc-9406-4021-a49d-4e2ad2c86362"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7951d4f1-ec0e-4d65-af3e-eabfb8cedfd7",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48f9ec67-af7b-4129-9d36-2a9a0acdb906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c6964f3-81cf-458e-b40f-92c2a0f8c455"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9919cfec-2ca0-4df3-ae1a-19323df9df2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe585ec1-9d8c-42f3-9132-3758a446e9c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "798a3148-c9b8-40ff-b383-c18a40d1ab53",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "716a465b-7f8e-42d1-b521-6e6b40667d78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cc4b799-bb13-402b-9c5b-4a21cbc17e60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13b710c2-87c1-4d62-83b0-9bc600d234b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "976e2aae-f61c-4eaa-9826-4653b4dd6a79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c30cadb9-14f8-47b0-a26f-c8f16c273184",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f074831-12d5-4db5-9a95-b2c8b5176183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c9a475a-beb0-43df-b673-7e4f4ef7d6fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72fbfdf1-8126-462a-a3dd-9077a8d1ea6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "ead569a7-001e-457e-8abb-c56cc25f0c06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e392fb4-13a3-4ee0-bbc6-7a3fe318b666",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c310c842-86c5-4606-b0c4-a79da4eb350e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33bf4822-d79b-4e71-832f-8e5e99180ccd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec891771-9b6e-4127-bc4d-50aaaccd7c0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "54e2b58f-32c3-4c26-96af-5095af188da9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c05c219-f00e-4c0d-87fe-1bf331df59c7",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f18311d-5fde-4574-a73f-6f081dd3187f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8292fe5f-3a65-4c12-952c-9bbc765fd485"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8830cb0a-03b0-4e3e-a479-e028da1a6dda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d76903a-bbe7-438e-bfe6-a70275e778db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bac6975b-bec7-47ef-bd51-90476b6a277d",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff90c179-8829-48b8-81a5-f2192fef0935",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46df387c-551e-4c86-884c-37f57d3eeacb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "398c1064-c0e8-45f1-af32-71a31e4a326a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "02181828-87e0-40b7-a18d-183f1e2bf36a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b6b6034-c51e-4789-b0c4-1bea57f012b7",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "665bbc18-983a-416f-a942-cc65667e2277",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6bedf7e-a5a5-447b-9d91-f1317012a531"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33194a03-2ba6-4dbc-9be2-056398a02d8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4d9be54-9d1b-47b6-b339-b2bf8fb5b26b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53b682a0-6945-4227-8e03-4fed79503085",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21ebc02e-835e-4cac-b34b-7a2c386e4197",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6fbe499-298f-4396-a189-982e28cea177"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e20490e1-ccff-4b81-944c-bee1a4689646",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "df8c3318-ac01-42bc-9004-133f6421142c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ab9c612-f419-409e-b5ec-a399220b9ffc",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bed6e12-e64c-456b-93c2-47da3f7f0920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b981e1e0-1eb4-42bd-83c2-6a36ce229bc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a37fbb01-3720-4e78-adb9-0079426474d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9036bb6-6826-44db-a54f-ec9b185e6e37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65603ed6-53ff-4003-a99e-a2fb0051654f",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd278827-6368-41c6-a1c7-274be4f4ceaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ffeded0-c64f-4b21-b542-9a586755e22f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e25154cb-e3e5-4b05-8c93-eb1b58a45a03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d38ccb1-7ec8-470a-a683-2850273ecca8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98418387-d896-4b3d-a694-63a514401803",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06be17a0-edb9-4c05-af17-2485ffc49d13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca74b32e-8622-4e1e-a547-dc24f97cecc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad2eda23-0edf-4cf9-9fa1-9efe096ae44e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2dada4ce-fdb1-4ad1-9d5b-7c45ccbbb572"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dca5f9c-27ee-46b0-9634-9ab95a22307a",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35ed5edd-a779-4da0-908a-4501a2570a05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3604135c-8f93-413e-a65e-0158b790d74f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "812a794e-00cc-4656-8d75-a14771a0a884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "24d8dc4c-4ef7-44ad-86ea-ec69dd834c56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6a6385c-6d03-43d8-a9c9-811a8c7642ca",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "992b6905-98f2-47f5-ac23-f63fbe38abb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ca744f9-bdae-40e7-9da6-8688b8d9f0af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "471260d4-20f2-4209-879f-942fcc150c24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bcb904f0-1b3f-47b9-a092-6102dc0bd0d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04e42e7c-6656-4e41-8211-90af59f7cd6b",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51dedb47-f5e9-4d61-adfa-d670b775f4ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "095160e0-8aa7-48e5-a371-a3dbabc06ab4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "667ce71c-bdfb-4d38-ac7f-000fefa4ccd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "03e44efe-cdfd-4547-9176-13f097a318c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54f0c120-5ede-4fcd-8a05-6acc46447004",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04b972ba-720b-44e5-9c46-6351a2664a7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01bd109f-e336-46b3-92f7-cb263e398674"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b2ca6f4-ff7f-4473-8660-0d6d31bfa46f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2d101c4-4a8e-4242-8da2-f73e9d8e4d2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26cc98e3-4dff-4437-875d-58284cb5ee2b",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0228b034-07ca-44cc-b6ad-06aad5267b42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9feef2d4-7e6d-4ade-b0d3-795740676f09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "718aedbc-b3da-4ac9-b679-a9b19daec642",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fbe3028e-5062-487f-8030-7f691ba64ddb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfe19c9b-8d3c-4fa8-92d6-73c01cff9733",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45233d99-7125-4218-98d1-1693715e5da3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc4e2ecc-28bb-4b59-8f40-2b35b22095a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d4179e7-264f-4e56-9860-a18f158a3544",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2232d5ea-72d2-4170-8faf-fa742221fc33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc31284a-d25b-4bd3-96b5-9dcf2b152644",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63554b3f-f301-4e59-b9ab-eb6a52dc7e02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48b554fe-64c5-49bd-8faa-8c14e1980b81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70845ff3-cec4-42ab-a6d2-711a867acc81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "333d350e-8a1d-4d6d-a96a-45e71cc87e4c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "62012972-7d44-464a-9687-a350136f71a2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "86a317c7-0d84-430d-83f0-ef519f309469",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "963f5fea-aa50-4157-9302-bf7a8de44d77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "096ac654-cc52-4832-b1d8-6e81697acf58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abb7a42a-81a5-4ad2-8be4-f27367085c2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "43701252-a5ef-44dc-90ff-79887c4469e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "207c2ea0-ae3e-4e82-bf12-024047732630",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6e158eb-60ca-426e-924d-dba452d08f2f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "654c1017-5638-474b-af27-22a820affd3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84ad40c2-ae65-4481-8b9c-c36d525628fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "650194c1-ece3-48fc-bd3c-1223c4cf29b5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "98d350c8-9811-4056-8509-c9437440dd6d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4c90feae-6614-42f5-806d-b23308264fa5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "75698184-3071-4d5d-b050-ad6c3d5f1c08",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4362a491-6f79-4ef1-b63a-86ad43fff8b7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c1139b28-4c39-4f01-ad63-23324688289c",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4f37efe3-5948-47d4-b40f-af036789e099"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7c397c8a-f9c8-44fc-9e3e-aeee17ffc04c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3c1c4c69-ad30-4975-a0a4-e93c807b0ec7"
            }
          }
        ]
      },
      {
        "id": "6111c33f-7980-48bd-b78a-c0331ecab661",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "1e4b7147-0303-4f5f-a0c7-c4aeab82dd63",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9ca188a6-072a-4df1-93e8-03e4093d6327",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "73ecfb13-cdae-4b05-bc32-93f20ee32dc7",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "219a7f28-8bb9-41c6-8c78-0aeb9dc122af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d6c2329-428a-469c-b665-86cca495080d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6132644a-4609-4a30-91f3-ab4d39db5d30",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e588c7a-da60-4152-9e32-3f0cb223e10d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6ad6ed5-c42e-488a-a9e5-29fff3ec068b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51331345-42e8-48f9-817c-7bffab1a0de4",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a8d7f7c-2f45-422a-9bc8-5054574f7604",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f5c6556-827d-40b6-b275-d92628ebe937"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96226a62-8509-4696-94b7-10e8c17fd102",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c76f03f-7b44-4c25-853f-7bf3e9060396",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "388e1ffe-2fe3-4e3d-9419-aad3fb4abc93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b3f2376-aab8-49da-bffd-769bd1cee181",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e86319c4-912c-4649-8be9-68da919bf289",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3099bc42-db4b-48f8-a76d-509d3bd6d72b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2738c6e2-310d-41d0-892e-5ea7339be33d",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ecc5887-9714-45dd-ac92-5d33ab55d71a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92f9e2bb-0d99-45ad-81ce-ba9391503622"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26070c36-7011-483d-b12c-fed665131390",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21697aa0-a1bf-44e0-a030-800cf4a4ebdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bce9824-24eb-40d8-b822-d2d29f144aba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3152bb40-bab9-409c-a555-ebdae57a66cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f3daab6-a0c1-4ed9-aa5a-f117ca410c74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ae2b165-a93b-4d9e-be85-ad531bc68d62",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad0f20b7-6cac-4db0-ab02-6f6e251556ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca08530f-efe4-4062-ab7c-ead434046e79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6879ff89-12aa-4211-accd-ed7c9a5ba7ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07137ed8-2632-4f54-a5e4-a3c5e0592c47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04ca62ec-aac0-471d-b20f-c906ba3fbd82",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bae96c0-a069-49d5-b49a-cf076366171b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "394ec8e3-a8ab-4cef-aaf3-953c5c5e8790"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb7c8b2f-dcb5-4d7e-bf09-4ca393dd5ab8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a85c2214-469a-4a1b-aa19-949764ea95a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "359fbc39-00df-4a70-ac0c-83ce2e156008",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2efcddf-842c-4433-a017-b4f3e4fca200",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea5dae9b-b0b4-4255-badb-3a6a1fdaa153"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d75644ba-717e-4a71-a50a-90a956a035f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9aab963-d76c-4870-ab6d-70afb6e92908"
                        }
                      }
                    ]
                  },
                  {
                    "id": "521ecc52-7667-4636-9b25-f20ed6fe20df",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98608931-07df-4c7b-a36b-b7d0a7017b3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dafd869-53ec-438a-ac9a-63b4716006ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "406378a4-8a3a-4541-883e-bba849d4dced",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dbcf293-bea9-4484-8958-db8d2b612cde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "864dd8c7-7dd1-4349-872e-9bb54c4e7bdd",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc08bc5c-e1c8-4b3d-ae56-537f50ea93ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b370fffc-8437-40ce-83d3-37891b57e020"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84ea23a8-19c9-4b10-966f-cbe4b0468d77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6e7e55a-1e9b-4153-8034-69f290b31e8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9063cdf8-ddba-4c11-bf7f-4eacb7adf4ad",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bb16e0e-441e-47e9-9c83-18f6884b82d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69ff6cef-b272-46d0-8f69-07f60ba9e995"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01e777e4-e53e-411a-b557-6f79de2e7001",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adcf84cb-1935-45dd-af3e-0995d42a6d30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a20868e4-9f34-4419-8a7e-ddce2dda39ad",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fc6a223-dcc8-4f22-9895-91054c7d7e4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6050890-1960-47cd-95ac-3e82c8774c21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8ae3525-cf77-4616-a098-fc09b4c4026b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eabbca7a-30d9-48b3-aea5-f38965771634"
                        }
                      }
                    ]
                  },
                  {
                    "id": "281508a3-3d3b-4eaf-992a-9e7101f2d5a6",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c14fe656-5a1c-45f6-8ac3-b1779b44c32a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c2b4e6d-5466-4f35-b801-37093b603de9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adf2f6ac-5256-4474-b6ed-628dee2517bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e951b68-a2f3-40ed-ae7c-5b05107844e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84852042-93f0-4464-85d7-c65442646136",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2da99c70-9aeb-4946-b12a-f0e54a7f906a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1957b7c8-95f3-4a11-a0e7-643a9f71a05c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "662960ad-41c4-4701-8d9e-d282ef5d1bf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fb1a495-fb5f-4b34-9ad3-3cd0c0c34ee9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "265f5364-e34b-4d55-9d60-f5683a02780b",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2a01022-69b4-4c80-a5c8-b6b6e0a78037",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "452b6b58-d84b-4fa9-bac7-6ffcd8e27214"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9181fdef-afc7-4163-b41e-14aae80883b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4d5a5b8-193e-4e31-8426-2073da011a92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66cfccb6-9e7a-4e95-a54a-4173d25349c7",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65937eb7-5eac-437e-9033-364a9f736d31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "518c0fc0-2e4c-4bc9-aa60-63ff589bdba7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81f026bf-a9e7-4314-b880-0b5ea7348dde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64033439-444c-416a-a08a-0b2a2644305d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1481aeed-aa01-4389-ad6d-6cedaf15b63d",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c3240ea-432e-480c-964a-54c14c42ca45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18e235b7-dc0e-4601-9725-ce44426d7048"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd10c807-b402-45ea-a52c-9c7d8d20d7cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a20b2b5c-1cc8-4740-909c-05bcbc75ff58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "297ec95e-3388-4531-b279-155228441273",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3165e5a7-96b3-4fcf-8bff-9169963ff25b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33ee2a6f-5648-4494-ad87-f75db93c287c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "057557e5-dbfe-40ab-86b5-f144b8627621",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89e9df40-7f3f-426e-b847-a14ae521a2a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbcd2868-0a6d-4d52-bd06-887b5fda740f",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3a89311-e373-4d58-b0fc-7439b501cb9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "111a0d86-4be8-4207-833d-90914bb3d14c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cfc14b7-f1a2-4aad-b0aa-b6f963d4d0b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "022603a1-d40c-4d38-a80c-32419e21f58a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "509f413a-2e24-4f3b-8c2f-a612388e649e",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04cbb687-4f01-43f6-ae49-e6c7417ce6e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "089c8382-8529-4272-907d-e580af93d0f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f7ce28a-0b8e-473c-9b90-ed289f9eddc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3d8212e-d979-4c01-a907-e8a8f4b42f38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2f27052-3394-4414-830f-5d1ef8c65c65",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87fa22f5-23fa-4901-a0d8-ea43be3b7b0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da28a273-32d5-4684-8c90-35b69db4e754"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6005a4e3-8bd2-4c62-9c1b-62c1152415c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65e1d10c-6d01-43c6-ab3f-3cc1aeba4dff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ae0b444-6b21-4278-9481-38358a06d4c1",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92263c11-2165-4d08-ae28-509bd67ae76c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64347be4-01ba-4eb6-91d5-faf0a9486e80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c1f3a6e-061a-4bd8-9d97-0337f60d4048",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93e916ec-b473-418e-9c2e-24d767bcd64e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eb2b0bd-7bbc-4871-858d-a20d91e91e6a",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "674dd865-be29-4bcf-943e-89f4a955c557",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bda330fb-7f6d-4aff-984f-1bd402f5bf65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8ff34b6-4880-479e-92c7-b5546d2cc6c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f95dbbe2-0ccf-4fcd-80e5-124bbe6c4b88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c0ccaaf-d95d-4dfc-a6f7-327b6330df28",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e27cb78-4bd5-4d2b-8034-b70528fc5beb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51e3e41d-a07c-470f-bc51-15d5958123d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "545f5dc5-a55f-45ca-9736-831dcec87615",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2e6044f-58af-4c9f-8df1-93f156bd5b01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb625077-7730-4845-8146-019316e291ad",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d20c6c4-5d57-415e-87bf-4b3a28c57771",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "454db1bb-875c-4a50-becc-6cdde0ac034e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4dcf4cb-0ff2-4bf9-bba9-5ba057bfb7e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c3bbdcf-6a17-429c-bd30-4e790585a048"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a4872f3-aa7c-43c1-b3d5-6e475dd104fd",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "722834ef-7f0d-461b-924a-36f935accda1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cef9b4d4-2e9a-4ac9-a86d-9bea83199eb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aad829cd-7afb-4144-9e64-d23292f14d16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d6780f3-2670-4306-9e6d-10c1498190fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ea3708a-9d11-481a-8d06-85c931a290fe",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79c9a801-a816-4ff0-ac19-acc4551f3a03",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "976f2a77-691f-4d74-9566-26778cc9bc9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9727588-d38f-49a3-9526-613e5084c288",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "904cde30-706c-40dc-ac44-14bf358036c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1f47a12-3e1e-451f-b646-f09677762e83",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb241640-e1f3-4b14-a1d2-417e36e9d15e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9d7ebea-9897-4cf9-8136-39cf6af78ada"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "333d880b-bfb9-4277-a3e3-a3fceb723915",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e80a4dd8-bdb1-4bc9-95dc-90193c9fe617"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01baf4eb-ebc5-4652-b9de-952cc3cb8181",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bb2ca4a-725d-4263-9e8b-6786d8f78dd2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ac7033c-7cbc-43d3-acb6-69db5fa30bd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b031ab7-252c-4fb4-8a18-c4c82ef1c9f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e7436b7-a0c6-441d-8fbe-e83eea439187"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58f93645-87e3-4455-946b-b936fb132056",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c50ba47c-e712-4aab-bb49-f50c6a1b4d76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c11582c-f96b-4439-9739-fc567e1ff9c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "158911af-c246-428f-8bb6-a571c9d9e002",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd451658-36f0-4d24-b1db-cc2cb159931d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7abf6d5e-f9a5-444f-a14f-6a57ca132593",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e21dc4c3-168b-4401-a653-2571aeaf7345",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07e52f6d-e203-4c41-979c-e572a650fa04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "944e1567-da01-4deb-b362-0d69f96373b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a355582-f40a-493e-aa13-fdef1b30d785"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c6e9c6f-ee9f-4009-92b9-4133456a0831",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bd9eb46-0527-480a-90e6-767c40754398",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02e290ab-170a-490b-9059-81424504248b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a2d36cf-d349-4331-9546-18200cfbf6fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1155b0bd-b522-4814-8181-88198e851d47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ef7c149-7ff2-4227-b6f7-018091d1df79",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1a1aea2-7715-4cc3-b967-c377666fa352",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22f0aa7d-ab57-49df-8b09-ebd6d9fcf1e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d818d03b-7bea-4b34-8342-4a35408191af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82a4b585-6c46-4fb7-bc42-7bd5b15917cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f8d4d2c-cae4-4a50-92a9-5ab21b62f21d",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1632ed61-27a2-4a5d-84e7-468a5234c38e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "208da3e1-98b0-4cc6-a875-a64e2df49992"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "403530c9-d2ed-449a-a33e-6fe3c1023826",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a06aee4a-7d1a-4b2f-8f04-47a9b1fd4226"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e46f631-1437-464d-88b6-dc0a946759cb",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04fbe40b-bfbe-4254-8a80-68e8cd14af3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e209d040-a65a-4ad7-8850-69db3c9f416f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b03792e-f282-47d7-b339-e7d0991abaa6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "553f976d-dec9-467e-bf97-24c52e354516"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb64050e-f52e-4f07-ad02-93dc9d5f2240",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7b6900b-2980-408c-8242-8ae6707b721e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b31e3b8e-e038-4eb5-a3fd-b0af75bb4d85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9b2b5c1-e468-4aa5-8900-dc403f83abec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ac08559-a63b-44fc-913a-5306554fd85e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b1bcf25-aec1-442a-81dd-dad459e9e05e",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "309176bb-4e2e-487b-92a4-4301d32339dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8b6ac0e-7045-4256-b900-111700f0ecc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd4dc3ae-4316-44cb-b2e9-9707cfc4aeb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d0ebce4-cc83-4ee9-ab32-af190a99a52c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bd56970-462d-4d90-8ff9-686270e787ea",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f8cb762-dd69-430a-80a8-ccf7cbfef8ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "811aee10-4b36-4c37-94f7-248118f697c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8819085c-a360-4d6e-a960-0f78dfd467d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07d33371-1389-4792-bcd3-019fe4afe411"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d35e6a7-b3db-47d0-9cdd-f4da29ce2fc4",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a79e747-f2cd-432a-93c5-8ddd5e67193b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4a692bc-c1f0-46db-b407-d8ff8fa898f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88c7faa0-0f02-4df2-92a6-4292ef36d4d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "208cdddc-511d-42bd-b0bf-69fdec013806"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f85e8543-d296-4bcf-9246-dda626ea793c",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aed21f5-d32f-4b50-9cb2-9ebab037b2db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dbe4ec6-8418-4d16-be5c-7fe2251dcbdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48b25463-210e-4b63-93b2-4c31e0e79839",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d23abab-7869-46bc-ac06-763d2437f4fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b66c55fc-84b4-4d2e-b54a-0bc7a6c20d2f",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be328f10-0a4d-429e-82cf-9379be948eea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2fc748c-7cca-4bd9-bbfc-79a026f60246"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d208b4d0-5059-499b-b4ea-6a21acdaa7cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1bd2541-2f0b-4797-8997-8a00b9cc1ff9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f31be0dc-0dde-4cbd-a566-cb97f1944365",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ded6cd3c-21c3-41cf-a77b-84cdbbc6ca43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7c5fa05-9025-49be-8dc9-0becd27cc725"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50c37de6-dc7c-489a-a972-dbcd18276b65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14a92a09-2b52-4883-985c-fa3c22d3532c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a6ad6e9-01bb-496d-be91-6366a31726e3",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cfd2181-8897-4648-aa17-42b8101a4f23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75975e19-7a39-4dd5-9dc6-a39bae7bf64e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d9dcbe9-961f-4fd2-b51c-bc9b9f2553c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f32b8ea8-62d7-4810-99b9-d2620795e092"
                        }
                      }
                    ]
                  },
                  {
                    "id": "780e6699-cfac-49f8-b495-f16e6935bba1",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3393530b-595f-4b48-9bd9-2df67b3a30d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5f99222-756f-4fbe-9ec2-b29d6a145546"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a25eaa29-e54f-45ac-a66e-3437ba889167",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d330c515-69b8-4291-a596-c142468c5b92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d94190c2-9513-4412-84c5-40e2c5ba97de",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69821865-9d0c-4508-88e5-f245a1ea3365",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e5e784a-ea78-48af-a296-a739bfdd452e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a9e6492-8744-4896-8ab2-52ba8bb3af32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ceeb9469-d3c7-4ba4-b160-908edea65835"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61c12455-2d2a-4ca8-8a5f-ba8f0454942d",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0344b361-ffea-4dc7-9153-573a3d9a2bbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15205536-e298-415f-b42d-cc2ed1357b0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd7eb653-23b4-42eb-8e44-601c1c1bbd66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a98927d6-9461-42c7-a5d7-60762d488c50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e205a34b-281b-4541-97df-2238a00b1fba",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21e961a6-1843-4d61-8b76-0f1c6ea59225",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22819ff8-b62d-4a5e-8959-a39506848738"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc425af9-a4b0-4497-883c-230e0330c391",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01e0e9a3-68ff-41c0-b14e-ec3f7a8f63c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81a6b858-4455-4684-a321-6e8acf07df73",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7f45789-45f2-4032-8fb0-42afe99b2aea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "661778f5-653c-4c8a-bf89-34103c643fbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f96116d-6727-4731-afa3-55d2f6d07f0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbc6798c-7203-4b1e-9cac-66b331ca6f16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f2e263e-3a17-40c4-b889-dbaf40b0997d",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84e2c33e-f57e-46d7-b730-5763bdac71b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f3c695a-80e2-4985-b932-912484dcc59e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7544ee06-ecbe-45f4-9dbe-25c5e4d37e96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42b141a3-933f-4136-8b8e-eada9a6d1ef4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bb43474-876d-451a-bba4-92965cc2e8eb",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ec83695-8c29-40d2-aa93-9601bef41c20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eab40250-c3fb-463d-a818-c3f5c9b0b6fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a290454-2e4a-46f6-bfcf-81380624fc89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "def467d3-cdfc-4854-892a-77888d68ada5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2787d329-1336-4b25-b215-5aa962c3164f",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ae765d3-78b6-4828-9351-ebf48f66ef64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a02fcc74-2804-4fa3-920f-377c9aecf938"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9baf1c3-f1cf-4ea7-80a0-7bdc46120184",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93884eea-e950-4a41-a7dc-0d838ef56460"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64d0f759-19db-4863-8596-d52085242485",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "950980bc-1bd6-4b5e-ac5a-65067f4e6971",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e4533a3-5a66-4c6a-b770-739c9d669dc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "360f6ef8-8356-48d5-9803-1b94b8d3d98f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99c04639-c07b-4726-b4dc-2052e427a123"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae03d326-c13f-42c0-b477-99c835fcd129",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f787d03-0e80-42b9-b53c-7abacda75750",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f2b082b-c63b-4b9a-9064-65d055aab03c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2081e2d-d61e-4638-9516-d88b68827824",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50d1a4fc-b49c-492a-89c8-7f6d6fdbc2a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fb1dd8d-d1e7-47b8-8752-1f3d159202a3",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fff522af-68cf-49d5-853f-5685bcf720d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40cb6ab0-7d96-40bf-b7fa-7e9d04d49e98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40208dee-60fd-476c-895c-ed1266ad22be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65529749-a3f2-4f5e-ace4-21e68365eb58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "069e3007-948e-4d5d-bbbe-0769f7aff83b",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22638b2b-92fd-4932-a66e-f289f943cc77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b6a69d7-3ce6-424e-b40a-6567c6a42b7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ad84eb6-cfe2-4ebd-8876-4e8dfaa4b35c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7727c5d-fa03-41f5-bdb9-9a49c405dd95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5973553c-2aca-401a-af2e-5f4a9c8e88ab",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d62c5653-4d82-4483-b8b3-b0921c41cbb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4efa0e82-05e4-4f0b-aa2a-938e76927c52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "feff0663-6168-482a-860c-a2a894b37cea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "407c07ce-0d69-473e-9b38-64e4a1701900"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f6a9319-b24b-4fce-9d98-9c3bff85a0d9",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b030341-2ef8-482a-be15-f3360835a7f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92784b24-2014-427e-8f8f-bacbfe9ac968"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dc828ed-2fb6-4291-9895-d0368b13aca2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "023858a2-0d3c-4c3b-bb3d-b2e7575b43ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6a27cd4-2cad-4a31-af3d-07ac9f9b6397",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94899246-c622-4acf-aa96-188e73231116",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80e703ae-b5c0-4215-a599-d10875b39a42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15adb9cc-35d2-4d5a-b733-85cd4fa418cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b5223a9-ac84-4183-9d42-d83c3f241408"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1c8110b-281d-4de7-8dc9-3ee005daa121",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "234aad07-98eb-4165-a381-4da65fbefc7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "947c7d0e-95c2-440f-a624-eec6dd29c6c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82a0a809-50b7-41d4-8dda-b2788a2e1e32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88adc70b-c482-4c73-97da-fd2451ceb3cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "603a4942-d7cb-4aa8-9075-c427b9aa3c34",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8210a10-e36c-4c28-80a0-97da2f5e8f5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec359986-64e7-4acc-a888-f997e77044a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f504cb7-3a5c-4099-bdee-21c9159e343e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19dd1364-8a29-4d07-a63e-2f8940abe143"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6fdf94b-40b1-4d5a-aa2d-ce0bc3d490dd",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21919c48-ef5d-4f4d-883f-16085e3f1606",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7913ab3-995d-43e6-8d62-3b3dfa8388a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bc37683-5911-485b-b8a7-592ba5d9c685",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcfc3b9c-ac5c-4362-a2d7-f5732c95c9ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7259bb71-94b7-4bbb-9fe6-b25b84b01e0e",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7730a07-2563-4d2b-ae63-0f583ed78b5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8059dc1-a90c-4c3d-a27c-49831d44b812"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25075991-c64f-44c4-a37f-4505baf3fcb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d3ef43d-8af5-486c-bb62-f1cd9fbaef2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef438c39-20c7-4e98-bef7-cbff732c258b",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebaf1766-fea1-4455-b378-3cb4fee482a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4f72b1d-c70a-4b4b-975e-c8d2af53ff5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71121bcc-3191-4d61-9bac-502fda72e40f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7487d6b3-8491-4427-8c8d-935843d057a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33569452-394b-4ba0-997e-0061cad34275",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "313d2dc0-8dee-4d67-bf90-913b856d8390",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b085809-241d-4610-8ac2-ec4215741912"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40d24abc-e98d-4fa4-b3f8-51d305a7b17d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec1d002b-66bf-4f21-83b0-ab85b225f00e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60474a4c-193b-47a5-b85c-f65cc971bffb",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96cdf194-7e05-4185-8e6b-2f976a843639",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe3a3d5b-b4b1-4382-8914-0bb6a0260f2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b070b29-8f70-4e2f-a1c8-db90cbc9dc95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bba29ffb-f895-4e5c-9a3c-336bc94ceeb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5180c334-670c-469e-b037-60bb2b84538b",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cfadf2b-ca53-4991-8088-d3894cd364e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf269981-a854-470d-b8e0-ea2052f11729"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbaf1ac3-d7f3-4ec9-8a66-72471444bdad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa5e5ac0-314d-4332-9147-0f41f2fbb322"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f9cb1be-7d19-4178-a53e-014b2b77d7bf",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7476430e-5eb0-431b-bb3f-a0faeec8f5d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "502121cb-56a2-4307-b1a8-97010c17729c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83a5017f-7328-4203-82d9-f298cd42ef00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ddbf575-255b-4af8-8794-d4c7c399cd96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6645fb59-a3d8-40c3-9c79-252fd2cf7064",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e786e03b-a64a-4286-9f82-e5812740b580",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2855be9a-0ff2-4479-9dd0-b873c85a9b29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4f60b51-f529-4e28-aa2e-d1e2297464e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07176524-90d4-42f8-a302-0bea125b71eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "412935bc-97f2-4ee9-ba66-9076eedc70fc",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f4bcf41-ec13-4eaa-a050-6b1a195002a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66a850db-219e-4ef2-a29d-c1a79e18522e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "084c1084-2059-4670-8bd4-8a45af11f4d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "597d1711-246b-4588-bfd9-65addaca78c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a32caa36-87a6-4034-a3a7-2719b4b98ade",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea09e8d7-67f8-4341-b934-37a283414254",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e14c3291-5a9f-41f8-8d4a-0b490e03950b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52ee8d60-d9b2-43c8-a12c-5f1f0cc8563e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "109369ab-793b-4585-8b63-b11192bda639"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e48951d-3632-4b9d-b409-c9b155e58632",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05ffe19b-2563-4d17-b36b-023d47a6c30e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a686a1a-1ea0-47ff-b554-10ba261eb45f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0373b630-2a5c-4847-ba2c-2091b985dbcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bd7a261-02d0-4ba6-96e9-9eec6fe9f625"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbc333f2-57aa-40ae-8ee4-45a7d9d82df4",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10cff01e-48dc-45a6-b07d-6de1a34b400d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f504deb-8122-4469-b0bf-08e5f6aa2423"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "491a327b-1d78-47e0-9dc7-2d5b528e789c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "366135de-4979-41dc-94a6-2fe01889c867"
                        }
                      }
                    ]
                  },
                  {
                    "id": "792c33f9-47dc-4efc-9338-4869359a497a",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27c57429-e421-48f1-8bee-cd5de65737e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46de5c90-8180-4ca4-8d6f-5fe3b1ff269a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a191ed6a-3b68-4cc8-90f3-b75b400231b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73f9a094-fc07-4217-a101-594af57bc30d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4c6b092-ad6c-4142-a08d-9bb6e9d162b4",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3ca1caf-7940-411a-bf6f-04081a90c6e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "effdc15b-b664-4d7e-b158-f0a5b02122e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25f1a15b-85c8-4667-bef7-8cb9e77f64aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f801707-ed7e-4409-87cd-a18efe892b5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cd9af1d-c92b-41f3-b9ba-c20ae1d0a6d8",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cde30182-62ce-491d-b3c0-f0490727db7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db1cb34c-15da-4f8d-ae49-47b245da99da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7661a852-6c4b-46cf-91c0-5e5844c8ed26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c902891-9510-435c-b4ef-502e876904e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcef86f9-ca5d-4071-b6ff-6731b695f7eb",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb34e080-faa4-433f-beef-c67a72e20079",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dccee4c3-871d-4265-b493-d809da0d7869"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "222ef50a-b87b-41db-b4ba-2f294b9c5436",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "692cc02a-7c5b-46bb-ba5b-dae27f87f9b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1265096-a83f-4ce9-a556-48c4d6a2e885",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba422198-66cc-4c35-ae71-e812823f0a0e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1acdacc-60d7-4768-a680-71daf49fd8b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52bdb8fe-dccc-487d-94a8-263dfb009056",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e5ae575-4a32-40c1-9a13-4a5c296318ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba55192e-0f5a-4b6c-837b-d45e54ad3749",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09d464ca-ab0d-47f1-80e3-b51de6ad0a5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5787ea4-05d9-475c-ad98-46a2472f043a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b1e2aa6-2fc9-4536-90e2-9a1ffc23ffc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "145cf121-6fcf-4aa0-9950-0fa807426720"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3f879bf-7a2a-45f6-8897-fd765b7a9fdd",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8961aed-386f-4cd1-8cb4-2459d46503b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c800fdb-6739-49fc-9e93-8645c6d311c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a45282d6-2376-4974-a56f-9590a7700ddd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a22d5a21-00d1-463a-bbac-29a398b1e8bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59855bc9-a508-442e-b1f3-144049d9df37",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a3bd4ab-2d14-4e17-9ce7-c9df6baa49dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55c69250-2ce4-4f5a-9a3f-5301cb21dfd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a892763a-cd69-4951-856f-ae4a6f76c941",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6d887ac-e7c1-463a-8c54-85726086c220"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1637b22a-c2ea-449a-b9fd-e4ba32966996",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6509701b-691f-430d-ba49-a0f9763dbfb1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40eb7fba-e617-4a82-8af3-4f8a307ac16f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "881fc671-3962-405f-98c2-2be0634c9d6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21075539-7509-4e12-ad60-c55849c765e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1321160-2689-48ed-abf0-238f7c682ef3",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "402a650f-e494-44b8-882b-0cb1f410cad9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e63b18dd-5ce3-4908-b482-67bb8b535bf4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf532209-1439-4760-8d6b-1a5b8826fb7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b4df028-5ff7-4a7c-b7db-98ea4dee39bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9f8d87b-0a54-4f07-9c4c-a9b3e8b44771",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c5c73bd-d14e-4e76-9c16-edbe4d4a71a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba3af6b7-42cb-4f5c-bada-c00210a12b3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14cb0c9c-bfaa-4eb3-aec7-eb8b3ee5c385",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17649cef-c74f-4e87-8907-41864a42b118"
                        }
                      }
                    ]
                  },
                  {
                    "id": "954a40d3-4466-40e2-95ef-efa43334c11e",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33afdbe9-b534-4a33-9b66-20c2c212b167",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3b48524-0a23-4fd8-b9f1-9220f7aa9f80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5173c3c1-4123-4a7e-9083-3280e126b4cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a14d6b40-83d3-42be-bc25-d0b6b9c89d43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11df3a3e-7cc2-46fe-9aa8-5351f31790aa",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cb9d541-32eb-4ec6-9315-fd4d3ac5dd48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e176d128-adcc-402c-9f06-5faee8470050"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca4db5e4-446d-4b8d-b99e-2cd6ee6415eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fb327e2-84b0-4c41-a52f-5a8b99e47e37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54c4db41-ee70-420c-b21b-35d4c835794a",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5dcc287-662e-498d-a9e4-d5ea45235d7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b68f71b-eabb-4d2f-82a8-d6916c25418d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d73d8e8a-4a70-4aa5-a5ab-4564648bf34e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cea62160-95ec-4dbb-9491-0aca69e7a2e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d157248-a670-4f0c-9669-2737fc480226",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "025b6645-cb0e-4a33-9848-247a62011956",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aecbe0ba-82e6-4d8a-9900-275548fd208f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f009de49-c1a4-483b-8859-702737fce6b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6f125f7-ce79-4501-99dd-b664837fa79a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd4caecf-ffad-4a21-aa18-d3fe15351ffc",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64fc6038-d10b-411f-b61f-ded150e82796",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b418d17c-1e25-46f0-9d6a-eb98cb498803"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbed22fd-09b9-4c80-a7bf-c46f6629ae5e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fb06052-3330-4c12-8736-0c3e9e0bca28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "637c23a2-d0ae-4631-8276-98b14b6b1f66",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2b34330-08fa-4699-ad9b-849d62a50b61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "874099b2-d693-4c3d-9855-31a40eae67fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2bce5ae-889c-4aba-8e4a-30b0c7ca435b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f556df23-fe83-4e6b-9e84-9fdb737ec1f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6bc781b-1efa-4d0c-a2c9-58362fd23855",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50eb11e1-1219-46fb-90ff-a71a05ad44e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "acee10f9-069a-49a1-8161-3be73a2861d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01ddeece-b5f0-4a8e-8228-8c5989befa6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3900501-8ca2-4f0a-b303-91f3941f23bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51133ab0-4030-40d4-9174-39685152f4ae",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b9ca6a9-13f3-4a7f-89a3-0b80db24d95a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "339070b3-5c6d-48d3-8f5b-3277ad75e58b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aea6837-dfb3-46eb-81e6-b3255f0b7709",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77b6b9de-7906-4bf2-ad3b-ee3e739de081"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ecb122f-1d1d-4637-b799-6e49e69fdf0e",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97d9bcd0-e326-4a43-8e5a-cf0f67061081",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "691b2c39-d4ed-451a-bb93-85243d1adb38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d02142c2-a8d9-4dbe-b54f-92dc99f15373",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "992d1839-b6d9-453a-9fd0-f071f1a5c224"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40b9b218-8cc3-40cb-a287-9194ce6c3ba6",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5ecfe62-5f49-451e-8ff8-441e4a2878f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8cb243ae-ff48-485e-8adb-19719fc42faa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abb67ee7-55a4-4b92-90e5-a6f4b779e46d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc3d9132-7011-4270-8495-fdedb13eae15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa4271a6-e826-4161-acd0-f1b060aacc14",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb81d240-932d-46ca-8eb8-9a537fae2fce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5bfe2bca-9850-4d59-9658-5ef27c877288"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9db3dbf8-8780-458a-8e41-e267fd5c6ae0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d38416d-2d7b-45fd-964a-f89309f032dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5cdabcd-2216-4328-a939-73ee0a52e7d3",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64e312d5-6d7c-4889-bab3-a3eef376a139",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7bc60d5f-ce30-4119-9028-e4f43cf335c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e84b3f1-1a19-4df9-8f80-aa11880a570b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dcd7f89-90db-4e0c-b45c-bf28bf0556d6"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1dfaeac8-1168-40c0-b927-fa138306dd6f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0795ef2c-bd4c-46e4-a1e3-da5232e16301"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8e258fde-b77c-4ca0-aa34-40161ca277aa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "571cdc2f-b53d-400e-aafd-a512a9e05109"
                    }
                  }
                ]
              },
              {
                "id": "96f98464-7192-4f6d-b571-750bad6d330f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1fd06601-ce7b-47e5-baf0-332695f286a3",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6883f24b-1558-4109-a35c-271ca470b5f0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "adb5c351-6cc5-47c4-9a7f-642182d128be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cadd198-a14f-44b3-8d9a-8fb7468b12af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "50b3620f-cafe-42e4-b269-f7251721626b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03bf712f-b64d-4d44-8461-16881747cab5",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35b73a09-764e-4bc6-9673-8ad641b14cb2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "1a19122a-25a1-4bd9-911e-df621775bf75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4358e42-2ed8-4602-a13b-ba26d7413d7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9158064c-8276-45f1-95f0-d4eabd922028"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c75beadc-7995-430b-81e0-66666f794c9c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9b4975c6-3e3e-42a7-ba8b-2c586b42474e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "62375174-235b-4f01-ac17-9a7570cafd60",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3e609577-37d4-43fc-9576-ecde183651d3"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "a4f91f85-c0cf-4084-ad15-17c64da1f446",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6667faac-a5a2-4269-bcec-acbb57a3bb22",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fc4ff665-dd54-427a-a61e-fe53e4e7a0c4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4e714773-35eb-4bad-8ff2-909067ecaa80"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5e0b8d8f-b1d2-44b4-ad69-73617b124b36",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "504a624b-59c5-460f-b523-c376cd1c356f"
                    }
                  }
                ]
              },
              {
                "id": "d56aa5be-eec0-46e5-801f-db6c8131f1a5",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6d867237-daf0-4ddf-bd69-d007e98666d8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "72089ef1-873e-40ee-bb1b-3aead907b036"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "28132b86-1576-464e-95c7-710e403ec7c8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "871a5dba-9d9f-4813-8223-76f405c5045b"
                    }
                  }
                ]
              },
              {
                "id": "a87e2f25-c8d5-4783-8e3b-e582c6cca06c",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1790e5c7-2af2-42dc-a6d3-ed2095843732",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "02d8c526-20dc-475e-bbd0-2dcd428e17d8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fd615ad7-540a-435e-a11a-f6707fdfd477",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8be403ba-dfe8-4427-badc-95217f3401f6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "661b2ad4-2dd0-4bf3-b07c-e84d13400330",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "05a70048-d6a6-422c-8101-4e60377a0cdb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bd75c638-4e98-4d22-b89d-d7a1cf1fa2f5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "01596e98-e2ed-4fed-8721-f5b7a831f366"
            }
          }
        ]
      },
      {
        "id": "1031f8f4-8ade-4cf4-9a81-93ed9d75ea10",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "543d4dbc-ef90-4401-8720-894f610b2e55",
            "name": "Negative Testing",
            "item": [
              {
                "id": "df56f046-9c55-45a5-8eb0-437f845d48fa",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "42ce8b5a-b599-4dae-afbb-890aea71a55a",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79dca528-ce1f-41d6-be5a-e992f4557de6",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "41ab57a6-a7c5-4cb8-9c9e-e201635d5f17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d71bb33c-1de9-4f1e-b52f-a4637c55746e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d3d701d8-6e5e-468e-9d4d-71812c178f51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f5a05e0-5ea5-424a-b824-25a6d71f520b",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22d8b308-70da-43f1-a2ea-fc105560d1c6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "579b16e6-8d69-457e-a956-feaf3001931f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8865519-15d7-4608-8090-5ef8e87d3b3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c58dee52-7e45-4b48-b878-c7a42dbcce19"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "30f14fe1-5560-4a50-a130-2bde82cc5060",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8d8b7d65-a520-4368-bab0-b83535a86e83"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d5779d33-5ac1-45f7-b633-68f5a771e8d6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "867d82a2-10aa-446d-90c6-6e573b01e598"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a2838759-aa0d-47fc-ace6-b0b4badc5b7b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "076962e2-0347-483a-9418-6d677b0ed20c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "756ba9f7-1707-4ff5-b31a-d3ef49c83456",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6027ba12-78bd-4c51-bb81-e8c5cf6fcc1c"
            }
          }
        ]
      },
      {
        "id": "23ff88e2-b0c6-4dbe-89be-ed5b76db5495",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "f277a6df-7ee9-4193-914f-653031ae4149",
            "name": "Negative Testing",
            "item": [
              {
                "id": "21eb4208-aa60-4abf-af06-93ee479269cc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "26dd7952-2cfc-4e08-ba35-02a1536db4ca",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "470c05ce-fbbd-4fc5-a86a-2795987a1238",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "fc7d2e6c-9d4c-4dc8-8f29-a737d2c32b7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5da20a6a-c93a-451d-863a-886cfe409c3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f2c38044-8816-47f3-91ac-725a9144d736"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2f4f59f-1435-4bd0-8465-02095a067d2b",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8c48b4d-c493-45ea-81f0-312015ef71bc",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a493a753-07cf-4b47-9fba-9575f1d5dc4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07ea99d6-7ddb-4673-9e07-ae31de656242",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a4a7d4fa-5938-498a-b1b2-e9c7f94aff5f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0e583790-af42-4552-ab97-2adccfb7b0fa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8005dfd1-27ae-477c-a628-4a9a47fa88bf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "95375208-21b9-4cc6-af54-57cd8e97e715",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4cb792bc-5457-4962-b6f4-327a1286ef5a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7bd84426-52ac-495d-98a2-ec20e10b1e06",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "2836bbff-ff49-48a7-bfc2-5b2f31b7c047"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5906a969-59d2-44d9-ae0d-e0ade2e6a54b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bc5c96aa-6577-4e9e-8a1a-ab116ef378e8"
            }
          }
        ]
      },
      {
        "id": "18779040-3a6e-43d5-9314-508e5b57c3c8",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "ed85d097-1ce3-4822-a663-3e9ab289ee74",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e8bb53eb-34ed-4348-9699-20cfd3820db2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b52e39ee-b3e3-4f4e-a34e-6cdc93674b88",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c264921c-27e1-493e-8254-f118c0fa5bfa",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e084f367-d806-4186-a15d-0906fd566d9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c924ea0-9451-4542-8778-c4cd1960c42f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2d13c684-6cf6-488f-93c5-2c756d87931e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df686841-b185-4975-8458-8ba8a55f1fe2",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e16f2c7-fdbb-4ae9-bcf6-83ea0bba2331",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ca7df215-52b4-43ce-8a26-5ea62cfd1f82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f61facc3-be6d-4bd5-94cf-f01770a810a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d72a44ea-1da0-448b-813d-5c76c2b56a55"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b89942fc-18df-4111-9655-d29808401bf9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "46f066a1-ffcb-4251-9762-f2ccb14b4c61"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3a6af2cf-c0b3-46be-908e-6153ce46d7a3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "130884c0-e589-4f13-bc22-d71dc8c9b1ba"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "83c0b3f4-e11c-4f71-9a4e-42cba41f6bfb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "2e9ba0af-0182-4ece-83af-e44e33eae579"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bb4f965d-3553-48ae-a1e2-d4dd562ac343",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3179cf91-feef-4ada-b44f-e239f37b859f"
            }
          }
        ]
      },
      {
        "id": "09cc88bc-cff7-4395-9a8a-d47116c91ceb",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b5a1442b-409b-411d-8a1b-3fb56c1a6d08",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7c77272d-a9fd-47b7-8c1b-d2416c1d4355",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "95c7ea55-2ced-415d-80fe-8caec85b653e",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4e3d7ea9-e4fb-4ba9-b270-71aa8ada651d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0d278a81-51e4-4887-b9df-eb56b081fede",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 505,
        "pending": 0,
        "failed": 103
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 91.56538461538459,
      "responseMin": 14,
      "responseMax": 622,
      "responseSd": 102.00618172183242,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1668300288729,
      "completed": 1668300323487
    },
    "executions": [
      {
        "id": "efd57c58-19c6-4cb7-88f3-6445d21c7d29",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "38bcb6db-84f2-42bf-8ac5-6eef5cee3b9c",
          "httpRequestId": "96b125b5-2b67-4302-914d-581680799651"
        },
        "item": {
          "id": "efd57c58-19c6-4cb7-88f3-6445d21c7d29",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "3b480861-09b7-4531-806e-2025553e7d87",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 0
        }
      },
      {
        "id": "88c09880-7160-4171-8326-8abb60f790c1",
        "cursor": {
          "ref": "9579f37f-a4ca-42bd-922b-a43dc1309318",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "ac76d907-c517-4290-aab0-cfc747c4c5a3"
        },
        "item": {
          "id": "88c09880-7160-4171-8326-8abb60f790c1",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "c35c02b2-797a-46ff-98d5-0fdfcbf0a0e5",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 0
        }
      },
      {
        "id": "f4796105-2e58-4597-a530-33616065575f",
        "cursor": {
          "ref": "f7d3eff2-e16e-4ee2-9ac9-86d17978fb0a",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "60e29f10-b9bc-461c-bb1e-e7ccf760c769"
        },
        "item": {
          "id": "f4796105-2e58-4597-a530-33616065575f",
          "name": "did_json"
        },
        "response": {
          "id": "c2343858-ed44-4bcb-862e-345cdec852c4",
          "status": "OK",
          "code": 200,
          "responseTime": 204,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed5e9ed5-59f6-4898-9aad-a6d3c16de7a4",
        "cursor": {
          "ref": "1e343cb1-eff3-44d1-9253-a9b69513704b",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "83f01e63-bf56-47fc-a934-16d487891732"
        },
        "item": {
          "id": "ed5e9ed5-59f6-4898-9aad-a6d3c16de7a4",
          "name": "did:invalid"
        },
        "response": {
          "id": "a6c0f147-077c-4512-81e7-20a36beb18c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed5e9ed5-59f6-4898-9aad-a6d3c16de7a4",
        "cursor": {
          "ref": "1e343cb1-eff3-44d1-9253-a9b69513704b",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "83f01e63-bf56-47fc-a934-16d487891732"
        },
        "item": {
          "id": "ed5e9ed5-59f6-4898-9aad-a6d3c16de7a4",
          "name": "did:invalid"
        },
        "response": {
          "id": "a6c0f147-077c-4512-81e7-20a36beb18c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b381e34-ab62-4146-9bec-789c80a97564",
        "cursor": {
          "ref": "dd1eec12-52d1-4899-a8a2-2f9ef6bdb27d",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "7af3e052-9e78-4cfd-bd63-ada8eef22e83"
        },
        "item": {
          "id": "5b381e34-ab62-4146-9bec-789c80a97564",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "4fa74303-e40f-40ba-bf81-757bbfaa1d6f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 158,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "341346e1-2e1a-417d-a567-a76bd52663b3",
        "cursor": {
          "ref": "bb10a9b6-df60-4ca5-b9cf-f1f3f4c8806c",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "0cf1ea8b-d51c-41cc-8d66-9a7400d5fdd6"
        },
        "item": {
          "id": "341346e1-2e1a-417d-a567-a76bd52663b3",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "997c05ac-d44e-41dc-816e-f0d13e9e18c7",
          "status": "Not Found",
          "code": 404,
          "responseTime": 51,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51d567e9-ad96-453b-a5d3-982dc67cf3d6",
        "cursor": {
          "ref": "1e78ec35-39d7-40ee-ba37-2b290c0f95d4",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "b355e40a-d411-40bf-bd8d-4ce13c39a7ee"
        },
        "item": {
          "id": "51d567e9-ad96-453b-a5d3-982dc67cf3d6",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "bf4f3bf3-5fd1-4afa-bdc2-0b7d7af7e706",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "553a003d-43e8-4a2f-9a02-74aee5fca61f",
        "cursor": {
          "ref": "304707f6-f59f-49bb-be9a-2d654ee6c12f",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a7dced42-33ed-481b-807f-bf84f76d47ac"
        },
        "item": {
          "id": "553a003d-43e8-4a2f-9a02-74aee5fca61f",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "af645509-c7a2-4363-a6ba-6c1e4d1b8b53",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 55,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "553a003d-43e8-4a2f-9a02-74aee5fca61f",
        "cursor": {
          "ref": "304707f6-f59f-49bb-be9a-2d654ee6c12f",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a7dced42-33ed-481b-807f-bf84f76d47ac"
        },
        "item": {
          "id": "553a003d-43e8-4a2f-9a02-74aee5fca61f",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "af645509-c7a2-4363-a6ba-6c1e4d1b8b53",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 55,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cbd3161-9cf9-4d12-aa35-e645ac7741a1",
        "cursor": {
          "ref": "aad3a3be-0f77-41ef-810d-9bce87cac2ec",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c36e389c-0735-4e66-beff-dd43423dd32b"
        },
        "item": {
          "id": "2cbd3161-9cf9-4d12-aa35-e645ac7741a1",
          "name": "identifiers"
        },
        "response": {
          "id": "54cf0223-6989-4c7b-8831-d2b0dd3e0709",
          "status": "OK",
          "code": 200,
          "responseTime": 156,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e156483-b638-4bed-b1c4-49328e4c20c3",
        "cursor": {
          "ref": "02825741-02bc-4eeb-8586-7f52b5e613e2",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e9891233-0a72-4bca-8539-7d4f11a72b77"
        },
        "item": {
          "id": "8e156483-b638-4bed-b1c4-49328e4c20c3",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "4c28720f-6441-4cbb-bd67-e31275e8b097",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e156483-b638-4bed-b1c4-49328e4c20c3",
        "cursor": {
          "ref": "02825741-02bc-4eeb-8586-7f52b5e613e2",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e9891233-0a72-4bca-8539-7d4f11a72b77"
        },
        "item": {
          "id": "8e156483-b638-4bed-b1c4-49328e4c20c3",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "4c28720f-6441-4cbb-bd67-e31275e8b097",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33955d2c-8bd8-4a77-821e-bf683040b220",
        "cursor": {
          "ref": "545496b8-3995-4ef1-9695-44c4efa0195e",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "75f7bfde-447b-4a7b-99fe-821af1ca2a6d"
        },
        "item": {
          "id": "33955d2c-8bd8-4a77-821e-bf683040b220",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "bf95fd04-4268-4f13-889b-ce5c34e1cb55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68a2ee31-cad2-42b2-89af-a9c0d797e134",
        "cursor": {
          "ref": "6862e474-8f9c-4369-8093-5312d4d30919",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "8b32cf41-37c9-424e-a2aa-3d9f226e3f0a"
        },
        "item": {
          "id": "68a2ee31-cad2-42b2-89af-a9c0d797e134",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "33b3d6c4-e047-48e3-9626-e470058700dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08bf28ea-fb0f-455c-b1be-cf2956976101",
        "cursor": {
          "ref": "d04b118c-5cd8-4a68-932b-544780f03066",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "dfb138d1-5a28-46c4-ad8d-500d9424145c"
        },
        "item": {
          "id": "08bf28ea-fb0f-455c-b1be-cf2956976101",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "f2297ef0-84b4-4b36-b290-43200c677e87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e86b909-64c2-41ff-a99c-bddccf147374",
        "cursor": {
          "ref": "56494c24-f584-4866-b02d-5effb056eac5",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "0060a483-e841-4425-98cc-f8922d973598"
        },
        "item": {
          "id": "2e86b909-64c2-41ff-a99c-bddccf147374",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "86c7f4a3-63db-4e80-b460-1dd5f482416b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "261c3358-0250-47b3-b347-d0e93a8b1b46",
        "cursor": {
          "ref": "c5b158e4-d91a-440b-86c4-2094e5b8b1d5",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "31e24d8b-6c3c-4ee8-afd6-89ddd9d4d2b8"
        },
        "item": {
          "id": "261c3358-0250-47b3-b347-d0e93a8b1b46",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "77ef495e-f11d-4cf7-96f0-c3a2c2c89d87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed3a1656-49ef-400c-bc2c-41fc8b8820e6",
        "cursor": {
          "ref": "d8d7b3c3-0bfa-431c-92f1-9603718ac294",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "43662cc7-dffa-4c9a-bbf9-974bd5760dcd"
        },
        "item": {
          "id": "ed3a1656-49ef-400c-bc2c-41fc8b8820e6",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "991c03c7-12fd-421c-afa7-d557af35a4b5",
          "status": "Created",
          "code": 201,
          "responseTime": 622,
          "responseSize": 563
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "a8c452c9-7f86-4b01-a20c-ea2058b26293",
        "cursor": {
          "ref": "683c481e-e6b4-42d4-bfbf-e2b1377383a8",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "23338cb2-3bfd-4e62-b535-e0f0fc04022a"
        },
        "item": {
          "id": "a8c452c9-7f86-4b01-a20c-ea2058b26293",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "bbb559e3-b0aa-4d33-8145-561024dfa5e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8b17eb8-ae58-41d2-9a3c-30355a9161a9",
        "cursor": {
          "ref": "4e018777-34a1-40df-a42c-9d1e52d4d74b",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "6e3bdd40-95df-4309-8d7a-0743952e7148"
        },
        "item": {
          "id": "b8b17eb8-ae58-41d2-9a3c-30355a9161a9",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "24e25d9a-856a-4366-a9c6-8110fd46abd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bae6472f-279d-4af9-94eb-6e3f72704d53",
        "cursor": {
          "ref": "0f8a7e02-9c08-44d2-8f16-761509540305",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "3cb7f304-5cae-450c-ab84-5486e42121a7"
        },
        "item": {
          "id": "bae6472f-279d-4af9-94eb-6e3f72704d53",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "f845a4c9-ae9a-466b-b115-8ad92b1c6fa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b874079-996a-4b42-a848-3a5e3503764d",
        "cursor": {
          "ref": "4273d65d-cc19-4746-9cbf-b6275323308b",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "d277509f-d1a6-47ee-929b-b7ac62f47036"
        },
        "item": {
          "id": "4b874079-996a-4b42-a848-3a5e3503764d",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "d5c14cee-15d0-4c13-bdb3-a1f0bbb217ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc656ed2-c9ed-4ecc-a975-6f2856b38d85",
        "cursor": {
          "ref": "4aa0c9c0-02e2-4ac1-af0f-6b1f03a8aec6",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "45bb2649-6faf-4dc1-8459-8a5db216d96c"
        },
        "item": {
          "id": "dc656ed2-c9ed-4ecc-a975-6f2856b38d85",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "ca0cb5be-26f5-4d38-8a32-8f408c095ac7",
          "status": "Created",
          "code": 201,
          "responseTime": 339,
          "responseSize": 609
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "1c996648-f496-44ca-a68f-8cb3ee2b3d56",
        "cursor": {
          "ref": "107f6b52-7ffe-48fe-8992-020cde4a9578",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "8def56a1-bbc4-4b8e-a829-60ca0f0783ff"
        },
        "item": {
          "id": "1c996648-f496-44ca-a68f-8cb3ee2b3d56",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "1ad5f119-1b23-4277-868b-016ddbcfd007",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37987a45-7675-447f-aed4-767110cd26da",
        "cursor": {
          "ref": "147a2752-57e6-426c-9097-6c5c62e2f5cb",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "82a7f93d-f9cf-4e69-85d0-475d41161194"
        },
        "item": {
          "id": "37987a45-7675-447f-aed4-767110cd26da",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "e8bf4747-2e54-44ad-ac8f-80903c9fcc2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e3b8272-b3c6-430f-95c6-622a3289691e",
        "cursor": {
          "ref": "bba0930e-0460-4dce-b265-c7a3027b270e",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "f98bc56b-e120-450b-b177-a00e40d51c2f"
        },
        "item": {
          "id": "0e3b8272-b3c6-430f-95c6-622a3289691e",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "cd7792ff-7120-4226-a8b3-fe4ba644738e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c01cc49-7a32-4266-9e76-e454895f9a74",
        "cursor": {
          "ref": "6d528b23-9295-4c5b-9550-6320323e4958",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "e9e95aa0-890d-4196-8d6d-fb4f74d9f777"
        },
        "item": {
          "id": "3c01cc49-7a32-4266-9e76-e454895f9a74",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "86dfe380-5a3d-4a88-9b8b-2a37784902ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac1df789-37c1-41d5-9864-9752533e16f9",
        "cursor": {
          "ref": "0b949817-d776-4b9d-b149-f9e7d08a62fc",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "95198788-d462-4e30-a53b-53e42f7cab78"
        },
        "item": {
          "id": "ac1df789-37c1-41d5-9864-9752533e16f9",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "a77cd0ea-f47c-4d92-beee-6ae6d7f3c4cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e1aa0de-8bc5-4926-8f0c-f46eb4f54d32",
        "cursor": {
          "ref": "11475cf1-db1b-47c9-8b57-7f590d1b5a6a",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "7f9a0123-9a57-444d-8a06-3487c688b802"
        },
        "item": {
          "id": "5e1aa0de-8bc5-4926-8f0c-f46eb4f54d32",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "88b30887-94d2-46f1-8ee3-b7b02ad60b76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fea0e03-5e12-470a-a538-211f79b60d41",
        "cursor": {
          "ref": "18918153-aad7-455b-9b81-658311e7f7bf",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "cfbef1b3-4e2c-4d7d-ba35-a95d834c86ea"
        },
        "item": {
          "id": "0fea0e03-5e12-470a-a538-211f79b60d41",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "8608f137-9a77-4e4b-ad4c-9bd88c1aa5ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fdff453-a32a-44e1-9580-025fd8730b71",
        "cursor": {
          "ref": "b1703257-2cd8-40c8-8a66-0487c8434063",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "0e0962de-9574-4fe6-81c6-f8e0a9f22f54"
        },
        "item": {
          "id": "9fdff453-a32a-44e1-9580-025fd8730b71",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "b87784c7-b121-4df5-89f1-90b6ae75c468",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7156504f-56d8-4287-9e13-ccdbfd1efa16",
        "cursor": {
          "ref": "89519181-e660-4945-a424-b8c305de58f8",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "1e7d9263-d4d5-4253-a6ca-5e3e154253ae"
        },
        "item": {
          "id": "7156504f-56d8-4287-9e13-ccdbfd1efa16",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "73eac8e1-9ec6-4739-9e82-9d85a15c398b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2d6fdae-c1c3-4830-b929-0ce81b88a503",
        "cursor": {
          "ref": "03e9805b-4d87-4b27-ba7d-c0bf24cac5f2",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "950ed089-8a97-42a7-b2c5-515c2bfdbedc"
        },
        "item": {
          "id": "e2d6fdae-c1c3-4830-b929-0ce81b88a503",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "fd6d4ea7-c10e-499d-a582-4335753c1b00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb7b1a40-d7ae-4dcd-9c56-2ef02d2b8b4f",
        "cursor": {
          "ref": "98fc04d5-9cb7-4c33-8ad9-3869c8de8c16",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "4df88b55-d5bd-4f7a-8f38-5b323613b4a9"
        },
        "item": {
          "id": "bb7b1a40-d7ae-4dcd-9c56-2ef02d2b8b4f",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "dab7bb8c-d74e-42f5-8f54-e166d3daa755",
          "status": "Created",
          "code": 201,
          "responseTime": 455,
          "responseSize": 563
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "d4e3ed47-4307-433d-ae4a-19f971549992",
        "cursor": {
          "ref": "d5208415-5417-4704-995b-47edbd68db2c",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "44b48056-c10a-4c9c-862f-2910459b9c09"
        },
        "item": {
          "id": "d4e3ed47-4307-433d-ae4a-19f971549992",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "10bbdc48-609e-458d-9778-d3f638ad7134",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39c2fd46-01a2-47b6-a6ff-3934660b0dba",
        "cursor": {
          "ref": "1133f0be-411a-41d7-a0cf-13c525597c64",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "99d6c7ab-e5c2-49f2-9a74-e673d53f3017"
        },
        "item": {
          "id": "39c2fd46-01a2-47b6-a6ff-3934660b0dba",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "2105fd10-674b-4db2-b268-9793e195c818",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09892a3e-543f-4494-acea-32499d68e6f2",
        "cursor": {
          "ref": "12640b7d-7a37-4d3b-9dc1-59e77eb3cbfe",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "163c2d66-ac24-4098-b56c-ab7ab59d603f"
        },
        "item": {
          "id": "09892a3e-543f-4494-acea-32499d68e6f2",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "bfb1d016-53d4-4754-b4af-b63915fd8f5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10cbe1b3-9552-45d4-8180-de9f0903356b",
        "cursor": {
          "ref": "bb660d13-585c-4bee-89bf-5ce0cdf97b24",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "1929bf7a-aee8-488e-a57a-06b64d3244dc"
        },
        "item": {
          "id": "10cbe1b3-9552-45d4-8180-de9f0903356b",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "0ced2323-25e1-4ddf-9951-dcb171380c2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6136e308-48e5-4b2f-ad81-51836d2723cc",
        "cursor": {
          "ref": "9247549f-0f0c-4603-8747-276828123f62",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "36477114-d66f-4d00-97ce-4654b31be261"
        },
        "item": {
          "id": "6136e308-48e5-4b2f-ad81-51836d2723cc",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "79d68448-6201-40fd-a8b1-928095dca49e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "496c1003-c33f-464c-8cb1-5f43e0e774aa",
        "cursor": {
          "ref": "e10c7fbf-c791-4c97-b554-5f2817f8e242",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "d9b40507-e40d-446f-aa22-bf7277735d0e"
        },
        "item": {
          "id": "496c1003-c33f-464c-8cb1-5f43e0e774aa",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "c4fdc775-294d-410b-90b9-996b09e0777d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df16dd6e-143a-415d-bdfe-b77a562302b4",
        "cursor": {
          "ref": "e60210a8-f0c5-4158-b480-0e77d4dc3cf4",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "a78e9859-8b83-4ea9-9a9a-da0e42273f36"
        },
        "item": {
          "id": "df16dd6e-143a-415d-bdfe-b77a562302b4",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "50c2b3cf-a0ee-40df-b609-b309d47e5058",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf90dc80-cac1-4147-b7b2-2fe38a4b5446",
        "cursor": {
          "ref": "52d7e7cf-6ca3-4647-bdbf-69e20710bf00",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "3eacc8a9-d021-4e5d-a405-bf3ea3fe7214"
        },
        "item": {
          "id": "bf90dc80-cac1-4147-b7b2-2fe38a4b5446",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "40c1f89c-1940-4a40-9c51-c010aa0cf061",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3eaddaf-04ba-409c-9887-39b2144825a4",
        "cursor": {
          "ref": "8077a107-4e10-4ba4-b8e9-faef0ed9bfb9",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "aa5c8a31-686e-437b-a983-b1dd69075f6b"
        },
        "item": {
          "id": "b3eaddaf-04ba-409c-9887-39b2144825a4",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "dc09a54b-21aa-41c4-859a-ba7afb86a3bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbbc5819-d09b-4910-a92e-5346dd44f515",
        "cursor": {
          "ref": "f4743290-d474-43a5-87f8-3cc51455f40e",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "bc627a4c-092a-4141-aba9-617c18d25880"
        },
        "item": {
          "id": "fbbc5819-d09b-4910-a92e-5346dd44f515",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "6771bd9a-8dbb-4445-9e7d-a063f4823a2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a2d2d88-82c0-4c47-a20f-6e8aaeeb97d0",
        "cursor": {
          "ref": "677fc590-6d32-49ab-9b58-ecdae586aae9",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "338cf7f6-4c0a-41a8-a664-0bb63eacdc9d"
        },
        "item": {
          "id": "6a2d2d88-82c0-4c47-a20f-6e8aaeeb97d0",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "1d297c8e-6219-4070-bfdd-2544483a08db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f57e7949-37f6-49f5-aaac-24f37134d24b",
        "cursor": {
          "ref": "4d14a36f-db64-43f5-b284-23a85c6dbfcb",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "814ee7ff-d276-4506-a6c8-b1440b52449a"
        },
        "item": {
          "id": "f57e7949-37f6-49f5-aaac-24f37134d24b",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "e058a677-6554-4343-bdc7-ccca7936f725",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d3e7d54-e293-418e-a1b0-5bcab7666400",
        "cursor": {
          "ref": "f22580f0-25ef-4b47-ab4b-966ed43dd605",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "988b5ba2-e9e3-4664-9f3d-08af3c605d57"
        },
        "item": {
          "id": "7d3e7d54-e293-418e-a1b0-5bcab7666400",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "588a95ea-8efe-4b34-9ce7-ab9800faae62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 312,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "bdc6f742-0d3c-498f-a821-8410621de73b",
        "cursor": {
          "ref": "64f74084-51c7-427a-acf9-ebbc112aee7c",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "200199b1-8b1b-47de-9d1f-cc747223d440"
        },
        "item": {
          "id": "bdc6f742-0d3c-498f-a821-8410621de73b",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "4a92fc75-3762-49fe-a0d9-ffe64da49bcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "087cb954-5cde-4526-971a-ad79fa1400e8",
        "cursor": {
          "ref": "87ac4b68-c4b6-4b71-b18e-0840f6852ba7",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "aa502b5a-7fd5-4495-970b-8bef2b7cf87a"
        },
        "item": {
          "id": "087cb954-5cde-4526-971a-ad79fa1400e8",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "31864626-34bc-4758-9361-403e28a05216",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28b157f7-fe1d-441a-a1f2-730d5aad9800",
        "cursor": {
          "ref": "3dda85e8-3c21-4a2f-8ba4-93d947d22b84",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "2d23452a-646d-4688-b7eb-126072b47e74"
        },
        "item": {
          "id": "28b157f7-fe1d-441a-a1f2-730d5aad9800",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "f3e21f1d-8ec4-483c-b35d-e1eb306dc600",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b829b2e-0969-47da-a6b0-edf7a56d2a83",
        "cursor": {
          "ref": "62631831-05e6-454b-a145-dff390de616c",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "0b8443a3-7df4-4845-9fa6-8804835a6179"
        },
        "item": {
          "id": "7b829b2e-0969-47da-a6b0-edf7a56d2a83",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "3de31e44-159f-4b77-ac67-354f351c1471",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c04234d2-749a-49a1-8996-2d78523deb7f",
        "cursor": {
          "ref": "3a36555c-b862-4694-baee-00386406f1d2",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "eed7a9df-dd9b-4bd7-8ded-d42a379a5780"
        },
        "item": {
          "id": "c04234d2-749a-49a1-8996-2d78523deb7f",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "a1bcca7b-3914-4b40-a02c-d126c5d32683",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "929ebab7-3925-4463-8bed-8e1fde84ddc0",
        "cursor": {
          "ref": "683e0821-7211-496b-a82a-2b22c97e557f",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "2d5911f5-3dd5-4d43-acc1-572e1c7b5362"
        },
        "item": {
          "id": "929ebab7-3925-4463-8bed-8e1fde84ddc0",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "57aaa210-b8cb-4d7b-8868-6921d8536c87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7928ef20-4dc6-45fc-8ac0-b22f07447345",
        "cursor": {
          "ref": "b771274c-ab0c-421d-8647-a5579baf3250",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "76e99082-9921-4518-8a55-212f9cd96b45"
        },
        "item": {
          "id": "7928ef20-4dc6-45fc-8ac0-b22f07447345",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "c44dacb8-77e8-42f8-b294-db5aacfe4e92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 188,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "b45dbf2d-c986-45a3-a5c9-ab1a36710c87",
        "cursor": {
          "ref": "cad2e4ab-0ab4-4d53-a161-fa2f1bb08abd",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "39eba5e0-33f3-4984-86c9-db957f194da6"
        },
        "item": {
          "id": "b45dbf2d-c986-45a3-a5c9-ab1a36710c87",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "cd304803-f91b-4f20-bc84-4d93f9c08407",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c906535b-667a-482f-84a9-78f3fb4e9550",
        "cursor": {
          "ref": "1fe5bace-f006-4f56-a50c-9409ca20e190",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "4a7b4eea-85b8-4d62-b1d9-8ac005046985"
        },
        "item": {
          "id": "c906535b-667a-482f-84a9-78f3fb4e9550",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "e279d875-eabd-464d-ba42-81a54417470e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca2c3018-3b4d-44ed-a9cc-bb72bb33b5b2",
        "cursor": {
          "ref": "42017f7f-4c42-40c3-9a93-4bb3cb3bb32e",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "f1f0ba9c-d2eb-4cb0-95fd-54f65c2b3997"
        },
        "item": {
          "id": "ca2c3018-3b4d-44ed-a9cc-bb72bb33b5b2",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "f608328a-52cb-4150-adf1-8beeb8303803",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ae1b56a-c595-400a-b1de-d7e8c7e143e6",
        "cursor": {
          "ref": "fa158350-c607-496e-9ca5-074bb78a8a75",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "a4770f71-45c9-491c-8e01-591791f5ca39"
        },
        "item": {
          "id": "8ae1b56a-c595-400a-b1de-d7e8c7e143e6",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "90636868-5286-4429-805a-46ebe4633a88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8da3531d-16f9-4121-89fa-42376e453229",
        "cursor": {
          "ref": "a7baf195-0c5f-40f4-8bc2-30b811bc9242",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "862424f0-cb0b-4622-a06e-60641d0e0f33"
        },
        "item": {
          "id": "8da3531d-16f9-4121-89fa-42376e453229",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "735a513d-b157-4a3b-a2b2-a693504c08a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc89f4b8-79da-47a3-93b8-6c70109e91e4",
        "cursor": {
          "ref": "bd649c04-b6ef-4773-b359-5f911c0ff4c0",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "afbb5e35-a329-41a4-b23e-9e1396934150"
        },
        "item": {
          "id": "fc89f4b8-79da-47a3-93b8-6c70109e91e4",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "0b093933-353c-416b-8d1f-6dddf887ae74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cdf3bc8-64bb-422d-b87e-3cff1eb3908a",
        "cursor": {
          "ref": "91089d12-78a1-4320-a1e0-fae041a81919",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "661d307e-b381-401a-845e-8d949bd8b4d4"
        },
        "item": {
          "id": "0cdf3bc8-64bb-422d-b87e-3cff1eb3908a",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "bda32e2a-1adf-4cf4-a024-0c7be6d9528c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30553131-a211-4fe1-bb6d-e7d4fff2ee09",
        "cursor": {
          "ref": "6d73166a-7525-4340-9521-f5420b7f70db",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "e56a2627-b2de-4eb3-9115-cb32516b9192"
        },
        "item": {
          "id": "30553131-a211-4fe1-bb6d-e7d4fff2ee09",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "13beb078-16d7-46ca-8721-b333b13c29d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "284c34f2-e869-428b-9ece-882e2b011d17",
        "cursor": {
          "ref": "984c78d5-ec27-41d8-8ab8-a309859f05b5",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "1d66a88d-4c93-4886-8e1d-c6219ff9d47d"
        },
        "item": {
          "id": "284c34f2-e869-428b-9ece-882e2b011d17",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "6be0cceb-f23e-4e02-88e7-c96589f36317",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dce4c3a7-82fb-4f85-a6b9-3c88189b647a",
        "cursor": {
          "ref": "48b30fcd-9830-44a0-a0ff-9f052d1ec03c",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "a4459b91-4b4f-42af-bb8d-a895240cd04b"
        },
        "item": {
          "id": "dce4c3a7-82fb-4f85-a6b9-3c88189b647a",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "a79d1821-ea80-4dea-bc88-188d9d0cb3af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3a3d52e-a156-4d2d-9155-be03d7221b84",
        "cursor": {
          "ref": "c86e0650-d87a-4cbd-ac4e-95ae2b245f00",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "e921cb13-f380-4e02-9dc9-057c0a70511b"
        },
        "item": {
          "id": "d3a3d52e-a156-4d2d-9155-be03d7221b84",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "abd2bf70-8125-47be-a860-89e93e57eb90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cbc1221-5d7c-4428-b005-297b3de3e048",
        "cursor": {
          "ref": "ec59264a-d805-455f-a746-a1b7214956a4",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "1540aa06-344d-4b17-8bd9-f9e1516f51c8"
        },
        "item": {
          "id": "0cbc1221-5d7c-4428-b005-297b3de3e048",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "f9a81792-3c22-4342-a639-1a195b1687d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c042381f-c26d-4972-8c2d-97787a98f398",
        "cursor": {
          "ref": "9c1e38ae-f984-4282-a75c-bc8b83fe9e9c",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "6a07d7a6-246f-4569-96ae-87c66cc8243e"
        },
        "item": {
          "id": "c042381f-c26d-4972-8c2d-97787a98f398",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "76d5ca1c-3320-46e0-8aae-fe1ad2b12aa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae3aad60-3df2-4756-a285-a879678d158b",
        "cursor": {
          "ref": "c6f76a87-838c-47bf-a042-d5fa57086548",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "87a44cda-1ba9-4ff8-aa63-e60c0fbb58ad"
        },
        "item": {
          "id": "ae3aad60-3df2-4756-a285-a879678d158b",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "044105ae-3e61-44d4-865e-ed547ad19423",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6153508d-f13e-4058-bf27-9d89118c5bc2",
        "cursor": {
          "ref": "098f1dbe-7dab-486f-a94f-913c63dba097",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "804f7649-c10b-41ed-9459-ca91e894f15a"
        },
        "item": {
          "id": "6153508d-f13e-4058-bf27-9d89118c5bc2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "175e3022-7f3d-48f4-bfee-85d997aa2b22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ced15a98-3b7b-4162-85fc-d14d96bf5fbf",
        "cursor": {
          "ref": "0b89df2c-11bf-49d4-a6aa-445171a718ec",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "a56254c7-19a2-4641-975e-8c78a2b4f5a3"
        },
        "item": {
          "id": "ced15a98-3b7b-4162-85fc-d14d96bf5fbf",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "9e0d0a6a-09a0-42fa-af89-e6632eda3057",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac6129b1-e112-47e2-ab32-09e3ac5bf726",
        "cursor": {
          "ref": "1063882c-1514-4d2f-812b-6c2b94cf2926",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "f9dd234f-d8b1-4a7e-a55a-38a3603f9af0"
        },
        "item": {
          "id": "ac6129b1-e112-47e2-ab32-09e3ac5bf726",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "508f5db3-812f-4fdd-9a2b-acc67fdb0752",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 205,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5946113-d6dc-4a3f-b5fa-c439b5e26900",
        "cursor": {
          "ref": "56e1784c-8f24-4cbf-8dd0-dc5a71c212c2",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "5891a6c3-f5a6-405e-8839-997b05e730be"
        },
        "item": {
          "id": "c5946113-d6dc-4a3f-b5fa-c439b5e26900",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "cb319384-aced-417d-b1ff-f5978639e562",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e32d49fe-c6f8-4193-a323-b6d280572760",
        "cursor": {
          "ref": "edc0006c-0cfe-4507-b869-aaf68b5e93ab",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "e52ae89b-801b-4da0-b8b3-316c08559d47"
        },
        "item": {
          "id": "e32d49fe-c6f8-4193-a323-b6d280572760",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "0b2e24fd-56c5-4ed0-b48d-1104152eb899",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38a0c55d-16b2-489a-86ef-99caa03fd1d1",
        "cursor": {
          "ref": "1331dd92-7894-4c25-8fb7-3613284ae0b7",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "82781d48-8cc9-4d28-8ede-25ba8de20e40"
        },
        "item": {
          "id": "38a0c55d-16b2-489a-86ef-99caa03fd1d1",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "cc01406c-239e-4a54-862f-a86de219fcd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cbe1868-3b49-4428-855f-90df7e03fced",
        "cursor": {
          "ref": "f669f249-2ac3-4719-9006-8bd15c9e7928",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "3702bd83-1de8-4fc9-bb06-47e9153391bc"
        },
        "item": {
          "id": "8cbe1868-3b49-4428-855f-90df7e03fced",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "74e193b9-7604-424d-9d3e-ec05043da792",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06bd6d84-0864-4cb6-9191-8ef1b969cb07",
        "cursor": {
          "ref": "b2c22d0f-3aad-44bb-a40f-84ce634b7aad",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "c3254bba-2444-43b4-8106-40d514eda148"
        },
        "item": {
          "id": "06bd6d84-0864-4cb6-9191-8ef1b969cb07",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "043de773-75e6-4fe1-b3b9-5eb2fb30ee37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93b8414d-fa1b-4b21-9d5b-17154b24d5be",
        "cursor": {
          "ref": "2a72a557-eb4e-4f9f-b1d5-92690b0c2508",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "6fe57089-4ec3-42ca-ab50-0aeabd4332a3"
        },
        "item": {
          "id": "93b8414d-fa1b-4b21-9d5b-17154b24d5be",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "0296b428-8bab-4a4b-8b77-17cc27b2e0f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2185bfe-1be6-4aaf-aa44-7cf9bbf02a16",
        "cursor": {
          "ref": "a89c833e-ec0a-4112-aa9f-170ea2e86fe6",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "bfc1a9b1-d458-4f41-befb-7d0e8fff9970"
        },
        "item": {
          "id": "e2185bfe-1be6-4aaf-aa44-7cf9bbf02a16",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "3b0d1a80-3186-4a1a-ade2-7980bee260f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd1512c8-cbe4-4429-a612-68bacb8edd79",
        "cursor": {
          "ref": "87c2e993-433a-4406-a7e8-3570cbb4fd84",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "a19b60c6-f288-4da9-9a3d-99e0459f3156"
        },
        "item": {
          "id": "bd1512c8-cbe4-4429-a612-68bacb8edd79",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "8aae13e1-5afc-45dc-b8dc-338aee4a71cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad8e93d9-f1b2-4390-a2e0-7d59d279eba4",
        "cursor": {
          "ref": "505921b0-d470-4b60-a0d8-1afbef087ff2",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "d36ee468-38d4-42e1-ad0a-7b72bdf12274"
        },
        "item": {
          "id": "ad8e93d9-f1b2-4390-a2e0-7d59d279eba4",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "bd849cb8-2457-4543-9571-5c4f29dd4d32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ad5f289-1fb3-420e-847e-826acb83b6af",
        "cursor": {
          "ref": "f690fc6f-05ff-4b96-b94b-16d72a764884",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "cc7c19ad-0556-43ee-a09f-c43a41f31f7b"
        },
        "item": {
          "id": "1ad5f289-1fb3-420e-847e-826acb83b6af",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "ade79e48-1c06-445c-a02e-95aa5c3655bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "739252e6-cb3b-47f9-ba88-d765bb424471",
        "cursor": {
          "ref": "e68d1b88-f33e-40b2-ab5d-9f196d102362",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "1ebe4bca-fa49-4309-a635-b9ada40fc69f"
        },
        "item": {
          "id": "739252e6-cb3b-47f9-ba88-d765bb424471",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "2ac6fceb-c7e8-45a6-ab3f-9761a29084cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fed6a57-651b-4e1d-a14c-bcd4a8b3cf8c",
        "cursor": {
          "ref": "adb7bfde-8cd1-40bc-a86e-0b356ce35018",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "5acf1172-5911-463f-b3cd-7f2f7f8f2a9e"
        },
        "item": {
          "id": "1fed6a57-651b-4e1d-a14c-bcd4a8b3cf8c",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "e8240fff-da15-4adc-81d5-d984ad816fe4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d527dc8-c423-48f8-83ce-4a7a2cc04881",
        "cursor": {
          "ref": "6b2275eb-be9e-4151-b716-6995065b825d",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "a4bc0a5a-cc31-4610-8af7-8091fbea1952"
        },
        "item": {
          "id": "4d527dc8-c423-48f8-83ce-4a7a2cc04881",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "7bb7e271-e875-4a10-9a61-fc33fac6bf5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05bfe4bb-0881-49bc-b2ea-3d74ce620807",
        "cursor": {
          "ref": "40100b54-ef57-4e91-9c2c-73225cb92c51",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "d38863ed-d0cc-4ee0-86a8-d2922c88ab9a"
        },
        "item": {
          "id": "05bfe4bb-0881-49bc-b2ea-3d74ce620807",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "33f46847-9f24-4ecf-b3e4-67f9c64f2a4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 314,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dfeef37-b269-453b-bac1-8db20e270575",
        "cursor": {
          "ref": "019f8514-0c35-4aae-ab0d-758149853797",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "c04fc260-71bd-494c-adda-af0cb799d9cd"
        },
        "item": {
          "id": "8dfeef37-b269-453b-bac1-8db20e270575",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "4e02ca2a-e0a0-4fb7-b214-78ccbb9f65ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d8a1c5a-1b87-44ae-abc6-3ca75b1d7df2",
        "cursor": {
          "ref": "5507b4aa-f547-413d-9df1-a8d3f7158dd9",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "9ea00013-672b-4bfd-9dec-c16241c65816"
        },
        "item": {
          "id": "6d8a1c5a-1b87-44ae-abc6-3ca75b1d7df2",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "d4ceb0ed-5000-4665-846c-83355bd94d15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e25258d6-d439-4971-aa6c-dc9b70941558",
        "cursor": {
          "ref": "d595f4e5-d4b2-451d-bc69-408ac99962b0",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "cf7212fe-a628-4d21-8f62-b0469000b3fd"
        },
        "item": {
          "id": "e25258d6-d439-4971-aa6c-dc9b70941558",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "77c94e9e-3838-451c-99e6-a4c6730ae7e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5657030-178b-4b91-acc1-8b9289439a3a",
        "cursor": {
          "ref": "dddd7c7b-8ef6-480d-909b-8ceb19e5a47d",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "e3708f3b-5615-47d4-8583-5f73e70248fb"
        },
        "item": {
          "id": "b5657030-178b-4b91-acc1-8b9289439a3a",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "9e1267ab-2ebc-4c72-b692-b452accfeeb4",
          "status": "Created",
          "code": 201,
          "responseTime": 303,
          "responseSize": 563
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "3169f7f2-273d-4650-b6f3-bd1334b41b07",
        "cursor": {
          "ref": "06758189-1029-4194-a229-daea6eddaacb",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "9ed1c895-cf5a-4be5-a436-45b0f7087fad"
        },
        "item": {
          "id": "3169f7f2-273d-4650-b6f3-bd1334b41b07",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "248cbe7b-6910-4def-84e0-33661e6f5e2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35b68f45-ecb6-44a3-930e-01d90c3bbe1f",
        "cursor": {
          "ref": "015d6e96-a7dd-4c63-8070-981a0f1661ad",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "72797181-e842-4909-abc0-e43ba8fc5c1d"
        },
        "item": {
          "id": "35b68f45-ecb6-44a3-930e-01d90c3bbe1f",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "eb9c730d-bf1c-40f1-9ee6-76954d301370",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ed3a56b-18b2-4bef-ae9c-a3fdb58d7073",
        "cursor": {
          "ref": "1868eb2e-275b-4e7f-9367-f738872764a6",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "5ac58cf9-54ba-490e-ad7a-df4d478c7605"
        },
        "item": {
          "id": "4ed3a56b-18b2-4bef-ae9c-a3fdb58d7073",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "e66e9fd7-469a-47d8-9a8a-0bc8ac96fb8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7ebc6e5-3d15-45b2-8256-75dc8236c91f",
        "cursor": {
          "ref": "0919bf03-53f8-41d5-b477-b2f632c863ad",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "9df2c952-1eab-43cd-85f2-764f2e05f566"
        },
        "item": {
          "id": "f7ebc6e5-3d15-45b2-8256-75dc8236c91f",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "41a1a620-acd7-4f8c-8e4c-426114142163",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfd99bee-48c9-4a2b-b9b4-8066a62ae791",
        "cursor": {
          "ref": "e91db632-c26d-4479-956d-648b4a021e99",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "98bdcaca-e763-4e87-b8e1-0b08fd18608b"
        },
        "item": {
          "id": "cfd99bee-48c9-4a2b-b9b4-8066a62ae791",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "c9e28df2-6702-4644-a3ba-86f7ffbf6378",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad5d9a0a-a89f-41af-ae61-2f52d2f7470f",
        "cursor": {
          "ref": "55268d98-da41-473a-8418-cc5de259eb37",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "9fcf4297-c1e2-442d-bfa3-938f1ae7fb1b"
        },
        "item": {
          "id": "ad5d9a0a-a89f-41af-ae61-2f52d2f7470f",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "cd8fd1ce-e222-4793-b5a3-d1d00441ab7e",
          "status": "Created",
          "code": 201,
          "responseTime": 335,
          "responseSize": 563
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "af42de9d-48c5-4bb5-b34c-6efba921262d",
        "cursor": {
          "ref": "b08f2930-f0d4-499d-bc80-d0688c881097",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "2c633404-e916-4bcc-a1b9-059876138333"
        },
        "item": {
          "id": "af42de9d-48c5-4bb5-b34c-6efba921262d",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "5188d09e-fafc-44a2-9759-35a292599006",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79fc2e9e-c238-4a5f-a08e-94c6858c9cbd",
        "cursor": {
          "ref": "1dff758f-55be-4186-acca-806f7ddbc88b",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "05f8a2f8-eb88-47fb-8931-9fa843d230fd"
        },
        "item": {
          "id": "79fc2e9e-c238-4a5f-a08e-94c6858c9cbd",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "a763758b-c700-47c1-a66c-3d472ef06b8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd63f5d4-6eba-4291-9842-b03df1a34a1d",
        "cursor": {
          "ref": "266c77f7-5cda-42a4-853f-55307566454d",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "05ab8a4d-5f77-4b6f-b881-3d44ab3be255"
        },
        "item": {
          "id": "dd63f5d4-6eba-4291-9842-b03df1a34a1d",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "1471bf36-3b34-48fb-a302-dc70e4778298",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46868531-fb85-42e4-a629-956170753da9",
        "cursor": {
          "ref": "30068966-e3fd-4a15-9dc4-65dfd6cc6ab7",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "ce929ffe-e98a-4158-9ec4-221a0e11f1e8"
        },
        "item": {
          "id": "46868531-fb85-42e4-a629-956170753da9",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "786ccbd3-bb0f-4276-bf6c-26f437dbc9fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc8b59c8-2aa2-45fc-84ad-ca80eafabe84",
        "cursor": {
          "ref": "abdf88a2-e3e4-4866-ba72-f9909cd3d36c",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "fb41cadc-646c-48c7-8aa1-38d9e9fe0c82"
        },
        "item": {
          "id": "dc8b59c8-2aa2-45fc-84ad-ca80eafabe84",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "679cb415-ea95-4de1-9d51-a1eb1dc6718b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95026eaa-54f2-4a27-a7af-7eaeaf872e80",
        "cursor": {
          "ref": "d500cf4a-d294-4166-bea8-38d3d3dcb791",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "a9a966f3-4325-4de9-a073-504edb2a70af"
        },
        "item": {
          "id": "95026eaa-54f2-4a27-a7af-7eaeaf872e80",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "c46e5931-96db-4d46-a594-cc5906df8835",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed7976cf-84d7-4d8e-a07d-a2e61c60f504",
        "cursor": {
          "ref": "6b42d2ce-4716-4253-835e-54efdf68883b",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "8c322680-61cc-4c2e-8368-1dd375e70d20"
        },
        "item": {
          "id": "ed7976cf-84d7-4d8e-a07d-a2e61c60f504",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "58134296-16ea-4575-9a33-0de79c9c95b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae2c04bc-3394-49d7-9f90-e6ad3dca7200",
        "cursor": {
          "ref": "7100bd59-df05-4444-973e-886a42281ee0",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "a8138364-5e38-4f4b-9356-2f433e4d0aaa"
        },
        "item": {
          "id": "ae2c04bc-3394-49d7-9f90-e6ad3dca7200",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "5f81f730-e3c0-45f5-95bd-9ca4d29aa146",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1528677-76c3-45f4-8c54-a7d3632adaeb",
        "cursor": {
          "ref": "dc458a1e-4b34-43f8-b564-b31b9d6fb2ec",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "dd5a6a78-ea1d-425d-acf0-c296a6edb3e3"
        },
        "item": {
          "id": "e1528677-76c3-45f4-8c54-a7d3632adaeb",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "ab11689f-a1d7-4f81-b4fb-773a340abdc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "1c50b952-81cc-4e41-b472-42f5b8630b4c",
        "cursor": {
          "ref": "135c10b7-f7bd-4e00-a58d-a6ada57b82b4",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "c78cff6d-447d-423e-9cf6-3da3d2a76ee5"
        },
        "item": {
          "id": "1c50b952-81cc-4e41-b472-42f5b8630b4c",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "05b6d847-037b-4207-9aa9-94d1e48315f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 147,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "54b0d531-d2e8-4b79-ac36-07327989517e",
        "cursor": {
          "ref": "1a8944e3-42a6-49e5-893c-d4d72db9fe0c",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "5404ac49-7a19-4c4d-b27a-f0bbaab940e3"
        },
        "item": {
          "id": "54b0d531-d2e8-4b79-ac36-07327989517e",
          "name": "credentials_issue"
        },
        "response": {
          "id": "d360bfd9-7d79-4752-bc28-3eb082dfc168",
          "status": "Created",
          "code": 201,
          "responseTime": 426,
          "responseSize": 563
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "expected undefined to equal 'did:web:dev.vc.stg.mesur.io:v1'",
              "stack": "AssertionError: expected undefined to equal 'did:web:dev.vc.stg.mesur.io:v1'\n   at Object.eval sandbox-script.js:3:104)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": ".empty was passed non-string primitive undefined",
              "stack": "AssertionError: .empty was passed non-string primitive undefined\n   at Object.eval sandbox-script.js:4:104)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 4,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "expected undefined to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected undefined to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:5:104)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot read properties of undefined (reading 'created')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'created')\n   at Object.eval sandbox-script.js:6:104)"
            }
          }
        ]
      },
      {
        "id": "cbe9a1f3-401c-4ff1-853f-95fab113c504",
        "cursor": {
          "ref": "cfd8c515-b841-4931-8e74-0455bcfbcea8",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "e6a2889a-7552-47e3-973d-7db15fbae3ad"
        },
        "item": {
          "id": "cbe9a1f3-401c-4ff1-853f-95fab113c504",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "fa91c751-b2f1-498a-a0a7-e63b9775a685",
          "status": "Created",
          "code": 201,
          "responseTime": 293,
          "responseSize": 616
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "66c978d0-c7a8-4ab6-8961-7509e957e6b4",
        "cursor": {
          "ref": "798b59d9-eac6-4e68-b047-64c8f4209ff3",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "19fb68e2-0efe-4f84-98b7-89fbf553221e"
        },
        "item": {
          "id": "66c978d0-c7a8-4ab6-8961-7509e957e6b4",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "f9434044-e3d9-48ed-b0d6-ab6188fe8dab",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 563
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "4a3868a8-65ad-4997-93c3-524a7b0a34df",
        "cursor": {
          "ref": "f1e69b07-1c2a-4197-af00-2ad175a75ac4",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "548d1b10-36cb-44eb-9dfb-c8c4e784e6d2"
        },
        "item": {
          "id": "4a3868a8-65ad-4997-93c3-524a7b0a34df",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "c8e5c050-90a1-49ae-86c5-25ca48f69fb4",
          "status": "Created",
          "code": 201,
          "responseTime": 323,
          "responseSize": 585
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "22ec71be-e27a-427f-b193-31201f9f941d",
        "cursor": {
          "ref": "4d2564c7-9185-4201-9431-b5134dd0633d",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "be6c99c9-6ad8-4fae-a6cf-0b45554cfc50"
        },
        "item": {
          "id": "22ec71be-e27a-427f-b193-31201f9f941d",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "b1f0d897-8250-40f4-b758-c75eb75e189a",
          "status": "Created",
          "code": 201,
          "responseTime": 324,
          "responseSize": 553
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot destructure property 'created' of 'pm.response.json(...).proof' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'created' of 'pm.response.json(...).proof' as it is undefined.\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "a776e92d-9b37-41e8-a279-22b6eaa434ea",
        "cursor": {
          "ref": "d1095203-48d5-45e1-b277-17d196943978",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "d054f461-0ed1-4aac-87b8-f7431e4fc6d4"
        },
        "item": {
          "id": "a776e92d-9b37-41e8-a279-22b6eaa434ea",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "d4debcde-d592-45df-930c-18b33523de6a",
          "status": "Created",
          "code": 201,
          "responseTime": 286,
          "responseSize": 563
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "b8639f80-a58d-4c53-87ac-40fe5e418c22",
        "cursor": {
          "ref": "5090c8a1-b07c-49ce-9641-a98eab7a83bf",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "9ad63425-e269-4104-ac13-7bc571eb1d71"
        },
        "item": {
          "id": "b8639f80-a58d-4c53-87ac-40fe5e418c22",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "288d4073-2177-4e13-ae44-396a732e83f5",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "b8639f80-a58d-4c53-87ac-40fe5e418c22",
        "cursor": {
          "ref": "5090c8a1-b07c-49ce-9641-a98eab7a83bf",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "9ad63425-e269-4104-ac13-7bc571eb1d71"
        },
        "item": {
          "id": "b8639f80-a58d-4c53-87ac-40fe5e418c22",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "288d4073-2177-4e13-ae44-396a732e83f5",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "0d92d88d-f40d-486c-9dae-09ce23a41898",
        "cursor": {
          "ref": "9c842f5a-3ac4-4467-8232-2c08b43948c2",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "f066a3be-a728-4e84-8c7b-04b5c5a6f1b1"
        },
        "item": {
          "id": "0d92d88d-f40d-486c-9dae-09ce23a41898",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "8a8bfc53-8c43-493e-942c-5ad4a2533767",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "1394d05e-2eaa-4675-9a3b-98b115a5a3f7",
        "cursor": {
          "ref": "a27893c1-29a0-4cf4-a245-95b571ab683e",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "ac4e6aff-3d43-4ea5-944d-197ba027b328"
        },
        "item": {
          "id": "1394d05e-2eaa-4675-9a3b-98b115a5a3f7",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "ec5921c0-3779-45a0-ae68-aa1bbb79495f",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "bc58a931-928c-4008-80ee-b1e9902f956c",
        "cursor": {
          "ref": "2b306000-1508-48c4-a1a3-2dcc76d8df3a",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "410d1c54-3cf7-4ac8-8775-637192fa455a"
        },
        "item": {
          "id": "bc58a931-928c-4008-80ee-b1e9902f956c",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "7b5d82ef-09c7-428a-bbf0-b66b6e462fc2",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "488f0326-d2a3-4660-a2c2-825f4c24aae0",
        "cursor": {
          "ref": "25e39a14-b63b-4cb4-9cb0-26164fcd7349",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "419099c2-3dda-4ae1-8950-e946ce187a73"
        },
        "item": {
          "id": "488f0326-d2a3-4660-a2c2-825f4c24aae0",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "b52edac8-fe6e-4d6c-ab77-4824857a0c7d",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "4f79c78e-ad18-49fc-a2f1-a9c257177b5f",
        "cursor": {
          "ref": "eebed781-3889-4cc2-ab3e-f39575b9c796",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "36b3800f-df5f-4a4d-b3c8-3c8dbfc0db0b"
        },
        "item": {
          "id": "4f79c78e-ad18-49fc-a2f1-a9c257177b5f",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "9c2eb77a-55f1-47db-937f-2d2746fd513c",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "870f0e7d-ffd9-4fa6-946d-49f3aece2947",
        "cursor": {
          "ref": "b052d62e-ecd9-4298-b9eb-c32a2871cc32",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "15c9ae0c-b549-46f4-aaa6-2fc5a0c77227"
        },
        "item": {
          "id": "870f0e7d-ffd9-4fa6-946d-49f3aece2947",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "3ee55983-40c0-4b44-b5fa-2fe1fd90fcd8",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "f191ae15-edd4-452f-8b02-f5ed9d5a9135",
        "cursor": {
          "ref": "55530b34-0077-4bf4-bfa1-0f7cd5940703",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "d3d9213e-40ee-4786-95e0-6603c4d39e3f"
        },
        "item": {
          "id": "f191ae15-edd4-452f-8b02-f5ed9d5a9135",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "bb0d525b-9dc9-42af-9884-84767a5e5528",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "398f965c-7aeb-427f-9562-b0019cb86457",
        "cursor": {
          "ref": "4ecb4643-daf5-48c9-91b8-68fbd54eab99",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "48b8b174-9e3f-4c8a-bdad-2dc42f6c215e"
        },
        "item": {
          "id": "398f965c-7aeb-427f-9562-b0019cb86457",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "38d18e18-6ae1-4828-b02b-539bda405c10",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "41a5a0a8-cfff-4188-b8e8-d65c777d1afc",
        "cursor": {
          "ref": "89396512-1edf-426a-8449-4a17468f5d10",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "bb342784-2081-4dad-8fca-063a8628f9c1"
        },
        "item": {
          "id": "41a5a0a8-cfff-4188-b8e8-d65c777d1afc",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "f15d8b19-a560-43ef-9c30-90eb3d78a12d",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "62de194b-ef74-4d9f-b2f6-87fd07fefcc2",
        "cursor": {
          "ref": "346fd0b5-f328-441b-8c39-347d8f5318b0",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "fd68fa39-7f84-4f49-9010-eadad651abf5"
        },
        "item": {
          "id": "62de194b-ef74-4d9f-b2f6-87fd07fefcc2",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "b6592cd6-367b-4161-8fbf-6966e55de13b",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "c08dc370-07de-454a-a1df-b111d8cbc223",
        "cursor": {
          "ref": "48dda8ae-06d2-4116-9ac2-7c22800f2ef0",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "2065e994-2ac6-4626-af9c-e137bfee44b7"
        },
        "item": {
          "id": "c08dc370-07de-454a-a1df-b111d8cbc223",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "6e56ac84-3cc4-4a98-8803-eb9f977e5770",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "c818288b-3028-414c-a3c8-12b052c7dab6",
        "cursor": {
          "ref": "5d63a152-4102-4cea-9908-f4e51575cde8",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "9c1caeb9-c111-4989-8970-9875e6d4d55e"
        },
        "item": {
          "id": "c818288b-3028-414c-a3c8-12b052c7dab6",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "f3629007-7a01-4df3-8e6f-9065995e4f9e",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "ab38488e-9975-4992-9725-e9af0d89d388",
        "cursor": {
          "ref": "5264bf8e-b49a-4ef0-85fe-fce9e28b2fbe",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "57ed964f-83fd-44cf-8483-c5063cb0bd71"
        },
        "item": {
          "id": "ab38488e-9975-4992-9725-e9af0d89d388",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "0afa3ffb-cf43-4ced-9694-0a59ed7fea7b",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "7951d4f1-ec0e-4d65-af3e-eabfb8cedfd7",
        "cursor": {
          "ref": "e2450621-d071-4a35-a2cd-fc65825c8a4a",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "e0f04157-da39-4297-8764-41830f273aba"
        },
        "item": {
          "id": "7951d4f1-ec0e-4d65-af3e-eabfb8cedfd7",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "6a57c3f8-fe48-4631-af58-185d6b0f2dee",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "798a3148-c9b8-40ff-b383-c18a40d1ab53",
        "cursor": {
          "ref": "6a3e1665-8276-4003-b3fd-fd3ba5d3be73",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "b07e5933-824b-4bce-9041-f8cb22b79d7c"
        },
        "item": {
          "id": "798a3148-c9b8-40ff-b383-c18a40d1ab53",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "d082795b-39c8-412e-a135-91014a83a4b1",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "c30cadb9-14f8-47b0-a26f-c8f16c273184",
        "cursor": {
          "ref": "c1afef8c-a57e-413c-ace3-b68cc0f0c133",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "1ca068ea-7c75-47b7-912c-a13d8a6fb778"
        },
        "item": {
          "id": "c30cadb9-14f8-47b0-a26f-c8f16c273184",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "0faa9369-77c1-4f89-882e-0f7f176509ac",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "9e392fb4-13a3-4ee0-bbc6-7a3fe318b666",
        "cursor": {
          "ref": "e537cd74-11c7-4477-a6c1-13904bc5b65d",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "db10ab1a-10d4-4d07-81a6-3af4906c8acd"
        },
        "item": {
          "id": "9e392fb4-13a3-4ee0-bbc6-7a3fe318b666",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "807c0e9f-68a1-447a-b875-474efcdf1a16",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "5c05c219-f00e-4c0d-87fe-1bf331df59c7",
        "cursor": {
          "ref": "4168279f-8851-4a8a-a1c9-cde447601425",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "730e21a7-4998-4c88-bac5-741f795ada41"
        },
        "item": {
          "id": "5c05c219-f00e-4c0d-87fe-1bf331df59c7",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "8226b35b-440e-4441-8c0c-1ff528bd7f9d",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "bac6975b-bec7-47ef-bd51-90476b6a277d",
        "cursor": {
          "ref": "6c2872c2-cbfb-424b-8a07-95c6aad0a63f",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "0085d174-e357-4c2a-ae8d-b3904a5c0e96"
        },
        "item": {
          "id": "bac6975b-bec7-47ef-bd51-90476b6a277d",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "ae9b6b36-b7ec-420f-8ca4-9e70b9236dea",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "7b6b6034-c51e-4789-b0c4-1bea57f012b7",
        "cursor": {
          "ref": "add18dc4-171b-48f8-8d48-d3636eeefb5e",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "643b980e-90c2-4cb8-abed-d0b18f69d57f"
        },
        "item": {
          "id": "7b6b6034-c51e-4789-b0c4-1bea57f012b7",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "4132a873-0898-4e2f-bb67-54fc6c7311d3",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "53b682a0-6945-4227-8e03-4fed79503085",
        "cursor": {
          "ref": "aad04535-df40-4b0c-aef7-4b7abff43bc1",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "688917d0-81d0-445c-ba9d-f3c48e4bb72c"
        },
        "item": {
          "id": "53b682a0-6945-4227-8e03-4fed79503085",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "fa82bc0d-ffae-4079-8b37-cbaa785da91f",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "8ab9c612-f419-409e-b5ec-a399220b9ffc",
        "cursor": {
          "ref": "8f5c5875-29ad-41e5-a891-872be4bce4df",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "45040349-6e1e-4942-ae65-a237efe985c4"
        },
        "item": {
          "id": "8ab9c612-f419-409e-b5ec-a399220b9ffc",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "be608c36-db23-4642-b865-090e04e571f3",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "65603ed6-53ff-4003-a99e-a2fb0051654f",
        "cursor": {
          "ref": "41c10e81-5d9b-48fa-a534-175323ba5892",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "f7c519f2-0ef5-4bbd-b055-b38b2ac19fca"
        },
        "item": {
          "id": "65603ed6-53ff-4003-a99e-a2fb0051654f",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "da90fb88-cc42-4bb7-afc6-943fc0b0fb7c",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "98418387-d896-4b3d-a694-63a514401803",
        "cursor": {
          "ref": "fb27a5c5-a41d-40bd-9fa0-18308e8ff032",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "0e91e8fb-f208-4d6e-ba03-57ae953dcd0c"
        },
        "item": {
          "id": "98418387-d896-4b3d-a694-63a514401803",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "71949c93-dac4-4f18-a9a9-35829cc4d461",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "6dca5f9c-27ee-46b0-9634-9ab95a22307a",
        "cursor": {
          "ref": "38bbe570-9283-4a20-935d-343d8727ec24",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "b00737c8-24d9-41c0-945e-b8c4c2a9f9c6"
        },
        "item": {
          "id": "6dca5f9c-27ee-46b0-9634-9ab95a22307a",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "850c3742-3c62-4431-92b1-563bcf43c714",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "d6a6385c-6d03-43d8-a9c9-811a8c7642ca",
        "cursor": {
          "ref": "52c19d28-5369-4819-b62c-f828c64fd459",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "ee7a823d-5b06-469b-b076-aa0f09bcb461"
        },
        "item": {
          "id": "d6a6385c-6d03-43d8-a9c9-811a8c7642ca",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "a2d8daec-96c2-4f9b-bce0-a29205304b36",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "04e42e7c-6656-4e41-8211-90af59f7cd6b",
        "cursor": {
          "ref": "1b5f75a0-971e-483d-a4ea-aec785f94641",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "071e03df-3616-4b6d-9ab6-f849fc662288"
        },
        "item": {
          "id": "04e42e7c-6656-4e41-8211-90af59f7cd6b",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "ca52c400-a9c6-4237-a98f-2bb3b93102df",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "54f0c120-5ede-4fcd-8a05-6acc46447004",
        "cursor": {
          "ref": "1aaefa31-c1ff-4082-99ce-317bb304f5d3",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "de401f4d-6c0e-4ea3-8add-7bb281ce47d6"
        },
        "item": {
          "id": "54f0c120-5ede-4fcd-8a05-6acc46447004",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "c9dfaec0-cfd5-4693-9dfa-970a79a0c449",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "26cc98e3-4dff-4437-875d-58284cb5ee2b",
        "cursor": {
          "ref": "6d13d781-0760-44d2-8778-2e4d97ee5775",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "0b662a2f-e0aa-4025-a34a-6b618a1d0c4f"
        },
        "item": {
          "id": "26cc98e3-4dff-4437-875d-58284cb5ee2b",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "58d9c548-5125-4e8f-aca5-ce10f7d4613d",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "cfe19c9b-8d3c-4fa8-92d6-73c01cff9733",
        "cursor": {
          "ref": "d6d26199-8606-4231-b855-f26f1c0efa32",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "375004f3-32ad-4311-863f-025977939634"
        },
        "item": {
          "id": "cfe19c9b-8d3c-4fa8-92d6-73c01cff9733",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "568bbd62-0d5d-4e02-8922-e60a92974041",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "dc31284a-d25b-4bd3-96b5-9dcf2b152644",
        "cursor": {
          "ref": "87075fca-2a5c-47b4-a7a4-62cb57688611",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "7aff2c59-7c55-47c1-8d13-d1c6905f8135"
        },
        "item": {
          "id": "dc31284a-d25b-4bd3-96b5-9dcf2b152644",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "2ec35055-90c4-4ea8-8290-2e11a135259b",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "86a317c7-0d84-430d-83f0-ef519f309469",
        "cursor": {
          "ref": "6f3a1988-919c-4a89-b448-47bff27d4c88",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "3f6813de-a959-4d8c-bb19-f4dd71b0935a"
        },
        "item": {
          "id": "86a317c7-0d84-430d-83f0-ef519f309469",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "cb4a62be-fd0a-4251-b429-d5dcc9f25dd7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "207c2ea0-ae3e-4e82-bf12-024047732630",
        "cursor": {
          "ref": "3c487619-12c1-47ca-8908-4b259e4a55a7",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "15de40bc-1da7-4439-888d-24d68c12bc5a"
        },
        "item": {
          "id": "207c2ea0-ae3e-4e82-bf12-024047732630",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "928166f4-f037-41a3-9b10-274e76494fb3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 34,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73ecfb13-cdae-4b05-bc32-93f20ee32dc7",
        "cursor": {
          "ref": "1ab97658-6adf-46d1-845c-460fb2237ea0",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "0ded140e-3e8a-43b2-a4cd-3a836ec39a13"
        },
        "item": {
          "id": "73ecfb13-cdae-4b05-bc32-93f20ee32dc7",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "b55307ee-b873-4da6-bfea-17907880be08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73ecfb13-cdae-4b05-bc32-93f20ee32dc7",
        "cursor": {
          "ref": "1ab97658-6adf-46d1-845c-460fb2237ea0",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "0ded140e-3e8a-43b2-a4cd-3a836ec39a13"
        },
        "item": {
          "id": "73ecfb13-cdae-4b05-bc32-93f20ee32dc7",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "b55307ee-b873-4da6-bfea-17907880be08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6132644a-4609-4a30-91f3-ab4d39db5d30",
        "cursor": {
          "ref": "fcb84a2d-7c92-46f2-a899-d3d531a26551",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "6d386376-9a37-4c2b-a079-271e67da7b6e"
        },
        "item": {
          "id": "6132644a-4609-4a30-91f3-ab4d39db5d30",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "b8bb2648-c5d2-4e25-bb83-42cb4a2638f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51331345-42e8-48f9-817c-7bffab1a0de4",
        "cursor": {
          "ref": "dd0f496e-18ba-4b86-aba0-fcb90436c135",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "52878853-b082-4622-93d1-c50b31be54bf"
        },
        "item": {
          "id": "51331345-42e8-48f9-817c-7bffab1a0de4",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "02e00a7c-6dda-4885-95d4-f16a3ac8705b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96226a62-8509-4696-94b7-10e8c17fd102",
        "cursor": {
          "ref": "1238a5ee-b84b-4b9a-85d4-a4b7fc6ab045",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "76d9d727-3046-442b-8aec-5b5fa74b7602"
        },
        "item": {
          "id": "96226a62-8509-4696-94b7-10e8c17fd102",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "f1652e36-6b22-44e9-bc65-17fdeb8bfeb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b3f2376-aab8-49da-bffd-769bd1cee181",
        "cursor": {
          "ref": "234b526f-a099-4781-8c3d-7b31c12a266a",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "19fde074-e2d0-4725-875e-cbcc39d99e62"
        },
        "item": {
          "id": "9b3f2376-aab8-49da-bffd-769bd1cee181",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "019e9ff8-6c2e-4208-a077-79f619ad09cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2738c6e2-310d-41d0-892e-5ea7339be33d",
        "cursor": {
          "ref": "1d539244-befc-4f20-820c-7bc25f4e8f6d",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "5cca6207-5f50-4d12-85d0-803f583eea31"
        },
        "item": {
          "id": "2738c6e2-310d-41d0-892e-5ea7339be33d",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "fc9dfae9-5e08-46e7-bd8f-9546a2429815",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26070c36-7011-483d-b12c-fed665131390",
        "cursor": {
          "ref": "1b6c4ec2-b322-45f0-b94b-a011d1b1df4d",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "d2bace65-0aec-43d2-84bc-2acea7ad148f"
        },
        "item": {
          "id": "26070c36-7011-483d-b12c-fed665131390",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "bf69bc08-a9d9-4012-94c5-1f8f11c1db76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 522,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ae2b165-a93b-4d9e-be85-ad531bc68d62",
        "cursor": {
          "ref": "5d4f9b3e-b2ed-45a2-a0dc-1ec7d75782fc",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "94e9cec6-2b27-4a8e-acc9-df3ea23f13d3"
        },
        "item": {
          "id": "8ae2b165-a93b-4d9e-be85-ad531bc68d62",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "001047b7-3034-4f74-ab7a-d30fc26d9e8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04ca62ec-aac0-471d-b20f-c906ba3fbd82",
        "cursor": {
          "ref": "a8e7a6f2-b1a9-43e5-995e-86eb6fedd2d3",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "74206291-f063-455f-8a0f-386bc541aa62"
        },
        "item": {
          "id": "04ca62ec-aac0-471d-b20f-c906ba3fbd82",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "d708da98-cfcb-4384-81d0-15c8d50ce7be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "359fbc39-00df-4a70-ac0c-83ce2e156008",
        "cursor": {
          "ref": "c2653a9d-197d-4b1b-b452-5a47cc68e968",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "43fb836c-b9a7-4cae-9425-2cf762d9e287"
        },
        "item": {
          "id": "359fbc39-00df-4a70-ac0c-83ce2e156008",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "fb2d6f9e-1330-4001-8209-2d7be564c0e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "521ecc52-7667-4636-9b25-f20ed6fe20df",
        "cursor": {
          "ref": "778db784-c046-41f3-b6fc-a359cf1a9d8e",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "7da8726d-18c8-4adb-af4f-0204d23ccc88"
        },
        "item": {
          "id": "521ecc52-7667-4636-9b25-f20ed6fe20df",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "ab9b7e52-3362-43ad-97d7-8454837931f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "864dd8c7-7dd1-4349-872e-9bb54c4e7bdd",
        "cursor": {
          "ref": "b0da0762-674f-4059-bab7-661db6188c21",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "0ab99dce-4332-416a-85af-69607e39f121"
        },
        "item": {
          "id": "864dd8c7-7dd1-4349-872e-9bb54c4e7bdd",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "cff77891-9263-4f54-ae1a-0af1c48beaa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9063cdf8-ddba-4c11-bf7f-4eacb7adf4ad",
        "cursor": {
          "ref": "6dec4d16-ed86-4d50-86bb-8263b7c08bc1",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "43b0ba50-46b4-4b10-a70e-469b9faeed53"
        },
        "item": {
          "id": "9063cdf8-ddba-4c11-bf7f-4eacb7adf4ad",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "ebacb6ac-c603-490b-b1ea-52e0d50a5a34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a20868e4-9f34-4419-8a7e-ddce2dda39ad",
        "cursor": {
          "ref": "47e90755-a3de-40d7-bff0-16f61c1da912",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "a9b4e7b4-7b3e-4c26-8861-de8be4dd6146"
        },
        "item": {
          "id": "a20868e4-9f34-4419-8a7e-ddce2dda39ad",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "0de3967d-50c5-4df9-9004-1af833c8b37c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "281508a3-3d3b-4eaf-992a-9e7101f2d5a6",
        "cursor": {
          "ref": "5bf83e98-937d-482b-93c1-c87b8e35ad52",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "69600aca-7b0a-4e49-8692-188ca56a276b"
        },
        "item": {
          "id": "281508a3-3d3b-4eaf-992a-9e7101f2d5a6",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "1ee0b220-7350-49ec-9f04-080b8a87bd3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84852042-93f0-4464-85d7-c65442646136",
        "cursor": {
          "ref": "1a40693b-e159-4337-b06b-278dbdd91c9b",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "e5ee7c2f-3a8a-465d-bbf1-b7d1bb3f30b4"
        },
        "item": {
          "id": "84852042-93f0-4464-85d7-c65442646136",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "950d3f6b-76bd-4802-a000-0a4139363940",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "265f5364-e34b-4d55-9d60-f5683a02780b",
        "cursor": {
          "ref": "43a86eb3-cb24-4d3c-934c-38b4aabe0fd0",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "62fdb86f-10de-4510-ad2c-8d85620980dd"
        },
        "item": {
          "id": "265f5364-e34b-4d55-9d60-f5683a02780b",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "3b6f707a-db41-458b-8d6c-d2d172a1ecb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66cfccb6-9e7a-4e95-a54a-4173d25349c7",
        "cursor": {
          "ref": "3dc7c775-9f2b-41b2-a34c-b1373b0e6fcf",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "c02ec764-6369-4989-968c-3f2f72b0cb00"
        },
        "item": {
          "id": "66cfccb6-9e7a-4e95-a54a-4173d25349c7",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "1d5a57a7-f746-4ff0-9ab2-68f86eb9b40a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 313,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1481aeed-aa01-4389-ad6d-6cedaf15b63d",
        "cursor": {
          "ref": "70f7debc-5bbd-4e96-a48f-108866f96125",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "4b959ae7-d29b-4cbf-b70b-bc08521ee78d"
        },
        "item": {
          "id": "1481aeed-aa01-4389-ad6d-6cedaf15b63d",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "c36624c4-f53d-4e30-bf9e-d78af7caa277",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 212,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "297ec95e-3388-4531-b279-155228441273",
        "cursor": {
          "ref": "8df05d21-9695-452d-bf07-781800b964fc",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "e405dd31-764c-4715-98b0-31cab4d43d23"
        },
        "item": {
          "id": "297ec95e-3388-4531-b279-155228441273",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "a1bfa475-0695-45d7-8284-055c1108fb25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 201,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbcd2868-0a6d-4d52-bd06-887b5fda740f",
        "cursor": {
          "ref": "794a0db6-57a3-4d2d-85d0-85fb824ac597",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "4f21bd0d-b083-457b-97d4-a0801ae03a7a"
        },
        "item": {
          "id": "dbcd2868-0a6d-4d52-bd06-887b5fda740f",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "c36b306b-b223-4f15-862b-86669d1a24ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 194,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "509f413a-2e24-4f3b-8c2f-a612388e649e",
        "cursor": {
          "ref": "e88faaa5-af0e-40a0-bc01-e7b89d227f69",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "3c06102e-dbbd-463a-8bcc-efe52f0d74c7"
        },
        "item": {
          "id": "509f413a-2e24-4f3b-8c2f-a612388e649e",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "7daaae08-dc7e-4c65-ad32-09994102caab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 199,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2f27052-3394-4414-830f-5d1ef8c65c65",
        "cursor": {
          "ref": "30f8e4d0-c9d6-4152-bee5-bb2e478b8142",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "683cf246-51f8-40c0-9c7c-0b272752cb2a"
        },
        "item": {
          "id": "a2f27052-3394-4414-830f-5d1ef8c65c65",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "f34285cc-6362-4281-bd01-9e9fd2ba74cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 193,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ae0b444-6b21-4278-9481-38358a06d4c1",
        "cursor": {
          "ref": "6cfe0cfc-c90b-4cab-9e0a-60d0f2f551e3",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "681a59d9-54c5-4fe8-8e36-a1aca07ead58"
        },
        "item": {
          "id": "3ae0b444-6b21-4278-9481-38358a06d4c1",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "73df5a3a-7846-47fb-b84b-c3c00776abc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9eb2b0bd-7bbc-4871-858d-a20d91e91e6a",
        "cursor": {
          "ref": "9b0c8841-738f-4d21-bba9-fa4e3926b387",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "fd143af8-dc6c-4d18-abd1-d212bfabb0e9"
        },
        "item": {
          "id": "9eb2b0bd-7bbc-4871-858d-a20d91e91e6a",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "3082f48f-c40b-4a69-a31f-5ce74a6ddddf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c0ccaaf-d95d-4dfc-a6f7-327b6330df28",
        "cursor": {
          "ref": "8becfbf8-83d9-41c7-9129-3527cb1e31c5",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "8471aa95-35a7-41a8-a8ab-8ed48426a984"
        },
        "item": {
          "id": "4c0ccaaf-d95d-4dfc-a6f7-327b6330df28",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "75bcd222-6117-43d5-8396-150f6a8b9127",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 187,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb625077-7730-4845-8146-019316e291ad",
        "cursor": {
          "ref": "fa2571df-a9fc-4937-98df-68893d287a4f",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "22288bab-5d49-403f-88bf-913a35117978"
        },
        "item": {
          "id": "fb625077-7730-4845-8146-019316e291ad",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "f53262b1-fbac-4368-978f-c4e32f72985f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a4872f3-aa7c-43c1-b3d5-6e475dd104fd",
        "cursor": {
          "ref": "7bac60b0-bc23-4e23-848a-30ceb67ba42d",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "f5240015-a49c-45f3-a66e-10df1882bfe2"
        },
        "item": {
          "id": "2a4872f3-aa7c-43c1-b3d5-6e475dd104fd",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "66930088-4cb2-4a23-89d3-9dc12e8bc7bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ea3708a-9d11-481a-8d06-85c931a290fe",
        "cursor": {
          "ref": "4dec7407-a92f-4884-9f83-ff4b364a5ae8",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "a4463a9a-65f9-4f0f-a137-e96f3c2e619c"
        },
        "item": {
          "id": "0ea3708a-9d11-481a-8d06-85c931a290fe",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "4a5a6c3a-a268-4e94-a71d-06d2630150fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 220,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1f47a12-3e1e-451f-b646-f09677762e83",
        "cursor": {
          "ref": "bc571617-adff-4d24-b6f8-c9db5e43c6ea",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "68d8f4da-e8c5-4f6e-b9b5-c5109e5cd836"
        },
        "item": {
          "id": "f1f47a12-3e1e-451f-b646-f09677762e83",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "e89de1a7-c3d0-46f1-b40b-adf010474354",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01baf4eb-ebc5-4652-b9de-952cc3cb8181",
        "cursor": {
          "ref": "de73e30f-0e99-4800-8f84-13d3148862e9",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "13107c5f-df33-4249-8876-541d133090cc"
        },
        "item": {
          "id": "01baf4eb-ebc5-4652-b9de-952cc3cb8181",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "25cedeea-510b-49b7-9185-7c0f3c92bc62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58f93645-87e3-4455-946b-b936fb132056",
        "cursor": {
          "ref": "4dcc94c3-8072-4dee-934c-a57828687248",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "a6796fdb-f59f-4265-bc00-585e1d24ba6a"
        },
        "item": {
          "id": "58f93645-87e3-4455-946b-b936fb132056",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "1fe7a9a9-93df-4eba-822a-12dca906ce4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7abf6d5e-f9a5-444f-a14f-6a57ca132593",
        "cursor": {
          "ref": "a958ef59-08b1-422f-b548-6b147e937bde",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "43e306e9-acd7-42df-8f3c-30d6f3b0ea36"
        },
        "item": {
          "id": "7abf6d5e-f9a5-444f-a14f-6a57ca132593",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "d172cb73-01f7-4ba4-b616-f38d6c8d7859",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 200,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c6e9c6f-ee9f-4009-92b9-4133456a0831",
        "cursor": {
          "ref": "bf4c73dc-0d15-4ec9-812d-cec1535243a4",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "92d3b9f9-97f6-412b-8325-18c02312f87d"
        },
        "item": {
          "id": "6c6e9c6f-ee9f-4009-92b9-4133456a0831",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "70b12718-6965-44d4-a994-e7e63e5c2c8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ef7c149-7ff2-4227-b6f7-018091d1df79",
        "cursor": {
          "ref": "46a9b6d3-6fa8-43bc-b011-e675e122c4a9",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "f88424f5-f9a4-4076-95a0-e252727936b9"
        },
        "item": {
          "id": "8ef7c149-7ff2-4227-b6f7-018091d1df79",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "d18f63f0-c26c-4093-80c2-218cc05abe81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 228,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f8d4d2c-cae4-4a50-92a9-5ab21b62f21d",
        "cursor": {
          "ref": "35659f27-437e-4432-a22b-a95c34191991",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "325aaec9-99fa-4f78-bb87-0354e23f1673"
        },
        "item": {
          "id": "5f8d4d2c-cae4-4a50-92a9-5ab21b62f21d",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "a55edd27-4a71-4a25-922a-807d5bd4785c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 202,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e46f631-1437-464d-88b6-dc0a946759cb",
        "cursor": {
          "ref": "9cb85cb7-2435-4f68-b6b1-1ab6edf6a487",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "4b6356b0-32d5-48b9-a615-2cca0d5c153d"
        },
        "item": {
          "id": "0e46f631-1437-464d-88b6-dc0a946759cb",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "ae5f343d-83be-45f1-aae2-0cc269af3fc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 194,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb64050e-f52e-4f07-ad02-93dc9d5f2240",
        "cursor": {
          "ref": "7b88bf6d-f971-479d-b652-7d0406a47193",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "739349b6-bb5f-4450-a422-cc2c57a4db3b"
        },
        "item": {
          "id": "eb64050e-f52e-4f07-ad02-93dc9d5f2240",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "26be6699-24c1-4995-a6ef-58912eee8c83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 212,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b1bcf25-aec1-442a-81dd-dad459e9e05e",
        "cursor": {
          "ref": "a84e60db-2b6e-493a-8efa-2242007f1b83",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "2bf1f0e9-91c2-4d20-89d5-c874bd3237ee"
        },
        "item": {
          "id": "1b1bcf25-aec1-442a-81dd-dad459e9e05e",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "62efdf33-4215-4f78-961f-29f784188378",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 204,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bd56970-462d-4d90-8ff9-686270e787ea",
        "cursor": {
          "ref": "8c3cba0a-3a33-4ee8-90d7-8dcf37a90b85",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "aaac8ef7-7c3f-4f35-930c-0af2aa4cc474"
        },
        "item": {
          "id": "2bd56970-462d-4d90-8ff9-686270e787ea",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "6e5afb3e-657a-4e27-9dcd-a928be6db989",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 217,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d35e6a7-b3db-47d0-9cdd-f4da29ce2fc4",
        "cursor": {
          "ref": "3caa13fc-1f2f-4214-a143-03c1c1d30f2e",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "01a0b9a9-874a-4d6f-b903-511d93b5cacd"
        },
        "item": {
          "id": "0d35e6a7-b3db-47d0-9cdd-f4da29ce2fc4",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "28982370-859f-4651-8d8a-f6fbc4e6c48e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 199,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f85e8543-d296-4bcf-9246-dda626ea793c",
        "cursor": {
          "ref": "3f99af75-fba7-41e0-b412-6e79c10633c1",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "7d8db3d8-af1d-4489-b5ca-150a474f49da"
        },
        "item": {
          "id": "f85e8543-d296-4bcf-9246-dda626ea793c",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "7b4e91bc-7a34-4721-9d08-c226a88840d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 190,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b66c55fc-84b4-4d2e-b54a-0bc7a6c20d2f",
        "cursor": {
          "ref": "a4777d1e-5cc9-4be1-a084-f64ec404cc0c",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "237833e5-0f51-4837-a581-45cf0e6dc357"
        },
        "item": {
          "id": "b66c55fc-84b4-4d2e-b54a-0bc7a6c20d2f",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "aca7b53b-c0a7-4b48-a334-2c2e7c4117e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 196,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f31be0dc-0dde-4cbd-a566-cb97f1944365",
        "cursor": {
          "ref": "69278cad-d29a-489a-b482-46bff497ff4f",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "ece93e29-2bc7-4ba6-ad1d-2952ad249f19"
        },
        "item": {
          "id": "f31be0dc-0dde-4cbd-a566-cb97f1944365",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "5d8cb728-135c-491d-8f0b-b1e3e08c0bde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 208,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a6ad6e9-01bb-496d-be91-6366a31726e3",
        "cursor": {
          "ref": "d5c72a6c-cfb3-4d76-aec7-2c6a1432fcec",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "86e37785-0b0f-45a8-bf82-12ecf817dfdb"
        },
        "item": {
          "id": "7a6ad6e9-01bb-496d-be91-6366a31726e3",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "2bd153b3-cbba-4415-945f-2a82284b0328",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 202,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "780e6699-cfac-49f8-b495-f16e6935bba1",
        "cursor": {
          "ref": "8a8b2c89-cd90-4150-b070-ecbba73d44cc",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "46ea78ac-2aab-496d-968c-434bb74799f4"
        },
        "item": {
          "id": "780e6699-cfac-49f8-b495-f16e6935bba1",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "bdb904cd-a5ce-4d30-90e3-cca82514bc0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 193,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d94190c2-9513-4412-84c5-40e2c5ba97de",
        "cursor": {
          "ref": "274aef3a-6f14-4ed1-87c4-58a809abd47f",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "ec47ca81-403e-4796-b891-6b72df6ab69e"
        },
        "item": {
          "id": "d94190c2-9513-4412-84c5-40e2c5ba97de",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "d5fd5e4f-9890-450d-89bd-a114e31dd7c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 189,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61c12455-2d2a-4ca8-8a5f-ba8f0454942d",
        "cursor": {
          "ref": "e3fa0217-5804-4429-a347-a66dc8b9b7bc",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "fef4a892-c396-45a7-981b-b784eef9f6a7"
        },
        "item": {
          "id": "61c12455-2d2a-4ca8-8a5f-ba8f0454942d",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "12f96fb8-1cb8-437b-a94d-fa07491b0ea6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 198,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e205a34b-281b-4541-97df-2238a00b1fba",
        "cursor": {
          "ref": "a9c8a814-54b5-4a90-9fd4-3a68731ee7db",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "f72b1247-7c12-472e-a1ce-5a4332dec4fe"
        },
        "item": {
          "id": "e205a34b-281b-4541-97df-2238a00b1fba",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "1d71b204-647c-4110-b408-e617ea213cbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 205,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81a6b858-4455-4684-a321-6e8acf07df73",
        "cursor": {
          "ref": "6b1366ba-18f2-4e07-9cbf-28288116c98f",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "524754e6-7a14-4d34-a49b-b71fe8876ef6"
        },
        "item": {
          "id": "81a6b858-4455-4684-a321-6e8acf07df73",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "9de8af7b-e041-481f-8fc2-8fca6f1e8d28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 207,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f2e263e-3a17-40c4-b889-dbaf40b0997d",
        "cursor": {
          "ref": "eacdba11-56c5-4fd1-9b26-451b6a2c64de",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "b0fd5241-64a3-46f3-ab6b-2483d31d580b"
        },
        "item": {
          "id": "9f2e263e-3a17-40c4-b889-dbaf40b0997d",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "571a602c-beda-404e-9850-1c0710ba1acc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 204,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bb43474-876d-451a-bba4-92965cc2e8eb",
        "cursor": {
          "ref": "52f127db-fe63-45fc-ab9c-d044200ee6d8",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "130f8c38-16aa-4e41-b21f-145bce7470b7"
        },
        "item": {
          "id": "4bb43474-876d-451a-bba4-92965cc2e8eb",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "58e19a86-3c6b-45d2-8bae-196c0513a51b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 193,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2787d329-1336-4b25-b215-5aa962c3164f",
        "cursor": {
          "ref": "c93ce069-f202-475d-a8fe-df66dcbb6de0",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "111bee60-06d9-4ffa-b5c6-76d180b2452c"
        },
        "item": {
          "id": "2787d329-1336-4b25-b215-5aa962c3164f",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "7e5aec87-4419-41b6-90f4-ffbf08d5586b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 197,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64d0f759-19db-4863-8596-d52085242485",
        "cursor": {
          "ref": "f08420c6-c78b-453e-a149-fa895638a606",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "715cf670-f98d-44e4-8d74-2e2c7f2d3cdd"
        },
        "item": {
          "id": "64d0f759-19db-4863-8596-d52085242485",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "a95fd589-48f7-4fab-bce4-ec1c7cbfb811",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae03d326-c13f-42c0-b477-99c835fcd129",
        "cursor": {
          "ref": "b6995aab-e69b-4af0-8543-f72ce8056db1",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "c13dbd1a-c63f-42dc-a673-2e124e001def"
        },
        "item": {
          "id": "ae03d326-c13f-42c0-b477-99c835fcd129",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "09033f20-efff-4ee7-b7b9-2dba9d0071d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fb1dd8d-d1e7-47b8-8752-1f3d159202a3",
        "cursor": {
          "ref": "b3205dcb-2a83-4332-8b87-4f80c01ee1d4",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "febf87f6-b515-45bb-806b-ea12922771b2"
        },
        "item": {
          "id": "8fb1dd8d-d1e7-47b8-8752-1f3d159202a3",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "534a3af6-424f-438a-a690-662bcbd2e779",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "069e3007-948e-4d5d-bbbe-0769f7aff83b",
        "cursor": {
          "ref": "e5d16e72-42de-4d7a-8c45-ff1f1947e87b",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "92378b41-1c77-4394-a833-5c05121ec67c"
        },
        "item": {
          "id": "069e3007-948e-4d5d-bbbe-0769f7aff83b",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "5f1fb9ce-aba7-49de-b1b8-b4cc845857ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 200,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5973553c-2aca-401a-af2e-5f4a9c8e88ab",
        "cursor": {
          "ref": "a4b6a738-5f74-46ab-b6c9-2f69dd1e7d47",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "b8bfc317-8e1c-4697-8134-e0b0a7f47668"
        },
        "item": {
          "id": "5973553c-2aca-401a-af2e-5f4a9c8e88ab",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "2a7565e1-f396-4755-baf6-a070dc1c2990",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f6a9319-b24b-4fce-9d98-9c3bff85a0d9",
        "cursor": {
          "ref": "d5127d92-7042-4df3-8da1-6f3aff7fddea",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "67c84ba0-d9f3-4d8c-9285-ffbf4bf5a0c1"
        },
        "item": {
          "id": "5f6a9319-b24b-4fce-9d98-9c3bff85a0d9",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "70a28f46-c2b9-40e3-873f-f6d89eac0e67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6a27cd4-2cad-4a31-af3d-07ac9f9b6397",
        "cursor": {
          "ref": "1dae116f-af20-474d-9cf1-a42f1f06d742",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "d915556e-b50a-459b-a987-54c19fda9234"
        },
        "item": {
          "id": "e6a27cd4-2cad-4a31-af3d-07ac9f9b6397",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "37b9336d-dc33-49d6-9689-1e3eb85da3ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 160,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1c8110b-281d-4de7-8dc9-3ee005daa121",
        "cursor": {
          "ref": "f30cd915-3320-42ae-a0b8-fb2d7cbc22ef",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "87769ba3-fb37-4990-a422-cec46c4a6849"
        },
        "item": {
          "id": "a1c8110b-281d-4de7-8dc9-3ee005daa121",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "7b10b013-bb6e-49c0-9774-efd9335e97c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "603a4942-d7cb-4aa8-9075-c427b9aa3c34",
        "cursor": {
          "ref": "b8ef21c9-71df-4df7-bcbd-bba42a4bec2a",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "2033ffd3-7f0d-4440-ab5d-9395d42e1086"
        },
        "item": {
          "id": "603a4942-d7cb-4aa8-9075-c427b9aa3c34",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "39651c62-0623-45a8-a22a-e61b8e3a0202",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 210,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6fdf94b-40b1-4d5a-aa2d-ce0bc3d490dd",
        "cursor": {
          "ref": "0490731f-8293-457d-a402-ecc956fd9f71",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "fa6e0fc0-5963-4a27-b4d7-3a6398fa7f63"
        },
        "item": {
          "id": "e6fdf94b-40b1-4d5a-aa2d-ce0bc3d490dd",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "e7c37fd2-011e-4f6d-bc46-4cf4727e0fd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7259bb71-94b7-4bbb-9fe6-b25b84b01e0e",
        "cursor": {
          "ref": "c3a57e94-3cd1-4d09-b34e-ce9900ab3ff6",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "3c72f287-a2e7-4a2b-89ad-62811fe93fad"
        },
        "item": {
          "id": "7259bb71-94b7-4bbb-9fe6-b25b84b01e0e",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "4706b5f2-8e0f-47b8-a2ce-9ba485cd31f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef438c39-20c7-4e98-bef7-cbff732c258b",
        "cursor": {
          "ref": "ad6a27c2-e847-4e23-aa77-59351290211c",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "7a4de2bf-14e6-4d22-bd0f-2b239792d29d"
        },
        "item": {
          "id": "ef438c39-20c7-4e98-bef7-cbff732c258b",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "e6c18c91-9956-4acd-9b6e-dc9d3a17ecc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33569452-394b-4ba0-997e-0061cad34275",
        "cursor": {
          "ref": "02c379c0-7d39-4129-9a50-c0ea32114a95",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "de4a85a1-d9d3-466b-94ba-b2aff8527031"
        },
        "item": {
          "id": "33569452-394b-4ba0-997e-0061cad34275",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "337324d8-9b3b-466e-8c1b-6bdcdfcc6c23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60474a4c-193b-47a5-b85c-f65cc971bffb",
        "cursor": {
          "ref": "4476decc-2bd3-44c5-bf99-4195b97e52b2",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "cc2ed905-4599-47fc-a013-9069842a88e2"
        },
        "item": {
          "id": "60474a4c-193b-47a5-b85c-f65cc971bffb",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "fa8e176a-5d32-4e52-8bf2-59968ffd28f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5180c334-670c-469e-b037-60bb2b84538b",
        "cursor": {
          "ref": "9a9955ec-7756-4859-925d-bae98fa884d9",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "5e0b2ab8-c957-42de-995c-3d31cf03250d"
        },
        "item": {
          "id": "5180c334-670c-469e-b037-60bb2b84538b",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "619ee825-d2a0-44ae-962f-1e15d6a5296d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f9cb1be-7d19-4178-a53e-014b2b77d7bf",
        "cursor": {
          "ref": "08c90374-6f22-4229-8540-1c56965f78ca",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "e623fd67-11b5-4d78-9e34-186d30b16cf5"
        },
        "item": {
          "id": "3f9cb1be-7d19-4178-a53e-014b2b77d7bf",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "6698ebfb-fe41-4c33-bb11-53cf539fd219",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6645fb59-a3d8-40c3-9c79-252fd2cf7064",
        "cursor": {
          "ref": "52e558da-3b19-4a7a-8e1a-8dacbba0b57c",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "a7554b7d-65f1-44b6-90d7-192a2bab914e"
        },
        "item": {
          "id": "6645fb59-a3d8-40c3-9c79-252fd2cf7064",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "8b0cd89f-fda7-443a-bc75-d40a086fbcd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "412935bc-97f2-4ee9-ba66-9076eedc70fc",
        "cursor": {
          "ref": "08f18aff-7a89-4897-9e83-848b41042aee",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "5a8aa20a-7f18-4bdb-9613-5e97f2134b13"
        },
        "item": {
          "id": "412935bc-97f2-4ee9-ba66-9076eedc70fc",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "30b0277c-87da-400d-a9bf-e60c051a95e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a32caa36-87a6-4034-a3a7-2719b4b98ade",
        "cursor": {
          "ref": "0a77abab-4253-4351-808e-1c72e902436b",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "8d7723ad-878b-4763-8605-7f3dd953f643"
        },
        "item": {
          "id": "a32caa36-87a6-4034-a3a7-2719b4b98ade",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "c75743fc-3c7b-4b00-8536-4d146a84e2af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e48951d-3632-4b9d-b409-c9b155e58632",
        "cursor": {
          "ref": "3759184b-0cf5-41c6-b387-21c664ab31c6",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "d1c2fbba-709e-4a6d-9f55-1f65bdd14f7a"
        },
        "item": {
          "id": "3e48951d-3632-4b9d-b409-c9b155e58632",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "040fae32-2b27-4223-ad6e-d6dbc6ebd55b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbc333f2-57aa-40ae-8ee4-45a7d9d82df4",
        "cursor": {
          "ref": "921b1778-f6b6-4883-9265-90860a6b4f41",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "9ec110e3-f6e8-4196-96c6-73a40193b447"
        },
        "item": {
          "id": "cbc333f2-57aa-40ae-8ee4-45a7d9d82df4",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "e3a5a5ee-b1fc-45d5-8178-d4b86e148174",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "792c33f9-47dc-4efc-9338-4869359a497a",
        "cursor": {
          "ref": "c62e5a08-e85f-4c48-9005-cba6b55ae947",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "565402ac-536f-4d93-9984-3709068c23e4"
        },
        "item": {
          "id": "792c33f9-47dc-4efc-9338-4869359a497a",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "7e17cdaa-1ad8-44c5-8a7e-9dfca42f42ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4c6b092-ad6c-4142-a08d-9bb6e9d162b4",
        "cursor": {
          "ref": "ab8c14a3-930d-41c5-8995-6762de1386d6",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "782487ba-da52-4cae-8c85-aa0512d1c1f8"
        },
        "item": {
          "id": "e4c6b092-ad6c-4142-a08d-9bb6e9d162b4",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "79fb3f41-2230-4ea0-a8e9-28d61bbe1eab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cd9af1d-c92b-41f3-b9ba-c20ae1d0a6d8",
        "cursor": {
          "ref": "ffb97d77-7ce4-42b1-b2c1-ba1bcf89061a",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "afad5298-e989-4d09-adf8-3334bbfff371"
        },
        "item": {
          "id": "0cd9af1d-c92b-41f3-b9ba-c20ae1d0a6d8",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "4f22a41b-2949-4958-8062-9267241168cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcef86f9-ca5d-4071-b6ff-6731b695f7eb",
        "cursor": {
          "ref": "dbd22776-ebad-4d9f-86cb-ea86649bc002",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "b2bb59ea-57c6-46b6-9c15-022546a60329"
        },
        "item": {
          "id": "bcef86f9-ca5d-4071-b6ff-6731b695f7eb",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "f920e66a-274f-4a31-a78f-4ec0b56a5b4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1265096-a83f-4ce9-a556-48c4d6a2e885",
        "cursor": {
          "ref": "9fc6c0be-6ba4-4c3e-9eaa-15b574a3eb91",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "d47d2adf-e219-4d12-83e9-66e9b71e5cd4"
        },
        "item": {
          "id": "d1265096-a83f-4ce9-a556-48c4d6a2e885",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "92ac6d7e-de84-4080-924a-a80d555155ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba55192e-0f5a-4b6c-837b-d45e54ad3749",
        "cursor": {
          "ref": "6c792462-d98f-4010-9216-cd545dfdc759",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "c0f08cd8-6e9c-48a5-bb35-4d89d3a4e9eb"
        },
        "item": {
          "id": "ba55192e-0f5a-4b6c-837b-d45e54ad3749",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "d7845cda-f869-44bc-a22d-3328967530d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3f879bf-7a2a-45f6-8897-fd765b7a9fdd",
        "cursor": {
          "ref": "96b6f708-d678-41fa-9b29-4d2e6927f300",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "23047ea8-fdfc-467e-8fff-faf636e32c8d"
        },
        "item": {
          "id": "f3f879bf-7a2a-45f6-8897-fd765b7a9fdd",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "48fc0467-c242-482d-ae29-86de6db544ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59855bc9-a508-442e-b1f3-144049d9df37",
        "cursor": {
          "ref": "661263e1-218e-439a-948c-4cdd2f758254",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "9d0aff5c-5c74-4845-8efd-2c75b45cd0ae"
        },
        "item": {
          "id": "59855bc9-a508-442e-b1f3-144049d9df37",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "298d372e-ab79-4720-9938-8d30a3c9301a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1637b22a-c2ea-449a-b9fd-e4ba32966996",
        "cursor": {
          "ref": "6326adaa-007d-45a0-bb72-76807ac1ba0c",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "11f5ceb1-cd74-4b82-861b-b16535868e2c"
        },
        "item": {
          "id": "1637b22a-c2ea-449a-b9fd-e4ba32966996",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "546a8883-5344-417b-a36f-2252ac4c55f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1321160-2689-48ed-abf0-238f7c682ef3",
        "cursor": {
          "ref": "c6eda060-6f3e-450c-a5b2-187d7bd60de5",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "5343fc56-b2b2-4fe7-abce-41a6df467b28"
        },
        "item": {
          "id": "d1321160-2689-48ed-abf0-238f7c682ef3",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "9240b410-3c11-48c3-94e7-ad6692fcb57c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9f8d87b-0a54-4f07-9c4c-a9b3e8b44771",
        "cursor": {
          "ref": "29dd792d-9d62-4da2-b568-80906c5de1a0",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "d2d6ad9b-77c2-46f9-a3d9-8cb0e02023d1"
        },
        "item": {
          "id": "e9f8d87b-0a54-4f07-9c4c-a9b3e8b44771",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "7af46665-acef-43aa-b904-e37cf8a77e93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "954a40d3-4466-40e2-95ef-efa43334c11e",
        "cursor": {
          "ref": "1dd159c5-0cd3-45d7-b6f2-0b1dbc0fbc1c",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "5894d3ef-2f07-4bd7-85b9-736744db988c"
        },
        "item": {
          "id": "954a40d3-4466-40e2-95ef-efa43334c11e",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "1364a7db-13f9-4438-8e06-ccc26b8456d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11df3a3e-7cc2-46fe-9aa8-5351f31790aa",
        "cursor": {
          "ref": "5ed17b21-c727-4a2d-849f-c1de95b19095",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "cf0d4375-6e1e-4925-8456-b4516f5ce7d1"
        },
        "item": {
          "id": "11df3a3e-7cc2-46fe-9aa8-5351f31790aa",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "f9a2091c-aae0-414a-be03-5d694865d683",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54c4db41-ee70-420c-b21b-35d4c835794a",
        "cursor": {
          "ref": "7217ca4b-bc16-49ca-85af-d4d29ea35a7d",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "4fb6b997-fb64-4920-9b30-ac49f6971341"
        },
        "item": {
          "id": "54c4db41-ee70-420c-b21b-35d4c835794a",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "891a7871-3135-4261-8d98-018f9296b626",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d157248-a670-4f0c-9669-2737fc480226",
        "cursor": {
          "ref": "406f0400-398b-46b5-bf6f-88dfe9a31a06",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "f5a8b33b-997c-404b-a917-3abd647e9415"
        },
        "item": {
          "id": "6d157248-a670-4f0c-9669-2737fc480226",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "f2d5f91e-e7c0-4079-968a-cd00f4190235",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd4caecf-ffad-4a21-aa18-d3fe15351ffc",
        "cursor": {
          "ref": "dba2d754-b8ca-4dab-9d98-7f2082ac9f22",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "3c2440c4-9bac-40f3-afe8-a2a54f93bbd4"
        },
        "item": {
          "id": "dd4caecf-ffad-4a21-aa18-d3fe15351ffc",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "141b2d4b-7a30-4935-898e-f47911271ce0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "637c23a2-d0ae-4631-8276-98b14b6b1f66",
        "cursor": {
          "ref": "876de68c-85f6-47a9-a837-316070f28225",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "e614008b-ba9a-4c84-bead-f646645689b0"
        },
        "item": {
          "id": "637c23a2-d0ae-4631-8276-98b14b6b1f66",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "89892731-086e-4d97-a100-df6f2fa1346d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6bc781b-1efa-4d0c-a2c9-58362fd23855",
        "cursor": {
          "ref": "c4b13124-d1c5-49f0-b92a-b619adf498ab",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "2f744993-ed80-47b1-944f-a72ddc4e97ee"
        },
        "item": {
          "id": "f6bc781b-1efa-4d0c-a2c9-58362fd23855",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "d1eaa7f1-7637-4def-adc9-437f2bb844fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51133ab0-4030-40d4-9174-39685152f4ae",
        "cursor": {
          "ref": "6ccb9394-ed3f-4a41-a172-a8ac2b9277d3",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "57e8e43e-fb91-4d81-8dd5-fd589c757a15"
        },
        "item": {
          "id": "51133ab0-4030-40d4-9174-39685152f4ae",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "03710b48-f934-4a0f-bf8b-1e7c77130153",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ecb122f-1d1d-4637-b799-6e49e69fdf0e",
        "cursor": {
          "ref": "dcb6339b-4f74-43a8-abed-d1ca7842a099",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "cd328e97-7c31-4d33-a6f2-e491a1017c4e"
        },
        "item": {
          "id": "1ecb122f-1d1d-4637-b799-6e49e69fdf0e",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "4b3020b2-dd8d-4195-9d3c-606d2e079c14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40b9b218-8cc3-40cb-a287-9194ce6c3ba6",
        "cursor": {
          "ref": "64ce0585-76b1-4c50-b711-356408db1ac6",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "da60e44a-6f55-4179-b945-1f0000a57bf4"
        },
        "item": {
          "id": "40b9b218-8cc3-40cb-a287-9194ce6c3ba6",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "356fd174-dd77-480b-893b-ead6f1cab177",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa4271a6-e826-4161-acd0-f1b060aacc14",
        "cursor": {
          "ref": "13ba1518-a437-4ff5-8c07-08d78def7dbf",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "81f481cd-064a-4528-9021-bf9184e1b726"
        },
        "item": {
          "id": "fa4271a6-e826-4161-acd0-f1b060aacc14",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "bba76f05-6e36-4bb7-a441-ac1d5a8337f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5cdabcd-2216-4328-a939-73ee0a52e7d3",
        "cursor": {
          "ref": "a9092f2f-2351-4ea2-a0ec-4ace1220edce",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "137f86a1-3d1e-4310-aef5-4505a77068a8"
        },
        "item": {
          "id": "e5cdabcd-2216-4328-a939-73ee0a52e7d3",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "fccc440b-d267-45c7-8269-406fbf822c29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fd06601-ce7b-47e5-baf0-332695f286a3",
        "cursor": {
          "ref": "c631bab1-c6c4-4f9f-9aed-007e40706327",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "034ad3c1-6b4b-4667-867d-d65b2b11fa28"
        },
        "item": {
          "id": "1fd06601-ce7b-47e5-baf0-332695f286a3",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "af56f967-765c-41d1-813a-28c99b72b70c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03bf712f-b64d-4d44-8461-16881747cab5",
        "cursor": {
          "ref": "ab4fa409-895e-49e4-ab18-97d62f0b505e",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "14b69232-f4f7-4892-9d87-98a8a7fc96c4"
        },
        "item": {
          "id": "03bf712f-b64d-4d44-8461-16881747cab5",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "7a493b52-3479-443e-8045-54663d542998",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 40,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6667faac-a5a2-4269-bcec-acbb57a3bb22",
        "cursor": {
          "ref": "08b479a8-69f4-475a-bca5-24d77293fe8e",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "2dd064eb-52a0-401a-b423-1e9d1b0c10cf"
        },
        "item": {
          "id": "6667faac-a5a2-4269-bcec-acbb57a3bb22",
          "name": "credentials_verify"
        },
        "response": {
          "id": "eab833b6-60ee-4e3b-bfbb-f7548ff80dea",
          "status": "OK",
          "code": 200,
          "responseTime": 435,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d56aa5be-eec0-46e5-801f-db6c8131f1a5",
        "cursor": {
          "ref": "8d0502c9-6a7d-4bce-937c-c2bbbcd23f82",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "e7b70736-d7c3-4e3a-91a0-2e5c0595fc14"
        },
        "item": {
          "id": "d56aa5be-eec0-46e5-801f-db6c8131f1a5",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "46747907-997b-4e1c-ac81-6e085b6a8fc6",
          "status": "OK",
          "code": 200,
          "responseTime": 372,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a87e2f25-c8d5-4783-8e3b-e582c6cca06c",
        "cursor": {
          "ref": "82d6e7a2-d5db-4c80-ac67-ca3ba9ae650d",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "e91f1949-e1a7-4efb-beb7-c847bce21e9c"
        },
        "item": {
          "id": "a87e2f25-c8d5-4783-8e3b-e582c6cca06c",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "87cde2d9-1665-4ecb-81e1-5db01bb8e59d",
          "status": "OK",
          "code": 200,
          "responseTime": 481,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42ce8b5a-b599-4dae-afbb-890aea71a55a",
        "cursor": {
          "ref": "12365083-e744-4fc9-a17a-6a7a6e3ccfce",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "814112bf-8241-4f36-8ec4-90876ed89274"
        },
        "item": {
          "id": "42ce8b5a-b599-4dae-afbb-890aea71a55a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1fe8f3d1-15e1-45e3-97b7-d2f5392852ae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42ce8b5a-b599-4dae-afbb-890aea71a55a",
        "cursor": {
          "ref": "12365083-e744-4fc9-a17a-6a7a6e3ccfce",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "814112bf-8241-4f36-8ec4-90876ed89274"
        },
        "item": {
          "id": "42ce8b5a-b599-4dae-afbb-890aea71a55a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1fe8f3d1-15e1-45e3-97b7-d2f5392852ae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42ce8b5a-b599-4dae-afbb-890aea71a55a",
        "cursor": {
          "ref": "12365083-e744-4fc9-a17a-6a7a6e3ccfce",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "814112bf-8241-4f36-8ec4-90876ed89274"
        },
        "item": {
          "id": "42ce8b5a-b599-4dae-afbb-890aea71a55a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1fe8f3d1-15e1-45e3-97b7-d2f5392852ae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f5a05e0-5ea5-424a-b824-25a6d71f520b",
        "cursor": {
          "ref": "34db05be-3b4a-42b3-ba10-f42810a3a89d",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "2eea7a63-2249-4919-a0cb-e197281acb6f"
        },
        "item": {
          "id": "2f5a05e0-5ea5-424a-b824-25a6d71f520b",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "1a2843fc-8596-436e-84d5-694b26cd1788",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 44,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26dd7952-2cfc-4e08-ba35-02a1536db4ca",
        "cursor": {
          "ref": "e60aa558-74bd-41c9-8e98-17d59f67aa13",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "da1d48a7-70a6-433d-bceb-3499db0a7912"
        },
        "item": {
          "id": "26dd7952-2cfc-4e08-ba35-02a1536db4ca",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "c561d395-1967-4767-a60b-f7918191d670",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "26dd7952-2cfc-4e08-ba35-02a1536db4ca",
        "cursor": {
          "ref": "e60aa558-74bd-41c9-8e98-17d59f67aa13",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "da1d48a7-70a6-433d-bceb-3499db0a7912"
        },
        "item": {
          "id": "26dd7952-2cfc-4e08-ba35-02a1536db4ca",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "c561d395-1967-4767-a60b-f7918191d670",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "d2f4f59f-1435-4bd0-8465-02095a067d2b",
        "cursor": {
          "ref": "125338e8-205c-4a71-813a-19147b26286b",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "c4ac1b70-c37c-464f-ba55-e29a015b0975"
        },
        "item": {
          "id": "d2f4f59f-1435-4bd0-8465-02095a067d2b",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "e6aa0734-92e7-4f85-8cba-f40e2156aa87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "b52e39ee-b3e3-4f4e-a34e-6cdc93674b88",
        "cursor": {
          "ref": "fb7174fc-07f3-421f-9540-75e52220eccf",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "07e74fd5-3932-4311-bc02-6c164518f706"
        },
        "item": {
          "id": "b52e39ee-b3e3-4f4e-a34e-6cdc93674b88",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "10789a08-f843-4544-a28d-c9a4e0f27822",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "b52e39ee-b3e3-4f4e-a34e-6cdc93674b88",
        "cursor": {
          "ref": "fb7174fc-07f3-421f-9540-75e52220eccf",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "07e74fd5-3932-4311-bc02-6c164518f706"
        },
        "item": {
          "id": "b52e39ee-b3e3-4f4e-a34e-6cdc93674b88",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "10789a08-f843-4544-a28d-c9a4e0f27822",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "df686841-b185-4975-8458-8ba8a55f1fe2",
        "cursor": {
          "ref": "7e94f228-d940-44d7-8389-7e9b035f472d",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "3d892c47-9355-499c-beb9-1f731bb56ad3"
        },
        "item": {
          "id": "df686841-b185-4975-8458-8ba8a55f1fe2",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "6d358b7f-a59e-41d6-acab-45fce1bdfbb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}