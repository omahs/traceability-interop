{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "af8e7417-30a8-4c36-b8ad-36db126447a9",
        "name": "Clear Cache",
        "item": [
          {
            "id": "06fbe3a3-20cb-49a5-bfc9-41b1a46f19ed",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9a4e4131-826e-4c45-bede-6de836e128b2",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "7197f6ea-bcba-44c4-9531-a12986939d3b"
                }
              }
            ]
          },
          {
            "id": "0cdfe5f8-4e8b-4079-adc6-fa1ad2944af8",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d5bc481c-5438-4cc1-acaf-8e87dcb04599",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "819571ee-ca94-44dd-99cc-8269871b2923"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "722d8656-b5c8-461e-9c4c-d66f5ae6ad0b",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "a739ed0f-b4dc-42f7-b4bb-4f70502b1fbd",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6dcfe4ce-6df7-4afd-8e00-eb764cfc5853",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4ceab917-cedb-4046-aea1-51a50e9c9d1a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1e29fe7a-56b8-41b0-9db9-6e40923f88f2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1f378ca2-b11f-44cc-9c22-1bebb573b5b4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7ccabed2-ee9e-4e96-81d6-1977b9a86ab2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c98142d6-e8bf-46cc-95e0-3c7852d2b483",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "88c4285a-e788-4dbc-ad7f-fedbc2a79ae5"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4f495012-eb96-4b04-8cdc-6610d69c0a0a",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "94db4790-33ae-44a8-8f0f-5693fd6f9956"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c2b06e54-298c-437e-8226-868ef0b1177e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c8527a52-a4cd-433a-974c-2c709f6ea6b2"
            }
          }
        ]
      },
      {
        "id": "f9af3102-89e2-457a-b965-ee2b964ea23a",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "8f898799-1c5b-4834-8451-a482b3643326",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4c2d1f4d-0e55-4245-b972-dbc0e485af03",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "fc9709b6-72b9-482b-bc55-ccbfe384e420",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d71640e-7b0d-4611-b8fc-60d1ea13d51f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "35717bb9-cab1-4ec9-baee-cd1051d7cec5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "019a7143-ace2-4afb-915b-36f2be34c8c3",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47ee988e-54a0-4c04-ad2f-ad99e59a026b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2ed0f3ce-f66c-468b-9586-657591bab596"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64a36b4c-6f5f-48ae-a16b-d6f291544b7f",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a826493-9b75-4e6c-9381-51e25cac75e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e75cc621-a9b4-421c-9ab5-81ec1e742316"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5278e23c-23c2-4676-8de0-be9cef2ee2d8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c3365141-8739-436f-ad1a-a4dd323422cc",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f7b909d-0c41-4425-8548-8b79215b9e75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e1a64886-c186-4a22-8cf1-b2417842b806"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f3eed60-02bf-4e0b-86e1-5aea26a79e8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7eebe5a6-4747-48b0-86d0-c4ea19221b4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "945562e4-7e44-42e2-a3cd-07576505ed39",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5a66f39-f2a4-4fea-9549-565b52b1bfcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "033b1675-6753-407f-9b2f-7d7c64191140"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4d776fe-e9ce-41bd-b7f8-6e4eb53d2bcc",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "88bba3b1-eff7-4908-a338-edd526c349d8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a039294d-4908-438a-9c26-c2f9e5c558d5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d5ffbcaf-4828-4224-bddd-e9b41f7b954d",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ffc2b339-59ea-4357-b4d4-ad18edd47436",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "7976631e-f16e-4808-857d-468931ad05d2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6f3ef1f4-dd13-4985-ba7f-023c220a83ce",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "e8a4d5b9-0763-40e4-9eb7-c81456d32703"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "76a9f3a7-19a1-4710-907e-cdbdf5ee8d7a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9279b2f6-46c5-4af4-84e9-61d6ac0bb655"
            }
          }
        ]
      },
      {
        "id": "8133a2cb-3cce-4fb8-b8aa-40ebb686e585",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "e79a5ef2-ed61-4917-aa66-ccc3a008debd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e36b0b4f-ef3b-4f4c-903b-2f0bdfa6e8fc",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "f2a6ee6f-036b-4ae2-a272-b5d6af5c290f",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37c2b3bd-8c29-49b4-82a4-94f736af7e69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a897f9e-c474-49c8-9aa6-8b29670447d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f877b747-9189-4214-9c63-0bb2ab98e1b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "220ad108-669c-426f-b6ac-fc7fd372f68e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "285551fa-f3d3-4c8d-90ae-00a774d82005",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d31623f-40dc-4ae9-98da-371fe63e2aba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b716e5b3-1004-4156-951b-140e6d9c22e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31380655-bccc-4577-ac03-6992fd72c0fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a47a81dc-be88-4669-8871-ef3f1679c59d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edc88fde-de65-4aa4-9368-c477b52699f6",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9fa0f49-f86f-4e52-a245-f5158d7a8204",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53887809-756a-49f5-af2e-e992abd79732"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17ebba15-4c82-44a9-8803-30b584206bd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c448af01-b6ea-40a5-849c-003913071196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36f7d216-27ec-4869-907b-1f3b7482f23f",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee2edbd5-70d7-420f-94a2-cbe750cbd952",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e7a9cd5-e987-42d1-ac99-1c3840b42ef9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fae2f6ce-8080-4f06-bdc0-5a43ac05c6a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c2d257fa-6c0e-406e-ad8e-17b8a3af5c58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e9d4215-dc38-4610-8fd1-3667c1a68268",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e9d6040-72e5-4f4e-b8c7-2963c8cc98bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d2dba2f-2b3a-4c91-896b-2f4c612992df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d91b71f6-b501-47bd-9dac-f74090279a3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4ea15d0c-e539-488d-839f-4bbf9b6bc54e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d147306-7f45-4e0f-aa07-ce74744a9da0",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ffc0689-41ab-4c3e-a8f4-9ec2a5554192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5b6e658-f7a8-4e36-825a-7fab6c603ee1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48b28917-2604-4cb6-8931-8a5c55d3d0e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "41b7b991-81c8-48c9-afef-3e6a72c7f6fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e85a533e-e90c-465f-a2c7-d74b372217b9",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2037893-898b-4c97-b85a-76683c9a4324",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8018c12-64e2-4b7f-b702-053ab2f7018c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21e66aa1-aa4b-4e68-bf96-774289d46d8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "264103c1-dc38-4a8d-a6f0-200525727bd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "695281e2-5fb7-4eb8-818c-de31d1c12b3f",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1daa7aa-70ce-4c08-b743-27a46cd3621e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "545a18ac-dc1a-4f0c-bc04-e103960c33e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e75106dc-5d71-4753-ade2-e600b95df107",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9f5ea5f7-7435-41b8-9f0e-1c2924301736"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8f69dac-7ae8-4308-8f35-c78ca1285e0e",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa65e0dd-bcc8-4d1e-9368-6871c922d970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "825664d1-88f1-4392-a3eb-b2f296011551"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "249cadf8-158b-488e-9e53-832e0607473b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dab9f24f-141c-4b5b-afd4-530dff6da03b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bd854c8-ed7d-4621-af71-00fc4cf6cf02",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe0d0cda-35b9-4bb1-b074-e126f9998cbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1505c16c-7bd1-45d5-bed6-2c01bd969971"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fbf3646-d9fb-4700-8efd-cc8c3a148769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ac73eccb-3267-468c-8a99-050f9e0894d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6218479b-2669-4373-80ad-9dc5d18e27a9",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6c3a788-5fb4-4012-969f-943dbf382b66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c95df83-a1fd-4451-9ad7-037fe9034aac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d823bd86-747a-4ce8-8547-d56c79cb9441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5fbfe2bd-0dfc-459f-8d21-d237814b5d03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f46e9e2-992f-4d47-8da3-800cca5297c8",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4da4bcf-7d12-4bab-93fa-f85f0ad52d57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64888f0d-c9e0-4e78-a16f-75f63f562899"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7920f64c-4659-46df-b6f1-37e24e4734c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cda24a53-7c0d-4b30-ae0e-6e965dd16995"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10bf311d-080e-4a0f-a50b-c51a5bbe1ac6",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "155d1687-fa00-48ce-bcbb-e794ff34be77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c6202f4-8d80-4fd4-8f84-21ded91bcdb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36d797ca-e186-41e9-8476-b79069a2472c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "923add18-76e4-4965-899b-39a5f2c90793"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf328601-be82-4789-9006-e1d77457fefc",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d074c9eb-47c3-4944-910d-1377911ed1ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "847ba07b-bfb2-47f4-a9f2-392ca4facad4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b37c728-1570-49e8-a2c9-12c8eba86812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "300a88e4-4350-4f2e-a904-255676c98068"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06a06f22-30ea-4d4e-b36c-7a6c300f59dd",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01212399-7817-4b53-a277-ba4c750b8bbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac069d7a-85ff-4ea9-b1f7-48c02c3ad76f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3f3f3c7-558c-4f71-9262-7cbc707d14fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6d32a394-0250-402a-8233-be800cf76672"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba5ee62e-d091-4ed4-af02-f41403a3ae8f",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "000e1bb5-b38f-44c5-b2db-e6bafcbd2284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "802a5879-2170-45d0-abf7-0edfb8d5d7ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26b1c0a9-a55a-447f-858e-b7b0326790d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aeeb6e8d-20d3-4bba-bff2-ac3f3f52d1b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "424f734b-8573-479d-a6c4-5fbba21a18be",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad37ffe2-8e60-45cc-b9ee-882d61e4ce43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02ec214a-e4b5-4819-912c-4826c85fc5c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a1c82e8-acfd-484f-830e-783ef66c94d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "75569e77-30b5-49f2-a60a-fc46676cc17d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74a92e95-6097-4642-941a-efa33f0aa307",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "856f23a3-c7d9-49e7-9286-df1efa07112c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08af8574-a8ca-420a-bdea-410087c7e7ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d859989-1a27-47b2-a258-39ad4025cc03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1e4dfc4f-82e8-48bc-bfe7-fefa6bd91ac4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8cf296e-3484-4b9c-83ea-aa8081969104",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06b5cd08-da35-4e3f-ad00-c9ab0ab96625",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7eb5296-1cad-48d7-b176-616e16a3da93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf122001-ecd2-4f06-a8d5-e1b901988abd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3b362ac1-3b5f-4ae7-98e0-f60f4ed1c0b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36fdf3f8-ae52-4587-81ce-57210663973e",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ecc4b68-7f95-420b-916e-c765f0856279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "757e6e46-7f54-452a-aaa9-95795f656f08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d629affa-aa84-47b3-854d-b912c82d180f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c4b06b8-6668-48c9-84a5-08ad6c9b59f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "227b955a-8906-4ce5-a7ba-57013969ba88",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df696537-f299-4638-a098-3e5404bfed20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90e50d62-43fa-4df9-99ba-2be3b6281ef9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8db3cb1-c797-41f1-9edd-c8d35f3264ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "235e1bd9-afd7-4607-ba47-0af08ab6ca25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66df129f-4f4c-4263-a6d9-3fb88664b653",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0dee835-99f0-45dc-a62f-10d987fb7b62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fdda45b-8c31-4e88-ac29-fba4351bc63b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b97c43a4-2728-40e6-b664-38b859cfa30e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "71a55871-dd3d-432f-8cbd-62735d93da70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a54cba5a-3132-4cf0-9b6a-99289abefd9d",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac20df2f-adef-4966-b6dd-f8eafb20fcf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbd6694d-b35f-4928-9b86-f9bd28a0e1b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "832b8a94-2849-4c31-ace0-cb5ea70043bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e1e0423-67b3-4b02-b16f-eceeefa6d457"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93d4b679-c8ea-470d-8cfa-2cd5622ceb00",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3b55e54-64c8-44cb-94b8-44a103fbb9a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21d649b4-78a9-4009-b09d-9ab7c343e5d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "079ad386-5a5f-4aed-aeda-c174b0e5ca1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bfcd6b0b-56fd-4eb2-aebb-c07163aa692c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb8cc45d-d3ff-469a-837f-86c046100143",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da681d91-0b95-4dbf-bd7c-a4fc7e00a7a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f17d71b-f050-4f36-a3fc-a9b805257af9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97d1634a-431c-42c5-ae88-6677bb80fb96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d72e98ec-c091-46ee-85ce-b545fc7f03e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47075a0b-4749-4f9c-96e0-fc5483316970",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b09d9d2-dfb6-44f6-a254-9af8d39759dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18fdafad-206d-4907-811a-f3262e7ddda2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d886390b-09e0-4de3-9679-8ea7ef20d995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd294083-1c19-4dbf-b721-9e5d02f1afbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5adc1a5-7ace-4ed5-9b29-6240daa9bf7a",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dcee15f-989b-47cb-a022-42cdabdce020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69a8f7bc-2350-48d7-8cda-2638561e91c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a59d919c-525c-4ef7-966e-6dd8334a8316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a30ee458-7171-4c87-a86e-bf94dbbf8008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f5d3208-53f2-444d-b8ce-44bd6195ddcc",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f2a434f-8cec-4d2d-82b7-e284bdff8b5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e520788b-ff1b-4fe6-ab32-229bf28b83c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5086fe6b-cbad-4466-a6d7-93fe08fbe8d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "aad8f63d-6fe7-4321-a158-b7ef7ab2abb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38aa4516-8e09-4a48-8ccb-c2cb87c40d3c",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7de26812-aa48-4b85-a582-5d0af39ea783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18615384-e18c-42f5-8971-ebc6b9cc73d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3caa0b9b-dac9-4481-a32d-802bec2fbf00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8628e886-d303-4d8d-905b-aa20374c4aba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "468bf802-acbc-4a22-b1b5-e8ecd6de26c8",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d431aa3-9cd2-46ce-b6a8-b2e4545bf870",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fac9d3e-6c11-42d8-8ad3-d09705954c23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af892609-4ac8-46f7-a61a-e30a0d207ab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec4ecec9-f76e-4b8b-9978-2521cf06fa32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36bfc9ee-0f85-487c-9f87-14342cc13771",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c2d7522-7b7a-4c7f-b25a-02c42e77665c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1b04948-cab2-4024-bb6b-592b7be8a8da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f656f29e-c7c0-41c8-8d99-9618e3e35403",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "499aaa73-1e5c-4884-88ae-33a498151eac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98841ddd-dbc5-40a9-9df3-9ff5915e7987",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b02156df-ed95-471d-8c2b-4b745f5e7653",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6661814a-2cae-4d8c-9476-92d48b66cfb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ce9aead-91fb-4da4-889b-1f1efa96188e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f7166ef-70a2-46ea-8580-26e55eaff42d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f15e7ad-7bcc-4390-8b7f-b034d4f2df5f",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28a4dfdf-d97f-49a9-a5e1-d350ee88fd7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a6f8df9-ae58-40dd-9f16-f01e4c9f7445"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb4cc05d-4715-42bc-9f9a-b55a3806372f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a689b6b1-c9bf-4cfe-9c34-84e4d36f0374"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6130174-99e9-4cbe-988d-b91e8ed10a65",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a491f7ca-5951-4857-8ccd-4081224cb5a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c26fe6c-403a-4c1f-a1cd-056f0738fd89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b5850a9-6257-4a9f-9435-d44c9f4895c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6577ded9-6917-4534-adfd-72ab2eb29c43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46d953d7-cc30-44e5-ad8a-7c58171ff239",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5c1ac84-8712-4545-953a-4ee5082d2d3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c38451a9-15ec-425c-8006-480d75b22496"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55a853d4-3940-4289-99bb-76b379726dc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f43871ce-73f9-4659-b59d-71ed6734779d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f570ab3-859f-40a8-af63-80a83bed221f",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6e7efdc-489d-443e-8891-07927f08391b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f703bd5-ec63-41b2-8042-8e49e7998521"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edcea8c7-3716-4c8b-ae2d-aea5535c62d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "51b8db01-9816-4ff1-b49b-5b536dd04881"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6494a013-d7f6-46fa-94bb-7b5bd0133b74",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0654f7a-ee75-4948-828d-9c06bed976ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ca474fa-3ad0-4e9a-9953-389082ecc7e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc63eb6c-ad16-469e-80f7-88a326c5c514",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "899f730d-7249-440d-9b08-a17922334b06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd80c6a7-7f84-4feb-9f71-11fd00de11d6",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fe1f4b6-0fc6-4863-bf24-74b715daeeb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4d67aaf8-6d7a-4b45-8c7a-15fdbaf064ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3db007e9-b426-4c3f-abb7-3d9a06f24823",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fb3f422b-15dd-4c3a-83c8-34fbeaeb549d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fd03cdd-1367-47b4-84ff-8b868bfb56ef",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f481fed9-09f0-4f2d-9d32-e590a7367777",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e978d1f-2d9c-44b7-b3ce-32425c7bbe8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd1baf07-e8e3-467f-8271-fcbcc8f5d62c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0fbc2d6d-6d9e-44d5-9026-529622ff6863"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca43ae8b-b797-446f-a41b-c93e45217653",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bff297a-e6ec-473d-8717-f0c829e59779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bed0de49-69e9-4948-b716-b278f4a5d884"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1816bae5-d545-46d9-a5b3-bbbeb3a677dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e623190b-a0b6-4db5-93d0-7c3f878edaeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ca5f02f-54ba-48b4-afce-9035b8c97c4f",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11eb7a41-f5cc-41d6-b92b-7bc89408adf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "080761f5-1c97-4cc5-9df0-41b909d68790"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9138dac4-35ea-4287-9e65-dbb9da565d94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "dcdd705d-1151-47b7-9d67-0b7be91e9c42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37ccdc8e-35e7-44b1-bb4c-5cb92c6e61d0",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5c343d1-f7a7-433d-b9d6-57a14fc2a16f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "740794fe-9b90-4f72-9210-ca45f04070a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4f6152b-0ade-4d91-8992-7362de2126e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "40f57581-8977-4acf-8090-496871598124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bccdd527-ae35-45e8-9929-e94e133424d0",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24a860eb-cbcb-448a-a3ff-b918d380120b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca884e30-7b56-4365-bf94-a8854253ef45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "441d3b6b-0cad-4242-8e49-30fb4ed20cc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5e947bb2-a55e-44b8-addb-571a0667e971"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4550c951-1cf0-4454-a291-9b3ebec73285",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75c2b21d-4207-4a23-9a1a-9d386f96bc38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c313b65d-d9b7-45fa-92e2-46e7fef50748"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11f73fe5-d66e-465e-9791-b2ff390520f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "faa74c2e-486f-4d82-ae1f-adb6e706cfff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1c37e2d-bcfb-4707-8e8e-1666c431419f",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10fa9dfd-5266-4346-ba00-85c9dd9cd97d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1243171-e86a-4534-ad77-1f1e238c075a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84fde557-2757-4381-80a8-4bae37ec9bfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d0a478ff-babd-43d1-a609-0d1bf7278ea6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ab634a8-a07a-4fcb-a2eb-8a1d52d37818",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57db32fb-dd11-43ac-8f96-4a19c186d2a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99c05dbf-3899-42bf-ae6c-e31777cdeb02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a031fac-06d7-4d0a-aeac-c38e6010c17c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "932cc828-d87f-4a26-9c55-af6809b79a0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8051c899-49b8-43d9-a892-9799a331bf98",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f2d3ee8-af9e-4318-ad81-9e41816d3966",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59feb9c6-3256-4f55-b1cf-397192768ae2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bd41569-3b36-4f2b-83fb-394a3d814c47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1be180f-a2a2-41f2-bea2-83daf687dae3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ec33954-ad91-4124-b372-d1e91ec5afd0",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11d44911-ef86-497b-8ac3-0ac69753009e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f645a689-19bd-418f-a8ef-390b34988bb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "055c0a60-6a90-4239-abf9-eff28d87425a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c1256c7-b1be-40bc-ac9e-3b58119b9915"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42ddbbb4-67d2-4241-bb1d-0810ed4fc4c6",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d755c412-4db7-442c-a316-82c5923e7162",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e1fb5d4-d9da-4de3-9702-b8cd6743738d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a70b7dc9-c7ae-460f-8f81-7f504edfb2e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "37d7a4a1-6e27-4993-868b-b6390c3132c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "124d1b4b-1940-400f-9f4b-ae1a77223ed0",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fa075e0-4644-4b59-8344-747609ed9270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e2140ae-cbf6-4e8a-9696-05b3df3625ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eafe51c-a625-4d71-b5b1-4cac1df0c314",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0eeb370e-7e8f-4e44-8901-1e3efc320e96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c5eda95-44f0-45ec-8d26-12593aa9bdbc",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a620cc5-ac4e-4b55-80c9-1eb7fc41f93c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ab88009-3623-4bb3-9168-5e5e27cb00ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc023404-96f1-49c8-acfd-e79e2e49a710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a84f7133-1cd9-42d0-84d3-846df796680d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58d3204b-1248-43fb-a31d-d99a4163a19b",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1f50365-3eda-49d9-aadc-20e52dc2a37f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29d0139c-5f89-48b6-8e44-02cb525796fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "794f3d22-5256-425c-b67e-499b26727443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "659cb73b-b6ed-446e-9e09-a6e6bcba0687"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac9b3f45-b33f-49b2-b8cf-0e53d0d7c6d1",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51a72d27-4b4e-4d21-ac09-7a71f19cda4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cb6c708-9d25-41d5-adbf-2df41f0ef64a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38379cdd-cae9-4a2b-ac42-59145d6d0b43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "deda0f38-e983-455c-9ed3-1db083842828"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cf7c8d4-a3b9-4e72-ae9c-eb6676c50a46",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b54c4193-896f-41cd-af1f-81a5aba73a66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a0c0c44-1391-47f5-9108-2698fe4d0d96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58ac523a-bf8c-4da4-9e6a-44e22eb41e3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "edeb2bb7-0dcd-4aac-b84e-fb0ee729f689"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d111384d-5ffb-41c6-bcf8-c16400cbc963",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd2a48ad-5bb3-4713-8ea8-d2635f2d0fbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e474284b-9ed9-4c97-89f9-9ff297239f5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff173177-7cc6-4f32-b1e6-de767500c58a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3dccb327-ede2-4d7a-a9d9-5e1fe9db30b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ff0b7dd-447f-4d38-92fb-d3b8dfb47832",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8323a643-7067-4e1a-be94-6ac8c591a9e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "251da549-066a-4490-9a15-a88720bc2200"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67596c70-69cd-41c9-81ec-4269e26a9eb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3dda02f7-8c30-4d1d-b932-04c0ee504738"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29712b33-1661-4193-97f8-2c255eeacaf5",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c4542d1-462d-42f1-924b-329d94636202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f44490bb-1e1b-422c-9b08-0b3fe7af563c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e160a61-0a7a-4708-9be6-2d30337f1166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6c62385-95b2-4b6a-a274-880dbdc87e5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2375cf99-ccb9-4b08-9d73-1f1b2a5071d1",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a65d18a3-8c76-4415-9ecc-c7616d3ea254",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9851fcde-eccf-4d1c-ad3d-43c9ac773871"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b8a0b60-de2c-4dbb-bd1a-8b6b2bbcf800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "bb687807-06a6-44bc-93d6-77559cb6ce10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dd315f3-a2c0-4dc0-b1a6-02d224edbf3f",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28868e61-5f66-4070-b66f-97ea53d2e46b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73656649-e6d5-44c9-a77b-9dff7b0e3164"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43bb58b3-d080-483c-9cf6-835d02e0feac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "bdb32f76-590c-48e2-ba5e-400869051535"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a3720fc-0c31-4645-b9bd-f83e425ca3ec",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0091634c-cc0e-4cf3-905b-ff69a73f9cb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "007b219d-1169-4b45-9dec-bb33ad19f6b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "796181ac-20fc-4354-9975-f7dd07fee26b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6d63b83f-ce2f-4e2e-838c-c02ac9748e4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8ba8e75-bab4-469e-9411-21e4799693ab",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d86c0703-f65a-4e35-a6cf-eaa71db03f85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28ebf143-501d-4e74-a274-0a1a1a1a412a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f00c3902-e94f-4786-85a6-8c9084c2603f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "039e52c0-02f2-4105-ad0a-84bd40571be1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1f8dbac-b49b-4e8b-b30d-806b45ca2c7c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "251acbad-1e89-47be-9a85-a694e63ad291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76ba7eed-e425-4585-9b2e-dcfa815f9d31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee336ae9-3a7c-48c9-9777-c80e14599f95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "cc4984e2-230a-4f55-971b-b5ea101d46fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c9ccf48-b731-449e-a9a6-fc6fe38a340e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bc2bec3-7d58-4a30-a71f-4e7f124d47b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71faea2e-5623-4a0e-8c14-9ff1f991bf1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa377813-dbfc-45fd-8fdc-b87d1ce83db0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "aaadc5cc-87c7-4804-adbd-4bc2fa665b96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f0522e8-4955-464a-8cc4-35bf38d625e1",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ff4759f-f985-4f23-807d-3bf40732d758",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b468494d-7001-481d-b948-1d8dd6646d04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24b5918c-d996-4bdd-bea3-35ac5e6d4d37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d661016-986a-4480-a629-bd758d03b957"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d608a5f-2a35-4a27-a6e8-230b934ff0ab",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ef8b22e-e128-4acb-982a-700ab7a42f44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43a3c5f6-3421-4c9c-8d5a-6912da8a4c4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c341a0be-1516-49b7-a96f-819e79f08db1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "d52c9b9c-94f9-46fe-9d5f-21c6271a03b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02b56449-2e09-42cf-b788-580fc1752d1a",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "368d4324-f277-4a26-b84b-f4b304da54a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c232638-42f2-49c8-a1d3-17f489b857f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "463ec318-911f-4cc4-b5a7-48dd81a85722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e37606b9-9bd8-4b98-af14-73236cfa6978"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e2fbfa2-1092-4709-a20d-9886d12cd558",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04322cc8-62d7-4e6d-be59-8d3b85101fa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67812848-bf9f-4f8f-8606-67f14fd3a2ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f503c459-b385-4c76-a056-2b480b174179",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "74f92229-e5a6-4287-8c28-4baab3b95564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c63305c6-2030-40b8-8074-02658a98ee56",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5652611-e580-411c-9c94-acb2a0de6d9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "412fa6dc-9e35-4920-ae34-768df0e9be81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fc94f49-82b8-4a04-8514-7daf7ceef0a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c8414c3-c8df-4831-b0c6-8593b13bdeeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f465616b-dcf6-4d65-b6ac-ffb7945e8d0d",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8851409-53a0-410f-8c7e-e4a22d9d5c56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "478ce391-e34f-4044-b5c9-590e305cb304"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "735aaa56-a6eb-4109-a553-fa322408bdc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "719da8ec-4290-41fd-b394-c282fe3a7db1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d028de6-5e12-47ac-b706-cd7215f15be7",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10eaa19c-a479-4cc2-b9c5-9d6a0e9d082d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebd1b98e-a178-4d8a-b10e-4f7d4cd9c324"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff741992-c07b-463e-bc6d-4bb7ae7c66f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4f619d8-d223-4732-9d16-e166732cce41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76aaf868-5bc6-4c3b-bbfb-c251dfe3ee77",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "487145e2-3d21-4d84-9f34-d9dd7fa04b03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "080be48b-665b-4d8e-8f06-963aab31ed43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07fbee0b-8133-4c68-b5b1-43aaa0c3bc5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "faea2b30-525e-480d-9b3d-2c36c36eb291"
                        }
                      }
                    ]
                  },
                  {
                    "id": "951de245-9b69-4ee6-b629-d6165a131a2e",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6391cde2-ada8-4be5-a96e-6116e5caf92f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e5a01ca-9e27-4857-804a-dc5d8c6304df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24be65ce-097c-4f54-bf96-c5e6f8e2c2b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6cbb3eed-03d2-4f67-aa81-0f2d42da0025"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb025042-e00f-44bc-839e-52cb9ce51070",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f29543dc-bef8-4cce-b471-b1d7bd32aa0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c259418-708a-4627-bf09-5dd9c35c03d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f424242d-f093-4a63-8a99-369600f27ab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "308d825e-a757-443e-b2fb-af0a13b34449"
                        }
                      }
                    ]
                  },
                  {
                    "id": "521ccc49-3062-4702-b619-dd394cc54d2d",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15668566-95e8-4e36-92de-e3e399c55fed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "467302d6-2a50-4c5f-969a-b8cc3c10b74d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abaf955c-fd96-443c-9281-262226254dfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f5de906-2714-4c1a-870e-d3727545eca6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c36844c-b4a8-423e-8731-db01018e7a77",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a81c847-2e7a-4636-bb28-f16f3e4d7d59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efc8882e-6058-4a72-ab85-c805f5193603"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53d22be4-d1ce-480d-af23-dff1ad760179",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "588d0e61-da51-4f75-ae85-d886cfad509b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa45dd5d-c02a-4ede-ab76-1da74eb0202f",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2714862-8b31-4846-a48b-a7954b7c1619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "713f9fa2-ba74-478d-b3de-b49bc5775da2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f32d6056-da61-4aad-97a9-dfea701fcfe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f828a1fc-1c66-4036-ad6d-50aebbe3270a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29d09565-a11c-4fc0-9a54-0da6b89df972",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f5ce2e3-c216-4414-9ab1-48a8cdafe9cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0d0fd79-5728-4097-a351-fee4ed63df56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62a4632d-0b62-4864-b78d-97556ae5990d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "838f5a4a-0dc3-42e8-9bc8-3647d22c6828"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53d791d3-f0e2-469c-8227-ab44e930c179",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75936351-325a-409a-8635-634f77e2f725",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5549c8b-089a-4b0c-9e66-c72541d2a06b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "278dd90b-5878-4caa-a527-20627a081129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e686cd5e-7789-492c-b0f8-d1544f1bcd68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32998d24-d1f9-4c5c-b26a-b0144668fda4",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63faf93a-0ea2-44b0-9af4-04183fa22d56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6637cea9-80d8-4e5f-835b-f99244068db7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6135cca4-073a-41f1-a660-d933108dbfe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bac0afa0-8c98-4f83-a8d0-f5f90692df73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18d85135-19c0-46e3-852f-6e6dad660fa3",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "617dce21-84f7-49c7-80ef-50ce1a0cceda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26e80765-1dd1-4fe2-ab4c-fcbd732b86c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f63d610d-9622-469f-a258-16d8672b4819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "956c1d2a-0d2d-4a29-9695-d08fd027fb48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4a0105b-1afe-48fa-831d-b58be0a738ea",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33c45ef1-0fcd-47ef-b45b-55a37457a65a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10db1fb4-a800-4e62-a369-eb338ce8f74d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbfe7347-bcdb-405b-aa83-2b5a6ca3145a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e95b84d7-ae6b-4c70-80ab-2d90edd180ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92eafc91-a574-4afa-a0cb-953f63d48ad3",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7bb3178-50e1-471e-ad7a-47c92e3699bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4b74a27-9e82-4e44-9095-8852ea9440be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c767f8eb-83b2-43b6-8c32-645976f4b48c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "afc666c6-84f3-409e-ba97-87cbff8c6725"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f58d8816-f98e-4ce6-9dad-372bbbc94850",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27312eea-24aa-4b7b-816c-4ecfc8d8dd56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a38fa71-c000-45b2-a606-591712c6386f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5bfc675-b265-47ee-846e-923d94a4e8c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b34753f-daf7-4138-a179-62d55b2e5253"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bbbf86c-2d8e-41ff-889f-a06f7801e7f8",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91438fea-2ef6-4da1-b737-1da268a5d082",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "953c3e51-710c-41d2-a0e7-8098bb2c6f7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09064a75-0539-43cf-a43a-22cca251cbb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ccf2782c-f5cf-4653-9829-1ea5afb4dfd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56b7a6ae-4d72-4012-b346-fec6d37754ac",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "704c9a4c-ec5e-4ec9-af3e-3130db2f954c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c8d1408-2878-4f68-bc52-e81fa00e2fdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a045c696-ad12-4de0-ad1e-f207cd551a98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f53dc03-0b2a-461b-a352-17dc76f67a99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80cb348b-37ec-40f7-b55e-05e5be351822",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fc25b43-83a1-4148-a10e-3bdc6341f7a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecb0a3eb-7901-4091-9617-cf336a7aaaaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfcf3caa-3c3b-4808-98ff-565d1eaebd75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "66b8bf41-af1d-4aea-9e0b-87ee4368d936"
                        }
                      }
                    ]
                  },
                  {
                    "id": "555c1c08-2441-4ba3-a3d6-43cddd8d7d3b",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6654576a-19c8-41a2-b12f-6049d0f54651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e629a94a-cc00-4c29-97c1-d41c49ee937d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a37b1b67-f5ba-41ec-9709-36f10f9d5789",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7b71eef5-2775-47fe-8dac-5e47a301039d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75b9ddf0-2aae-4e30-a9a5-84b054fbf065",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e67bf90-22dd-41e7-995a-ebc7dadb1b25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0a64293-3786-431e-b6ac-43b334bc4113"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db59e570-2947-450b-bb48-136586684919",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5c4ad591-8f18-4a1e-b84d-3e49a9b73939"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f19b627-aa74-429a-9da6-4018ea9af873",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbb93935-d150-400c-ae62-a918245d0951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8ff55fe-c72b-474a-83d0-a0851439291c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "113c06aa-77a8-45c9-85cd-484cf2bebd6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a5a95c1f-58a7-463a-b828-037cf14be626"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cd379c2-b5e1-497d-bbc6-221e2213bbd8",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "282a48f2-71d8-4d8a-84d6-5a02447bcfbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b42018ad-12a5-47a2-b152-eaa073b9fc97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1b205cc-734b-43e1-bf04-12c6a8566033",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "4b5ba902-45d4-4efd-ba49-be44c4d68d70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dca690c-6f6b-46fd-9374-82eacdc3a2c7",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d22cea1c-2c9c-4516-b50e-22123378b4b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdbd2f5f-a5d6-4f34-b145-1b9f75042d53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e4e34cc-5e87-4e16-bbf0-0f795f3e38e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "fcee783f-0b64-4454-9297-cc6ec9b3dd5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e741e5be-8429-41e5-b35b-25e039260164",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b148026e-32d3-4c1d-bfa7-368d20b038aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd6b09a5-c87b-4759-8754-6baf8d2ce51a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cdac02f-9583-4914-bc3c-030d7c325f33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "99d90858-99f2-40f7-9b2f-ad1eadb26bb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4492be1-48f1-42cc-a0c6-8f49fa7852cd",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e162483a-b4ca-48e1-bc93-3d55f7ec7b42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02250144-ee9f-488b-a3cb-0d20e2b245f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8ecfbdf-ae15-4585-bd9c-3a50ca79dece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "7102b908-4ac8-4656-b562-b205988fef29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aed80c6-cdcc-45fd-9c64-e2fde9180fd9",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f96efee-41fd-4783-9f99-3e7a20e6db99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f0fdd4d9-ae42-455a-a271-5e85a0561bb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b65a8f03-d33f-40be-b9cd-04ce2554a9ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "224f950f-002d-45d9-a644-9795c39642a1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8d1755e5-ebab-4185-b8af-c81d1d6a473e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "088e2a6d-b497-41f7-9b12-2fa0a08f58b0",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e70eb435-e3ee-4cda-b0b4-36bee768f04f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "88d240f8-b72b-421c-b498-c8c923c3de74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9f12d3f-05a3-460b-83b2-78310473dfed",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "45f9935e-b77c-496d-bf90-d4d77eed4eeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a3157ba-8757-48d4-87fe-9b355996dca1",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93743ffb-62a9-4a57-91f3-79d7c9405f11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8b8f5201-8e7a-4047-b598-fc1f8e88062f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0066c64c-8109-419b-ab74-8096c02eebaa",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "999ef77e-282e-4805-ab23-0d7532304380"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "99200d05-14af-4345-bbeb-e147e16622fe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f4e23b27-0881-4187-a249-ca9fa77c7a5d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3f460cac-6f32-4dc0-ada7-b90917f0fe20",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "614c0181-02a7-4a64-b231-e67e365f13c7"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5268c5bc-3273-481b-802e-ecb2ca0c5f8f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e48890fb-3e00-4871-b07e-615a9ae62e0f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1df3c621-1c88-4956-80bf-c7224c485f1d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "55f401c1-6fd8-4542-a95f-c9cee8739bea"
                }
              }
            ]
          },
          {
            "id": "c0424f0e-9de4-45e4-9f8f-4a5df4561caa",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ecc146c7-7aee-4a8b-a8c4-bdc569f1ae21",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a4e735a7-876a-4fec-b676-e54f592bf085",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "852e5803-353f-482d-8b7d-9450537add7e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3d6df7b9-f5c9-43cd-8351-a71176740956",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a0b82ec6-cfb5-453c-a5bd-994a71eade0f"
                    }
                  }
                ]
              },
              {
                "id": "5c663611-9c14-490d-92f8-fb46eccee80f",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c15915f4-0b57-41ca-b52f-f5067ebddb5e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "11e45f09-f55e-4c75-a60f-39a71653389c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1a1cb0b6-03b6-46f5-9f53-9f9f189b1e9d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3bb6f3f0-e69a-4c36-8b89-c6cbeecf6ff3"
                    }
                  }
                ]
              },
              {
                "id": "7e6bff59-a2b4-4dd7-b1d1-36dd71e93a85",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "de157869-1186-4ab6-8d72-8ada79079da8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "674fdcfb-fa08-4204-9d27-24f1928706f0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3f9df0a6-4e32-4ab3-878f-dcc464d249f5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "13621581-a272-40ce-8729-6d2002e6bec3"
                    }
                  }
                ]
              },
              {
                "id": "0493d410-ec47-4c91-bee4-85eb6e090908",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1e0a8c3a-8afa-475e-b93c-3a66a20d7af5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "44108feb-412d-4e1e-a51f-8bf79fd32570"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b14fe7db-2ae2-4e9f-94e4-8d7e9650ab63",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "2593ea01-80ac-4cba-8e2a-bdbbe42a222d"
                    }
                  }
                ]
              },
              {
                "id": "8edbb6ad-61b6-40a0-b11c-568ca529ec38",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d157c5b8-fa16-4c71-8c15-5ab71b3d6dae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "50ea9e3e-6803-48b9-a72e-798b87979095"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9c6b0830-651b-419e-b1cf-ded6fe77d483",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "66ea99bc-d475-438d-86d2-34711294ab70"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b01ec5da-ec10-4f13-81e8-831c90511565",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0d449c75-243a-426b-93e5-9b6bbdde96c2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e0fa0ac0-fc64-4bde-bb70-43a9b9d8c33f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "33307f7a-1d0f-4e60-bf2f-517c442fdd06"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "526e55c9-e16e-4a40-a08a-09ea5953d085",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "d4d1674f-edd8-47b2-83fc-b71550458d9a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b0a85869-f835-40cc-9dba-2d97bc1b660c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "57892920-0502-495b-ab34-ada6b81d0fd9"
            }
          }
        ]
      },
      {
        "id": "32e7bc2f-aae0-4bdf-92e4-67f96a5254d2",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "e87d042c-5268-4924-bab2-5a7d7e1470a4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8e00a99a-f1be-4d94-81de-3e44c0f830e8",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2490b5b6-5b14-43c4-b1ae-1a324c5050fd",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a793e498-6f64-40ea-876d-b9738adcc2ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa31ca01-595a-4aa1-bb9d-8eaa160bffa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0260d142-ce71-461b-8b83-98286d2566e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "27db654d-e76c-46f5-b2b9-da63f2fd9afe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83052a08-63b7-4078-9946-f82e17049725",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9a0e52e-515e-4c2d-a770-82fddbc7cb93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b824810f-3e0e-424f-ad6a-c6b0fa9fcc40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8245ab61-9d45-4770-a21d-19401bb0db68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f0fb7df-002b-4b1d-b00c-a82424507d61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "748ed49e-707d-4ac3-ace1-78944d68b8b2",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76e498b6-57f0-4cd4-a1f1-830605fd47a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08eda5e2-797c-440c-b9d2-55a147835cd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d4a6bcb-2a32-42de-a497-4ab385e5ddd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9573fd67-9f67-4fb5-bf26-e241bfb8e605"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7a6ff11-a6c2-4cfe-a7d1-acb1d38d8a8b",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9adbe384-21ea-46cb-bddf-8e9c6dfd763a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae4f22e8-bc34-45e5-b053-daf8581852a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4b162dd-f24b-48c8-892a-1da6c8a189fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "54abfd71-64ff-48a8-a0aa-d5610cfe01cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09251036-7bd3-4ef0-b92e-a3c528431051",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5aa849c-6c4b-4e52-a657-df06326fccb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9f65d89-8e24-4326-8ef0-a4b2605a5656"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d3bcd49-c0cc-4f7a-972d-bae12344aa0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc7d31b3-1013-4b2d-8d26-c7aac9f7e7d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "681f8d04-d8c1-4ea4-be35-8e6ed4eb1170",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad309802-2f46-4ea6-a46d-73c241514884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4774fd0d-7671-4c5c-bd13-8ac026c55fdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "117e6f22-50c4-4dfa-8037-41ccc155afc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4cbdfb86-0894-421e-ac09-d20727158d4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08fecb9a-4a17-410d-a1ce-2c36512ca5c9",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f07a247-78eb-40bc-8b75-1bac3c6fd97a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1e2fca0-3795-43b6-9538-c2ea938a6682"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31a219b1-31eb-4a75-852e-09d18ce20664",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "26d4d60e-12a0-43da-b889-9d10c4bbe546"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8230a185-2403-4b92-aa3d-8a865b62807f",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17cf9c0a-7396-40f3-8270-f01c9a84b361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4271f930-f682-4974-a301-1f6a3e10bc4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "215b003f-28c3-412a-9230-9f9cde5a287f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "af822426-47d1-45d3-917f-668d79094974"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87cc09e7-7237-4e42-838f-af9bddbd892c",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d35f454b-2540-4177-ae74-5f55946d08bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b318268d-6b97-4e84-b6af-ae77892299c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a72189fe-aeab-4d41-b97b-018309649202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef0b31d8-6dfa-4bd8-9eeb-47b073590eee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a20f074-7c09-4762-a2bd-afaf4ea6be0d",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6092f657-9916-4317-b6a9-1021e6529cb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09dc5062-d8ab-41cc-b080-832414cc4933"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27b22b1f-1d50-4193-b13a-3435ca9eef66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3662dc9d-abbc-49d4-93b5-19954b798a09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef3cdd75-b2fb-4a35-a3d3-4f99a190ce67",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dce0dd71-008c-4868-b014-5139cbeaf463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ba11e2e-c180-4e91-85ce-4cb438e249f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d66bd218-87d0-43df-9643-ad7819acd2d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "a3605272-3716-4bb3-a7db-d7b982c482be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "159d44a2-de0f-4ca1-ac89-a10d8b7ade60",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6ba3352-37a5-4ceb-9e10-ce6e66ba6be5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10230664-66e7-4dd6-82b1-03b46402cd6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d225cc84-e640-4fac-bf46-8ede38cbae54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "68164e4a-c46d-4173-a140-1f15ea000866"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34bae42d-a35c-446b-ac0e-806da3abc651",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43827a55-d273-47f2-b6ce-32f7b9139338",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2137380-2d5b-4aaa-8226-3c0481acbb24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01637858-07f0-4454-8828-5495c6014aaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7bcf96f-7a52-483c-91c0-385ecef2f37f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa0d98c3-1d6d-48c1-b14c-b5f3560233b0",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6162f70-d9e7-413f-985e-3cc36a6e5b75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc709acf-55fc-46ff-89bb-69e151364dae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecaf86d1-de9e-4ddf-a0e7-1d6184e140fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "20a5e9d1-5ea5-46cc-b2b0-0bea18a2fd4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2224685b-1da9-43d2-a326-44e4ac9b8f6e",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78ff7323-0d96-4349-83e8-5ef97247d9ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "057c9bb0-9c8f-461d-8cb7-ac435104d0ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeea0edc-dbd0-4e39-bf63-b503266cb7c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e4c1459-3c12-4c31-ae10-ded06a0a1ddc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c09cc47-b879-4f46-80ea-aa1afac098fc",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1d4d5da-43a1-491f-be95-1460dbd8181b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3ed1762-0894-43a7-8a2b-652b5822ff6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91263890-5590-4c01-97ba-bf84c04c501c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "c63e83c0-e53a-4991-b8c6-258bc091d38b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c261abcc-1bed-43d6-af8a-21ae47c371e7",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0214f37d-b8fb-43ff-9b58-bde1fe3d824f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d597f3f1-9d93-423a-8150-c01158e4d795"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f20b22d-cf07-4736-a4d1-a17ff5d36ddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "521cd665-bef3-4a14-8627-4854e7e22323"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba1b2a8e-4b22-4a5f-a3ef-f37f6ff59d7b",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68602b77-a695-4699-99e7-3c7053341adb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f212a19-e769-4759-84fc-4513936360c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ab68944-a432-430e-9596-4f3c68e457a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "676431f2-4687-4a27-aeee-65761f50e37e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e314ea41-2cd4-4034-97dd-89309db600db",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03a4c225-3b18-4962-afbd-0304b4851776",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "056c77d9-c006-47a3-abf0-87229afe5ec9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abb89c9c-e5e1-4d4e-8153-a7937866498a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5c00fed-fab5-4a3d-accb-7123691dca3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2ceff5d-0fa3-4262-b8fd-6068d1f6ad71",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1db429b-b1e4-4bd2-bd70-493ab5f6a005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14e4d0ae-ea6a-4398-9d26-ed70558de12f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce8b462d-3cd9-4518-81e3-710a30c4f68b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc5b6519-7a9c-4b72-a107-6bb3bf0b67b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b65a3c1-42b3-4056-a569-5156b4afdcff",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39e24569-cff3-4a60-b917-d082842bce7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32a827e5-f029-4ed9-8856-fec164c0c04f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "499fb991-4c1e-4ac0-819a-ae9bc506687a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f421d9e-7368-4dbe-8d5d-1bf69a7aa687"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93854acb-e621-4435-84f2-f7f101afcf82",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f99c8a4-d812-4180-9c6d-99d39d071c44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28ce0fcb-d512-4113-84d1-373643e07503"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "468e095e-4b94-402e-9792-3fb0443043c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "89e3bdd5-73ea-44b4-8166-3164d53b5c05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f595029-641e-430a-b9e0-549cf0ece0c1",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e0508b7-1bb9-437a-b445-b33101c52260",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "912ccbd8-cdfa-4555-b4b4-733870aff854"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e82782e-b775-4431-863b-ad9415a15aae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4524e60-cbdc-49f1-90b0-0f590a9cf76d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a723aa80-99bf-4196-9161-8eb23c0525f7",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6ae3e5d-870a-474e-b5a5-e510af57846e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ca9af58-2278-42fe-8713-7a8d6d6414d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f13ed89e-af49-469f-a2c4-d9d7684b5530",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d6ccf69a-0202-4ffa-919d-8b568456dcd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5d3e0d9-b6cd-45f1-b5de-24e06bd7fa86",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a79602e-6af9-412f-861f-03302f03cb71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "648a3691-fb99-4f73-a001-921007f94d7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "925e93d4-4737-4315-bf3d-ea84922594ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "11b4fd78-d096-4e71-ac6f-c3844aaff47c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9801fcae-a64d-400a-812f-b0d41751c6e0",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d35ad240-87f9-42e5-b5ab-419495778a61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96b2d331-ba3d-415a-8ecf-0557ca6aa220"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe5907bc-37c7-499f-8c40-976541b6ac06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c500134-55b8-46ff-be7a-94cae901876d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f74334c6-e88c-4418-8596-62f005214fc9",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ee28329-3221-470c-b2ef-ef7a01576790",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9b311ef-9078-4ce2-9585-562422bc28f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31f679f4-5f83-4144-a587-d2aefe0dd4dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f08b6d1-cd68-412e-ac01-5fd7f5a7caae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb745c0f-71c2-4db5-9bb5-6917b7fe2a58",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb419468-39a5-452d-ab02-4b80f378104b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b410120-11bd-435c-bc4c-74877c9e0a17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eedfac75-b322-449f-95a7-791b35057f4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc3baed8-c2b5-47cb-9f0d-600ba9cb0b26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc36763b-f071-4bd5-b58c-c36bca49dce4",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75325591-7f03-4c5c-9588-c38d2b94ee67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6b824a2-4aeb-44fd-946d-0ee6e950c64b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "826615c3-407f-440f-aac2-dede21e941da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c506ae10-55c0-44f3-b616-cd74e45462e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2105982e-2021-42cb-b49f-bf6c66c20c2d",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37bfd9fc-72a1-487b-b9a8-cec4a1cfc02c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3e3b376-3b6a-473b-ada0-6d25bbf5aa28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06cfaec9-3711-4db8-a294-afd6a3857137",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d21df76f-d4d1-42d5-8784-7972981ec689"
                        }
                      }
                    ]
                  },
                  {
                    "id": "becff96b-f73a-4234-b42f-798e5264fad9",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "929a2343-4ffb-4f44-a899-de273ca94d1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4db4f755-3830-4544-a54d-3a2af02e4e1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5682225e-1d58-45df-bdeb-d6bd57c738a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5786eaca-47a3-4929-abea-74d5240aa975"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ab0337a-9ed6-406a-ba60-9e193f1dbd40",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "887fd5c2-e0ca-44df-a1c2-3e96a38849d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "810a3364-5d27-4880-8f7f-0d6e9f9f1a39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70cc5f66-e5ba-482a-b220-4df6022cf8df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "113479a4-6aa8-47ee-9754-af438b922a83"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "32aed9f4-f3da-4358-9be9-10cce32cd59f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ca2a28f3-ec75-4a6b-b414-56f786fead2e",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf60fc5e-0ebc-4448-add9-5f730c3d744d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0518c9f-8d49-417a-ab45-c9dc25755f5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83d3dd15-b860-4bbb-b25a-f16fe1f4e0fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "efa5ecc0-d15d-4d95-a5f7-13d3cbf338c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9f2a3d5-c4cd-40a3-ae86-c35db861f1cd",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f5f6d89-4ed9-44fc-937d-0afdf2384a05",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "503870fd-024e-4a6f-9da7-e53947bb0d75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "166e3fe3-4570-4ce2-ac6f-71fa0a061807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7ee58650-f4af-4681-afe5-520b78056c76"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5d6d15ea-7346-4325-b265-0a41b0a3eb61",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6e398ab2-1474-41f1-96a1-349112126c20"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d2fe79c9-39ca-40bb-9bce-bd5c1642d18e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f7e47f5f-d6c5-43e3-8ef7-8680c65ea510"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c9142d9d-b123-4a95-af3a-817ef82b639c",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f885a846-abcd-4bc6-accf-1125efe7a9b0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2c788886-f553-454c-bb4d-8153c427074e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "64731b7b-c5bc-4e62-b49b-aee8472ab35f"
            }
          }
        ]
      },
      {
        "id": "e98c08c5-b024-4867-9c06-edd4f869c7a0",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "87e0f031-73f9-485b-bbd4-158dc655273c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "faa626c2-a6eb-4bdb-9ef4-22bd24ca60e7",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0ab5f08a-6521-4b3f-a31a-e76bb4654cc7",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "016e8905-3e9f-47d9-8680-0f3e4249cc76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89614110-83b5-48dc-8aa0-217154ff3fab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61d681cf-92df-4937-8aca-763fb383724b",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "508d5795-d2b7-4813-865d-cc61853ff32a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f246d982-6218-4b2e-bb30-9620a2c04d87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df7b66a3-f32e-44a2-889d-b0145dcf11f6",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "050c7938-058a-4120-9eb1-016a645c8fd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a4c4cb4-aa3e-4afb-b9ee-a34f67af9817"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e328b1bd-c19f-4c54-b4d3-6f8a0df0ce95",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a9b57a7-1baa-4d7f-8449-32df0e5aba91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f694a09-b6d7-4e74-8b35-6c08d1b9b957"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba11e0bc-63b9-48ae-9a02-1cb882fd0ae0",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b387bd9b-245b-4593-877e-e45bccaf046a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61489ada-f7fd-41de-ad0f-7b07a06faa67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51234a5a-d6cd-44a6-86d0-e4ae4227cb23",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5f8dc52-9222-4aff-a2ac-81ad9c6ac2bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca7f64c3-449b-4854-a74e-46459b101a43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0ef645b-c22c-427b-b8f3-fc21f79d15db",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d142c4e-0575-4647-bd9e-9f4244e0004b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "177eb448-7ec0-4bfc-a3cb-441e082a68ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13c9e5c5-ddc8-41b4-b773-0bc4ee1d9908",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05a7501d-e108-47c1-ae78-2a15cae07db5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e37f93e-5efb-4e23-aab9-8eb201240fa5",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70016950-e2b2-4f4a-99ab-d11287b6153a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f81d2eb-ad9a-40ed-8faa-7f8065bf20e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "136ac00b-3424-49d1-b275-ec4462e186ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5ec405c-818a-492f-9d65-990a50ec7c62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f04d2fd-15f2-4ce7-b4a1-960dbfb09698",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c863293-943a-43ae-8fe9-8e80a9307270",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e75548cd-a128-4cc5-b29d-db1810dd054f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eb6ea63-16c8-4c2c-8f85-34852412b115",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af1703c6-2710-4abf-8a28-ef2844d1a046"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fec16a87-0583-4eb0-ac74-fb4fa91f5c3a",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "277f9ee0-25f5-4ef9-aaea-dac28b60b8ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7acbc56c-7faf-4d94-b452-4e459cf3b40e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91624402-4133-4163-b052-e86279146299",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8591b3c-b405-43cb-bb7f-9b802fa84f16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "392af126-de1a-4193-a438-b818a00ff28e",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56a56b72-c293-4713-ba76-261e08ea4d36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f1df9bf-f95f-4782-b2ac-a7d3463dc703"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbee32af-5bdc-43c2-9b07-c750f4ccb722",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bc23b6f-0f1c-4743-a8fc-bd7ec7a45857"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb235c57-9f45-4bf3-912f-776048d4d60b",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "840743b5-c157-46eb-9acf-683446aa6451",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c52e3114-573b-4df1-a02b-ee5c736a1606"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8874bf4a-fd55-408c-a344-ea6e5c64b02d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3632b9c-5809-45fc-ac1a-d3c52de2bd21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df78d6d5-dfd4-4655-b94b-90b3ebbde05c",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a5869a0-f0b5-4599-b773-30d6fc2b2b43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9812b17d-016f-45ce-b625-59dc19705da9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3f281cb-9858-4c6c-b56f-65c32650c327",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42283530-f665-42b9-873f-a282982739d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ab0e850-85f1-4216-ba2b-0f4a22a3fc66",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab7f3901-aa4d-462e-967e-d63326b7b37e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77479a8c-a6e3-400b-a8b8-1fd50ddd71dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8b75aa1-7013-41d1-a40a-c96f7362fd74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "354ed239-bef3-4367-bb4f-349b8f38720b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4bbfc14-eddd-423a-a82e-5682f6bbe955",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e39ab52c-4056-42e5-ad1e-b2a99060e2a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac7db0c9-038c-4dc9-88d5-f5476c655829"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a3ff923-4ea7-4438-8703-f079d8a8bb09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a9b92ad-23f3-4af6-a703-8a91ea819f64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bcc11a0-5158-44a0-a2d1-e5e970e4aef6",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfb84512-c509-4aaa-943c-7bc23fa75468",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "791c039b-e186-41f3-b327-a8a968ed0990"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5b7d23f-5df1-492b-bf29-89009237681f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "329e6d84-6d4d-444c-9cc4-de4f64432e78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54fbc43f-74a5-4cf4-a8fe-0cedcf68a915",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4783bed6-dac4-4e84-ba98-4d68e6b2dbd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43f0d93b-dd13-4ee0-bb12-19e846fa2abb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39c0c385-1ec1-4c82-998f-e7df0b6c2f61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af536123-883e-47ca-bb87-dd7b11aa8e9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed1f3818-8fb0-456e-9412-c61ef5cd1d88",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db7b7015-ab37-45a1-a39b-037e041f5d53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86e822af-de5f-43db-81ef-db881fb052c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "529655c0-01cb-492e-92ea-87e23a1ab883",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3baada2-bd15-4780-b40c-a85e4bf83fe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2733a00b-f385-484d-a0de-e930c6c97792",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a262f88e-b16c-445e-a205-91bfcfa7e30a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40cea788-39aa-4b24-b548-fb4cd4dbb3e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ab8203c-64da-484c-bb03-4c8d5e7e256e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb919819-69d0-42fe-8e2f-fad95bdfd437"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6c5217a-2ce6-47b2-9ca6-1da504d594b1",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "316229fc-b83f-4cdf-bf6c-ccedbd91aab4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92364e3f-cccb-4ae7-97bc-8b1b24f5a787"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4f7bf4d-2857-4aa3-b921-9c3988fb9e24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ae1326f-c2a7-4781-b22c-0115331b6cb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c92bacae-12e6-4512-a9e6-26a1570cf8bc",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc0cd3fd-3808-4981-a959-18fd217da23c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72449a51-4108-4973-a76e-03dd06289192"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6762b031-ef7c-4107-889e-ffc5af995856",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6a9f605-a600-4c7b-8ed8-aeaf127d1f23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd3b0f83-504a-42c5-bb16-e2905a516fd8",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf70b049-12e1-40e4-ae1c-7b88d0a6041f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3b8cce7-a064-4ce9-8f04-bc9d4f61c5ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b212427d-f4d7-48bd-bf5a-969b893519b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e73e1eb-7e10-455b-b97d-c02a94f4694b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5b0cf3c-a6cd-4c99-b616-b1b7e52f9ee6",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cac486be-1303-46c8-8d0e-dc9573e792cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a29d33ac-f8ca-4105-9d8a-88d5972e223e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14e445f6-d43c-476a-a3d6-41318ca5e089",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af18dfb6-c01e-4460-8be6-8707196f66bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "767b125a-0412-491a-9332-538d1978274f",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fadc23f-64fd-4a81-af63-55281803a797",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2c78283-c73c-4fd1-a691-b1f63ea5a25a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02db3c7e-301f-4161-8042-8a9664ed0981",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c3c10ff-8e27-4f26-8168-416b8067a370"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ad90998-7c68-4a9f-9ca6-3134cfb9810d",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fb95c29-c3a6-4028-9c13-c81f05c23364",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d0fbc5f-5848-4267-99f2-fd9515068d3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca19bcef-bcc8-4d9c-9340-208a92490375",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa0da774-f9b2-4138-9ca9-14c4755c86e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5673a42-5288-4c72-88ec-0363990e3afd",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9681e05d-72a2-485d-b462-4eab65c95fd6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db85b90a-385c-452e-b7ad-7a60ad76d3c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76880b78-16ba-41bd-b6f9-313fd6b8e8f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fb515df-052b-4ae5-881a-ff17d9008e3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdba60c5-a6ac-45fc-b999-0ea5933e1227",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71328c8b-7dab-47d4-890a-82f7f89eb691",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce80ac2f-ddb2-4712-993b-c857a4d121d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "945347ca-6291-469d-9150-b16215d3fb4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e2f2d46-bb97-4fb6-8058-054df27c1a5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3eecb32-3cb2-49c4-a470-070a3442b02f",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c66c54db-a820-4afb-9758-565468d93e8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "642ae31c-76dc-4af5-919f-8d6d7721ddf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fcaed12-5045-4448-87e1-038a40793cb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13a357bf-4e27-4aab-b86b-0701ac738476"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf967ab7-d7cb-4afb-865d-ad5a6654d210",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "532aa136-d6ff-42f6-8af0-896328d1fa65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "500d6f0a-49ca-46fa-81b9-672bab03ce2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e68176cd-2a72-42ed-89b9-8b5f62da1718",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1a52d51-89ea-4e3d-8de6-b171d6c8f8a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "490ccd8e-bc6d-4a50-989a-fd3a893d33a2",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f28241f8-9752-46eb-859a-1969c215329d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f48d9ff4-f62d-406d-901f-06294b53dd5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a07c625-d034-4475-b6e8-1592b4c856e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df394749-abbd-4326-9975-d678e0099f97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65bacb31-22b7-4a78-b7b7-ed2ad3b61e78",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "856d4d3b-938d-40b2-b3d4-7002639a00af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0c1ade2-6022-4bef-9a2a-ff3f738ee665"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ea560b4-d426-4ad4-84b5-2af47a4b6ab5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "121def06-16c1-4c10-b0ac-dec458bf1a38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a141f598-d6c5-43b6-be8d-ff136194c72d",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd853e83-fda6-41c0-9eb5-560693e8e90a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd284e83-957d-42b7-bd83-ddb45f799853"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "936179f3-5b7d-4f4f-a6b8-36aa0491c7ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ea20236-7347-4c56-b3cc-3fa8b4ec2193"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cda610e-ee0e-415a-b465-7a205a3d26e0",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d44e3587-2464-4044-a17f-99c8db281a87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c50de791-b981-4b46-914e-8c2a585b2bbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d9bdd28-c565-4094-9697-3a81bb340304",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf30f02f-c2dd-46a2-921e-55776b6f86c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "148ff3b9-24b2-4786-8636-29ce984fb55d",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "833288d8-694f-4259-918a-95f5a5fa38be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43e153a0-ceee-4dbe-b1f9-bf4975318195"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50e96b92-0fcd-4a65-8ff7-b1f0f58e8e37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1a2ef09-4b3d-40d6-a5a5-6a5c20e05e77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cb2f9eb-57ed-46bb-bd4b-377ac50698cd",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e60b67f-5dbf-4929-a8a0-7a06be36c502",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ead6c567-05fc-4bc6-812a-53c2f309ce57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a72db057-c016-4402-8d5c-0aa68b59ff86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b1717a9-7fe6-4fb6-b865-1138c32b417d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f8ff9c7-5956-45a8-ad3b-44060ea14f86",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cefb8c8c-37c6-46e6-b397-0860bf5f140d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36b0ae5a-e099-4763-8dda-1938322033e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88c68824-27a8-4107-85e8-b0a2a8496843",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "053cf192-5faf-4ae4-8eda-e31245e42850"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7abcedbe-cd45-4ced-8f29-1c557be65889",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62b49d3e-e4a1-4d6d-9784-d37191bd7f30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24cbc8cd-b331-4d18-9c71-da9b39129af9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ec66f4d-c114-4d56-8ba9-07b1f0a79711",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43b39600-8123-42bc-8a26-e66f7189d4b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03e82fe3-96fd-4d48-9db3-36a282c9267d",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b85f7ab-72a5-438d-a23f-b2f77244d73f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76a24c48-a861-49dc-9e34-8f5f0c7e83ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83287572-9110-4c4b-b75a-4e956ab6988c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0a9c260-79dd-43fe-a1c1-ed17aa0a8832"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cf39103-650b-4653-95cf-fcd1734358a0",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "660faf1c-3fff-4e2c-9411-424358df0da0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cf147be-1add-4f9b-b618-26dc4fffa09c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a66d1d61-345a-4cc3-9ecb-ad2a07b6d261",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eac6cbc7-ff60-48f7-8673-7fb2919e018f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "546eac2e-12df-4207-aa6d-b31d8581fdd1",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d37e1b69-a94e-4d90-9f36-089176295823",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "868d5877-5693-4852-93af-1e9f822b21b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d920bc90-de77-4ab7-bcd3-d8be12675173",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "188f8148-3eb2-4b59-9067-187163e298dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81b20be1-199f-4e76-94eb-b3f4092d8d27",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28d5c64d-5f03-44d2-a3f1-f360026403e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d76784e-9e90-49cf-86e2-76a1aa2cd153"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93755293-c4cf-449d-bfac-160ca0967ccf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56e953ca-d1a4-4c62-bee0-75080311af7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e686013c-4a09-473e-a54c-7779df34f603",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb39226e-4de7-46d7-94f2-a7b13c515617",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d3eb304-8306-4391-be0a-75e98059fcbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2910fa4-dfc2-40d9-9fb6-d198c248d110",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95df9dad-c8e9-49d2-bfa2-835f60660b86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f7c3426-3e17-43e8-9443-47df57581178",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72ccff06-3234-4425-9278-46d152ed61ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7dab341-a1c9-45a5-aa39-7307ea6537a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed33a5df-7031-436b-a443-c4cea4c4588e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1719c66b-ba95-4ded-a4ba-b1d6d53c0e7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ce82c2a-2819-481e-ab19-f6da2e0a8be4",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "762c9376-4b27-490f-99ff-04effcea6786",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "459d957f-8ce5-48a3-bc87-93c02a2bfc8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d5b9cc8-1ecb-4604-9f44-b35ce3e66c12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97b1e760-82d4-4193-81e8-05e310b92f51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9077e720-6223-4c79-9d0e-9d8551569220",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ed42d23-501a-4903-acb1-b8858ce295e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9aa531c4-09ea-4a16-902f-b05f9426cc9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bc8a913-5b69-48a2-9f20-4235cd8cd591",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ba7c20a-adc6-4b1e-a04a-2cfa5fe2b9e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6755cf0-c989-4058-8309-0c38615082b8",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0833d6cd-007b-45ff-9cd1-73515765967f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6c75788-fce7-41a4-921f-b9d7b26a951e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b84e87d-d2c1-4f01-8d35-889a62f02463",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd9b8349-d082-4cf8-9af1-30b6fb4a5e69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a8335cf-8985-457c-8bed-4294669dcdbd",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "358ed1bc-f04e-42a5-9321-55cae44d2f75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31f083f2-2668-44d8-b3c8-2e2db60ec2ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cc57e8b-4a85-46b1-b6b1-4f7239b3081a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f135b4a4-4d91-44ed-aa96-af4ba8e9d83c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8392fe75-49c3-42ee-b534-4446e4c37895",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5939f20-83cc-4ffc-8f45-a58ec85eb510",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8731de58-f474-48b7-9788-7831a1c6a781"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "109ee543-413d-4312-ab54-eaa413f50bb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b5d7612-ded5-4d06-998e-99e6e9901763"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ed6844b-af94-47e9-b49c-0bb9dd2bb541",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da1099bb-cbee-4629-8685-f0dc6a57c8c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1355c3a-2d82-4eb9-8315-d43474c2b445"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bc3e4f5-0f5b-40de-a018-de963d350a93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6d4153a-cb2f-47ea-8a86-a738d09b3091"
                        }
                      }
                    ]
                  },
                  {
                    "id": "811ffbba-13f1-470b-8a81-6533c4bfa76a",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d4f7a4d-a9aa-4df8-9c2a-5ffa5c214c6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af0acfe3-d242-49c7-85e7-c07e527b48a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "966dd52a-feb3-491a-8717-80e11a81e5c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43e2f640-4f7d-4bf3-b8c9-d95f292d8040"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0d5fdea-722c-42a7-8e87-04273b6f4ff9",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18ac48c8-56a0-4649-bdcb-115ca26b71dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20cd08b4-a77f-438a-8971-ec00a9ccc266"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e73889ed-ecaf-494f-b54f-a4a112866c31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f17210e7-8fef-4683-b6ce-ecaaf885a76d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "885f9b7b-5c3b-4bb3-8ea6-ed17e3d9193a",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e624465-4488-4633-a24a-14bb55d553e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc842263-dd5d-43a4-93c8-e33cf209f2fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f3f0ec1-56c9-499f-8953-672b3d360c04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "824aff62-1a03-4941-bd6f-c1e05961265d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be70487f-d398-4e91-abd1-a83434ae31d2",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16fa165e-30d8-4358-8b7b-960517c460ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "deeb9bab-3a57-4fbd-a802-1a791f20f677"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1496757d-73be-4ff1-bc65-aa8b90949f63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3104ccea-a370-4132-b5fa-b056d76df8fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a096eae-303d-4525-b328-72f9f54eab9c",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbf3941d-46fc-41f7-9c46-9f5ac6b2e367",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "567bd617-e771-4927-8d96-74e68e902e2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae280d03-aafa-4f2a-b571-8db64f0fd2fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4f21230-0af2-4711-abf9-342a4c17f73b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21ec60ae-d459-4c1e-b37c-af59723c8e74",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1f68bbd-1683-4bb9-844b-2ec781a34722",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9415e77e-6edf-4f81-97bb-b4e547b57c20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cc72f85-6ab0-4829-a376-d1522b6646e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b463d5d-a1b1-453c-bdfa-d7f0f12f0368"
                        }
                      }
                    ]
                  },
                  {
                    "id": "175053d4-ad9c-4650-9767-1696ee3081b4",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b7452fa-496f-4501-b085-634566f59dc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75d57568-8b82-4a6b-b7a5-a8b91a7db001"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63fdea1d-044c-4b28-9ef3-c0b25285f115",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "132e9536-e184-4cc1-9def-75612b33e2ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39667ba3-844a-4229-a149-c57f02690923",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ea52bf2-ce42-4e9f-8d23-91660ae2c22b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd697976-a0a1-41fb-b343-3d0d6fec27e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d7f6fb4-ac02-42d8-9c52-b1a98b68ca99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c167bfd3-900b-4162-b325-801bf3c67039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69d7a3b2-0225-4cd9-8e97-e8852024f984",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "555feaa7-6e0a-48dd-ac63-91b938c41fbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c9b49be-0914-4a36-8e62-627bdd8c7ab5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02075855-31af-4f85-a56d-5f0898d5fac4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ef3ed6a-af81-4376-bc56-807ee73c7688"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e35d8bca-fb8d-44ec-a9f7-c4c1bedc95b9",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c1581d5-2d35-4c4a-96c1-53c95ac97277",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c15d2acd-1403-4093-b394-58d9061cd4fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ce6b1db-ef4d-44ef-bee4-67970e15f879",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e141ffdf-3dc9-442e-8bee-dec82b096227"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c50059a-07f2-49ed-b653-ee691e6cb13e",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d20c7285-75e7-449c-b9e5-53e43fd7613a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f70afd87-e5ba-4c97-aee3-093fc94e982c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f3f5d34-a6cc-4ed1-b057-0e8bad9d76c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a33b91f6-942f-49d8-b980-8e80c31afaac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "317772af-a21a-4048-8d7e-9e6af57d21ab",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de77f968-249f-43df-bbb7-0c7c4b02eb68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09a51029-a801-4656-bea5-92b4df89dec9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d9e210e-c853-472e-a6fd-2ff3a9ad4c7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dba57fbb-1de3-4027-abf4-cd30e1e13710"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54cde8cb-40d8-48af-aaad-e625ac75fe09",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cda3209e-eb74-4b32-a856-b2cee15210e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "deacbbbc-fb1a-4bf7-8d8a-667e7db498e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf4d31c1-dbf2-44fd-aacf-21faf66ad6ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8e63a14-22e0-4a4c-ac3b-a768a9ad9cb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eaecf60-0b68-4123-93f8-e99e5a8303a3",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c36dde2-0f7f-4dbb-83e3-6a5e1c280176",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65765e49-3891-44b7-98ac-60246be4198a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7584a9ba-9265-4f6b-b501-4996a35e1e90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c06b61ea-b5ca-45b6-b138-1a788967ed47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09e8cea6-edbe-4dd3-a228-bf52d2860afd",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ca8f2e6-8a72-43bc-b657-761af5812b9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd07f71e-ed67-409f-b4dc-54f5ff466272"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6085cfd9-9eec-4a48-a7f7-3bf52000defb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23254877-9142-4790-80ff-f821b7845e10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdf1798e-e3af-42f2-b0f2-3510cff139e5",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e572a3be-7081-4ade-9a72-63efc73bd1b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30a9fd83-517e-4a5f-91cf-709824242af9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de1a71d6-0a9b-449d-8d0e-dd7386eec483",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cef3a08c-57a0-488a-83e0-68f99141c8b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8f42c28-8cb0-473d-ae76-f627b722f059",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78cdec34-1d3a-40fd-810d-9da40704e929",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba8241e8-3c2d-4b79-9fc0-313aa61c4829"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eeb8fd6-03b9-4297-91ad-d8eedac8877c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63fb6a95-b0af-40cd-bb7d-879b2e491e4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaa3505c-6868-4525-b705-786b99c9ff07",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2d6990d-f6d3-4ace-86bf-9632964226d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a02648b8-c435-41ee-a577-4915d40a1463"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "188dcaa7-9ef6-4ba4-9c30-27e1cb06bcdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f95fbe67-c01f-49f7-bc9b-a598c9a6309a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e04ef804-982a-41de-81e2-706c041bef98",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f3a408c-b0e2-42a3-97b1-a1ac311b4f86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c2a036f-7418-4db6-978d-c0dcb0ea1136"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b62244e0-b7af-46e3-b2d7-f7e8c38c6e3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "103fd212-8c41-4915-b9bf-a6d624da3e1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef90e88d-3b4f-4a1c-859a-9441bfb56ac7",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c6709df-9b31-4b0c-885c-e3db4a2eb65e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4948143b-54c5-497c-ae58-dfcea2d9427c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f9e0333-4fda-4841-bed4-2bcb02194b07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12460c6a-0eb9-4e35-ae81-f169d7f04ce2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b7f8263-6c69-4ce0-9d40-248b76778672",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c07be3ed-e202-4015-a36a-245b239c97ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97a35ba0-c765-4e21-8c4b-901a101cf5e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "664111ab-9d5b-48fd-b838-ea5157397200",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff49d793-21fb-4bb5-8faa-f777610c330a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "341008f0-fa1b-43b4-903a-6fe41d9e1e75",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "163660de-802b-4958-978f-dc6c385a482c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5140eabc-11e8-4f2d-9337-7fdb1a2a4b96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1143f02c-ff66-49d8-b3c5-cae860217328",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcd69bc8-afb7-4243-a9f5-b6335642b519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20dc9253-fdf0-4700-b16e-32b035eb12d1",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51e2cc7c-1558-4d69-acc0-9a3d522c2250",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ad968f9-3682-4ebf-8e94-92dfb59f008a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d65d9e0-79cb-463e-9060-a8721f6e3a69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cd31c72-f5ce-4d1b-becc-d459d21f8b7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebd91dc7-f71b-4402-8da6-ad352ef87dd5",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a94e3fb4-4fca-448d-92a4-27f13bf386af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3d541bc-9240-47a3-8431-42f1979fcc0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb698884-0cc2-4cd4-ba90-0deb25f9b214",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd5cbfbb-5a5e-425c-87ce-650e81e0735b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38692c40-ff9b-4a56-b4b5-4ffa0098566c",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e74236c7-d394-4aed-8100-7d06efa64838",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45be8ba7-d864-46e6-887c-cda60c2e3f49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98768073-3275-4284-a0a7-e73f0147d947",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea375a5a-0647-49eb-b4a5-3b2d60ca4bf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e736fd1b-56ea-46ed-a103-01d566cac6fa",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84169709-8486-408a-a750-8a5be506246b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "abb3a9f1-3e7f-4ab8-928d-2cd129b666ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbc2b83e-c8d6-4276-8b46-00d07cafb9fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56f45241-21be-44c6-b626-7563b7067ba3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ed53803-e2d5-487e-b11e-68cb1d601330",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95545173-417c-48bd-912f-20556a1a64ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43ac52b2-53b9-4549-8f41-d42ca310a85c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d23abf6-b271-45f6-820c-3e53c83ef86e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adc928c4-9157-49ea-93d7-cde27e0664ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47026522-1737-4c8f-a0a5-14d6433f93b5",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74a1f950-052c-49f9-8010-31401eaa5410",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a7fc413-d980-4a18-982c-2dc0f17de715"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "987dfb32-c21e-4ad9-9bc5-a2117f1376c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6fb6112-76c8-4c45-91f3-49e98cd28216"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f380c8fa-4437-485b-94d2-96ab93163ae4",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc5c82a6-577a-4e84-a176-417eef92b5ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9dc5af48-65f8-4c2f-8766-7a30957495be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e32266cc-93c8-479c-8d17-ce4f58b9286e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85764c73-86a8-4143-922e-e770dc1e00ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c23464e-741d-4774-9a1d-6863e0a5651e",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14f919bf-39b9-4a01-a701-264d182744d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5dd9b8b9-640f-40d2-8365-8b495df83553"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "845d4524-9e76-4b4e-89db-ad1e5299360d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdd9c62e-60ff-4156-bde2-404c3a125f3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eda91bc0-07d4-4410-b00f-7d75a7ea0511",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f7a7c0e-7cd3-404f-9958-e9d6761a1350",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "643e8854-8c5b-400a-a34d-904991136963"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c55e61c0-9427-4be8-b464-61d603599855",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "054a6dff-810d-452b-9da1-020d1da53531"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6120d5fd-6696-47e1-979f-fc2d6b5a35de",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48d95b3c-3c7a-4162-90f4-c7e5a0708d09",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a40e196a-49ac-495a-95d3-a66058539cd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f9449ac-7156-4bcd-b52d-525b89230fce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db3a85f4-5b2f-43f8-80a4-dd5aba3623d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "788a6f80-b937-4589-ac12-16d6f78f9be7",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2d3ea8d-f32b-4fb6-8fa5-ccbe7bc9e5fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43b4d468-43fc-44a7-b478-edd030db04a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2a06ae8-8982-4ec0-8cfe-34bfb3aa8592",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d66948d-18b6-43d8-9c6a-b2f9bdb469a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb351f70-f7b4-411b-8491-b2ce49d81f80",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a85e0439-1f7a-4998-8781-119424c809c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26783ef5-9874-4f00-a873-111fc8859ce4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "633c5bd7-7189-43d0-85e8-4e7672d6d579",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "737dc28a-4e9c-400a-9031-60b3b1e2b48c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "194c1a91-d7db-4393-b467-64ea25ff02bc",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4275ae1-4a76-43d8-a158-25903a943180",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5431659a-dc16-457b-ba93-f0c0f8820efa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e67f27f0-5398-4e3e-8ff1-70adae8de3a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58364bd3-cd0c-4055-b486-c542b645f3b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae76b0e1-2c8c-4f85-a594-57972e299e6b",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "865d8f57-c042-48ba-8f0a-a5252f761866",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe994103-1178-4c82-a339-5e3dee28ce3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "860f2042-fdf8-4f04-956f-ef5fe0b605f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31719e05-2e07-47af-b9b9-b5bb6169cd0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2e06076-2866-4916-b050-0598b579863a",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c06b42db-b1cd-49d8-b91c-d16aa3368932",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9955606-2b37-4d01-95bc-8d14757d7bb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dde4346-d0e1-4526-8cac-5f758fadb273",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "681811c9-f68a-4251-a5dc-0a9f329484b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae6e46f0-2cfb-449d-9ad8-e112abf10782",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f97d752-630e-4462-ab58-551b4f996a4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e56aa45f-6b56-4c7f-ba92-2bf2c5031865"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "795492aa-1e63-40ec-a21a-45b4b128915a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0cb5eea-8eba-46d3-8a1a-8a9631ab2508"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98f7bd09-5feb-4a16-a0ee-8c5877c42388",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04faf397-15dc-418f-8219-2c346ddbea00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b5ed77b-773a-4834-8485-cb9748504552"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa5a03cd-4dd0-4640-bd7a-d23acdb539c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10a378df-9049-4b1a-866a-b65c94e08139"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af63a429-b199-4abc-add2-e912b4833685",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29371345-3faf-4efa-836a-ec8ee1875bc2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57fc32fc-5d84-4086-942f-48af27a65bc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2ecd5de-3dff-4c6f-a478-58f8574b7a1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "065910d9-3185-40c9-b8ea-78cf666dbb89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02a5f0c8-7d38-4ca2-a22c-3109cc0592e3",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac9450f2-1d0b-4319-b34f-1fc930cec89d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5bcd00a-f392-46f3-a8aa-0f5394363984"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eb6d60f-0893-4b2c-81cc-64cbb9a397c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99643f5a-196c-4e86-9ed4-eeca46e239d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3c31428-5bfe-4537-8a51-def3c3870011",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "195eefb9-4289-416a-a1ef-3a3e375a7dc6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71cef24f-a588-4270-af08-063bc6665a9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c37070db-ff6b-4af0-ba2c-422c74d16999",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19c0d02d-2e9f-47c2-a9e4-f274df8b7f1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50834335-9c78-4627-873e-08f6671d85c9",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3233341c-56c4-43ff-93a2-c02d367307a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bdbeb225-c7bb-4e44-89fc-723b0ebd5b3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82fa2746-aecd-49ed-9541-0413050acb69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b014de6-3345-4b7a-ab1f-a0036eafa009"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9671781-8281-4317-8b4e-5f83f927cf5a",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93c6faab-37fc-4368-8f25-b3cbd97bc9b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b5b9fb1-0109-44b3-8c6e-14e8fb87a31e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d133093-9bdd-4981-8f4a-6342626ad348",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e33f618c-7534-4ffa-aa99-b12315c5fe1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6df786c8-9572-40a7-ad44-a0ae7661fc6a",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d813705f-75db-4f52-8847-2fd2aca99a6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "487040ce-656b-4337-8430-3ac06adc3c01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18b03c24-86f7-4dde-baf4-38b27b0ae42d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77f76c78-e7e2-4a3b-a1d0-06e969d0175a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23efbac1-2954-4288-804a-4cfd8f5aca18",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a254c3c3-0319-4c69-ab86-b37337bf7c0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86701be2-5d8f-46c9-84e5-51ea4580f478"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c86d514c-2ad4-4a6b-b37d-c451a13dd274",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74afaee4-f1b2-4303-bc03-76de1fc95b31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ed1a8f0-319a-4054-921a-cee3d6d66ea6",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7b56195-5021-4398-9ed8-04e1ac996d6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5573bf2b-0b33-41e3-8418-56398c0a4ca6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "530386d3-814d-4d50-b0e4-c29cef48a987",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1078812-2cc4-4538-96c0-6160413b7c0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca4f5c50-eed5-4d34-8a37-2b4ce5e28a4a",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "083a5fec-5886-4fb5-89f8-db3b0482dcdc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5fb536a-5571-470b-a600-cbf64bee31ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90b81e74-a967-446e-9351-176391505e79",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39d3a2ce-f9b6-44e7-a98d-a43afc47cbc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f3eb6e5-5af5-47ec-9bb4-ee15297e1287",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00a97910-7ff4-4cc1-8633-17c89b60897c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec408edd-6c7b-4497-a0dc-5fc1bc41ce24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d469de6-6ec3-49bd-b46e-28bae64f04ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c33e3e43-3989-43e1-9dfe-e63f879e1331"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a12cc746-cec1-4fdc-b0e6-9d58aaaa8853",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1e8a34bb-8167-4789-87ac-def49472aa0d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6bfb5c68-db9d-40a2-a1bc-b4f06bb59236",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7c155196-8e63-43b7-ad8b-b79279784d4f"
                    }
                  }
                ]
              },
              {
                "id": "82d5135a-505d-4836-aae2-45da370f2857",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "40cbfd4d-f73a-4bac-9fb8-cfa71242a582",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22d426f3-fe19-437c-a59f-9fa6bc141bf5",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "1b39a953-6b2c-48ea-af0d-52eae304bbc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72b49b28-d491-49cf-aa76-cdd946babed3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "68da1026-0943-43fc-b4e5-3d265f3b2ec7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8ff0125-99c5-4157-ac4b-7dbff3b83cc3",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6886c7cb-2b06-47aa-b9e0-8e00d4b8ddd1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "c21b7b2d-8eb3-4454-9b8e-ffc2547c608e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f3c049f-9428-4734-a1d1-cc4a6fdeb511",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1a09de1a-2df5-4d78-b112-522a299e31b4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "35c4f985-1c2b-495b-b944-b70e14e01a50",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "872d69b1-dcb2-4756-85f8-5c7fddeb2094"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "67a9cf91-9eef-4975-9c29-0d94e966959e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "696bca31-7f31-47a6-8797-b736c436df7e"
                    }
                  }
                ]
              },
              {
                "id": "dcb00855-ae71-4ec2-bba2-b952eec3399d",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "b88488ba-6da9-4a7a-857c-cc766049e66e",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d985e90-c441-404d-a33d-5c03e6d4f3ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "6d303257-ff0d-4aa0-8638-5409ec00b9a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd60d774-7444-454b-bcea-2b4a4049d3e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45f13a97-5193-4b61-8224-ce86498e4ef1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "8a548978-df82-4a76-9fab-6fc21d93597e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d3be897e-b1be-4d65-9ba4-a3dd4311ccf4",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "441357ee-96e9-4563-99f6-3a1e07c1637a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "1738a454-2d19-41f5-b00c-dd7b4e9fbf3c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "368f3b04-a2e5-472e-b29e-a20b5511cf2a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "89b7237b-3168-40d5-9ca3-45874767a49c"
                    }
                  }
                ]
              },
              {
                "id": "f93b659c-ac95-4a16-8a2a-9e1c0b98f2c4",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f6184d5a-205f-4444-9364-d964b63f2d68",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "c0c78cd2-b0e6-4425-b404-81ff57412143"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "180dc710-9e13-449b-80a2-1c71fc7f6ea2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "da656918-5f00-4f5c-bbe1-f9288f56e2dd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9f33894b-7889-4474-9d1e-636f1d79901d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "91e08a4a-1d5f-4c67-8494-21ae7b0d19b0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d0ec3a40-8729-4562-953b-62b2eab6a141",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ff019118-b518-400b-b1f9-cbdccac3e258"
            }
          }
        ]
      },
      {
        "id": "6f21f828-d029-4bb0-ae2f-b518f7b70c43",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "8d09876f-b67f-4351-81c8-ef753e727069",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8e8cafaa-34c2-4444-8027-a8f3993eb748",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bc07cb29-b94e-46b7-bed7-cab756f891f9",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2ca075a-388c-41bf-8419-f829bed3a5e8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "fadeeada-e107-4dff-8ce6-851952bc6b69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f8c5246-eec3-4c3c-9d67-666ebccfd022",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a1be02fd-e26e-47ca-aa97-f55e2eb64960"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03b7407d-8a95-40c5-bc8d-07d0e395d8d3",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8114661-4af8-4510-8c00-682396ffb0a1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b438c741-4981-4c67-a5b3-3bdfc5ab1661"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4f8f8c7-3b21-4eba-a90a-559fe9ba42b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f3deb1a4-9c7d-4ef5-ac2e-a42354768766"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "24400e40-2d14-42a4-9b01-e5adfcbe8a08",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7819506e-c44d-4603-ba8e-1d07673b1bfc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9e36ec56-5f53-4195-8a1b-6d06c405b059",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "04f465ad-3a57-4021-9d18-e3f1b42a45ca"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ff684810-56b3-47e5-a270-066874a2a202",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "5b2d3981-a17f-42fd-b8da-5e9ff135abc4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "28ff1804-dfc7-47ce-997e-c67cc11236e0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8b0d9a01-f59f-4500-bf97-26909b450ae9"
            }
          }
        ]
      },
      {
        "id": "5e1a31da-1848-4b09-b9b7-18ca4dbad093",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "b4797151-9257-4713-830d-115b8544fd11",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e9b4917d-8fe2-42ef-bf8a-d0334daf1d8f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "688ad996-c664-4ff6-bf11-4c4ec94c2b7b",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30df0acb-10cc-42db-8e30-5917eab46c0d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f2bb131f-9942-4bdb-9c87-eee5dd6bcf94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc7bb99e-9208-4ee4-92ad-38f02c89ccf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3eda0ccf-5181-484f-9f70-c41c336de8a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce45721f-dfb0-4087-9480-a4fbc8906ff5",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1196fe6-6c20-4766-b78d-86e1f6d28901",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d6a198f6-695a-4392-b8ae-84e9143fd4f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79ee03ee-3697-4909-a4e2-d0cd306aa009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8463454b-f88d-4f57-868f-d240c0af7698"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "88aa163d-dc58-469c-b78d-3eff1fbef1e4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c4c3473e-a101-433d-91c9-323d699924f2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "124c22d9-2416-48ed-82b5-7221cc0f1b89",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a440febc-b193-4b64-98d4-dabbe1851444"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "164612df-5e2e-4a87-9a43-9b8bb9d2acfc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "77e1d287-b3f1-42f6-958d-385955c03911"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "225febe0-5a34-4b6a-b942-20c6cd7427c0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "01b6ecc3-ae75-4b05-a626-48249a44be16"
            }
          }
        ]
      },
      {
        "id": "6670982a-923f-459f-bfd3-44a0eb7fd74e",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "722449d1-a872-4a82-b99b-d541d57d2eed",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0e8e5ffb-5b71-4c99-b2b2-86c083c9faf4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1a2e0d92-7c50-47c5-ab84-175ce8685763",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6541aa0-81c0-43d6-9348-2aa6184abff7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "97af39b7-5f8a-49b9-a8ef-cc5cd6482046"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69bd609c-3497-401b-b61c-783130d6aa47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "28dd414d-d150-480a-ab8c-f2426a01a2c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e6b00dc-b688-40dc-b267-ed64b039757f",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffd19f3a-1a86-4c57-9ec3-d1c02eb055b3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "567945fd-02d8-4847-87ec-7b61b64eb45b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f2f221b-74a7-4717-af93-4a666a90670c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "00320bad-9ce3-4131-9b56-f1279d565c69"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d5a40b57-4ea4-410a-a72f-ea0cd2be4102",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "30ad595d-6abf-4ad3-8693-f40b1ce30345"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1df967b9-ffb2-42c4-878d-6854280a2c8c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "978a5af5-d8bb-447b-b159-a4ea2c4635b6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "46290703-ff63-423c-bd3a-ec7ca1371bed",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "b3752bfd-7625-425d-8cce-42cbe459e511"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ab255a80-8cb6-4465-9ec0-61bca6eded20",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "95fc26aa-9fd6-452d-acd1-fba3bc750e19"
            }
          }
        ]
      },
      {
        "id": "f5ce4f3a-6c21-4497-8857-906a316c02f4",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "972116cd-377c-4427-930f-9bbc9feb843c",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6ef53cea-afe1-4c1b-80cf-6169ab85d194",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "a10611e4-4e1d-4167-85aa-4b0471f29da0",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "01c3b5f2-85c0-4dc7-a9d6-216be6c20b3f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "01c8b26c-4022-4f15-b367-8809fa8884b1",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 295
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 985.6145038167937,
      "responseMin": 8,
      "responseMax": 6956,
      "responseSd": 1817.6048895727583,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1673051890350,
      "completed": 1673052163553
    },
    "executions": [
      {
        "id": "06fbe3a3-20cb-49a5-bfc9-41b1a46f19ed",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "834d70df-1f72-4848-b829-0e77f812d335",
          "httpRequestId": "1c675d97-ca5d-4044-bd92-1f7403d5308b"
        },
        "item": {
          "id": "06fbe3a3-20cb-49a5-bfc9-41b1a46f19ed",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "b9571895-7465-49b6-9e42-3a8f7ad467df",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 0
        }
      },
      {
        "id": "0cdfe5f8-4e8b-4079-adc6-fa1ad2944af8",
        "cursor": {
          "ref": "872db3d7-8b44-4053-a6ec-5f1844e9a1e6",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "8c226215-bff9-431e-abe9-f11f8996cf80"
        },
        "item": {
          "id": "0cdfe5f8-4e8b-4079-adc6-fa1ad2944af8",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "d02e893a-f2d7-4b61-9de6-9220e9003108",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "6dcfe4ce-6df7-4afd-8e00-eb764cfc5853",
        "cursor": {
          "ref": "42fbe7b2-1cf8-4ed6-9a05-d426ef7d99e6",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "1540861b-5782-492c-9533-a86e90df7144"
        },
        "item": {
          "id": "6dcfe4ce-6df7-4afd-8e00-eb764cfc5853",
          "name": "did_json"
        },
        "response": {
          "id": "1a65918b-409a-4cbe-8c48-3455a982c491",
          "status": "OK",
          "code": 200,
          "responseTime": 444,
          "responseSize": 1012
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc9709b6-72b9-482b-bc55-ccbfe384e420",
        "cursor": {
          "ref": "2dc7a8bb-2813-4d4a-92f6-4d11c8d54534",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2872d9fb-88ee-492b-b568-2381b19789b4"
        },
        "item": {
          "id": "fc9709b6-72b9-482b-bc55-ccbfe384e420",
          "name": "did:invalid"
        },
        "response": {
          "id": "fb826a57-eb9e-472d-a148-acddb96c9767",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc9709b6-72b9-482b-bc55-ccbfe384e420",
        "cursor": {
          "ref": "2dc7a8bb-2813-4d4a-92f6-4d11c8d54534",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2872d9fb-88ee-492b-b568-2381b19789b4"
        },
        "item": {
          "id": "fc9709b6-72b9-482b-bc55-ccbfe384e420",
          "name": "did:invalid"
        },
        "response": {
          "id": "fb826a57-eb9e-472d-a148-acddb96c9767",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "019a7143-ace2-4afb-915b-36f2be34c8c3",
        "cursor": {
          "ref": "306249cf-7b0a-4a18-9bd1-a3979eab2123",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "999d696e-7cb1-4bb0-bf1f-42bff9a6edcf"
        },
        "item": {
          "id": "019a7143-ace2-4afb-915b-36f2be34c8c3",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "3e9625fa-a8d5-459d-b761-50358f7141f5",
          "status": "Not Found",
          "code": 404,
          "responseTime": 183,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64a36b4c-6f5f-48ae-a16b-d6f291544b7f",
        "cursor": {
          "ref": "21819a69-ce72-4f0c-86b0-ed15ad25a91e",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "8215e415-b3f1-4ac1-838d-9701a134951e"
        },
        "item": {
          "id": "64a36b4c-6f5f-48ae-a16b-d6f291544b7f",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "b2904a54-0a5e-4967-9b88-5f89ca84a201",
          "status": "Not Found",
          "code": 404,
          "responseTime": 98,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3365141-8739-436f-ad1a-a4dd323422cc",
        "cursor": {
          "ref": "04f39a72-18c7-4825-ab8f-c0709812ffed",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "4dc5f70f-51cd-4112-a07b-d8a7b1dfc91b"
        },
        "item": {
          "id": "c3365141-8739-436f-ad1a-a4dd323422cc",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "a2053b8a-2467-4706-b29c-a54655dfb1f1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "945562e4-7e44-42e2-a3cd-07576505ed39",
        "cursor": {
          "ref": "e31ea40c-56af-443f-9ded-ccf5836b95bc",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a968fdd9-85a3-4987-a88c-231da97fcba9"
        },
        "item": {
          "id": "945562e4-7e44-42e2-a3cd-07576505ed39",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "f4c22cb1-9f26-4abf-8f0c-9ab36e704c6d",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "945562e4-7e44-42e2-a3cd-07576505ed39",
        "cursor": {
          "ref": "e31ea40c-56af-443f-9ded-ccf5836b95bc",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a968fdd9-85a3-4987-a88c-231da97fcba9"
        },
        "item": {
          "id": "945562e4-7e44-42e2-a3cd-07576505ed39",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "f4c22cb1-9f26-4abf-8f0c-9ab36e704c6d",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "d5ffbcaf-4828-4224-bddd-e9b41f7b954d",
        "cursor": {
          "ref": "9721c8de-9a8a-4f4a-98bf-32e5e1f71e73",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "5c30002e-d1fc-492e-9fa6-4166bcd5938a"
        },
        "item": {
          "id": "d5ffbcaf-4828-4224-bddd-e9b41f7b954d",
          "name": "identifiers"
        },
        "response": {
          "id": "fee9fbb4-7f7d-45e1-a439-09a329b9dcc9",
          "status": "OK",
          "code": 200,
          "responseTime": 112,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2a6ee6f-036b-4ae2-a272-b5d6af5c290f",
        "cursor": {
          "ref": "b6d391f4-0101-450c-9594-ac0ccbc8f745",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "0500f360-b699-444d-9677-c49375d91833"
        },
        "item": {
          "id": "f2a6ee6f-036b-4ae2-a272-b5d6af5c290f",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "10c2c335-7faa-464f-9a0d-8f04b5ab98f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "f2a6ee6f-036b-4ae2-a272-b5d6af5c290f",
        "cursor": {
          "ref": "b6d391f4-0101-450c-9594-ac0ccbc8f745",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "0500f360-b699-444d-9677-c49375d91833"
        },
        "item": {
          "id": "f2a6ee6f-036b-4ae2-a272-b5d6af5c290f",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "10c2c335-7faa-464f-9a0d-8f04b5ab98f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "285551fa-f3d3-4c8d-90ae-00a774d82005",
        "cursor": {
          "ref": "614d7c35-1fe6-45a1-969d-5b6351ac24ab",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "cbd8d474-c7bb-4e8d-ace1-7c957b39c9c4"
        },
        "item": {
          "id": "285551fa-f3d3-4c8d-90ae-00a774d82005",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "d54b8a9b-91bf-4c31-8ab5-169c3d53999f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "edc88fde-de65-4aa4-9368-c477b52699f6",
        "cursor": {
          "ref": "371d104c-7d1c-45d3-9863-b08d32c42141",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "8aaffe7a-c693-4b77-a4f1-7fb459456568"
        },
        "item": {
          "id": "edc88fde-de65-4aa4-9368-c477b52699f6",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "c4dc4dc4-aef6-4cd9-a00c-c3937a6f529a",
          "status": "Created",
          "code": 201,
          "responseTime": 206,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "36f7d216-27ec-4869-907b-1f3b7482f23f",
        "cursor": {
          "ref": "a3133e4c-9bfa-4591-bd9d-2a07a7165ded",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "f96a1b38-a0f5-4a4c-a6aa-7093e1541bff"
        },
        "item": {
          "id": "36f7d216-27ec-4869-907b-1f3b7482f23f",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "60bd7c6f-d911-4c6d-95e5-0336f116d6be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "3e9d4215-dc38-4610-8fd1-3667c1a68268",
        "cursor": {
          "ref": "f8b96a7a-dbeb-4f6d-b0c5-5fdcacd570db",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "b3201f0b-da92-4057-b747-0c2174c345a0"
        },
        "item": {
          "id": "3e9d4215-dc38-4610-8fd1-3667c1a68268",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "65c580b1-e24d-4462-8820-12f74deb1860",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "7d147306-7f45-4e0f-aa07-ce74744a9da0",
        "cursor": {
          "ref": "0e469c5a-a25d-4074-8394-52eeaca3ed1b",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "f02d011b-f31d-4845-972e-1145f18318b7"
        },
        "item": {
          "id": "7d147306-7f45-4e0f-aa07-ce74744a9da0",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "4788283e-0bfe-4369-aa19-678d65885524",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "e85a533e-e90c-465f-a2c7-d74b372217b9",
        "cursor": {
          "ref": "5726192f-ce4d-4d82-a51d-96174a84ff1b",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "f5212cef-e21c-4a0a-9602-8057d3091c59"
        },
        "item": {
          "id": "e85a533e-e90c-465f-a2c7-d74b372217b9",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "0412c30f-9632-4540-96a6-dd667e521bc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "695281e2-5fb7-4eb8-818c-de31d1c12b3f",
        "cursor": {
          "ref": "42ddbba4-4419-43be-9745-91e56bd2bdb0",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "9d6138e1-53ad-4175-b542-1f14e9caaea9"
        },
        "item": {
          "id": "695281e2-5fb7-4eb8-818c-de31d1c12b3f",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "33f007a8-6f69-4bfa-98c3-f0b1372ac419",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "b8f69dac-7ae8-4308-8f35-c78ca1285e0e",
        "cursor": {
          "ref": "767a576f-364a-41aa-98ac-0fe5fd8ea893",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "d7898db2-5d94-4e8f-81a3-70a8bbff621e"
        },
        "item": {
          "id": "b8f69dac-7ae8-4308-8f35-c78ca1285e0e",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "4c5a6e0d-206e-43ec-a934-be0388c8d9da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "5bd854c8-ed7d-4621-af71-00fc4cf6cf02",
        "cursor": {
          "ref": "f6aa55be-d43f-492e-999a-6cfba088bffc",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "cd72dc8d-2a9c-42fa-a0d0-307cec9bc4f7"
        },
        "item": {
          "id": "5bd854c8-ed7d-4621-af71-00fc4cf6cf02",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "2cc50939-8238-4a7a-bed2-9b75cc708373",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "6218479b-2669-4373-80ad-9dc5d18e27a9",
        "cursor": {
          "ref": "2b667f36-67b6-48c0-bf8d-fd08e7f02219",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "1c0eb108-5ec2-467e-a6f5-f20fafca75b3"
        },
        "item": {
          "id": "6218479b-2669-4373-80ad-9dc5d18e27a9",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "0e92d1b5-3885-499e-a947-d78259f6b67e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "3f46e9e2-992f-4d47-8da3-800cca5297c8",
        "cursor": {
          "ref": "04ef7ca3-b619-44cc-b5e6-ce546a77059f",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "10d02009-f6e3-4185-a401-3b71ec9f8276"
        },
        "item": {
          "id": "3f46e9e2-992f-4d47-8da3-800cca5297c8",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "358301a0-97f4-49ce-af27-23c53fda4696",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "10bf311d-080e-4a0f-a50b-c51a5bbe1ac6",
        "cursor": {
          "ref": "343224c2-5954-4486-8e60-f5d552aa20b9",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "2fc6e3cd-a85d-40ee-bced-9c54c1f9ec0e"
        },
        "item": {
          "id": "10bf311d-080e-4a0f-a50b-c51a5bbe1ac6",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "906ce798-e053-45cd-b83f-e974470b2c6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "cf328601-be82-4789-9006-e1d77457fefc",
        "cursor": {
          "ref": "27167e80-ebe6-47ea-b560-c0de33703b24",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "9d475824-2016-4cab-bd87-ffc6415ce037"
        },
        "item": {
          "id": "cf328601-be82-4789-9006-e1d77457fefc",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "d4ccaf2f-2660-4975-88d9-05c9f7881840",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "06a06f22-30ea-4d4e-b36c-7a6c300f59dd",
        "cursor": {
          "ref": "743f97cd-b58b-4c72-a5fc-54217b95ae64",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "fb11799f-1e52-4171-8229-9931883f1a8e"
        },
        "item": {
          "id": "06a06f22-30ea-4d4e-b36c-7a6c300f59dd",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "f127ab5f-32de-41d5-a092-023842553b3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "ba5ee62e-d091-4ed4-af02-f41403a3ae8f",
        "cursor": {
          "ref": "7df3c720-33bf-4620-9533-b1248522b659",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "e24766e1-c58d-4210-90b9-13a22b7687e0"
        },
        "item": {
          "id": "ba5ee62e-d091-4ed4-af02-f41403a3ae8f",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "8b5c2623-9bb1-4156-b24e-c57654c24965",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "424f734b-8573-479d-a6c4-5fbba21a18be",
        "cursor": {
          "ref": "835098c4-f9ee-4dec-9102-9e0462326667",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "e0686f11-5f2f-4021-8475-19a62d306276"
        },
        "item": {
          "id": "424f734b-8573-479d-a6c4-5fbba21a18be",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "340256d9-6456-41e7-80bf-efe7b1985c9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "74a92e95-6097-4642-941a-efa33f0aa307",
        "cursor": {
          "ref": "436e7bd9-c51d-4aa7-8e3e-791ab6f4044a",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "628d6eb5-b408-4ece-a94e-637e0aacd4d6"
        },
        "item": {
          "id": "74a92e95-6097-4642-941a-efa33f0aa307",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "2fab481e-cb88-474a-a705-49be1f9b0515",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "d8cf296e-3484-4b9c-83ea-aa8081969104",
        "cursor": {
          "ref": "2f5d116a-6ddc-4ddb-a8ba-fcd724227b34",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "cef15333-a47b-4710-9b6b-7b790f9fd679"
        },
        "item": {
          "id": "d8cf296e-3484-4b9c-83ea-aa8081969104",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "77a7d154-5914-42c3-94be-c49179739b37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "36fdf3f8-ae52-4587-81ce-57210663973e",
        "cursor": {
          "ref": "c3f35f5b-69e2-4032-b59d-398f47940966",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "47d088e5-8247-4780-8e2d-79473e6ff699"
        },
        "item": {
          "id": "36fdf3f8-ae52-4587-81ce-57210663973e",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "89c09b28-cdd2-454c-9817-12b89706edde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "227b955a-8906-4ce5-a7ba-57013969ba88",
        "cursor": {
          "ref": "3a837dab-cece-41ef-943a-d250847d871f",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "f63ded6c-f760-460a-acc7-4fa631c87cbb"
        },
        "item": {
          "id": "227b955a-8906-4ce5-a7ba-57013969ba88",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "2dc27afd-f01e-4ae4-ad6a-d4bbd5a9da6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "66df129f-4f4c-4263-a6d9-3fb88664b653",
        "cursor": {
          "ref": "9efe49b7-0cdf-4199-a690-047d0addf8dc",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "84633def-0d62-4fc6-a386-cdd7efe02ea3"
        },
        "item": {
          "id": "66df129f-4f4c-4263-a6d9-3fb88664b653",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "f8a790e5-4824-477c-8858-46f590683867",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "a54cba5a-3132-4cf0-9b6a-99289abefd9d",
        "cursor": {
          "ref": "73052702-b0f3-41ea-aabd-f30470a94a05",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "c8140652-71da-47ea-81e6-7e9268b5a7ac"
        },
        "item": {
          "id": "a54cba5a-3132-4cf0-9b6a-99289abefd9d",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "cea3ff6a-04f9-43b2-a095-53cbb99cd29e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "93d4b679-c8ea-470d-8cfa-2cd5622ceb00",
        "cursor": {
          "ref": "033b6221-d1cb-489f-971d-5d93ed08370f",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "d938d003-4c8a-4681-aaee-9d7d5787cbd7"
        },
        "item": {
          "id": "93d4b679-c8ea-470d-8cfa-2cd5622ceb00",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "6885ae74-51f6-484e-b6fe-30ba106f63dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "cb8cc45d-d3ff-469a-837f-86c046100143",
        "cursor": {
          "ref": "b9fffb5e-9bee-418c-b8fc-6ee9f1820bf1",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "0a19ca85-223a-475a-8d0f-0942ce31db7e"
        },
        "item": {
          "id": "cb8cc45d-d3ff-469a-837f-86c046100143",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "f8d7223a-380d-40c2-b73f-3e4f6434fe63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "47075a0b-4749-4f9c-96e0-fc5483316970",
        "cursor": {
          "ref": "5d0cc4b6-4979-4eee-9662-d036f158813b",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "8dd3164a-d944-4b4f-ab86-29128e3f3262"
        },
        "item": {
          "id": "47075a0b-4749-4f9c-96e0-fc5483316970",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "c8ba40dc-03a3-4336-9943-fbda32800967",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "a5adc1a5-7ace-4ed5-9b29-6240daa9bf7a",
        "cursor": {
          "ref": "b5aa03a0-bd52-4cb6-bffe-e796725074f2",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "9999fd56-65a9-42d1-8001-fc11fe032943"
        },
        "item": {
          "id": "a5adc1a5-7ace-4ed5-9b29-6240daa9bf7a",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "c26b6d55-5f53-49f3-a15a-b67e6d59426c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4687,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "1f5d3208-53f2-444d-b8ce-44bd6195ddcc",
        "cursor": {
          "ref": "db566155-5efb-4cd6-a5aa-ba9a3f26d82d",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "ed8207fc-ff2f-4b21-ac98-6c016ffde14c"
        },
        "item": {
          "id": "1f5d3208-53f2-444d-b8ce-44bd6195ddcc",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "404ec511-ea9e-42e9-92da-588d8c42ee1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5947,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "38aa4516-8e09-4a48-8ccb-c2cb87c40d3c",
        "cursor": {
          "ref": "45ba5023-f469-4910-89d9-b1b793609f8d",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "325e79d3-9ce7-497e-bc02-9545bc1ddc90"
        },
        "item": {
          "id": "38aa4516-8e09-4a48-8ccb-c2cb87c40d3c",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "eb571d84-ed28-4e34-9a8c-1e3794980a06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4545,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "468bf802-acbc-4a22-b1b5-e8ecd6de26c8",
        "cursor": {
          "ref": "94d5687b-07a1-41ef-b1cf-9626ae27aaa0",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "760fd69f-a504-435f-af20-2bcab554ff0e"
        },
        "item": {
          "id": "468bf802-acbc-4a22-b1b5-e8ecd6de26c8",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "c3f89533-ac63-4e9f-8cc9-ef388fece042",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3829,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "36bfc9ee-0f85-487c-9f87-14342cc13771",
        "cursor": {
          "ref": "ffa6fecf-4d9c-4a96-9b6a-d0d0de877ac6",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "448a57c0-b204-49ad-8c9f-075697e3b347"
        },
        "item": {
          "id": "36bfc9ee-0f85-487c-9f87-14342cc13771",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "a0fe0b82-e47f-4244-b173-fafeef3e7870",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4008,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "98841ddd-dbc5-40a9-9df3-9ff5915e7987",
        "cursor": {
          "ref": "7c43d5e4-13d8-4b82-b297-5c5449f31a7a",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "3a146db8-e980-4fbd-a1fd-33b1b5de967a"
        },
        "item": {
          "id": "98841ddd-dbc5-40a9-9df3-9ff5915e7987",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "282fdd2f-0181-44e0-8307-e7082d389057",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "0f15e7ad-7bcc-4390-8b7f-b034d4f2df5f",
        "cursor": {
          "ref": "288f17f2-afca-4027-9c8a-4380afdc2879",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "1a4f0880-41bf-4356-b36e-ad5886bd4bbe"
        },
        "item": {
          "id": "0f15e7ad-7bcc-4390-8b7f-b034d4f2df5f",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "b9b7d07e-1e0a-468a-80f8-1af844c8288d",
          "status": "Created",
          "code": 201,
          "responseTime": 3999,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "d6130174-99e9-4cbe-988d-b91e8ed10a65",
        "cursor": {
          "ref": "650c9c2b-f3d8-45fd-ba99-d9236785a546",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "845a1a44-e92b-4d8d-b6cc-7a6c01a67340"
        },
        "item": {
          "id": "d6130174-99e9-4cbe-988d-b91e8ed10a65",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "76d84ab0-260f-4d8c-8fac-809df383d9e0",
          "status": "Created",
          "code": 201,
          "responseTime": 4150,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "46d953d7-cc30-44e5-ad8a-7c58171ff239",
        "cursor": {
          "ref": "e6235f44-d91b-44ef-b1f2-9eefd67ac05d",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "de252a1b-9402-458f-8acd-9aa69d5b44f9"
        },
        "item": {
          "id": "46d953d7-cc30-44e5-ad8a-7c58171ff239",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "514bf0dc-f567-45ab-86b3-cf25c46942eb",
          "status": "Created",
          "code": 201,
          "responseTime": 4348,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "0f570ab3-859f-40a8-af63-80a83bed221f",
        "cursor": {
          "ref": "131c675a-894e-4710-b49a-fe8c5ee9ef86",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "d4cc59a6-55c3-4171-b783-d0e3cb3182e5"
        },
        "item": {
          "id": "0f570ab3-859f-40a8-af63-80a83bed221f",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "d77759a3-d240-4c02-aa3d-2c57f0276a7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "6494a013-d7f6-46fa-94bb-7b5bd0133b74",
        "cursor": {
          "ref": "12aecc16-fc2d-4cb6-b7ba-5c604a4adbde",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "d6595f0a-23c9-4519-9fa1-590415c353ba"
        },
        "item": {
          "id": "6494a013-d7f6-46fa-94bb-7b5bd0133b74",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "4e7bf92f-e59f-4559-94e9-0996f098c82a",
          "status": "Created",
          "code": 201,
          "responseTime": 4450,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "dd80c6a7-7f84-4feb-9f71-11fd00de11d6",
        "cursor": {
          "ref": "800fc82c-8d71-4460-b679-dffecd14678d",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "f57a2467-520a-4059-90ea-fd13bfb5a51f"
        },
        "item": {
          "id": "dd80c6a7-7f84-4feb-9f71-11fd00de11d6",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "844ac74e-69c2-4749-9888-626942e16dd9",
          "status": "Created",
          "code": 201,
          "responseTime": 5373,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "9fd03cdd-1367-47b4-84ff-8b868bfb56ef",
        "cursor": {
          "ref": "27e8b899-ab68-46dd-aadb-6939d5606ade",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "04721a04-e774-4257-bd6f-3a9957a01cfc"
        },
        "item": {
          "id": "9fd03cdd-1367-47b4-84ff-8b868bfb56ef",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "b7fb0f6f-8a93-40a7-8485-3dd4637f2327",
          "status": "Created",
          "code": 201,
          "responseTime": 3841,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "ca43ae8b-b797-446f-a41b-c93e45217653",
        "cursor": {
          "ref": "95567d4b-e90c-49a6-8523-f824f000f8ef",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "ec2f66b7-6fe8-4320-8c54-524b736dc31b"
        },
        "item": {
          "id": "ca43ae8b-b797-446f-a41b-c93e45217653",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "e2461d82-8362-421d-9455-94c245cdb0cb",
          "status": "Created",
          "code": 201,
          "responseTime": 3919,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "8ca5f02f-54ba-48b4-afce-9035b8c97c4f",
        "cursor": {
          "ref": "acf39b00-ddd2-4561-bba9-60b0d4b060f1",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "8d4b9385-d214-4e2d-9fe1-fb209eb8a150"
        },
        "item": {
          "id": "8ca5f02f-54ba-48b4-afce-9035b8c97c4f",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "f4327068-5793-4ec2-98df-f2bf4fecdeef",
          "status": "Created",
          "code": 201,
          "responseTime": 4041,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "37ccdc8e-35e7-44b1-bb4c-5cb92c6e61d0",
        "cursor": {
          "ref": "b27ca81e-4784-44f9-94cd-46a672abc253",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "48cf230f-6eca-48a8-9ec6-79584dbb46a6"
        },
        "item": {
          "id": "37ccdc8e-35e7-44b1-bb4c-5cb92c6e61d0",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "3f230e72-1fdc-4d89-9366-4c536ef5bcce",
          "status": "Created",
          "code": 201,
          "responseTime": 4012,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "bccdd527-ae35-45e8-9929-e94e133424d0",
        "cursor": {
          "ref": "c391834d-8bba-4fec-ac5c-7714537e6b26",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "bcaed0b3-d76f-4600-8439-8bbda9019f61"
        },
        "item": {
          "id": "bccdd527-ae35-45e8-9929-e94e133424d0",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "600912d6-9074-43a6-bfba-6d9a84318d56",
          "status": "Created",
          "code": 201,
          "responseTime": 3837,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "4550c951-1cf0-4454-a291-9b3ebec73285",
        "cursor": {
          "ref": "ceb75382-3291-4b03-9fef-3df5cc7edff7",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "afdf6617-d03c-4df5-9463-86425d9d390b"
        },
        "item": {
          "id": "4550c951-1cf0-4454-a291-9b3ebec73285",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "4b0f4a8e-8f4f-44a1-b794-988f731a135d",
          "status": "Created",
          "code": 201,
          "responseTime": 5899,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "e1c37e2d-bcfb-4707-8e8e-1666c431419f",
        "cursor": {
          "ref": "9e3689d0-8545-41c7-a98e-ff79cb6f33fe",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "e2cf491b-62dd-4e99-b7c6-7c8715b31861"
        },
        "item": {
          "id": "e1c37e2d-bcfb-4707-8e8e-1666c431419f",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "22ca1c07-823a-4f0c-a51a-baddb3338f7a",
          "status": "Created",
          "code": 201,
          "responseTime": 4034,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "7ab634a8-a07a-4fcb-a2eb-8a1d52d37818",
        "cursor": {
          "ref": "c97775de-f0c5-464b-8337-a7ce3ab03ec8",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "c13b14c2-f964-4444-b8ab-b9b48f125028"
        },
        "item": {
          "id": "7ab634a8-a07a-4fcb-a2eb-8a1d52d37818",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "67e2575d-95fa-4509-8714-7b049b8e15b9",
          "status": "Created",
          "code": 201,
          "responseTime": 3811,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "8051c899-49b8-43d9-a892-9799a331bf98",
        "cursor": {
          "ref": "68486b88-e571-4476-b771-e003e870409f",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "bb6390c9-7908-4cec-a8c3-7f834c2821af"
        },
        "item": {
          "id": "8051c899-49b8-43d9-a892-9799a331bf98",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "1a179a53-6013-4291-8103-e7c4d7430eb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "1ec33954-ad91-4124-b372-d1e91ec5afd0",
        "cursor": {
          "ref": "6bfcfbd2-3a8d-4f8a-80d1-b8e419c04e89",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "c1e4e6e5-4d44-4b21-be78-f4397e36fd19"
        },
        "item": {
          "id": "1ec33954-ad91-4124-b372-d1e91ec5afd0",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "d22352a0-4d55-4b00-b4d1-52be0a7f9439",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "42ddbbb4-67d2-4241-bb1d-0810ed4fc4c6",
        "cursor": {
          "ref": "32c78cc9-aac4-4b1b-89b5-768cd6ae4345",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "d1cfbbe0-3e42-44c3-b31b-85a30969bfff"
        },
        "item": {
          "id": "42ddbbb4-67d2-4241-bb1d-0810ed4fc4c6",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "9fbf14c3-f955-4ff7-9d81-424134a9443e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "124d1b4b-1940-400f-9f4b-ae1a77223ed0",
        "cursor": {
          "ref": "a94e0924-dec5-4fd3-88a3-1d5bc9db2c09",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "f005e7a4-b92a-478a-9f8f-7bca73800178"
        },
        "item": {
          "id": "124d1b4b-1940-400f-9f4b-ae1a77223ed0",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "37fddf2d-cf64-44b6-86b7-5f0a5f36194a",
          "status": "Created",
          "code": 201,
          "responseTime": 3892,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "2c5eda95-44f0-45ec-8d26-12593aa9bdbc",
        "cursor": {
          "ref": "c2c6e1b1-3997-4441-8a06-2894eff5e43e",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "b0760331-af80-4f48-be41-5ba32af19c73"
        },
        "item": {
          "id": "2c5eda95-44f0-45ec-8d26-12593aa9bdbc",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "9d022e6f-6014-4cc1-a950-6149b1a3c5a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "58d3204b-1248-43fb-a31d-d99a4163a19b",
        "cursor": {
          "ref": "9fa9d48c-0bcf-42c0-af8d-38d137ebcbff",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "5933d5ef-08d2-4c30-aa36-b3cefde6a090"
        },
        "item": {
          "id": "58d3204b-1248-43fb-a31d-d99a4163a19b",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "4550197f-4426-4ff1-81ca-e484de9d3548",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "ac9b3f45-b33f-49b2-b8cf-0e53d0d7c6d1",
        "cursor": {
          "ref": "8ce97540-b759-4345-9875-a94b02efd216",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "10cb92bf-d1d8-4ac3-8521-a3a05797534d"
        },
        "item": {
          "id": "ac9b3f45-b33f-49b2-b8cf-0e53d0d7c6d1",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "48828e4c-d969-45ea-bb64-b3fb32ce3772",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "7cf7c8d4-a3b9-4e72-ae9c-eb6676c50a46",
        "cursor": {
          "ref": "514f475f-ae40-416a-8aad-bdb11f3a5274",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "b593f6d6-f24d-4dc1-a3c6-d4253cd5b6c8"
        },
        "item": {
          "id": "7cf7c8d4-a3b9-4e72-ae9c-eb6676c50a46",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "83a238bd-b79c-4725-85a3-f415f57f1819",
          "status": "Created",
          "code": 201,
          "responseTime": 3650,
          "responseSize": 709
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "d111384d-5ffb-41c6-bcf8-c16400cbc963",
        "cursor": {
          "ref": "a4a99b86-56ed-4a6f-a670-22f77d6c71ba",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "03e5743a-8286-469b-bc0f-a794e720bf6c"
        },
        "item": {
          "id": "d111384d-5ffb-41c6-bcf8-c16400cbc963",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "a8f344bb-b95d-41be-a488-95791c1f6c8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 74
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "1ff0b7dd-447f-4d38-92fb-d3b8dfb47832",
        "cursor": {
          "ref": "67b909d0-bd27-4e75-9f7e-d5eadce69dbc",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "d33efd26-82f0-4b36-802d-609ace546df6"
        },
        "item": {
          "id": "1ff0b7dd-447f-4d38-92fb-d3b8dfb47832",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "0900deb3-503f-4486-9012-867e136358c0",
          "status": "Created",
          "code": 201,
          "responseTime": 3901,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "29712b33-1661-4193-97f8-2c255eeacaf5",
        "cursor": {
          "ref": "d825067f-1a0f-42c0-863c-6f3785569a0e",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "8023d9a1-7d6e-48f5-80e0-d29876ec7309"
        },
        "item": {
          "id": "29712b33-1661-4193-97f8-2c255eeacaf5",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "ad7fda62-ca46-4784-99fe-9862e6ccc610",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "2375cf99-ccb9-4b08-9d73-1f1b2a5071d1",
        "cursor": {
          "ref": "8674136c-aabb-4924-9ead-84a4b67fac6d",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "e81ebcb8-9578-4af7-9fb0-92e9a71fe4d1"
        },
        "item": {
          "id": "2375cf99-ccb9-4b08-9d73-1f1b2a5071d1",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "e55f9b4e-044c-4920-8dcb-9b08831bf5e7",
          "status": "Created",
          "code": 201,
          "responseTime": 5740,
          "responseSize": 707
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "1dd315f3-a2c0-4dc0-b1a6-02d224edbf3f",
        "cursor": {
          "ref": "948ff861-37ea-49a6-9403-0ee5e3090598",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "0bd0cb96-935d-40c1-aa2a-f3c2aec379d4"
        },
        "item": {
          "id": "1dd315f3-a2c0-4dc0-b1a6-02d224edbf3f",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "c887d495-531a-44ee-8afb-d8dd6fa554ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3829,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "8a3720fc-0c31-4645-b9bd-f83e425ca3ec",
        "cursor": {
          "ref": "8cc98a18-3b32-4d66-86b9-d74f2314d2b0",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "3c744b90-a358-4989-9e32-ee59682c49e1"
        },
        "item": {
          "id": "8a3720fc-0c31-4645-b9bd-f83e425ca3ec",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "954fc3ff-4761-4031-8a59-facd8aa66bc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3845,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "c8ba8e75-bab4-469e-9411-21e4799693ab",
        "cursor": {
          "ref": "9365797e-607a-4c9e-91ca-5e20d6671b81",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "1827761f-52a4-4c52-8a04-5c5efae43564"
        },
        "item": {
          "id": "c8ba8e75-bab4-469e-9411-21e4799693ab",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "0cae293f-3e08-401d-8493-6b2f8c446e76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 78
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "f1f8dbac-b49b-4e8b-b30d-806b45ca2c7c",
        "cursor": {
          "ref": "809ee4e3-e6dd-436d-a68b-d854acf1f6be",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "30d2759e-4d97-4f2e-bca1-ea56d34eba41"
        },
        "item": {
          "id": "f1f8dbac-b49b-4e8b-b30d-806b45ca2c7c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "de058920-2dc9-4a54-960a-7929d1e26948",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3775,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "4c9ccf48-b731-449e-a9a6-fc6fe38a340e",
        "cursor": {
          "ref": "1a4ec46d-89ac-4477-ad50-57089155ba4a",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "eedade55-7938-4947-b31f-f07fe325d638"
        },
        "item": {
          "id": "4c9ccf48-b731-449e-a9a6-fc6fe38a340e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "2e43221b-5b7f-4390-ae63-692954ec1b3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 91
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "0f0522e8-4955-464a-8cc4-35bf38d625e1",
        "cursor": {
          "ref": "4c9ccae0-21e8-43fc-9e8e-b11a6e575d9f",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "eb401163-c0b5-4061-8637-9f82a1105a9d"
        },
        "item": {
          "id": "0f0522e8-4955-464a-8cc4-35bf38d625e1",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "f6406fda-3ab2-4fb3-afc2-a323228c62fd",
          "status": "Created",
          "code": 201,
          "responseTime": 5367,
          "responseSize": 695
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "4d608a5f-2a35-4a27-a6e8-230b934ff0ab",
        "cursor": {
          "ref": "d98d71b0-6366-4c75-966b-9064c80cc537",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "6f7e0e84-9fde-42bb-8e0f-7565daeeb1f2"
        },
        "item": {
          "id": "4d608a5f-2a35-4a27-a6e8-230b934ff0ab",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "f9271161-3e72-4cef-8299-c5742aef460d",
          "status": "Created",
          "code": 201,
          "responseTime": 4870,
          "responseSize": 695
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "02b56449-2e09-42cf-b788-580fc1752d1a",
        "cursor": {
          "ref": "27c5643a-5bd1-49a7-b5bb-14d002cc82e2",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "733e7b93-365c-4d6e-97ca-bf53bc984c48"
        },
        "item": {
          "id": "02b56449-2e09-42cf-b788-580fc1752d1a",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "cbfc8ca0-1baa-455d-a19d-2fc3ae4fd304",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "7e2fbfa2-1092-4709-a20d-9886d12cd558",
        "cursor": {
          "ref": "9bdbfc1b-7279-4b47-832b-0dc9cd5fcd3a",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "2b43d656-2073-4d13-9e29-153fe2e491db"
        },
        "item": {
          "id": "7e2fbfa2-1092-4709-a20d-9886d12cd558",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "002c159c-caf5-4a00-83b2-90b78374a0ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "c63305c6-2030-40b8-8074-02658a98ee56",
        "cursor": {
          "ref": "1510157f-9736-4847-8004-1e1a3c5cca12",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "2d987a8b-913c-4bd6-9f1c-d12660045afd"
        },
        "item": {
          "id": "c63305c6-2030-40b8-8074-02658a98ee56",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "3bcbc8c6-69a2-43a6-898a-b5075403f67e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 91
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "f465616b-dcf6-4d65-b6ac-ffb7945e8d0d",
        "cursor": {
          "ref": "23b72113-c7e7-4ab0-a8ca-d4c21e2dac82",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "6c0da67a-f52c-4030-9e8f-ee9279dfcbab"
        },
        "item": {
          "id": "f465616b-dcf6-4d65-b6ac-ffb7945e8d0d",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "a98782dd-3133-4eed-be0f-41d1e9aca75d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "5d028de6-5e12-47ac-b706-cd7215f15be7",
        "cursor": {
          "ref": "f3d55047-121a-40db-ae94-f6ead9fc4931",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "cac0de81-ae8c-47d7-bc79-8f239f299aff"
        },
        "item": {
          "id": "5d028de6-5e12-47ac-b706-cd7215f15be7",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "55ef62d9-788e-4895-ae71-f9e178c19610",
          "status": "Created",
          "code": 201,
          "responseTime": 6027,
          "responseSize": 695
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "76aaf868-5bc6-4c3b-bbfb-c251dfe3ee77",
        "cursor": {
          "ref": "b930d64f-3321-4cd8-8d3c-9d9058ba9c1b",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "f21319fe-6595-4238-9d1d-719db5c0d250"
        },
        "item": {
          "id": "76aaf868-5bc6-4c3b-bbfb-c251dfe3ee77",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "735f092c-e6b3-4c06-8589-bd659bc18162",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 627,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "951de245-9b69-4ee6-b629-d6165a131a2e",
        "cursor": {
          "ref": "9aaee60d-fe82-4b1a-83d3-be5aa4664499",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "d9e8458b-5af9-43f6-a06e-d5c3cb5ac4bf"
        },
        "item": {
          "id": "951de245-9b69-4ee6-b629-d6165a131a2e",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "8dc59011-5ce0-4fbf-a1be-f61fce4416b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 151,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "cb025042-e00f-44bc-839e-52cb9ce51070",
        "cursor": {
          "ref": "79601875-40a6-4543-899a-51b765417cef",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "41f2fac7-30d4-449f-9ebb-9cc54d9b4e06"
        },
        "item": {
          "id": "cb025042-e00f-44bc-839e-52cb9ce51070",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "65a1bd6f-9082-4ffe-8184-e8022701d585",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "521ccc49-3062-4702-b619-dd394cc54d2d",
        "cursor": {
          "ref": "8b270951-ef59-4b34-9d25-bd59988d2362",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "cec7ae49-169b-4001-b835-d10751111a25"
        },
        "item": {
          "id": "521ccc49-3062-4702-b619-dd394cc54d2d",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "8d58026c-b51c-424a-a810-cec2ce2274bb",
          "status": "Created",
          "code": 201,
          "responseTime": 4720,
          "responseSize": 695
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "2c36844c-b4a8-423e-8731-db01018e7a77",
        "cursor": {
          "ref": "56c84c97-3b87-495e-a7d9-743c319c8a1b",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "a8d67e36-ed13-4c69-9d52-a87d84b2bde9"
        },
        "item": {
          "id": "2c36844c-b4a8-423e-8731-db01018e7a77",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "85bcfd9f-b929-42aa-9673-903742b56b96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 386,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "fa45dd5d-c02a-4ede-ab76-1da74eb0202f",
        "cursor": {
          "ref": "aa19f0a8-a389-439e-b335-69ef91c37340",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "f75c630e-00df-401d-bd1f-342171e0edc7"
        },
        "item": {
          "id": "fa45dd5d-c02a-4ede-ab76-1da74eb0202f",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "fc827709-9172-481d-9971-35698783e463",
          "status": "Created",
          "code": 201,
          "responseTime": 6787,
          "responseSize": 695
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "29d09565-a11c-4fc0-9a54-0da6b89df972",
        "cursor": {
          "ref": "e02eae13-fc99-4899-814e-69fa450c8554",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "f5657f32-fac5-44a0-8994-3b0e12022a5f"
        },
        "item": {
          "id": "29d09565-a11c-4fc0-9a54-0da6b89df972",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "928e58b7-5a05-4cc9-a498-218211b3dfb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "53d791d3-f0e2-469c-8227-ab44e930c179",
        "cursor": {
          "ref": "695c8b35-20e1-4ed2-9c52-05b765ffce1c",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "53e994e2-d5e2-495d-9bc7-0fbe52c2d2f7"
        },
        "item": {
          "id": "53d791d3-f0e2-469c-8227-ab44e930c179",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "31cf922a-5046-4517-88bc-07158b6f9363",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "32998d24-d1f9-4c5c-b26a-b0144668fda4",
        "cursor": {
          "ref": "3c906667-8426-47ed-87d2-9f281b7dea24",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "95ee3375-1d58-4b50-837d-b51c8726950f"
        },
        "item": {
          "id": "32998d24-d1f9-4c5c-b26a-b0144668fda4",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "5bf6cf80-e8c8-41cf-a20d-226d80a0adfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "18d85135-19c0-46e3-852f-6e6dad660fa3",
        "cursor": {
          "ref": "4f3c71a8-044c-4732-a86e-86a49ec47464",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "e563f895-f2b5-4886-a0f0-d1522d56b2f9"
        },
        "item": {
          "id": "18d85135-19c0-46e3-852f-6e6dad660fa3",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "0c441960-3953-44d1-930e-f117e2135fb9",
          "status": "Created",
          "code": 201,
          "responseTime": 6415,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "d4a0105b-1afe-48fa-831d-b58be0a738ea",
        "cursor": {
          "ref": "72dac23b-be9d-4011-9e6d-3955e373a4e8",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "2c69520b-15e1-46e7-901c-3320ace4fd6c"
        },
        "item": {
          "id": "d4a0105b-1afe-48fa-831d-b58be0a738ea",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "c40d2e56-0c8c-4971-8ce9-8601576a4f54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 544,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "92eafc91-a574-4afa-a0cb-953f63d48ad3",
        "cursor": {
          "ref": "3a2d09fb-2187-4389-9c4b-a672340410ce",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "9f871458-de66-4a83-9425-b2610f59316a"
        },
        "item": {
          "id": "92eafc91-a574-4afa-a0cb-953f63d48ad3",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "c843d12f-ee6f-4eb6-99da-a1c78a1ffb85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 241,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "f58d8816-f98e-4ce6-9dad-372bbbc94850",
        "cursor": {
          "ref": "a620bd37-c5af-465c-b956-f3fe6e73ad57",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "f09a5e16-9371-4d99-b522-4811e9b4c79c"
        },
        "item": {
          "id": "f58d8816-f98e-4ce6-9dad-372bbbc94850",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "85b00fae-36f5-4606-8b85-76bda8712952",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 140,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "8bbbf86c-2d8e-41ff-889f-a06f7801e7f8",
        "cursor": {
          "ref": "a367f992-672a-4508-87fc-c5bc80ab0729",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "3cad87a9-dc68-48d0-9768-e90674d56eb1"
        },
        "item": {
          "id": "8bbbf86c-2d8e-41ff-889f-a06f7801e7f8",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "d4a7f90d-767c-420f-bba0-05f3adbb6cf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "56b7a6ae-4d72-4012-b346-fec6d37754ac",
        "cursor": {
          "ref": "730ddb3e-2508-41f6-ad43-e482c7f683f9",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "ce8941c7-1f27-43a9-bc11-0ce6e60103a1"
        },
        "item": {
          "id": "56b7a6ae-4d72-4012-b346-fec6d37754ac",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "a7ae953c-e3df-4427-9d76-bba0ae64e2f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "80cb348b-37ec-40f7-b55e-05e5be351822",
        "cursor": {
          "ref": "4aea906a-4c38-4939-81ed-91ed17fbef68",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "b0418824-f365-4c25-9405-8d8a0bdb881f"
        },
        "item": {
          "id": "80cb348b-37ec-40f7-b55e-05e5be351822",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "5cf25f85-fb16-47b3-86b2-2fae83d40cc8",
          "status": "Created",
          "code": 201,
          "responseTime": 4964,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "555c1c08-2441-4ba3-a3d6-43cddd8d7d3b",
        "cursor": {
          "ref": "c7d5def1-7343-4878-8995-6816b7e4b3d1",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "7a7e66c3-216f-4be2-a6fb-c183af819f16"
        },
        "item": {
          "id": "555c1c08-2441-4ba3-a3d6-43cddd8d7d3b",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "4d06ad9b-62eb-42cd-8e84-f9f33eb10fa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "75b9ddf0-2aae-4e30-a9a5-84b054fbf065",
        "cursor": {
          "ref": "51322dc4-61cd-4ff8-a314-be67e5b9b90a",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "134222af-c41f-46af-9823-71bab40e7be1"
        },
        "item": {
          "id": "75b9ddf0-2aae-4e30-a9a5-84b054fbf065",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "911bd2b8-cc99-40e4-9a84-e08c6036ccc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 128,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "9f19b627-aa74-429a-9da6-4018ea9af873",
        "cursor": {
          "ref": "3be2d13e-961e-4c69-a341-86efc018fc78",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "750b3e76-b373-486d-8b5b-8b98c8fe8505"
        },
        "item": {
          "id": "9f19b627-aa74-429a-9da6-4018ea9af873",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "f10a199b-66b8-4697-80d4-170d6ea630e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "3cd379c2-b5e1-497d-bbc6-221e2213bbd8",
        "cursor": {
          "ref": "2493a9b1-1067-4178-b971-c308b6cfe369",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "09aeda3c-fd72-435f-ad1d-0e529a3f4bbe"
        },
        "item": {
          "id": "3cd379c2-b5e1-497d-bbc6-221e2213bbd8",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "fc6d1dc7-0103-4425-9391-8fd678872c07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "7dca690c-6f6b-46fd-9374-82eacdc3a2c7",
        "cursor": {
          "ref": "2dfbd18a-aad5-47e1-bee3-eaa1b7a63258",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "da31f0cf-0948-49f7-9c4c-8bd6c272f87f"
        },
        "item": {
          "id": "7dca690c-6f6b-46fd-9374-82eacdc3a2c7",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "da4b35ed-d071-43c3-8e50-5c6160f2e3a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "e741e5be-8429-41e5-b35b-25e039260164",
        "cursor": {
          "ref": "142da200-f0d6-488d-a54c-fa761d4335f1",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "236345d0-319a-4d2d-9462-684a8450dbd3"
        },
        "item": {
          "id": "e741e5be-8429-41e5-b35b-25e039260164",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "3d587ffa-afb4-45a9-8ebf-93ed926d8915",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "f4492be1-48f1-42cc-a0c6-8f49fa7852cd",
        "cursor": {
          "ref": "8a88cfc6-ed44-4e1d-b7a6-1fcb24b464fe",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "8313d99d-3c04-4bd7-acd7-71776f9d20ec"
        },
        "item": {
          "id": "f4492be1-48f1-42cc-a0c6-8f49fa7852cd",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "981f47d4-d2a1-41cc-878e-29eb9953b208",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "9aed80c6-cdcc-45fd-9c64-e2fde9180fd9",
        "cursor": {
          "ref": "8ba1170b-ee64-4181-aa8e-a62e8fbe3939",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "c1462035-585a-418b-82ea-bc28ac74cec8"
        },
        "item": {
          "id": "9aed80c6-cdcc-45fd-9c64-e2fde9180fd9",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "2527cb64-806e-472b-a348-a85d0babf4d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 541,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "088e2a6d-b497-41f7-9b12-2fa0a08f58b0",
        "cursor": {
          "ref": "d31cbff4-1477-4d74-bd04-243ebc5b1edc",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "e1eabff9-a443-4780-baa2-c468688e4a81"
        },
        "item": {
          "id": "088e2a6d-b497-41f7-9b12-2fa0a08f58b0",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "83769158-b544-4822-9566-4d99d5078cec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 122,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a3157ba-8757-48d4-87fe-9b355996dca1",
        "cursor": {
          "ref": "8d922eb6-029d-435d-a3c4-25f643eb3e65",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "f348364a-118e-4b74-b10d-68ebb796aeaf"
        },
        "item": {
          "id": "4a3157ba-8757-48d4-87fe-9b355996dca1",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "2f3d085b-1561-48be-a7de-1eb050e07ff0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 630,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "ecc146c7-7aee-4a8b-a8c4-bdc569f1ae21",
        "cursor": {
          "ref": "a40ebcb4-7c40-49ba-8066-fcd9878a4dbf",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "f4a7381c-80e5-4020-ba05-71a84fcda425"
        },
        "item": {
          "id": "ecc146c7-7aee-4a8b-a8c4-bdc569f1ae21",
          "name": "credentials_issue"
        },
        "response": {
          "id": "b81559c7-bcb3-47c8-abf7-49cb9239c9f2",
          "status": "Created",
          "code": 201,
          "responseTime": 5397,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:106)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:106)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:106)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:6:106)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 6,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:7:106)"
            }
          }
        ]
      },
      {
        "id": "5c663611-9c14-490d-92f8-fb46eccee80f",
        "cursor": {
          "ref": "f41b277e-a10e-4950-8b0c-56918fbe940d",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "f60cdd2b-9982-4208-af53-20e97180d6cd"
        },
        "item": {
          "id": "5c663611-9c14-490d-92f8-fb46eccee80f",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "00b01d72-ddb0-4b9c-a0c4-e12ece2f3a26",
          "status": "Created",
          "code": 201,
          "responseTime": 4987,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:107)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "7e6bff59-a2b4-4dd7-b1d1-36dd71e93a85",
        "cursor": {
          "ref": "521695f3-356d-478f-89f0-73a40120d022",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "99af9a6d-24f6-4af6-802e-a04097584521"
        },
        "item": {
          "id": "7e6bff59-a2b4-4dd7-b1d1-36dd71e93a85",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "35f04d4b-8832-4296-9bbf-112789b71257",
          "status": "Created",
          "code": 201,
          "responseTime": 4449,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:108)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:108)"
            }
          }
        ]
      },
      {
        "id": "0493d410-ec47-4c91-bee4-85eb6e090908",
        "cursor": {
          "ref": "302ae3c7-2cde-4133-930f-5baeed297944",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "8036de14-28d0-43be-9082-546c38391306"
        },
        "item": {
          "id": "0493d410-ec47-4c91-bee4-85eb6e090908",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "9553c182-cb12-443c-8b0f-b0173c401b8a",
          "status": "Created",
          "code": 201,
          "responseTime": 5797,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:109)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:109)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:4:109)"
            }
          }
        ]
      },
      {
        "id": "8edbb6ad-61b6-40a0-b11c-568ca529ec38",
        "cursor": {
          "ref": "1ba37b26-7a0f-4eec-89f4-06312f691a55",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "3b6b2688-eab5-4958-8621-700286a4be5a"
        },
        "item": {
          "id": "8edbb6ad-61b6-40a0-b11c-568ca529ec38",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "3f65b1d5-6402-42f4-a93c-71347099c3fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1038,
          "responseSize": 369
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:110)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:110)"
            }
          }
        ]
      },
      {
        "id": "2490b5b6-5b14-43c4-b1ae-1a324c5050fd",
        "cursor": {
          "ref": "6c4b6c40-b523-43fa-a4cc-0175030e2a3b",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "39950a92-8d09-43fa-92d8-9119a9cf1557"
        },
        "item": {
          "id": "2490b5b6-5b14-43c4-b1ae-1a324c5050fd",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "7e66c7dc-e53c-43ac-9230-00c8e03c19cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "2490b5b6-5b14-43c4-b1ae-1a324c5050fd",
        "cursor": {
          "ref": "6c4b6c40-b523-43fa-a4cc-0175030e2a3b",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "39950a92-8d09-43fa-92d8-9119a9cf1557"
        },
        "item": {
          "id": "2490b5b6-5b14-43c4-b1ae-1a324c5050fd",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "7e66c7dc-e53c-43ac-9230-00c8e03c19cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "83052a08-63b7-4078-9946-f82e17049725",
        "cursor": {
          "ref": "66339b5d-46c6-487e-b55f-d1c6fe25c605",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "fe93b529-dafd-405f-9294-a969f0448ce3"
        },
        "item": {
          "id": "83052a08-63b7-4078-9946-f82e17049725",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "a12a74c4-b741-494e-9b4a-59a8a6496cf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "748ed49e-707d-4ac3-ace1-78944d68b8b2",
        "cursor": {
          "ref": "cca98580-f6b4-4dac-a7f7-c90f27ce6657",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "f7ad329a-6ecb-477e-a247-de797c31386a"
        },
        "item": {
          "id": "748ed49e-707d-4ac3-ace1-78944d68b8b2",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "4b6cebe8-435d-4d8d-ab31-78a324a5e76a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "e7a6ff11-a6c2-4cfe-a7d1-acb1d38d8a8b",
        "cursor": {
          "ref": "f116a1c7-67b1-48b3-ac83-ef1932885c46",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "b1efe4f9-d2d6-4ffa-8a58-4d9c533588f6"
        },
        "item": {
          "id": "e7a6ff11-a6c2-4cfe-a7d1-acb1d38d8a8b",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "819337c4-3dbc-470d-9e83-eadbdb5d8289",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "09251036-7bd3-4ef0-b92e-a3c528431051",
        "cursor": {
          "ref": "a4c7286c-6c70-4951-a37b-c9f7480ab924",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "7802e8c8-91bb-433a-bd39-68ca305320d0"
        },
        "item": {
          "id": "09251036-7bd3-4ef0-b92e-a3c528431051",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "8b42ad91-b75d-43eb-8d95-357e34c0b4e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "681f8d04-d8c1-4ea4-be35-8e6ed4eb1170",
        "cursor": {
          "ref": "10b2189d-552e-49a1-a256-348a1e813fc4",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "ef3d2a3b-8fba-4895-94fa-23c69dd78323"
        },
        "item": {
          "id": "681f8d04-d8c1-4ea4-be35-8e6ed4eb1170",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "a1f9dcc4-1c47-40ef-8955-d5ae4cbe5a6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "08fecb9a-4a17-410d-a1ce-2c36512ca5c9",
        "cursor": {
          "ref": "ce29bf17-fcba-49ce-b0b3-8faab0e658bb",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "31a2a4a1-9194-49e5-9343-f0a20f349e86"
        },
        "item": {
          "id": "08fecb9a-4a17-410d-a1ce-2c36512ca5c9",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "6b162760-f1db-4a46-85b6-64c8b4ed9bf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "8230a185-2403-4b92-aa3d-8a865b62807f",
        "cursor": {
          "ref": "608e4ddd-5c43-4dde-aa67-a88d10d9932f",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "d7fcd190-0726-484c-a8a9-ebc6e97832af"
        },
        "item": {
          "id": "8230a185-2403-4b92-aa3d-8a865b62807f",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "52ad31a3-3e8f-4d08-9f29-5a33e6d97cfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 164,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "87cc09e7-7237-4e42-838f-af9bddbd892c",
        "cursor": {
          "ref": "8fcef9ca-2542-461d-8793-9260fd8caa48",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "94824ee9-39a8-45e0-b275-da4e13431af5"
        },
        "item": {
          "id": "87cc09e7-7237-4e42-838f-af9bddbd892c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "9cfb432d-7d39-47f3-afe8-f8947ba0c09b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "4a20f074-7c09-4762-a2bd-afaf4ea6be0d",
        "cursor": {
          "ref": "b105764a-4f03-4df8-8a5c-3fbec8623c34",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "72240bcf-50d0-426b-928f-9cdae5e2fb70"
        },
        "item": {
          "id": "4a20f074-7c09-4762-a2bd-afaf4ea6be0d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "4550461e-e4dc-4382-8174-26a5aaa71ebf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "ef3cdd75-b2fb-4a35-a3d3-4f99a190ce67",
        "cursor": {
          "ref": "eb00716e-845e-4f36-8524-b9524811a0b8",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "878d5a2b-2114-4f8f-b56a-6b854a8a27af"
        },
        "item": {
          "id": "ef3cdd75-b2fb-4a35-a3d3-4f99a190ce67",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "a0782257-e5f5-44ac-98c3-a4fed393c79f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "159d44a2-de0f-4ca1-ac89-a10d8b7ade60",
        "cursor": {
          "ref": "244036b1-cb22-45aa-8d13-95ac0dd2087d",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "10228d2b-5ff0-4a13-a444-16ba990f09b8"
        },
        "item": {
          "id": "159d44a2-de0f-4ca1-ac89-a10d8b7ade60",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "19a0d001-421f-427e-9ff0-0725acf1b292",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "34bae42d-a35c-446b-ac0e-806da3abc651",
        "cursor": {
          "ref": "e8313b5a-96df-474e-98f2-e1aed1529abc",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "6ea4597c-630a-4d68-93eb-f6d1b3ae64ae"
        },
        "item": {
          "id": "34bae42d-a35c-446b-ac0e-806da3abc651",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "b8b33059-6e65-4213-af9e-9df7dda1c0b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "fa0d98c3-1d6d-48c1-b14c-b5f3560233b0",
        "cursor": {
          "ref": "e44c29a2-aa26-4a56-86dd-684afab2758d",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "f10ac1dd-6196-465f-8abf-180e682b3b93"
        },
        "item": {
          "id": "fa0d98c3-1d6d-48c1-b14c-b5f3560233b0",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "773f7a9f-aaeb-41a7-9193-954057ab2fd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "2224685b-1da9-43d2-a326-44e4ac9b8f6e",
        "cursor": {
          "ref": "ace2e314-94c2-4535-b47e-2331225c2c2b",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "4be0c630-4aa1-4cce-9f3d-53d1cf0d1ff6"
        },
        "item": {
          "id": "2224685b-1da9-43d2-a326-44e4ac9b8f6e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "47d516d8-def5-4f35-8cfd-85c471ef5c31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "9c09cc47-b879-4f46-80ea-aa1afac098fc",
        "cursor": {
          "ref": "f8d7ac73-8095-49d9-a050-ee520acc8641",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "205197aa-4c7f-43b2-9b78-ecea01e29e55"
        },
        "item": {
          "id": "9c09cc47-b879-4f46-80ea-aa1afac098fc",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "2f68c356-fe5c-4c61-9677-d2d354feefab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "c261abcc-1bed-43d6-af8a-21ae47c371e7",
        "cursor": {
          "ref": "c35664e9-1067-451b-95c2-8492125b4712",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "b79d10fa-66df-43b8-b96a-ca09eb491e0c"
        },
        "item": {
          "id": "c261abcc-1bed-43d6-af8a-21ae47c371e7",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "48b7402c-f419-4f68-81b0-9d5a60bb26ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "ba1b2a8e-4b22-4a5f-a3ef-f37f6ff59d7b",
        "cursor": {
          "ref": "01784c1f-7147-422f-8330-6d0abb940a7a",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "a489c755-68ac-45b8-aa77-b7dfaf55e43b"
        },
        "item": {
          "id": "ba1b2a8e-4b22-4a5f-a3ef-f37f6ff59d7b",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "25ec1215-604e-4250-931c-9e79f087b77c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "e314ea41-2cd4-4034-97dd-89309db600db",
        "cursor": {
          "ref": "db0ca987-d819-4d68-8402-2af52e233576",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "500de8de-861e-4c2e-aa4f-2ddcd6a874e3"
        },
        "item": {
          "id": "e314ea41-2cd4-4034-97dd-89309db600db",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "bd5995d6-3818-4126-b3a5-c3c8164786eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "f2ceff5d-0fa3-4262-b8fd-6068d1f6ad71",
        "cursor": {
          "ref": "a57774e1-f49f-4790-8dff-570a180d436b",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "c860df48-1576-42ed-bfd6-67e047c1f4ce"
        },
        "item": {
          "id": "f2ceff5d-0fa3-4262-b8fd-6068d1f6ad71",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "380b9ba1-edd7-47b2-bdff-339033327394",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "7b65a3c1-42b3-4056-a569-5156b4afdcff",
        "cursor": {
          "ref": "ea9d1787-7b51-4507-be3b-3e335b0336c2",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "fa008fdb-dd8a-455f-a0db-d8423141026e"
        },
        "item": {
          "id": "7b65a3c1-42b3-4056-a569-5156b4afdcff",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "4871c901-bc2e-4469-9cc6-4d221993e210",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "93854acb-e621-4435-84f2-f7f101afcf82",
        "cursor": {
          "ref": "e68e0319-684b-4476-8776-a3fc41adab69",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "d4adc362-ce0d-455a-a044-054f87353998"
        },
        "item": {
          "id": "93854acb-e621-4435-84f2-f7f101afcf82",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "b51e7602-6610-4b75-a7b2-6f55ca6c0990",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "5f595029-641e-430a-b9e0-549cf0ece0c1",
        "cursor": {
          "ref": "26a0ba25-4278-4052-aa23-ea87f7c3d645",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "76501b57-f0bc-4944-a7ce-6086fbf58209"
        },
        "item": {
          "id": "5f595029-641e-430a-b9e0-549cf0ece0c1",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "b972549d-acfa-45e3-ab39-25726687cbe1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "a723aa80-99bf-4196-9161-8eb23c0525f7",
        "cursor": {
          "ref": "ed67adc0-b4ec-40c2-9b87-2b12adffcf81",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "111ea8f8-c011-47a5-a06b-65c97640d92a"
        },
        "item": {
          "id": "a723aa80-99bf-4196-9161-8eb23c0525f7",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "cd650471-c56e-481c-bc8d-f83f61b1ac8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "c5d3e0d9-b6cd-45f1-b5de-24e06bd7fa86",
        "cursor": {
          "ref": "720959c3-dede-4a17-90dc-0190c5b259a2",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "19454dd4-e1cb-43ad-8c77-9a48ba1ac13a"
        },
        "item": {
          "id": "c5d3e0d9-b6cd-45f1-b5de-24e06bd7fa86",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "9df9e92b-e8e8-4d6e-a3e3-1e90664b6984",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "9801fcae-a64d-400a-812f-b0d41751c6e0",
        "cursor": {
          "ref": "75058097-33bc-4cbd-9924-3499ad15bde3",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "ae59780d-b86c-4427-b5ea-3236808493c3"
        },
        "item": {
          "id": "9801fcae-a64d-400a-812f-b0d41751c6e0",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "1ab265fe-ddc5-4e45-82b3-a20c14ad7675",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "f74334c6-e88c-4418-8596-62f005214fc9",
        "cursor": {
          "ref": "9eb42eed-c63d-4177-b5e5-0062f64b35e9",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "5ce9e227-f751-4f13-9dd2-e5675f53e3d1"
        },
        "item": {
          "id": "f74334c6-e88c-4418-8596-62f005214fc9",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "f7c29743-803e-4a89-8004-e241fc9b63ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "fb745c0f-71c2-4db5-9bb5-6917b7fe2a58",
        "cursor": {
          "ref": "053c62e8-9337-4df5-81fe-2b4e28d9940d",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "5dd9d1f4-1a8b-41b7-b1e8-8699c14d7d13"
        },
        "item": {
          "id": "fb745c0f-71c2-4db5-9bb5-6917b7fe2a58",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "97bc8828-892c-4548-bf36-40d3de546221",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "bc36763b-f071-4bd5-b58c-c36bca49dce4",
        "cursor": {
          "ref": "54fc5778-f37f-4b8a-beb9-1dc6e49f2e36",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "52b4eb94-a609-4cac-97f2-b10b453db4b6"
        },
        "item": {
          "id": "bc36763b-f071-4bd5-b58c-c36bca49dce4",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "44ac14d7-7225-4dbe-8641-9c460bf7d971",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "2105982e-2021-42cb-b49f-bf6c66c20c2d",
        "cursor": {
          "ref": "621d1d8c-63ba-4e50-90da-68501402b696",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "71ad2640-3bbd-4c38-b7c6-773757f83a1d"
        },
        "item": {
          "id": "2105982e-2021-42cb-b49f-bf6c66c20c2d",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "486c14a4-d1e1-48b7-9a28-e4e0fad5bc18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "becff96b-f73a-4234-b42f-798e5264fad9",
        "cursor": {
          "ref": "8831c343-17f9-4b42-8948-b290cd8d1ef6",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "2910ecbf-3e81-40fc-ac80-4a9ae8cb145d"
        },
        "item": {
          "id": "becff96b-f73a-4234-b42f-798e5264fad9",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "0f95ac2c-6011-4ba5-b9c6-00a893347c6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "8ab0337a-9ed6-406a-ba60-9e193f1dbd40",
        "cursor": {
          "ref": "0a4e7225-076d-46e8-9fbc-81bf2a2a1393",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "e533b508-fdea-41ab-8497-b7e336d4d5ad"
        },
        "item": {
          "id": "8ab0337a-9ed6-406a-ba60-9e193f1dbd40",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "ef35a403-5d67-4807-a7dc-cb95102d48af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "ca2a28f3-ec75-4a6b-b414-56f786fead2e",
        "cursor": {
          "ref": "d40c9e2c-a2fb-4b90-8597-e1c5970727d9",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "50ff63fe-a836-4f70-942c-165aab330156"
        },
        "item": {
          "id": "ca2a28f3-ec75-4a6b-b414-56f786fead2e",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c3c08675-18a6-4dfd-850d-69966dc2c3e2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9f2a3d5-c4cd-40a3-ae86-c35db861f1cd",
        "cursor": {
          "ref": "5f7a6b35-7b66-4ac0-9777-a21a216619ad",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "3c35900e-617e-4334-b022-a1401a2f0ced"
        },
        "item": {
          "id": "d9f2a3d5-c4cd-40a3-ae86-c35db861f1cd",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "1be843fe-c90f-4b19-992f-24d0fa34ef7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "0ab5f08a-6521-4b3f-a31a-e76bb4654cc7",
        "cursor": {
          "ref": "df30ad69-299a-4645-8d51-d4a0fae49a3a",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "dff33aa7-ab24-4f7d-8983-07752468f783"
        },
        "item": {
          "id": "0ab5f08a-6521-4b3f-a31a-e76bb4654cc7",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "9e1ab228-3339-47d5-94fd-b93339115f64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "0ab5f08a-6521-4b3f-a31a-e76bb4654cc7",
        "cursor": {
          "ref": "df30ad69-299a-4645-8d51-d4a0fae49a3a",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "dff33aa7-ab24-4f7d-8983-07752468f783"
        },
        "item": {
          "id": "0ab5f08a-6521-4b3f-a31a-e76bb4654cc7",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "9e1ab228-3339-47d5-94fd-b93339115f64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "61d681cf-92df-4937-8aca-763fb383724b",
        "cursor": {
          "ref": "ae5831c1-9814-43c5-ab6e-ba9e22382114",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "01c3668e-783b-413c-8934-17af1e8ca3ef"
        },
        "item": {
          "id": "61d681cf-92df-4937-8aca-763fb383724b",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "6925ca0a-8dd1-45db-abb9-71bf20afd810",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "df7b66a3-f32e-44a2-889d-b0145dcf11f6",
        "cursor": {
          "ref": "87fcf009-4514-4272-ae8f-0ee312c58bc0",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "585bb360-1793-41aa-b32b-1b9f1654e1cf"
        },
        "item": {
          "id": "df7b66a3-f32e-44a2-889d-b0145dcf11f6",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "35d7aa8e-81ad-43b0-a3ef-f3c101803ab7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "e328b1bd-c19f-4c54-b4d3-6f8a0df0ce95",
        "cursor": {
          "ref": "58b8215a-e201-40fc-a0b4-6026bf8b94f8",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "f8bd0ece-424b-49f2-b003-4b15d3efbf2b"
        },
        "item": {
          "id": "e328b1bd-c19f-4c54-b4d3-6f8a0df0ce95",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "d764c670-cc56-496b-aab7-a6680797ff5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "ba11e0bc-63b9-48ae-9a02-1cb882fd0ae0",
        "cursor": {
          "ref": "f65cf80b-c66e-484d-a7ab-b06a59d997d6",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "232e56cb-c776-4303-b984-c0d7771c5ba7"
        },
        "item": {
          "id": "ba11e0bc-63b9-48ae-9a02-1cb882fd0ae0",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "2e7342b4-e9f0-40de-86a6-12078047c5c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "51234a5a-d6cd-44a6-86d0-e4ae4227cb23",
        "cursor": {
          "ref": "07a63e39-79ed-445f-ab61-f000c2c10d39",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "fac8b318-433c-472f-9fbb-bebdec07809d"
        },
        "item": {
          "id": "51234a5a-d6cd-44a6-86d0-e4ae4227cb23",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "49ef354d-62a5-4a88-b18e-4c46410454b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "b0ef645b-c22c-427b-b8f3-fc21f79d15db",
        "cursor": {
          "ref": "dd67e3ac-909b-469f-a29d-221647c1ff70",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "1194fbe4-04da-495d-9477-0a09de847f44"
        },
        "item": {
          "id": "b0ef645b-c22c-427b-b8f3-fc21f79d15db",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "cd455ee6-59ee-437a-b408-39ee2555682e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "2e37f93e-5efb-4e23-aab9-8eb201240fa5",
        "cursor": {
          "ref": "1ff8e547-0d80-4f50-b7ec-8c6b5fc499c8",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "c016a071-afa7-4923-b44d-5813431a3e02"
        },
        "item": {
          "id": "2e37f93e-5efb-4e23-aab9-8eb201240fa5",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "ebc14687-7271-4944-991c-bd461f16632e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "0f04d2fd-15f2-4ce7-b4a1-960dbfb09698",
        "cursor": {
          "ref": "879e4a7f-20f6-4168-b460-64348acf6029",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "a4450930-b4f9-4853-a9b8-19be2af5076a"
        },
        "item": {
          "id": "0f04d2fd-15f2-4ce7-b4a1-960dbfb09698",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "e5cc692d-141d-4634-8f87-d73f1453058e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "fec16a87-0583-4eb0-ac74-fb4fa91f5c3a",
        "cursor": {
          "ref": "99965650-a8fc-4f93-bc2d-42827f0c0d6a",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "74fb35ba-bf4b-4599-91db-17a5ecb819e0"
        },
        "item": {
          "id": "fec16a87-0583-4eb0-ac74-fb4fa91f5c3a",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "4a5c2537-8289-4da2-85aa-23b6c33e174f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "392af126-de1a-4193-a438-b818a00ff28e",
        "cursor": {
          "ref": "d97384f5-c91c-444c-a898-c03456ff3aeb",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "9b1f38d4-5423-4430-9307-f411f0eb70b6"
        },
        "item": {
          "id": "392af126-de1a-4193-a438-b818a00ff28e",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "63439e14-89be-42b5-aa72-e80d815bfed8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "cb235c57-9f45-4bf3-912f-776048d4d60b",
        "cursor": {
          "ref": "f431cb61-9af5-4e4b-90c0-315ed75ab51b",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "97cd4a61-fd0c-4881-8e09-710d57de7bfd"
        },
        "item": {
          "id": "cb235c57-9f45-4bf3-912f-776048d4d60b",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "09bb6c48-6e7f-4a5a-9ac4-7ccb3c79cac4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "df78d6d5-dfd4-4655-b94b-90b3ebbde05c",
        "cursor": {
          "ref": "c5baaaeb-eee0-4eb5-bb39-310f2fbad0c8",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "b738c2e7-a4a1-49f0-bc77-d84c00188f66"
        },
        "item": {
          "id": "df78d6d5-dfd4-4655-b94b-90b3ebbde05c",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "d80c3f32-df3f-489b-8738-72f4dc716a51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "2ab0e850-85f1-4216-ba2b-0f4a22a3fc66",
        "cursor": {
          "ref": "4c13df05-5835-45fa-86cf-f78fc020a366",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "d0ffdd25-f473-42e2-968b-380de445e814"
        },
        "item": {
          "id": "2ab0e850-85f1-4216-ba2b-0f4a22a3fc66",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "31b587ed-d6fb-416b-9852-e9f8eb968bd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "f4bbfc14-eddd-423a-a82e-5682f6bbe955",
        "cursor": {
          "ref": "c6c018e4-422d-4573-b636-0dffebbd8a54",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "9f304f4f-012b-44e7-aad2-c69409aeb993"
        },
        "item": {
          "id": "f4bbfc14-eddd-423a-a82e-5682f6bbe955",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "5a0d9667-7704-473f-9ffa-2242f7f4b8aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "0bcc11a0-5158-44a0-a2d1-e5e970e4aef6",
        "cursor": {
          "ref": "b9fb9878-14bd-4853-8529-775488adebce",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "ff5f050c-7942-4128-bad8-9cf2863d5e5c"
        },
        "item": {
          "id": "0bcc11a0-5158-44a0-a2d1-e5e970e4aef6",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "35ca23bb-6b77-46d0-8dea-d1909a605f78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 853,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "54fbc43f-74a5-4cf4-a8fe-0cedcf68a915",
        "cursor": {
          "ref": "e55fa822-e4b1-4889-90c4-bc728cc68636",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "5e5e0f70-2c1b-4f6c-a830-c5028a80414e"
        },
        "item": {
          "id": "54fbc43f-74a5-4cf4-a8fe-0cedcf68a915",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "8d8e9e08-ea8e-4dac-a723-fa4a77f817e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 644,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "ed1f3818-8fb0-456e-9412-c61ef5cd1d88",
        "cursor": {
          "ref": "c52187bd-f7c1-48a2-8579-ddbab70e9019",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "5d3fea1c-5cf2-452a-a4d0-eb938b092be3"
        },
        "item": {
          "id": "ed1f3818-8fb0-456e-9412-c61ef5cd1d88",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "c87cf941-e55d-4527-8a2b-106d0289c746",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 552,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "2733a00b-f385-484d-a0de-e930c6c97792",
        "cursor": {
          "ref": "f6d75a14-3085-43aa-8524-a2e4f2a7b1fa",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "5c6c75b6-4f54-4f65-a78f-3473f09363c1"
        },
        "item": {
          "id": "2733a00b-f385-484d-a0de-e930c6c97792",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "63466d1a-8d61-490a-af48-7fb9cdd26745",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4832,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "b6c5217a-2ce6-47b2-9ca6-1da504d594b1",
        "cursor": {
          "ref": "facde048-f395-40cf-a3f4-ab6a8c81395c",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "a290c032-f134-4c62-9415-5e54032e7344"
        },
        "item": {
          "id": "b6c5217a-2ce6-47b2-9ca6-1da504d594b1",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "da1834d5-e898-40b2-ac7d-9681f55d79f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4942,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "c92bacae-12e6-4512-a9e6-26a1570cf8bc",
        "cursor": {
          "ref": "b054a874-541a-4f34-8cd4-8dd8d166cbec",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "14172c4e-f708-4919-a146-86e92c79ffab"
        },
        "item": {
          "id": "c92bacae-12e6-4512-a9e6-26a1570cf8bc",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "12ad76ee-6732-4709-b74e-14dbf34b2879",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4363,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "fd3b0f83-504a-42c5-bb16-e2905a516fd8",
        "cursor": {
          "ref": "677ab5a6-4181-47bc-b033-07635447ac3d",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "b1ee8e57-f0fd-4460-abc5-1a884f14c69e"
        },
        "item": {
          "id": "fd3b0f83-504a-42c5-bb16-e2905a516fd8",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "c2452e08-cf51-4b4e-b9cb-432c69cdb48d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "f5b0cf3c-a6cd-4c99-b616-b1b7e52f9ee6",
        "cursor": {
          "ref": "2974024a-09fa-45d9-99ce-3b7ec69624e7",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "3d51abf1-5fda-443a-bc27-f7a8b3ee60ef"
        },
        "item": {
          "id": "f5b0cf3c-a6cd-4c99-b616-b1b7e52f9ee6",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "a624a425-9507-4816-a90b-578e7d18b836",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5063,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "767b125a-0412-491a-9332-538d1978274f",
        "cursor": {
          "ref": "0bb3fc18-31f3-4886-90ca-00e47c04f69a",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "6a3f2bd7-43e7-4a23-ad6b-26eff1aaba6f"
        },
        "item": {
          "id": "767b125a-0412-491a-9332-538d1978274f",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "a026d207-738d-4451-b489-caa1a8f0f257",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 341,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "6ad90998-7c68-4a9f-9ca6-3134cfb9810d",
        "cursor": {
          "ref": "9d6db225-3262-43a7-b526-355224535ec7",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "bf1ea72d-c1d7-4c3a-b2c4-74b2a8fa007e"
        },
        "item": {
          "id": "6ad90998-7c68-4a9f-9ca6-3134cfb9810d",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "bf9b02a9-3ea2-4174-9c22-94e971e86c70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 556,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "f5673a42-5288-4c72-88ec-0363990e3afd",
        "cursor": {
          "ref": "a2c6ba41-19d9-4625-be2c-96e3f6e87bba",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "c99a2710-0c67-4005-a57f-67f8cff66ac2"
        },
        "item": {
          "id": "f5673a42-5288-4c72-88ec-0363990e3afd",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "99b54131-b235-4a46-8432-3437edc12cc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 625,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "bdba60c5-a6ac-45fc-b999-0ea5933e1227",
        "cursor": {
          "ref": "631f18ea-8929-48d7-bb35-1f191551220b",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "7c616b4f-422c-4a84-af12-160345519202"
        },
        "item": {
          "id": "bdba60c5-a6ac-45fc-b999-0ea5933e1227",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "83a8789f-5e08-4b9b-9662-5d7a7c0080cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 248,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "c3eecb32-3cb2-49c4-a470-070a3442b02f",
        "cursor": {
          "ref": "ec100f41-c102-45ae-83eb-456a6db1ab43",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "1892be0e-02dc-4311-ba52-659f3f461e8d"
        },
        "item": {
          "id": "c3eecb32-3cb2-49c4-a470-070a3442b02f",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "2e52503e-11ad-462e-9ba9-166ceba477c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 140,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "bf967ab7-d7cb-4afb-865d-ad5a6654d210",
        "cursor": {
          "ref": "0142fe5f-9ea8-4d29-b83a-edeedc2634e3",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "a6a22d47-17d3-4e74-8355-f0a5a75ff7a2"
        },
        "item": {
          "id": "bf967ab7-d7cb-4afb-865d-ad5a6654d210",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "00750bc1-8bbb-4b94-8ca3-41b7d6f8103f",
          "status": "OK",
          "code": 200,
          "responseTime": 4639,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "490ccd8e-bc6d-4a50-989a-fd3a893d33a2",
        "cursor": {
          "ref": "7fe2d41b-9807-46ea-96ee-8a18aee94ec3",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "6d7e5c44-a5c0-417c-9e14-6f089253b0fc"
        },
        "item": {
          "id": "490ccd8e-bc6d-4a50-989a-fd3a893d33a2",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "0f14da3b-0865-4a18-bfe0-3b0db4023627",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "65bacb31-22b7-4a78-b7b7-ed2ad3b61e78",
        "cursor": {
          "ref": "006c88da-9676-4c66-83d7-602433eebefd",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "ba8bc8b0-08f4-489b-bf1f-7c2c0065c9ed"
        },
        "item": {
          "id": "65bacb31-22b7-4a78-b7b7-ed2ad3b61e78",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "8c6ce5c4-cb75-4b43-ab26-cbe58cf34e17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "a141f598-d6c5-43b6-be8d-ff136194c72d",
        "cursor": {
          "ref": "bc132110-f762-4ad0-8bae-e82001894f38",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "c95c212e-4851-46b9-92b3-195f442cb194"
        },
        "item": {
          "id": "a141f598-d6c5-43b6-be8d-ff136194c72d",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "ac1d6194-7e36-4781-abb9-083dd1ed17f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "3cda610e-ee0e-415a-b465-7a205a3d26e0",
        "cursor": {
          "ref": "aac69f09-7237-48e8-aa93-e16ef2ab2044",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "e5165a90-9435-44c6-ae86-af96a41f5c58"
        },
        "item": {
          "id": "3cda610e-ee0e-415a-b465-7a205a3d26e0",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "013a373f-8da1-47e4-8cdd-276fbc227284",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "148ff3b9-24b2-4786-8636-29ce984fb55d",
        "cursor": {
          "ref": "03e69ff4-72f0-45da-baeb-ad7903001494",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "c9a07a45-fea3-4f1b-bb5f-cd8da4c576fc"
        },
        "item": {
          "id": "148ff3b9-24b2-4786-8636-29ce984fb55d",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "3160aed9-4124-41af-b39d-35d6910e8310",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "4cb2f9eb-57ed-46bb-bd4b-377ac50698cd",
        "cursor": {
          "ref": "9788ecbe-bf86-409d-a7d0-38233d52679d",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "f1fd92b1-1440-48c6-bdbe-ccbbc2878d67"
        },
        "item": {
          "id": "4cb2f9eb-57ed-46bb-bd4b-377ac50698cd",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "b1eb2773-e34f-4a09-9600-994816224454",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "3f8ff9c7-5956-45a8-ad3b-44060ea14f86",
        "cursor": {
          "ref": "760b3a9b-942e-4da7-ad86-8a64ff597c30",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "bff4a543-7b3a-4664-afaf-b1c904a6e62c"
        },
        "item": {
          "id": "3f8ff9c7-5956-45a8-ad3b-44060ea14f86",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "1d1751d2-7a42-4d60-a0f5-fdead689c6be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "7abcedbe-cd45-4ced-8f29-1c557be65889",
        "cursor": {
          "ref": "c74662da-0098-4e8a-a579-ea67db022db4",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "07a35648-16c6-4238-a0e6-3ad5ef75d93a"
        },
        "item": {
          "id": "7abcedbe-cd45-4ced-8f29-1c557be65889",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "22e329ba-71ac-4554-92af-bc3f3ab084c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "03e82fe3-96fd-4d48-9db3-36a282c9267d",
        "cursor": {
          "ref": "8fae74f4-06e0-4272-ac67-d3cbbb7896f8",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "8c4b272b-77e1-4e1f-abdc-90a1655cb140"
        },
        "item": {
          "id": "03e82fe3-96fd-4d48-9db3-36a282c9267d",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "f65010b0-c588-4fbb-bba3-c68966844342",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "2cf39103-650b-4653-95cf-fcd1734358a0",
        "cursor": {
          "ref": "6b96971e-56f1-4be0-bd3a-ecc85461cc86",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "8ee1c5ea-2752-4e78-8cf3-554837ef6be6"
        },
        "item": {
          "id": "2cf39103-650b-4653-95cf-fcd1734358a0",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "28e4fc5e-5e6d-488a-bdce-448277d765d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "546eac2e-12df-4207-aa6d-b31d8581fdd1",
        "cursor": {
          "ref": "fb7ef71f-1b06-4018-8ef8-caefa6713f15",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "4cb208a5-c0a1-43c1-821a-68c30060a6e5"
        },
        "item": {
          "id": "546eac2e-12df-4207-aa6d-b31d8581fdd1",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "a8759578-7ed8-4362-8c0c-5c4f22cab982",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "81b20be1-199f-4e76-94eb-b3f4092d8d27",
        "cursor": {
          "ref": "eeb10bfc-f3dd-468b-a17b-1808dc00e1b6",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "4724e1fd-16dd-49a6-a222-b6059ff7eacb"
        },
        "item": {
          "id": "81b20be1-199f-4e76-94eb-b3f4092d8d27",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "55857394-45a1-4789-a5c3-ddca19e38c5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "e686013c-4a09-473e-a54c-7779df34f603",
        "cursor": {
          "ref": "cdd8af61-4896-46bc-9193-d32dd177d541",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "f2a644de-9942-4513-a0aa-31c5a3df1671"
        },
        "item": {
          "id": "e686013c-4a09-473e-a54c-7779df34f603",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "f895d18d-b15b-4274-98ba-ea8e7f0bd324",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "5f7c3426-3e17-43e8-9443-47df57581178",
        "cursor": {
          "ref": "adac692e-ddca-431c-9720-c14e90712c93",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "8508f358-97d7-4757-b005-e6a7823436a9"
        },
        "item": {
          "id": "5f7c3426-3e17-43e8-9443-47df57581178",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "c917ad9f-bd63-41c0-ab7e-7fc1096d41d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "0ce82c2a-2819-481e-ab19-f6da2e0a8be4",
        "cursor": {
          "ref": "4e41e47d-93a9-48f4-bd53-3433dca13da5",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "0350ce4a-037d-4b6f-9b96-b59af19864d4"
        },
        "item": {
          "id": "0ce82c2a-2819-481e-ab19-f6da2e0a8be4",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "8b79761f-e3ce-4004-9132-111244033f68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "9077e720-6223-4c79-9d0e-9d8551569220",
        "cursor": {
          "ref": "2da2886e-ec4f-43fd-a4d3-64e1a659d259",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "5aabc606-9b5a-446d-827b-2f1f88b20e30"
        },
        "item": {
          "id": "9077e720-6223-4c79-9d0e-9d8551569220",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "50ace9b3-0e3b-4960-96ba-8516d318241a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "f6755cf0-c989-4058-8309-0c38615082b8",
        "cursor": {
          "ref": "0a7b7464-9de7-4003-92a9-5dc7a7564a98",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "ddcc4974-ffe5-49d5-93ef-e34539add744"
        },
        "item": {
          "id": "f6755cf0-c989-4058-8309-0c38615082b8",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "fff0ff25-e754-424c-9b05-0de436b02b7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "2a8335cf-8985-457c-8bed-4294669dcdbd",
        "cursor": {
          "ref": "9ee5c936-a3ae-410f-84d6-768e30d84db6",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "03de2a37-6e7a-4a4b-a966-5a77558a360a"
        },
        "item": {
          "id": "2a8335cf-8985-457c-8bed-4294669dcdbd",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "fdcb493f-5b1c-49a3-aeec-6b7401b98a00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "8392fe75-49c3-42ee-b534-4446e4c37895",
        "cursor": {
          "ref": "754b2795-0c4f-4a93-947a-dd2c891b857f",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "41bac496-0639-4148-86de-e1add12993c4"
        },
        "item": {
          "id": "8392fe75-49c3-42ee-b534-4446e4c37895",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "7c7bcfb7-cf89-437f-a5ea-bbf24188c6d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "9ed6844b-af94-47e9-b49c-0bb9dd2bb541",
        "cursor": {
          "ref": "8673c4e0-ced3-4732-8308-feeb64d4c469",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "5dc88015-9e5c-4f53-a3d1-21c9749e7b06"
        },
        "item": {
          "id": "9ed6844b-af94-47e9-b49c-0bb9dd2bb541",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "51b690da-ed0a-4313-b2b6-a507a7f1fc44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "811ffbba-13f1-470b-8a81-6533c4bfa76a",
        "cursor": {
          "ref": "dafcf8d8-3a45-4f92-8b78-86dfed072bb6",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "c2ab0815-719e-49ed-8efb-562b9b1fc2af"
        },
        "item": {
          "id": "811ffbba-13f1-470b-8a81-6533c4bfa76a",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "0bd412f3-f623-42b1-a018-836909e610a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "f0d5fdea-722c-42a7-8e87-04273b6f4ff9",
        "cursor": {
          "ref": "f66657b1-2524-44cd-bdfd-23f62951bd5b",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "18a42049-01f1-48ba-85a7-bee98533b7b8"
        },
        "item": {
          "id": "f0d5fdea-722c-42a7-8e87-04273b6f4ff9",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "6aeb3ffc-300e-468f-b906-cb8ee3cb5adc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "885f9b7b-5c3b-4bb3-8ea6-ed17e3d9193a",
        "cursor": {
          "ref": "64a94f26-d6d4-4a58-95ac-4d87b8320717",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "1b7f13ec-f086-496f-976d-0cfbba9ba6ec"
        },
        "item": {
          "id": "885f9b7b-5c3b-4bb3-8ea6-ed17e3d9193a",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "38895371-86d3-4fd3-891d-288b7466d845",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "be70487f-d398-4e91-abd1-a83434ae31d2",
        "cursor": {
          "ref": "2952d1fb-97ce-4858-a851-98aea767b574",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "e7170ba4-37a1-4612-b223-7c2fa3163068"
        },
        "item": {
          "id": "be70487f-d398-4e91-abd1-a83434ae31d2",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "b1842ccd-0a18-4a32-b26d-be5476e6ca09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "0a096eae-303d-4525-b328-72f9f54eab9c",
        "cursor": {
          "ref": "ccfc8f49-6181-4cc1-8bdd-576547c05719",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "3a40ab50-7911-4404-b525-5d0b0ce9a662"
        },
        "item": {
          "id": "0a096eae-303d-4525-b328-72f9f54eab9c",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "fe09669a-47d5-4466-b371-f5d7f9b19acf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "21ec60ae-d459-4c1e-b37c-af59723c8e74",
        "cursor": {
          "ref": "9a3dedae-453a-492e-aacd-e80cc80e4c3a",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "76ffc392-3728-42f7-8118-7479c17eeb22"
        },
        "item": {
          "id": "21ec60ae-d459-4c1e-b37c-af59723c8e74",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "1c8be193-9961-4a8f-bde8-81b978a141f7",
          "status": "OK",
          "code": 200,
          "responseTime": 4892,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "175053d4-ad9c-4650-9767-1696ee3081b4",
        "cursor": {
          "ref": "0c2d481c-1322-4894-8b74-2f3945027409",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "598fe409-2880-453e-9563-ac5a97ad8161"
        },
        "item": {
          "id": "175053d4-ad9c-4650-9767-1696ee3081b4",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "a3ddfd16-bd53-4259-9323-7f584925d80a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 647,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "39667ba3-844a-4229-a149-c57f02690923",
        "cursor": {
          "ref": "2ffc15a4-b590-4ad4-9331-214adb4cf3fc",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "bbe949ad-3e27-4bef-ac66-b3df6a1409bd"
        },
        "item": {
          "id": "39667ba3-844a-4229-a149-c57f02690923",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "4bf3cb5d-78eb-4a71-80e1-6d5b5d4a2d96",
          "status": "OK",
          "code": 200,
          "responseTime": 6144,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "69d7a3b2-0225-4cd9-8e97-e8852024f984",
        "cursor": {
          "ref": "08879711-ee49-41fc-abec-3e0bd9f23d26",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "74c39ff3-954e-4f3f-8088-64aaf3f99b22"
        },
        "item": {
          "id": "69d7a3b2-0225-4cd9-8e97-e8852024f984",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "6d69bf31-c837-4f35-ae83-fa10245be99c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "e35d8bca-fb8d-44ec-a9f7-c4c1bedc95b9",
        "cursor": {
          "ref": "2593afcf-573c-4fa2-92a5-f1058092b30a",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "c5f5b34d-4393-42ba-896c-720aa887d058"
        },
        "item": {
          "id": "e35d8bca-fb8d-44ec-a9f7-c4c1bedc95b9",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "21e5edce-503d-45ab-8c4c-a236186d2b60",
          "status": "OK",
          "code": 200,
          "responseTime": 6956,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "9c50059a-07f2-49ed-b653-ee691e6cb13e",
        "cursor": {
          "ref": "84752f0f-7741-4d3e-be35-ec02dd8f4d56",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "8a80e4c8-3cfe-4788-82f5-1b89c5697405"
        },
        "item": {
          "id": "9c50059a-07f2-49ed-b653-ee691e6cb13e",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "977ec7b2-38d8-4eb5-91aa-fcb089317ef1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4450,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "317772af-a21a-4048-8d7e-9e6af57d21ab",
        "cursor": {
          "ref": "416f7459-4d51-48fb-b1b5-0742f94d8a90",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "66709b4f-d459-4b10-afc3-bfa7d70ce735"
        },
        "item": {
          "id": "317772af-a21a-4048-8d7e-9e6af57d21ab",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "23071724-5fe8-4294-87a9-6500f2ccf4dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4244,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "54cde8cb-40d8-48af-aaad-e625ac75fe09",
        "cursor": {
          "ref": "db39866d-08a3-4aa6-9fb3-c58f31b3d613",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "1ff6579a-4615-4034-a60c-3bfa21ad9655"
        },
        "item": {
          "id": "54cde8cb-40d8-48af-aaad-e625ac75fe09",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "0ad4b6d6-61c1-4016-9ec7-179c9dd21625",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "2eaecf60-0b68-4123-93f8-e99e5a8303a3",
        "cursor": {
          "ref": "64425c57-1e3e-4403-a374-ae7f1dae3c72",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "3c5c6142-7f07-4388-b086-8fc2ef0fdb1f"
        },
        "item": {
          "id": "2eaecf60-0b68-4123-93f8-e99e5a8303a3",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "b2541110-fe3a-4ab2-a3c9-03300ca9df89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4369,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "09e8cea6-edbe-4dd3-a228-bf52d2860afd",
        "cursor": {
          "ref": "0edbc5bf-e14e-4e52-81e1-df80d1dc2c65",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "202a1061-4c19-492d-ba62-e59b7af9ef68"
        },
        "item": {
          "id": "09e8cea6-edbe-4dd3-a228-bf52d2860afd",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "14f91959-74a9-43c6-b7b3-35915f740e14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "fdf1798e-e3af-42f2-b0f2-3510cff139e5",
        "cursor": {
          "ref": "7b4525e0-d0de-4cb6-9d28-62ef32df917e",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "a5ef7378-f8f6-4bdb-adf4-9480b340b254"
        },
        "item": {
          "id": "fdf1798e-e3af-42f2-b0f2-3510cff139e5",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "87596a07-e14e-4441-8752-bcd4ef03cf96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "c8f42c28-8cb0-473d-ae76-f627b722f059",
        "cursor": {
          "ref": "a24d951d-b4af-44cc-ac76-679d48b33da8",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "2676b037-4295-4c4e-9ae9-0bfea971d172"
        },
        "item": {
          "id": "c8f42c28-8cb0-473d-ae76-f627b722f059",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "b2a154da-1651-45cc-99ea-99f5ea8cbafb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 61
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "eaa3505c-6868-4525-b705-786b99c9ff07",
        "cursor": {
          "ref": "e3bd0999-67c6-4b08-bd53-761bb5de99f2",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "a3a9c5aa-cc66-4596-afd8-4150ecb2bb6d"
        },
        "item": {
          "id": "eaa3505c-6868-4525-b705-786b99c9ff07",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "458a9b38-9260-4557-bd95-0cc3aa648a99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "e04ef804-982a-41de-81e2-706c041bef98",
        "cursor": {
          "ref": "98db53cf-dbfc-40ca-b30b-8804d217327e",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "f5662622-a103-4b34-9db6-c7c3a326e0c6"
        },
        "item": {
          "id": "e04ef804-982a-41de-81e2-706c041bef98",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "f8a13fc1-e151-43eb-8dd4-dfd6bf625fc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "ef90e88d-3b4f-4a1c-859a-9441bfb56ac7",
        "cursor": {
          "ref": "3a9d3be8-e1d1-4550-b15b-6129d26fa7a9",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "2860763b-47a5-4d44-b459-5b33087098a4"
        },
        "item": {
          "id": "ef90e88d-3b4f-4a1c-859a-9441bfb56ac7",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "5f7eeb10-89e8-48fa-86f5-36d61aeab0dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "2b7f8263-6c69-4ce0-9d40-248b76778672",
        "cursor": {
          "ref": "f4f8f070-34b3-4a17-bd54-c81372741a41",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "90810907-3b8e-4789-847a-fed9879f3a1e"
        },
        "item": {
          "id": "2b7f8263-6c69-4ce0-9d40-248b76778672",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "5e0b005a-cd82-476b-9912-f112389b2744",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "341008f0-fa1b-43b4-903a-6fe41d9e1e75",
        "cursor": {
          "ref": "2c507730-6788-4247-84c5-c79ec3dae701",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "d0aceef2-90c7-4373-9738-9770ed703bd4"
        },
        "item": {
          "id": "341008f0-fa1b-43b4-903a-6fe41d9e1e75",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "258fe5a6-8c31-4cf6-8cb4-5471875063b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "20dc9253-fdf0-4700-b16e-32b035eb12d1",
        "cursor": {
          "ref": "8531cee1-3116-4391-bc7e-9e83f1584a80",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "54ac317d-354d-44f9-bb3b-54b88536bc86"
        },
        "item": {
          "id": "20dc9253-fdf0-4700-b16e-32b035eb12d1",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "990d07e6-43f7-4b94-b28a-4e7d703f4ccc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "ebd91dc7-f71b-4402-8da6-ad352ef87dd5",
        "cursor": {
          "ref": "e9d896fd-3102-41b8-af60-97193dc1e84d",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "00385bb3-866d-41f5-8330-01e3ec5c307b"
        },
        "item": {
          "id": "ebd91dc7-f71b-4402-8da6-ad352ef87dd5",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "eb46c939-75cb-4ca2-bbfa-af08a56981d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "38692c40-ff9b-4a56-b4b5-4ffa0098566c",
        "cursor": {
          "ref": "1671985e-bf82-4bdb-82ca-24fd2f16e659",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "c8eb450c-824d-4c81-9270-d6a1da5bb3fa"
        },
        "item": {
          "id": "38692c40-ff9b-4a56-b4b5-4ffa0098566c",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "e166b5db-9266-4948-9249-99367e192495",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "e736fd1b-56ea-46ed-a103-01d566cac6fa",
        "cursor": {
          "ref": "684facb8-9e0a-4de1-8cd6-2898b5a9a348",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "d894821d-e49b-44bb-8a0d-8e7ead6b4202"
        },
        "item": {
          "id": "e736fd1b-56ea-46ed-a103-01d566cac6fa",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "e3915ca9-a355-4f6f-98ce-fad13d72f181",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "8ed53803-e2d5-487e-b11e-68cb1d601330",
        "cursor": {
          "ref": "e4f94e08-e8d0-4e0f-a908-b3ff26ca8744",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "b3ee4412-5020-4549-a27c-479f509df413"
        },
        "item": {
          "id": "8ed53803-e2d5-487e-b11e-68cb1d601330",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "fa7a38a0-655d-405e-af1c-3477eaa5c4b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "47026522-1737-4c8f-a0a5-14d6433f93b5",
        "cursor": {
          "ref": "b70917ae-38fc-4b1e-ac13-3e09be2a9d5e",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "584c1a4d-01a4-450a-a050-ae0bad847d0a"
        },
        "item": {
          "id": "47026522-1737-4c8f-a0a5-14d6433f93b5",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "658fa014-1edd-4b63-b03b-c43ec76fc6e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "f380c8fa-4437-485b-94d2-96ab93163ae4",
        "cursor": {
          "ref": "355c7a9a-213a-41d3-a294-1f1b97ddab41",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "55d22f04-37dc-4bee-8a20-61d1ac64f06f"
        },
        "item": {
          "id": "f380c8fa-4437-485b-94d2-96ab93163ae4",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "62cafb21-0075-4a68-b3c9-d0bc800909b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "3c23464e-741d-4774-9a1d-6863e0a5651e",
        "cursor": {
          "ref": "7eec00fe-c474-446d-a580-ff8d15078fcd",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "f7c4eb8b-4e61-447e-8b1b-f1ef8ca22ac1"
        },
        "item": {
          "id": "3c23464e-741d-4774-9a1d-6863e0a5651e",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "ec3d8d8a-bd3d-41ba-b125-445fbfbd6e72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "eda91bc0-07d4-4410-b00f-7d75a7ea0511",
        "cursor": {
          "ref": "32c3ae5b-ed7b-40b9-b63b-606fc3e1d748",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "c5e31a34-a0e9-4b9b-acf9-7769a0f5557e"
        },
        "item": {
          "id": "eda91bc0-07d4-4410-b00f-7d75a7ea0511",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "bd479683-a485-4f69-b6f3-8f1b667d82de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "6120d5fd-6696-47e1-979f-fc2d6b5a35de",
        "cursor": {
          "ref": "cadcf9d4-deb2-4319-9a56-12eb5efa3622",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "dbdfd1a5-6b5e-4ac5-9ba1-63717b79e2ff"
        },
        "item": {
          "id": "6120d5fd-6696-47e1-979f-fc2d6b5a35de",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "a0fb7a75-9d7d-4e40-94ae-3b412395c201",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "788a6f80-b937-4589-ac12-16d6f78f9be7",
        "cursor": {
          "ref": "400d7018-a224-48e8-b203-9ae32f11b4c3",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "539494f1-00ef-4b8a-aa12-e455f04a5d88"
        },
        "item": {
          "id": "788a6f80-b937-4589-ac12-16d6f78f9be7",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "be1e70e7-c7e1-4efa-af45-7f9ed2d7015e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "cb351f70-f7b4-411b-8491-b2ce49d81f80",
        "cursor": {
          "ref": "0afeb0c2-8b17-4f40-bee9-82485958974a",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "bea072df-0d4b-443a-b682-f9e2ac2b8123"
        },
        "item": {
          "id": "cb351f70-f7b4-411b-8491-b2ce49d81f80",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "d4695fd4-e666-4504-8d3c-257ee57d5ca3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "194c1a91-d7db-4393-b467-64ea25ff02bc",
        "cursor": {
          "ref": "be52adda-98de-48f5-83d7-2000279df05d",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "edc62e87-f9ab-465d-90cc-8619a362dcc9"
        },
        "item": {
          "id": "194c1a91-d7db-4393-b467-64ea25ff02bc",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "f7552fb5-dcb7-426b-9a3f-6d6a8f7edcb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "ae76b0e1-2c8c-4f85-a594-57972e299e6b",
        "cursor": {
          "ref": "eff65839-6212-432a-9feb-2ed7c362c1e4",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "27654278-5344-42a9-92a4-5c72d3b8614b"
        },
        "item": {
          "id": "ae76b0e1-2c8c-4f85-a594-57972e299e6b",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "5e080fba-3f48-44a2-9e8f-ac748ce54411",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "d2e06076-2866-4916-b050-0598b579863a",
        "cursor": {
          "ref": "73c98fdb-53c8-430a-8c6c-2e83374663c0",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "499092fc-790f-4324-b9e8-1872b5a97724"
        },
        "item": {
          "id": "d2e06076-2866-4916-b050-0598b579863a",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "f4186d97-e783-407b-958f-e2924f8b0e48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 59
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "ae6e46f0-2cfb-449d-9ad8-e112abf10782",
        "cursor": {
          "ref": "b270d87b-ec0d-4adc-80d9-fe2ae99acef0",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "1ff4cf57-bed5-4a56-9c19-b60327722170"
        },
        "item": {
          "id": "ae6e46f0-2cfb-449d-9ad8-e112abf10782",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "d1f0d8af-74a5-4ace-b57f-8be7be5c0424",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "98f7bd09-5feb-4a16-a0ee-8c5877c42388",
        "cursor": {
          "ref": "66d7a3a3-7bde-4d09-b115-cdf82c862e0f",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "584b932e-19e7-4743-9ff6-24767744ca4b"
        },
        "item": {
          "id": "98f7bd09-5feb-4a16-a0ee-8c5877c42388",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "551f748e-9c04-40b4-9684-e095a2d6d3cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "af63a429-b199-4abc-add2-e912b4833685",
        "cursor": {
          "ref": "95e48bc7-4537-4613-97b9-75564b020a1a",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "b5fb017e-ae55-4f1c-b695-c8344fbc850f"
        },
        "item": {
          "id": "af63a429-b199-4abc-add2-e912b4833685",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "76480e86-c975-4c77-bebf-69ca33ddfd98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "02a5f0c8-7d38-4ca2-a22c-3109cc0592e3",
        "cursor": {
          "ref": "d590ec89-5c13-4995-9734-6234615c0857",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "1988a7ac-a23c-46a3-b958-c7e4e47e7835"
        },
        "item": {
          "id": "02a5f0c8-7d38-4ca2-a22c-3109cc0592e3",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "cfd2ca0c-82c4-4293-ad18-2d98114e5757",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "d3c31428-5bfe-4537-8a51-def3c3870011",
        "cursor": {
          "ref": "1d56689c-561a-4996-af9d-9f5ca3d6029b",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "9f7bb9ac-2bc7-41db-a422-a61aaf1fb499"
        },
        "item": {
          "id": "d3c31428-5bfe-4537-8a51-def3c3870011",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "c9ef9664-60ce-48ac-9e80-fce0dd277790",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "50834335-9c78-4627-873e-08f6671d85c9",
        "cursor": {
          "ref": "ae895ab1-9e41-43fc-b8fa-07df327dea65",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "cef057fa-9679-4d79-a579-83236ca0ef2a"
        },
        "item": {
          "id": "50834335-9c78-4627-873e-08f6671d85c9",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "2143855f-640b-4da9-ac1c-3fe032a3597f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "b9671781-8281-4317-8b4e-5f83f927cf5a",
        "cursor": {
          "ref": "16521f0b-bc28-4b46-b67f-b668bb73a00a",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "b2630147-ef53-4196-a70f-2eada8f5c7b6"
        },
        "item": {
          "id": "b9671781-8281-4317-8b4e-5f83f927cf5a",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "a700348e-04ff-45a4-955d-7a22da329b3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "6df786c8-9572-40a7-ad44-a0ae7661fc6a",
        "cursor": {
          "ref": "a52f820a-bb80-4b98-9404-b120695b5b43",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "fc1edd3b-a219-4ddb-b447-c38fa9d20ab8"
        },
        "item": {
          "id": "6df786c8-9572-40a7-ad44-a0ae7661fc6a",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "804d4506-b833-4e61-968a-a099b162612e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "23efbac1-2954-4288-804a-4cfd8f5aca18",
        "cursor": {
          "ref": "54375e5e-2bbb-45da-aa12-2c987d1a8841",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "bd79ca4f-44fa-42cf-b8c2-45cbc80f3b44"
        },
        "item": {
          "id": "23efbac1-2954-4288-804a-4cfd8f5aca18",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "fe1268df-ff76-4b1b-b39e-820f347bee3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "4ed1a8f0-319a-4054-921a-cee3d6d66ea6",
        "cursor": {
          "ref": "0ed268ec-7ec0-46a7-9d55-f72152fcfca9",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "d41620e6-c28a-449f-8486-5fd8a5a285e9"
        },
        "item": {
          "id": "4ed1a8f0-319a-4054-921a-cee3d6d66ea6",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "b2898b2a-fda2-42ea-b5bd-decb6ada601d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "ca4f5c50-eed5-4d34-8a37-2b4ce5e28a4a",
        "cursor": {
          "ref": "25adbdee-d2de-400e-9b5a-b1f8945c264d",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "e91a2da3-704e-4edc-806f-de822f1ae0ba"
        },
        "item": {
          "id": "ca4f5c50-eed5-4d34-8a37-2b4ce5e28a4a",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "2df6b0a5-38d6-4e1b-8189-87d8f828eceb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "3f3eb6e5-5af5-47ec-9bb4-ee15297e1287",
        "cursor": {
          "ref": "d696f8fa-a4a7-4697-90ee-c1ef10e76425",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "6d4dc18b-43fe-4fa6-b51c-fb825130d547"
        },
        "item": {
          "id": "3f3eb6e5-5af5-47ec-9bb4-ee15297e1287",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "bc52e60f-d7ad-4499-a97c-c034b0f823e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "40cbfd4d-f73a-4bac-9fb8-cfa71242a582",
        "cursor": {
          "ref": "56cd3ade-70ef-46e3-84b1-072e3ac3fbe8",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "9de9cd2c-048b-4e51-84c3-43499402b791"
        },
        "item": {
          "id": "40cbfd4d-f73a-4bac-9fb8-cfa71242a582",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "ef889c80-a623-4c85-9a2a-c89383ea8ed2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8ff0125-99c5-4157-ac4b-7dbff3b83cc3",
        "cursor": {
          "ref": "f3552229-4caf-4ea6-91c1-dfa72f6e49fc",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "c916959e-708a-41fa-a5ba-4c192aae7c41"
        },
        "item": {
          "id": "e8ff0125-99c5-4157-ac4b-7dbff3b83cc3",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "892d1ed3-864a-4542-8130-de6fac9c258a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 32
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "b88488ba-6da9-4a7a-857c-cc766049e66e",
        "cursor": {
          "ref": "8165c321-c9b2-417c-819c-06931e65f190",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "ed8ce2b3-16b6-45ac-8064-ff8b91b23799"
        },
        "item": {
          "id": "b88488ba-6da9-4a7a-857c-cc766049e66e",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "cbceceb4-66af-4d23-899b-2fddd0909b23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "d3be897e-b1be-4d65-9ba4-a3dd4311ccf4",
        "cursor": {
          "ref": "d10d9937-ae65-4332-8f7d-cce45a71cbde",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "b6b0d956-7783-44e7-9f16-06e2a88eaa90"
        },
        "item": {
          "id": "d3be897e-b1be-4d65-9ba4-a3dd4311ccf4",
          "name": "credentials_verify"
        },
        "response": {
          "id": "177392d1-3119-409c-9b47-85bbf0b3b657",
          "status": "OK",
          "code": 200,
          "responseTime": 5228,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "f93b659c-ac95-4a16-8a2a-9e1c0b98f2c4",
        "cursor": {
          "ref": "19508b2c-b0a2-4cd2-a6d1-f1c0d9cf1447",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "d92bb876-149d-45f5-8feb-5036adeaa5b8"
        },
        "item": {
          "id": "f93b659c-ac95-4a16-8a2a-9e1c0b98f2c4",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "2231ca24-03f3-493c-addf-d2152b173188",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 258,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "bc07cb29-b94e-46b7-bed7-cab756f891f9",
        "cursor": {
          "ref": "82318c39-46ae-46dc-aacc-77005d949268",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "06815d32-87aa-4c99-b365-9d18c496b3eb"
        },
        "item": {
          "id": "bc07cb29-b94e-46b7-bed7-cab756f891f9",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "38a104ef-184a-4e8a-84d0-48f446b7b0ff",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 174,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "bc07cb29-b94e-46b7-bed7-cab756f891f9",
        "cursor": {
          "ref": "82318c39-46ae-46dc-aacc-77005d949268",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "06815d32-87aa-4c99-b365-9d18c496b3eb"
        },
        "item": {
          "id": "bc07cb29-b94e-46b7-bed7-cab756f891f9",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "38a104ef-184a-4e8a-84d0-48f446b7b0ff",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 174,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "bc07cb29-b94e-46b7-bed7-cab756f891f9",
        "cursor": {
          "ref": "82318c39-46ae-46dc-aacc-77005d949268",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "06815d32-87aa-4c99-b365-9d18c496b3eb"
        },
        "item": {
          "id": "bc07cb29-b94e-46b7-bed7-cab756f891f9",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "38a104ef-184a-4e8a-84d0-48f446b7b0ff",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 174,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "03b7407d-8a95-40c5-bc8d-07d0e395d8d3",
        "cursor": {
          "ref": "227cc9ac-411e-4034-a698-33e4f3e586b3",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "9fcf258e-d4f9-43a4-ba07-ecc59ddb2fa4"
        },
        "item": {
          "id": "03b7407d-8a95-40c5-bc8d-07d0e395d8d3",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "3d0d91a3-d8c1-4799-bc5c-66ceecc316a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 536,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "688ad996-c664-4ff6-bf11-4c4ec94c2b7b",
        "cursor": {
          "ref": "fb612f61-0bea-4375-948d-9dab5d047921",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "a53cd6a3-fc5d-459c-a052-08173eea61a4"
        },
        "item": {
          "id": "688ad996-c664-4ff6-bf11-4c4ec94c2b7b",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "7768dbd4-6f2f-4988-b58f-e1cc367e8db9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "688ad996-c664-4ff6-bf11-4c4ec94c2b7b",
        "cursor": {
          "ref": "fb612f61-0bea-4375-948d-9dab5d047921",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "a53cd6a3-fc5d-459c-a052-08173eea61a4"
        },
        "item": {
          "id": "688ad996-c664-4ff6-bf11-4c4ec94c2b7b",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "7768dbd4-6f2f-4988-b58f-e1cc367e8db9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "ce45721f-dfb0-4087-9480-a4fbc8906ff5",
        "cursor": {
          "ref": "e0b7093b-05b6-45fb-a170-654862ab8001",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "8586fa7d-0c48-4bfe-bd26-713b2f17195e"
        },
        "item": {
          "id": "ce45721f-dfb0-4087-9480-a4fbc8906ff5",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "8695d821-769a-410d-9de9-99ab2872bfb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 87
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "1a2e0d92-7c50-47c5-ab84-175ce8685763",
        "cursor": {
          "ref": "1d2ab2c4-6392-4b57-9e7e-91d628d20839",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "0419afdf-5f5b-4525-990d-2b73c44bc52d"
        },
        "item": {
          "id": "1a2e0d92-7c50-47c5-ab84-175ce8685763",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "c403b1c4-23da-41ae-b0e2-a8788600d99b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "1a2e0d92-7c50-47c5-ab84-175ce8685763",
        "cursor": {
          "ref": "1d2ab2c4-6392-4b57-9e7e-91d628d20839",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "0419afdf-5f5b-4525-990d-2b73c44bc52d"
        },
        "item": {
          "id": "1a2e0d92-7c50-47c5-ab84-175ce8685763",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "c403b1c4-23da-41ae-b0e2-a8788600d99b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "1e6b00dc-b688-40dc-b267-ed64b039757f",
        "cursor": {
          "ref": "4e940af4-e640-40b8-bf5f-781fd53b1382",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "5e78bbef-d813-480d-b831-34fe559494ba"
        },
        "item": {
          "id": "1e6b00dc-b688-40dc-b267-ed64b039757f",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "9631606b-afe0-4855-bba3-974b81ad4310",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 97
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}